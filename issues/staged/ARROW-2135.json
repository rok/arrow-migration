{
    "issue": {
        "title": "[Python] NaN values silently casted to int64 when passing explicit schema for conversion in Table.from_pandas",
        "body": "***Note**: This issue was originally created as [ARROW-2135](https://issues.apache.org/jira/browse/ARROW-2135). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIf you create a\u00a0`Table`\u00a0from a\u00a0`DataFrame`\u00a0of ints with a NaN value the NaN is improperly cast. Since pandas casts these to floats, when converted to a table the NaN is interpreted as an integer. This seems\u00a0like a bug since a known limitation in pandas (the inability to have null valued integers data) is taking precedence over arrow's functionality to store these as an IntArray with nulls.\r\n\r\n\u00a0\r\n```Java\n\r\nimport pyarrow as pa\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame({\"a\":[1, 2, pd.np.NaN]})\r\nschema = pa.schema([pa.field(\"a\", pa.int64(), nullable=True)])\r\ntable = pa.Table.from_pandas(df, schema=schema)\r\ntable[0]\r\n\r\n\r\n<pyarrow.lib.Column object at 0x7f2151d19c90>\r\nchunk 0: <pyarrow.lib.Int64Array object at 0x7f213bf356d8>\r\n[\r\n  1,\r\n  2,\r\n  -9223372036854775808\r\n]\n```\r\n\u00a0",
        "created_at": "2018-02-12T14:01:31.000Z",
        "updated_at": "2018-03-20T21:18:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-03-12T19:03:22.000Z"
    },
    "comments": [
        {
            "created_at": "2018-03-12T19:03:22.246Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2135?focusedCommentId=16395730) by Wes McKinney (wesm):*\nIssue resolved by pull request 1681\n<https://github.com/apache/arrow/pull/1681>"
        }
    ]
}