{
    "issue": {
        "title": "[C++] Implement direct support for shared memory arrow columns",
        "body": "***Note**: This issue was originally created as [ARROW-5069](https://issues.apache.org/jira/browse/ARROW-5069). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI consider the option of memory-mapping columns to shared memory to be valuable. Such option will be triggered if specific metadata are supplied. Given that many data frames backed by arrow are used for machine learning I guess we could somehow benefit from treating differently the data (most likely data buffer columns) that will be fed into the GPUs/FPGAs. To enable such change we would need to address the following issues:\r\n\r\nFirst, we need each column to hold an integer value representing its associated file descriptor. The application developer could retrieve the file-name from the file descriptor (i.e fstat syscall) and inform another application to reference that file or inform an FPGA to DMA that memory-area.\r\n\r\nWe also need to support variable buffer alignment (restricted to powers-of-2 of course)\u00a0 when initiating an arrow::AllocateBuffer() call. By inspecting the current implementation, the alignment size is fixed at 64 bytes and to change that value a recompilation is required [1].\r\n\r\nTo justify the above suggestion, major FPGA vendors (i.e Xilinx) benefit heavily from page-aligned buffers since their device memory is 4KB [2]. Particularly, Xilinx warns users if they attempt to memcpy a non-page-aligned buffer from CPU memory to FPGA's memory [3].\u00a0\r\n\r\nWouldn't it be nice if we could issue from_pandas() and then have our columns memory mapped to shared memory for FPGAs to DMA such memory and accelerate the workload? If there is already a workaround to achieve that I would like more info on that.\r\n\r\nI am open to discuss any suggestions, improvements or concerns.\u00a0\r\n\r\n\u00a0\r\n\r\n[1]:\u00a0<https://github.com/apache/arrow/blob/master/cpp/src/arrow/memory_pool.cc#L40>\r\n\r\n[2]:\u00a0<https://forums.xilinx.com/t5/SDAccel/memory-alignment-when-allocating-emmory-in-SDAccel/td-p/887593>\r\n\r\n[3]:\u00a0<https://forums.aws.amazon.com/thread.jspa?messageID=884615&tstart=0>",
        "created_at": "2019-03-29T14:44:19.000Z",
        "updated_at": "2019-05-22T15:07:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-05-22T15:07:28.724Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5069?focusedCommentId=16845970) by Wes McKinney (wesm):*\n`[~dimlek]` It seems like you would need to draft a more detailed proposal document to go into detail about how things should ideally work. The Arrow data structures can reference the memory from any `Buffer` subclass, and we already have examples of referencing shared memory and GPU memory. So all of the machinery is built already. The question becomes what kind of API can yield shared-memory data structures. I'm interested to see what you propose"
        }
    ]
}