{
    "issue": {
        "title": "[C++(?)/Python] pyarrow.compute.replace_with_mask does not replace null when providing an array mask",
        "body": "***Note**: This issue was originally created as [ARROW-17134](https://issues.apache.org/jira/browse/ARROW-17134). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n\u00a0\r\n```java\n\r\nIn [1]: import pyarrow as pa\r\n\r\nIn [2]: arr1 = pa.array([1, 0, 1, None, None])\r\n\r\nIn [3]: arr2 = pa.array([None, None, 1, 0, 1])\r\n\r\nIn [4]: pa.compute.replace_with_mask(arr1, [False, False, False, True, True], arr2)\r\n\r\nOut[4]:\r\n<pyarrow.lib.Int64Array object at 0x118a3e320>\r\n[\r\n\u00a0 1,\r\n\u00a0 0,\r\n\u00a0 1,\r\n\u00a0 null, # I would expect 0\r\n\u00a0 null  # I would expect 1\r\n]\r\n\r\nIn [5]: pa.__version__\r\nOut[5]: '8.0.0'\n```\r\n\u00a0\r\n\r\nI have noticed this behavior occur with the integer, floating, bool, temporal types\r\n\r\n\u00a0",
        "created_at": "2022-07-20T03:36:40.000Z",
        "updated_at": "2022-07-20T16:47:05.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-20T11:20:29.525Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17134?focusedCommentId=17568983) by Joris Van den Bossche (jorisvandenbossche):*\nThe replacement array isn't expected to be of the same shape as the input/mask arrays (where the corresponding values would get replaced), but it's only the values that are actually placed in the new array (so len(replacements) == number of true values in the mask). \r\nSo given that your `arr2` starts with two nulls, it are those two values that are put in the result. \r\n\r\nComparing to numpy, it has thus the similar behaviour as `setitem` (`arr[mask] = replacements`), and not like `np.putmask` (where values and replacements have the same shape) \r\n\r\nWe should maybe consider raising an error if the `replacements` are too long? \r\n\r\nThe case where you want to use the corresponding (same location) values of values vs replacements, for that case I think one can use `pc.if_else(mask, replacements, values)`. Using your example:\r\n\r\n```Java\n\r\nIn [13]: pc.if_else([False, False, False, True, True], arr2, arr1)\r\nOut[13]: \r\n<pyarrow.lib.Int64Array object at 0x7f52f4eecd60>\r\n[\r\n  1,\r\n  0,\r\n  1,\r\n  0,\r\n  1\r\n]\r\n```\r\n\r\n\r\n\r\n"
        },
        {
            "created_at": "2022-07-20T16:47:05.059Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17134?focusedCommentId=17569124) by Matthew Roeschke (moeschke):*\nAh okay that makes sense. When I read len(replacements) == number of true values in the mask, for some reason I thought \"len(replacements)\" meant the values could still be corresponding to the mask.\r\n\r\n> We should maybe consider raising an error if the `replacements` are too long?\r\n\r\nThat would be helpful, or maybe an example in the docstring could help clarify that point. Fine either way"
        }
    ]
}