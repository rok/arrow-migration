{
    "issue": {
        "title": "[C++] Implement Array to JSON function",
        "body": "***Note**: This issue was originally created as [ARROW-8709](https://issues.apache.org/jira/browse/ARROW-8709). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAnalogous to ArrayFromJSON it would be good to have the reverse. Any plans?",
        "created_at": "2020-05-05T21:55:34.000Z",
        "updated_at": "2020-05-06T14:45:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-05-05T21:59:44.499Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8709?focusedCommentId=17100283) by Antoine Pitrou (apitrou):*\nWhat do you need it for? ArrayFromJSON is mostly for internal use (it's helpful for testing)."
        },
        {
            "created_at": "2020-05-06T00:34:00.772Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8709?focusedCommentId=17100357) by Abe Mammen (abemammen):*\nMaybe this is part of a bigger question. I love the work you guys have done with Arrow and it was fairly straightforward to use Pyarrow and pandas data frames to use this in memory transport mechanism. But the c++ version has been much harder to use as many of the helper/utility functions are missing (or appears that way). Any suggestions to help on this front will be appreciated."
        },
        {
            "created_at": "2020-05-06T14:35:56.234Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8709?focusedCommentId=17100851) by Wes McKinney (wesm):*\n`[~abemammen]` generally speaking, in the C++ library we build the things that we need to move the project forward. If you want to add helper functions to improve its usability it is generally a responsibility of the person who needs the function to build it. If you consider the percentage of direct/indirect users of the C++ library it's heavily skewed toward binding consumers (Python, R, Ruby, etc.) and so it's difficult for us to invest a great deal of time in conveniences for C++ developers beyond what we build for ourselves (i.e. the regular contributors/maintainers) to improve our own productivity. That said, we're happy to accept PRs"
        }
    ]
}