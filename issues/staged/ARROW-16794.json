{
    "issue": {
        "title": "[CI][C++] MinGW builds sometimes time out",
        "body": "***Note**: This issue was originally created as [ARROW-16794](https://issues.apache.org/jira/browse/ARROW-16794). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen ccache is cold, the MinGW builds sometimes exceed the (large) 55 minutes timeout:\r\nhttps://github.com/apache/arrow/runs/6806190892?check_suite_focus=true\r\n\r\nC++ compile times have always been a concern on CI, but it may only grow as the codebase expands.",
        "created_at": "2022-06-09T10:34:28.000Z",
        "updated_at": "2022-06-22T14:06:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Continuous Integration",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-06-22T07:04:53.000Z"
    },
    "comments": [
        {
            "created_at": "2022-06-09T10:34:52.953Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17552109) by Antoine Pitrou (apitrou):*\ncc `[~kou]` `[~raulcd]` `[~assignUser]`"
        },
        {
            "created_at": "2022-06-09T11:27:58.521Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17552135) by Jacob Wujciak-Jens (assignUser):*\nHm, the timeout seems to be set pretty tight as even if [ccache hits](https://github.com/apache/arrow/runs/6782212921?check_suite_focus=true#step:7:57) the mingw job needs 40-58 minutes to finish. Other than improving caching I am not sure what we can do (for now) to improve this, as we are locked into the runner hardware with only 2 cores. So I think it would make sense to increase the timeout to prevent jobs from failing because of that.\r\n\r\nI do think that the key for the ccache-cache is set to restrictive `key: cpp-ccache-mingw$\\{\\{ matrix.mingw-n-bits \\}\\}-$\\{\\{ hashFiles('cpp/**')\\}\\`} as it will miss on any change in the cpp dir. Maybe my understanding of ccache is wrong but isn't invalidating the cached version of changed source files part of ccache's function? "
        },
        {
            "created_at": "2022-06-09T11:30:29.421Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17552139) by Jacob Wujciak-Jens (assignUser):*\nA less specific key would also mean fewer caches (global cache size is limited per repo) -> fewer evictions -> fewer misses"
        },
        {
            "created_at": "2022-06-09T11:54:13.119Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17552156) by Antoine Pitrou (apitrou):*\nThe key is quite restrictive, but the \"restore-keys\" isn't. That said, I agree that it may be counter-productive to compute such a discriminative cache key."
        },
        {
            "created_at": "2022-06-09T11:57:06.313Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17552158) by Antoine Pitrou (apitrou):*\nTo come back to the timeout problem, though, the obvious solution is indeed to bump the timeout.\r\n\r\nHowever, it is quite worrying that pure C++ builds on CI are now nearing the one hour build time. One thing specific to the MinGW builds is the fact that they build in Release mode (probably because Debug builds on Windows are complicated). One mitigation would be to override CFLAGS and CXXFLAGS to disable most optimizations."
        },
        {
            "created_at": "2022-06-10T01:16:33.143Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17552494) by Kouhei Sutou (kou):*\nI'll try changing build type to Debug from Release."
        },
        {
            "created_at": "2022-06-15T13:17:06.004Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17554589) by Will Jones (willjones127):*\nHave we ever tried linking with lld (LLVM linker) instead? I've heard it's substantially faster than the built-in MinGW linker. In theory it's fully compatible with GCC >= 10."
        },
        {
            "created_at": "2022-06-15T13:45:07.756Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17554611) by Antoine Pitrou (apitrou):*\nYou can already try to enable ld.gold using `-DARROW_USE_LD_GOLD=on`"
        },
        {
            "created_at": "2022-06-16T03:10:21.344Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17554885) by Kouhei Sutou (kou):*\nI added these jobs to confirm our code base can work as a MSYS2's MinGW package.\r\nSo I don't want to mix GCC and LLVM linker because MSYS2's MinGW package doesn't mix them.\r\n\r\nWe can't use ld.gold for this because ld.gold is only for ELF."
        },
        {
            "created_at": "2022-06-22T07:04:53.331Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16794?focusedCommentId=17557285) by Kouhei Sutou (kou):*\nIssue resolved by pull request 13359\n<https://github.com/apache/arrow/pull/13359>"
        }
    ]
}