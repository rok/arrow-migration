{
    "issue": {
        "title": "[C#] Date32/64Array.Builder should accept DateTime, not DateTimeOffset",
        "body": "***Note**: This issue was originally created as [ARROW-8581](https://issues.apache.org/jira/browse/ARROW-8581). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n# Summary Proposal\r\n\r\nThe `Date32Array.Builder` and `Date64.Builder` classes both accept values of type `DateTimeOffset`, but this makes it very easy for the user to introduce subtle bugs when they work with the `DateTime` type in their own code.\u00a0 This class of bugs could be avoided if these builders were instead typed on `DateTime` rather than `DateTimeOffset`.\r\n# Details\r\n\r\nThe danger is introduced by the implicit widening conversion provided by the _DateTimeOffset.Implicit(DateTime to DateTimeOffset)_ operator:\r\n <https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset.op_implicit?view=netcore-3.1>\r\n\r\nThe important part is this text:\r\n> The offset of the resulting DateTimeOffset object depends on the value of the DateTime.Kind property of the dateTime parameter:\n> - If the value of the DateTime.Kind property is DateTimeKind.Local or DateTimeKind.Unspecified, the date and time of the DateTimeOffset object is set equal to dateTime, and its Offset property **is set equal to the offset of the local system's current time zone**.\r\n\u00a0(Emphasis mine)\r\n\r\n\u00a0If the user is operating in an environment with a positive GMT offset, it is very easy to write the wrong date to the builder:\r\n```c#\n\r\nConsole.WriteLine(TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow)); // Bug triggers if > 00:00:00\r\nvar builder = new Date32Array.Builder();\r\nbuilder.Append(new DateTime(2020, 4, 24)); // Kind == DateTimeKind.Unspecified\r\nvar allocator = new NativeMemoryAllocator();\r\nConsole.WriteLine(builder.Build(allocator).GetDate(0)); // Prints 2020-04-23!\r\n```\r\nAssume that the user is in the UK (as I am), where the GMT offset on the above date is 1 hour ahead.\u00a0 This means that the conversion to `DateTimeOffset` will actually result in a value of `2020-04-23T23:00:00+01:00` being passed to the `Append()` method.\u00a0 Arrow then calls `ToUnixTimeMilliseconds()`, which [only considers the date portion](https://referencesource.microsoft.com/#mscorlib/system/datetimeoffset.cs,8f33340c07c4787e) of its object, not the time portion or offset.\u00a0 This means that the number of days gets calculated based on 2020-04-23, not 2020-04-24 as the user thought they were specifying.\r\n\r\nIf the user chooses to use NodaTime as a \"better\" date and time-handling library, they will still likely run into the bug if they do the obvious thing:\r\n```c#\n\r\nConsole.WriteLine(TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow)); // Bug triggers if > 00:00:00\r\nvar builder = new Date32Array.Builder();\r\nvar ld = new NodaTime.LocalDate(2020, 4, 24);\r\nbuilder.Append(ld.ToDateTimeUnspecified()); // Kind == DateTimeKind.Unspecified\r\nvar allocator = new NativeMemoryAllocator();\r\nConsole.WriteLine(builder.Build(allocator).GetDate(0)); // Prints 2020-04-23!\r\n```\r\n# Suggested Improvement\r\n \\* Change `Date32Array.Builder` and `Date64Array.Builder` to specify a `TFrom` parameter of `DateTime`, not `DateTimeOffset` (breaking change).\r\n \\* Change `Date32Array.GetDate()` and `Date64Array.GetDate()` to return a `DateTime`, not `DateTimeOffset` (also a breaking change).\r\n\r\n\u00a0\r\n\r\nThe conversion method for a `Date32Array` would then look a bit like this:\r\n```c#\n\r\nprivate static readonly DateTime Epoch = new DateTime(1970, 1, 1);\r\n\r\nprotected override int ConvertTo(DateTime value)\r\n{\r\n    return (int)(value - Epoch).TotalDays;\r\n} \n```",
        "created_at": "2020-04-24T08:18:11.000Z",
        "updated_at": "2020-08-14T23:52:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C#",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-08-14T23:52:13.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-14T23:52:13.965Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8581?focusedCommentId=17178105) by Eric Erhardt (eerhardt):*\nIssue resolved by pull request 7654\n<https://github.com/apache/arrow/pull/7654>"
        }
    ]
}