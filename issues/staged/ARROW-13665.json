{
    "issue": {
        "title": "[C++][Python] Generated argument description for compute meta-functions not accurate",
        "body": "***Note**: This issue was originally created as [ARROW-13665](https://issues.apache.org/jira/browse/ARROW-13665). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nExamples:\r\n```Java\n\r\n>>> ?pc.drop_null\r\nSignature: pc.drop_null(input, *, memory_pool=None)\r\nDocstring:\r\nDrop nulls from the input.\r\n\r\nThe output is populated with values from the input (Array, ChunkedArray,\r\nRecordBatch, or Table) without the null values.\r\nFor the RecordBatch and Table cases, `drop_null` drops the full row if\r\nthere is any null.\r\n\r\nParameters\r\n----------\r\ninput : Array-like or scalar-like\r\n    Argument to compute function\r\nmemory_pool : pyarrow.MemoryPool, optional\r\n    If not passed, will allocate memory from the default memory pool.\r\nFile:      ~/arrow/dev/python/pyarrow/compute.py\r\nType:      function\r\n\r\n>>> ?pc.sort_indices\r\nSignature: pc.sort_indices(input, *, memory_pool=None, options=None, sort_keys=None)\r\nDocstring:\r\nReturn the indices that would sort an array, record batch or table.\r\n\r\nThis function computes an array of indices that define a stable sort\r\nof the input array, record batch or table.  Null values are considered\r\ngreater than any other value and are therefore sorted at the end of the\r\ninput. For floating-point types, NaNs are considered greater than any\r\nother non-null value, but smaller than null values.\r\n\r\nParameters\r\n----------\r\ninput : Array-like or scalar-like\r\n    Argument to compute function\r\nmemory_pool : pyarrow.MemoryPool, optional\r\n    If not passed, will allocate memory from the default memory pool.\r\noptions : pyarrow.compute.SortOptions, optional\r\n    Parameters altering compute function semantics\r\n**kwargs : optional\r\n    Parameters for SortOptions constructor. Either `options`\r\n    or `**kwargs` can be passed, but not both at the same time.\r\nFile:      ~/arrow/dev/python/pyarrow/compute.py\r\nType:      function\r\n```\r\n\r\nThese two functions accepts arrays, chunked arrays, record batches and tables, but \"input\" says \"Array-like or scalar-like\".",
        "created_at": "2021-08-18T16:01:55.000Z",
        "updated_at": "2021-08-18T16:04:08.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-08-18T16:03:39.332Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13665?focusedCommentId=17401166) by Antoine Pitrou (apitrou):*\nOne way to solve this would be to add metadata for MetaFunction arguments on the C++ side. `[~bkietz]` What do you think?"
        },
        {
            "created_at": "2021-08-18T16:04:08.132Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13665?focusedCommentId=17401168) by Antoine Pitrou (apitrou):*\nAlso cc `[~amol-]`"
        }
    ]
}