{
    "issue": {
        "title": "[C++] Error building when cross-compiling for RISC-V with GCC 7.2",
        "body": "***Note**: This issue was originally created as [ARROW-1659](https://issues.apache.org/jira/browse/ARROW-1659). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI\u2019ve been attempting to cross-compile Arrow for RISC-V.\r\nI was trying to build Arrow with Plasma and Python, but without the compression libraries (snappy, brotli, zstd, lz4).\r\nI was getting several errors indicating that stdlib.h is missing. An example error is:\r\n\r\n\n|In file included from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/ext/string_conversions.h:41:0,\r|\n|-|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/bits/basic_string.h:6159,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/string:52,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/stdexcept:39,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/array:39,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/tuple:39,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/bits/unique_ptr.h:37,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/memory:80,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/arrow-apache-arrow-0.7.1/cpp/src/arrow/io/interfaces.h:22,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/arrow-apache-arrow-0.7.1/cpp/src/arrow/python/io.h:21,\r|\n|from /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/arrow-apache-arrow-0.7.1/cpp/src/arrow/python/io.cc:18:\r|\n|/home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/c++/7.2.0/cstdlib:75:15: fatal error: stdlib.h: No such file or directory\r|\n|#include_next <stdlib.h>\r|\n|^~~~~~~~~~\r|\n|compilation terminated.\r<br>\r<br>\r<br>The relevant example call is:\r<br>\r<br>cd /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/build/src/arrow/python && /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot-native/usr/bin/riscv64-poky-linux/riscv64-poky-linux-g++   -isystem /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include -isystem /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/build/src/rapidjson_ep/include -isystem /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/build/flatbuffers_ep-prefix/src/flatbuffers_ep-install/include -isystem /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/arrow-apache-arrow-0.7.1/cpp/thirdparty/hadoop/include -I/home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/arrow-apache-arrow-0.7.1/cpp/src -isystem /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot-native/usr/lib/python2.7/site-packages/numpy/core/include -isystem /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include/python2.7  --sysroot=/home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot  -O2 -pipe -g -feliminate-unused-debug-types -fdebug-prefix-map=/home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0=/usr/src/debug/apache-arrow/0.7.1-r0 -fdebug-prefix-map=/home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot-native= -fdebug-prefix-map=/home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot=  -fvisibility-inlines-hidden   --sysroot=/home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot -ggdb -O0 -Wall -std=c+11  -g -fPIC   -std=gnu+11 -o CMakeFiles/arrow_python_objlib.dir/io.cc.o -c /home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/arrow-apache-arrow-0.7.1/cpp/src/arrow/python/io.cc\r<br>\r<br>\r<br>When I manually checked the highlighted path (/home/centos/riscv-poky/build/tmp/work/riscv64-poky-linux/apache-arrow/0.7.1-r0/recipe-sysroot/usr/include), stdlib.h is indeed there.\r<br>While googling for similar errors, I found these references: https://github.com/OpenLightingProject/ola/pull/1132, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129  , which seem to describe a similar scenario. \r<br>As can be seen in the example call, most of the include directories are included using -isystem rather than -I.\r<br>When looking further into Arrow\u2019s cmake files, this seems intentional:\r<br>\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:include_directories(SYSTEM ${Boost_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${GTEST_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${GFLAGS_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${GBENCHMARK_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${RAPIDJSON_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${FLATBUFFERS_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${JEMALLOC_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:include_directories(SYSTEM \"${HADOOP_HOME}/include\")\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${ZLIB_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${SNAPPY_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${BROTLI_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${LZ4_INCLUDE_DIR})\r<br>./cpp/cmake_modules/ThirdpartyToolchain.cmake:  include_directories(SYSTEM ${ZSTD_INCLUDE_DIR})\r<br>./cpp/src/arrow/gpu/CMakeLists.txt:include_directories(SYSTEM ${CUDA_INCLUDE_DIRS})\r<br>./cpp/src/plasma/CMakeLists.txt:include_directories(SYSTEM ${PYTHON_INCLUDE_DIRS})\r<br>./cpp/CMakeLists.txt:  include_directories(SYSTEM\r<br>./python/CMakeLists.txt:include_directories(SYSTEM\r<br>./python/CMakeLists.txt:include_directories(SYSTEM ${ARROW_INCLUDE_DIR})\r<br>./python/CMakeLists.txt:  include_directories(SYSTEM ${PARQUET_INCLUDE_DIR})\r<br>./python/CMakeLists.txt:  include_directories(SYSTEM ${PLASMA_INCLUDE_DIR})\r<br>\r<br>Since compiling for RISC-V requires GCC 7.2, It is likely that this is the same issue that is exposed by using GCC version 6.0 and above is the previously mentioned references (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129 and https://github.com/OpenLightingProject/ola/pull/1132)\r<br>\r<br>I mitigated the issue temporarily by setting the following in cpp/CMakeLists.txt:\r<br>set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX \"-I \") \r<br>However, I think this should be done anytime GCC 6.0 or higher is used.|\n",
        "created_at": "2017-10-09T04:16:44.000Z",
        "updated_at": "2019-03-14T13:15:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-03-14T13:15:19.000Z"
    },
    "comments": [
        {
            "created_at": "2017-10-09T22:39:06.037Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1659?focusedCommentId=16197819) by Wes McKinney (wesm):*\nMarked for 0.8.0. I would welcome a patch to fix this \u2013 `[~cpcloud]` have you encountered any problems since you run gcc > 6?"
        },
        {
            "created_at": "2017-10-21T03:00:58.795Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1659?focusedCommentId=16213691) by Wes McKinney (wesm):*\nIs there any way to help us reproduce this issue so we can investigate? \r\n\r\nI tried building with gcc 7.2.0 on Arch Linux x86_64 and no issues. Here's the Dockerfile\r\n\r\n```Java\n\r\nFROM base/archlinux\r\n\r\nRUN pacman -Syu && \\\r\n    pacman -S --noconfirm --needed base-devel\r\n\r\nRUN pacman -S --noconfirm --needed \\\r\n    wget git cmake doxygen\r\n\r\nRUN mkdir /home/root\r\nWORKDIR /home/root\r\n\r\nRUN pacman -S --noconfirm --needed boost\r\n\r\nRUN git clone https://github.com/apache/arrow.git &&\\\r\n    mkdir arrow/cpp/build\r\n\r\nWORKDIR /home/root/arrow/cpp/build\r\n```"
        },
        {
            "created_at": "2017-10-23T05:27:21.264Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1659?focusedCommentId=16214658) by Alon Amid (alonamid):*\nThe error I reported popped up on the release version (0.7.1) rather than the master branch, although it was a fairly recent release. I can trying checking if it is still relevant on current master. It might also be a cross-compilation effect?"
        },
        {
            "created_at": "2017-10-23T09:38:09.050Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1659?focusedCommentId=16214873) by Uwe Korn (uwe):*\n`[~alonamid]` I think this certainly has to do with cross-compiling. I could not reproduce your error in any way locally but I always compiled for the host system. Can you post instructions on how you have setup the cross-compilation?"
        },
        {
            "created_at": "2018-11-10T21:44:30.188Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1659?focusedCommentId=16682613) by Wes McKinney (wesm):*\n`[~alonamid]` pinging you again on this; if you can post instructions about cross-compiling for RISC-V"
        }
    ]
}