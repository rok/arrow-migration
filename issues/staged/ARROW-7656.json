{
    "issue": {
        "title": "[Python] csv.ConvertOptions Documentation Is Unclear Around Disabling Type Inference",
        "body": "***Note**: This issue was originally created as [ARROW-7656](https://issues.apache.org/jira/browse/ARROW-7656). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHigh level description:\r\n \\* The documentation [here\\|[https://arrow.apache.org/docs/python/generated/pyarrow.csv.ConvertOptions.html#pyarrow.csv.ConvertOptions]] says that setting column_types disables type inference.\r\n \\* Under the hood I can see why it is clear you need to also set ReadOptions.column_names to support all current use cases however it is unclear to new users of the library when you read the docs. Especially since you can supply a Schema object to column_types in the Python bindings.\r\n \\* Suggested change: update the csv.ConvertOptions to note that you also must set csv.ReadOptions.column_names in order to disable type inference.",
        "created_at": "2020-01-22T17:12:32.000Z",
        "updated_at": "2020-01-28T10:39:46.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-01-28T10:39:32.340Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7656?focusedCommentId=17025029) by Joris Van den Bossche (jorisvandenbossche):*\nThe docs say:\r\n\r\n> Map column names to column types (disabling type inference on those columns).\r\n\r\nSo it only disables type inference for the column for which you specified a type in `column_types`.\r\n\r\nNow, assuming you are talking here about the same example as you showed in https://issues.apache.org/jira/browse/ARROW-7655, by removing `read_options` from your call, you are no longer giving the column in your data a name. And hence, the column (with inferred name \"0\") is not specified in `column_types`, and hence is still inferreded to be integer:\r\n\r\n```python\n\r\n>>> table = csv.read_csv(\"test.csv\", convert_options=convert_options)#, read_options=read_options)\r\n>>> table.schema\r\n0: int64\r\n>>> table.to_pandas()\r\n   0\r\n0  1\r\n```\r\n\r\nIf I am misinterpreting your use case, can you provide a full reproducible example for this issue?\r\n"
        }
    ]
}