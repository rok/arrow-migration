{
    "issue": {
        "title": "[R] Update lz4 test failing locally due to different error message",
        "body": "***Note**: This issue was originally created as [ARROW-14253](https://issues.apache.org/jira/browse/ARROW-14253). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen running on a local machine with\u00a0`ARROW_R_DEV`\u00a0set to true, the extra error messages printed out from the C++ code result in the test failing as the body of the error message doesn't match what is expected in the test.\r\n\r\nhttps://github.com/apache/arrow/blob/25a6f591d1f162106b74e29870ebd4012e9874cc/r/tests/testthat/test-feather.R#L247",
        "created_at": "2021-10-07T10:30:40.000Z",
        "updated_at": "2021-10-29T11:42:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-10-28T17:13:22.000Z"
    },
    "comments": [
        {
            "created_at": "2021-10-07T12:33:45.839Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14253?focusedCommentId=17425525) by Neal Richardson (npr):*\nCan you show what you're seeing?"
        },
        {
            "created_at": "2021-10-07T12:53:23.601Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14253?focusedCommentId=17425537) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\n```java\n\r\n\r\n\u2550\u2550 Failed tests \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\r\n\u2500\u2500 Error (test-feather.R:247:5): Error messages are shown when the compression algorithm lz4 is not found \u2500\u2500\r\nError: NotImplemented: Support for codec 'lz4' not built\r\n/Users/dragos/Documents/arrow/cpp/src/arrow/ipc/reader.cc:458  util::Codec::Create(compression)/Users/dragos/Documents/arrow/cpp/src/arrow/ipc/reader.cc:514  DecompressBuffers(context.compression, context.options, &filtered_columns)/Users/dragos/Documents/arrow/cpp/src/arrow/ipc/reader.cc:1080  ReadRecordBatchInternal( *message->metadata(), schema_, field_inclusion_mask_, context, reader.get())/Users/dragos/Documents/arrow/cpp/src/arrow/ipc/feather.cc:723  reader->ReadRecordBatch(i)\r\nIn order to read this file, you will need to reinstall arrow with additional features enabled.\r\n\r\nSet one of these environment variables before installing: \r\n\r\n* LIBARROW_MINIMAL=false (for all optional features, including 'lz4') \r\n* ARROW_WITH_LZ4=ON (for just 'lz4')\r\n\r\nSee https://arrow.apache.org/docs/r/articles/install.html for details\r\nBacktrace:\r\n     \u2588  \r\n1. \u251c\u2500testthat::expect_error(read_feather(ft_file), msg, fixed = TRUE) test-feather.R:247:4  \r\n2. \u2502 \u2514\u2500testthat:::expect_condition_matching(...)  \r\n3. \u2502   \u2514\u2500testthat:::quasi_capture(...)  \r\n4. \u2502     \u251c\u2500testthat:::.capture(...)  \r\n5. \u2502     \u2502 \u2514\u2500base::withCallingHandlers(...)  \r\n6. \u2502     \u2514\u2500rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))  \r\n7. \u2514\u2500arrow::read_feather(ft_file)  \r\n8.   \u2514\u2500base::tryCatch(reader$Read(columns), error = read_compressed_error)  \r\n9.     \u2514\u2500base:::tryCatchList(expr, classes, parentenv, handlers) \r\n10.       \u2514\u2500base:::tryCatchOne(expr, names, parentenv, handlers[[1L]]) \r\n11.         \u2514\u2500value[[3L]](cond)\r\n\r\n[ FAIL 1 | WARN 24 | SKIP 41 | PASS 5675 ]\r\nError: Test failures\r\nExecution halted\r\n\r\n1 error x | 1 warning x | 1 note x\r\n```"
        },
        {
            "created_at": "2021-10-07T12:55:58.107Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14253?focusedCommentId=17425539) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nThis happens when libarrow is installed without `-DARROW_WITH_LZ4=ON \\`"
        },
        {
            "created_at": "2021-10-07T13:00:26.166Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14253?focusedCommentId=17425546) by Nicola Crane (thisisnic):*\n`[~npr]` My assumption was that the test expects a very specific error message, but as `ARROW_R_DEV` is turned on, the C++ bit of the error message is longer, which is causing this test to fail, so the solution here would be to just limit how much of the error message we supply to `regexp`?"
        },
        {
            "created_at": "2021-10-07T15:21:23.404Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14253?focusedCommentId=17425631) by Neal Richardson (npr):*\nIt's not ARROW_R_DEV, it's `ARROW_EXTRA_ERROR_CONTEXT=ON` in the cmake. That explains why we've never seen it before, that's a developer flag and me locally or none of our CI builds have that on and ARROW_WITH_LZ4=OFF. \r\n\r\nThe test could be adapted to support that use case (add .\\* to the regex in expect_error), or we could trim the C++ backtrace from the error message in the code, but I'm not sure it's worth doing."
        },
        {
            "created_at": "2021-10-28T17:13:22.282Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14253?focusedCommentId=17435570) by Nicola Crane (thisisnic):*\nIssue resolved by pull request 11539\n<https://github.com/apache/arrow/pull/11539>"
        }
    ]
}