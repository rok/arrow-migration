{
    "issue": {
        "title": "[C++][Compute] Improve top_k/bottom_k Selecters via CRTP",
        "body": "***Note**: This issue was originally created as [ARROW-13971](https://issues.apache.org/jira/browse/ARROW-13971). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs it was mentioned here:\u00a0\r\n\r\n<https://github.com/apache/arrow/pull/11019#discussion_r701349253>\r\n\r\n\u00a0\r\n\r\nSelecters for SelectKUnstable all have a relatively similar core structure. It might be worth considering how some templating (e.g. via\u00a0[CRTP](https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern), or via a set of helper comparator/iteration templates) could let you factor out the core algorithm and the container-specific bits.\r\n\r\nIt would then be easier to also try to share generated code between types with the same physical type (e.g. as mentioned, Int64, Timestamp, and Date64 should all use the same generated code underneath). This issue\u00a0 related to \u00a0create template specialization functions for these types\u00a0 was also mentioned here:\u00a0\r\n\r\nhttps://github.com/apache/arrow/pull/11019#discussion_r700238908\r\n\r\n\u00a0",
        "created_at": "2021-09-10T02:20:13.000Z",
        "updated_at": "2021-09-10T12:33:45.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}