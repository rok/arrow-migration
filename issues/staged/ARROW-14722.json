{
    "issue": {
        "title": "[R] dplyr::arrange converts number values to negative ",
        "body": "***Note**: This issue was originally created as [ARROW-14722](https://issues.apache.org/jira/browse/ARROW-14722). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```\r\n```java\n\r\n# Load libraries\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\n\r\n# Store table\r\nfile_path <- tempfile()\r\nwrite_parquet(dplyr::tibble(a = 1:10, b = \"A\"), file_path)\r\n\r\n# Read table\u00a0\r\nmy_table <- read_parquet(file_path)\r\n\r\n# Table looks normal\r\nmy_table\r\n# A tibble: 10 x 2\r\n# \u00a0 \u00a0 \u00a0 a b \u00a0 \u00a0\r\n# \u00a0 <int> <chr>\r\n# 1 \u00a0 \u00a0 1 A \u00a0 \u00a0\r\n# 2 \u00a0 \u00a0 2 A \u00a0 \u00a0\r\n# 3 \u00a0 \u00a0 3 A \u00a0 \u00a0\r\n# 4 \u00a0 \u00a0 4 A \u00a0 \u00a0\r\n# 5 \u00a0 \u00a0 5 A \u00a0 \u00a0\r\n# 6 \u00a0 \u00a0 6 A \u00a0 \u00a0\r\n# 7 \u00a0 \u00a0 7 A \u00a0 \u00a0\r\n# 8 \u00a0 \u00a0 8 A \u00a0 \u00a0\r\n# 9 \u00a0 \u00a0 9 A \u00a0 \u00a0\r\n# 10 \u00a0 \u00a010 A \u00a0\r\n\r\n# First arrange changes number values to negative\r\nmy_table %>% arrange(dplyr::desc(a))\u00a0\r\n# A tibble: 10 x 2\r\n# \u00a0 \u00a0 \u00a0 a b \u00a0 \u00a0\r\n# \u00a0 <int> <chr>\r\n# 1 \u00a0 -10 A \u00a0 \u00a0\r\n# 2 \u00a0 \u00a0-9 A \u00a0 \u00a0\r\n# 3 \u00a0 \u00a0-8 A \u00a0 \u00a0\r\n# 4 \u00a0 \u00a0-7 A \u00a0 \u00a0\r\n# 5 \u00a0 \u00a0-6 A \u00a0 \u00a0\r\n# 6 \u00a0 \u00a0-5 A \u00a0 \u00a0\r\n# 7 \u00a0 \u00a0-4 A \u00a0 \u00a0\r\n# 8 \u00a0 \u00a0-3 A \u00a0 \u00a0\r\n# 9 \u00a0 \u00a0-2 A \u00a0 \u00a0\r\n# 10 \u00a0 -1 A \u00a0\u00a0\r\n\r\n# Even underlying data is changed!!!\r\nmy_table\r\n# A tibble: 10 x 2\r\n# \u00a0 \u00a0 \u00a0 a b \u00a0 \u00a0\r\n# \u00a0 <int> <chr>\r\n# 1 \u00a0 -10 A \u00a0 \u00a0\r\n# 2 \u00a0 \u00a0-9 A \u00a0 \u00a0\r\n# 3 \u00a0 \u00a0-8 A \u00a0 \u00a0\r\n# 4 \u00a0 \u00a0-7 A \u00a0 \u00a0\r\n# 5 \u00a0 \u00a0-6 A \u00a0 \u00a0\r\n# 6 \u00a0 \u00a0-5 A \u00a0 \u00a0\r\n# 7 \u00a0 \u00a0-4 A \u00a0 \u00a0\r\n# 8 \u00a0 \u00a0-3 A \u00a0 \u00a0\r\n# 9 \u00a0 \u00a0-2 A \u00a0 \u00a0\r\n# 10 \u00a0 -1 A \u00a0\u00a0\r\n\r\n# Second arrange changes it back\r\nmy_table %>% arrange(dplyr::desc(a))\u00a0\r\nmy_table\r\n# A tibble: 10 x 2\r\n# \u00a0 \u00a0 \u00a0 a b \u00a0 \u00a0\r\n# \u00a0 <int> <chr>\r\n# 1 \u00a0 \u00a0 1 A \u00a0 \u00a0\r\n# 2 \u00a0 \u00a0 2 A \u00a0 \u00a0\r\n# 3 \u00a0 \u00a0 3 A \u00a0 \u00a0\r\n# 4 \u00a0 \u00a0 4 A \u00a0 \u00a0\r\n# 5 \u00a0 \u00a0 5 A \u00a0 \u00a0\r\n# 6 \u00a0 \u00a0 6 A \u00a0 \u00a0\r\n# 7 \u00a0 \u00a0 7 A \u00a0 \u00a0\r\n# 8 \u00a0 \u00a0 8 A \u00a0 \u00a0\r\n# 9 \u00a0 \u00a0 9 A \u00a0 \u00a0\r\n# 10 \u00a0 \u00a010 A  \r\n\r\n```\r\n```",
        "created_at": "2021-11-16T14:11:45.000Z",
        "updated_at": "2021-11-30T03:34:27.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-11-30T00:09:55.000Z"
    },
    "comments": [
        {
            "created_at": "2021-11-16T23:22:47.617Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14722?focusedCommentId=17444873) by Will Jones (willjones127):*\nThank you for the reproducible example! This is very odd behavior indeed.\r\n\r\n{~~}From what I can tell there seems to be a side affect from the base::xtfrm function (which dplyr::arrange uses) on arrow altrep arrays{~~}.\r\n\r\nI think the issue actually doesn't have to do with dplyr arrange specifically, but instead on the minus sign operator on an altrep vector backed by an Arrow array. Here's what I found so far debugging your example:\r\n```java\n\r\nmy_array <- my_table$a\r\nvroom::vroom_str(my_array)\r\n# altrep:true \u00a0 \u00a0type:arrow::arrow::array_int_vector \u00a0 \u00a0length:10 \u00a0 \u00a0materialized:false\r\nmy_array\u00a0\r\n# [1] \u00a01 \u00a02 \u00a03 \u00a04 \u00a05 \u00a06 \u00a07 \u00a08 \u00a09 10\r\n\r\n-my_array\r\n# [1] \u00a0-1 \u00a0-2 \u00a0-3 \u00a0-4 \u00a0-5 \u00a0-6 \u00a0-7 \u00a0-8 \u00a0-9 -10\r\nmy_array\r\n# [1] \u00a0-1 \u00a0-2 \u00a0-3 \u00a0-4 \u00a0-5 \u00a0-6 \u00a0-7 \u00a0-8 \u00a0-9 -10\r\n\r\n-my_array\r\n# [1] \u00a01 \u00a02 \u00a03 \u00a04 \u00a05 \u00a06 \u00a07 \u00a08 \u00a09 10\r\nmy_array\r\n# [1] \u00a01 \u00a02 \u00a03 \u00a04 \u00a05 \u00a06 \u00a07 \u00a08 \u00a09 10 \n```"
        },
        {
            "created_at": "2021-11-17T00:27:08.920Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14722?focusedCommentId=17444884) by Jonathan Keane (jonkeane):*\nYou're right Will that this looks related to altrep. \r\n\r\nAs a quick/temporary workaround to get you unblocked, Mislav, you could set `options(\"arrow.use_altrep\" = FALSE)` which will disable the use of altrep in the R package and that should sidestep the issue while we work on a fix"
        },
        {
            "created_at": "2021-11-17T01:11:40.034Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14722?focusedCommentId=17444888) by Neal Richardson (npr):*\ncc `[~romainfrancois]`"
        },
        {
            "created_at": "2021-11-17T07:03:59.978Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14722?focusedCommentId=17444966) by Mislav Zorko (InfinitesimalPie):*\nHi all,\r\n\r\nThanks for a quick response & workaround. We tested it and it works.\u00a0\r\n\r\nThere are three questions from our side:\r\n \\* why didn't `dplyr::collect()` help here, but `dplyr::tibble(data.table::data.table(my_data))` did?\r\n \\* are there any similar potential issues like this (should we keep `options(\"arrow.use_altrep\" = FALSE)` to be safe?)?\r\n \\* how was this not caught in arrange unit testing (https://github.com/apache/arrow/blob/master/r/tests/testthat/test-dplyr-arrange.R)?\u00a0\r\n\r\nBR,\r\n\r\nMislav"
        },
        {
            "created_at": "2021-11-17T13:52:35.201Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14722?focusedCommentId=17445181) by Neal Richardson (npr):*\n> why didn't dplyr::collect() help here, but dplyr::tibble(data.table::data.table(my_data)) did?\r\n\r\nOne of those function calls must materialize the altrep vector. \r\n\r\n> how was this not caught in arrange unit testing (https://github.com/apache/arrow/blob/master/r/tests/testthat/test-dplyr-arrange.R)? \r\n\r\nThose arrange tests are testing `arrange()` on Arrow objects (Table, Dataset, query). You were calling dplyr::arrange() on a tibble, which is not something we test because that shouldn't touch Arrow code, only dplyr. But it turns out that that tibble is made of altrep vectors backed by Arrow arrays, and there's something off in the altrep code. We'll investigate. "
        },
        {
            "created_at": "2021-11-30T00:09:55.758Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14722?focusedCommentId=17450775) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 11727\n<https://github.com/apache/arrow/pull/11727>"
        }
    ]
}