{
    "issue": {
        "title": "[Python, Java] UnionArray round trip not working",
        "body": "***Note**: This issue was originally created as [ARROW-1692](https://issues.apache.org/jira/browse/ARROW-1692). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm currently working on making pyarrow.serialization data available from the Java side, one problem I was running into is that it seems the Java implementation cannot read UnionArrays generated from C++. To make this easily reproducible I created a clean Python implementation for creating UnionArrays: https://github.com/apache/arrow/pull/1216\r\n\r\nThe data is generated with the following script:\r\n\r\n```Java\n\r\nimport pyarrow as pa\r\n\r\nbinary = pa.array([b'a', b'b', b'c', b'd'], type='binary')\r\nint64 = pa.array([1, 2, 3], type='int64')\r\ntypes = pa.array([0, 1, 0, 0, 1, 1, 0], type='int8')\r\nvalue_offsets = pa.array([0, 0, 2, 1, 1, 2, 3], type='int32')\r\n\r\nresult = pa.UnionArray.from_arrays([binary, int64], types, value_offsets)\r\n\r\nbatch = pa.RecordBatch.from_arrays([result], [\"test\"])\r\n\r\nsink = pa.BufferOutputStream()\r\nwriter = pa.RecordBatchStreamWriter(sink, batch.schema)\r\n\r\nwriter.write_batch(batch)\r\n\r\nsink.close()\r\n\r\nb = sink.get_result()\r\n\r\nwith open(\"union_array.arrow\", \"wb\") as f:\r\n    f.write(b)\r\n\r\n# Sanity check: Read the batch in again\r\n\r\nwith open(\"union_array.arrow\", \"rb\") as f:\r\n    b = f.read()\r\n    reader = pa.RecordBatchStreamReader(pa.BufferReader(b))\r\n\r\nbatch = reader.read_next_batch()\r\n\r\nprint(\"union array is\", batch.column(0))\r\n```\r\n\r\nI attached the file generated by that script. Then when I run the following code in Java:\r\n\r\n```Java\n\r\nRootAllocator allocator = new RootAllocator(1000000000);\r\n\r\nByteArrayInputStream in = new ByteArrayInputStream(Files.readAllBytes(Paths.get(\"union_array.arrow\")));\r\n\r\nArrowStreamReader reader = new ArrowStreamReader(in, allocator);\r\n\r\nreader.loadNextBatch()\r\n```\r\n\r\nI get the following error:\r\n\r\n```Java\n\r\n|  java.lang.IllegalArgumentException thrown: Could not load buffers for field test: Union(Sparse, [22, 5])<0: Binary, 1: Int(64, true)>. error message: can not truncate buffer to a larger size 7: 0\r\n|        at VectorLoader.loadBuffers (VectorLoader.java:83)\r\n|        at VectorLoader.load (VectorLoader.java:62)\r\n|        at ArrowReader$1.visit (ArrowReader.java:125)\r\n|        at ArrowReader$1.visit (ArrowReader.java:111)\r\n|        at ArrowRecordBatch.accepts (ArrowRecordBatch.java:128)\r\n|        at ArrowReader.loadNextBatch (ArrowReader.java:137)\r\n|        at (#7:1)\r\n```\r\n\r\nIt seems like Java is not picking up that the UnionArray is Dense instead of Sparse. After changing the default in java/vector/src/main/codegen/templates/UnionVector.java from Sparse to Dense, I get this:\r\n\r\n```Java\n\r\njshell> reader.getVectorSchemaRoot().getSchema()\r\n$9 ==> Schema<list: Union(Dense, [0])<: Struct<list: List<item: Union(Dense, [0])<: Int(64, true)>>>>>\r\n```\r\n\r\nbut then reading doesn't work:\r\n\r\n```Java\n\r\njshell> reader.loadNextBatch()\r\n|  java.lang.IllegalArgumentException thrown: Could not load buffers for field list: Union(Dense, [1])<: Struct<list: List<$data$: Union(Dense, [5])<: Int(64, true)>>>>. error message: can not truncate buffer to a larger size 1: 0\r\n|        at VectorLoader.loadBuffers (VectorLoader.java:83)\r\n|        at VectorLoader.load (VectorLoader.java:62)\r\n|        at ArrowReader$1.visit (ArrowReader.java:125)\r\n|        at ArrowReader$1.visit (ArrowReader.java:111)\r\n|        at ArrowRecordBatch.accepts (ArrowRecordBatch.java:128)\r\n|        at ArrowReader.loadNextBatch (ArrowReader.java:137)\r\n|        at (#8:1)\r\n```\r\n\r\nAny help with this is appreciated!",
        "created_at": "2017-10-20T03:00:12.000Z",
        "updated_at": "2020-07-12T22:02:55.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Integration",
            "Component: Java",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-07-11T22:48:24.000Z"
    },
    "comments": [
        {
            "created_at": "2017-10-20T17:07:14.218Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1692?focusedCommentId=16212898) by Wes McKinney (wesm):*\nWe have yet to complete integration tests for unions, so it does not surprise me that there are some small issues. \r\n\r\nSee open PR https://github.com/apache/arrow/pull/987"
        },
        {
            "created_at": "2017-10-20T17:07:26.823Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1692?focusedCommentId=16212899) by Wes McKinney (wesm):*\ncc `[~icexelloss]`"
        },
        {
            "created_at": "2017-10-20T17:56:39.618Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1692?focusedCommentId=16212958) by Li Jin (icexelloss):*\nYeah Union type doesn't work between java/c++ because they have different presentation. (The java one is incorrect I think)"
        },
        {
            "created_at": "2017-10-20T17:58:51.094Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1692?focusedCommentId=16212961) by Li Jin (icexelloss):*\nWe can probably do the integration for Union in 0.8 if the refactor work finishes ahead of schedule, otherwise I'd suggest we prioritize refactoring work and ensure its quality.  "
        },
        {
            "created_at": "2017-10-22T19:26:43.577Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1692?focusedCommentId=16214423) by Philipp Moritz (pcmoritz):*\nThanks for your help! I tried to make it work on top of https://github.com/apache/arrow/pull/987 but the Dense Union integration there is also not compatible with C++ and if this code will be deprecated soon it probably doesn't make much sense to fix it.\r\n\r\nIf there is anything I can do to speed up us having Dense Union support in Java that interoperates with C++ let me know!"
        },
        {
            "created_at": "2017-12-15T00:05:20.932Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1692?focusedCommentId=16291814) by Philipp Moritz (pcmoritz):*\nI tried this again with 0.8 and it gives the following error:\r\n\r\n```Java\n\r\njshell> ArrowStreamReader reader = new ArrowStreamReader(in, allocator);\r\nreader ==> org.apache.arrow.vector.ipc.ArrowStreamReader@55cf0d14\r\n\r\njshell> ByteArrayInputStream in = new ByteArrayInputStream(Files.readAllBytes(Paths.get(\"/Users/pcmoritz/arrow/python/union_array.arrow\")));\r\nin ==> java.io.ByteArrayInputStream@3b74ac8\r\n\r\njshell> ArrowStreamReader reader = new ArrowStreamReader(in, allocator);\r\nreader ==> org.apache.arrow.vector.ipc.ArrowStreamReader@27adc16e\r\n\r\njshell> reader.loadNextBatch()\r\n|  java.lang.IndexOutOfBoundsException thrown: \r\n|        at Buffer.checkIndex (Buffer.java:675)\r\n|        at HeapByteBuffer.getInt (HeapByteBuffer.java:405)\r\n|        at Table.__string (Table.java:50)\r\n|        at KeyValue.key (KeyValue.java:21)\r\n|        at Field.convertField (Field.java:126)\r\n|        at Field.convertField (Field.java:118)\r\n|        at Schema.convertSchema (Schema.java:85)\r\n|        at MessageSerializer.deserializeSchema (MessageSerializer.java:112)\r\n|        at ArrowStreamReader.readSchema (ArrowStreamReader.java:128)\r\n|        at ArrowReader.initialize (ArrowReader.java:181)\r\n|        at ArrowReader.ensureInitialized (ArrowReader.java:172)\r\n|        at ArrowReader.prepareLoadNextBatch (ArrowReader.java:211)\r\n|        at ArrowStreamReader.loadNextBatch (ArrowStreamReader.java:103)\r\n|        at (#12:1)\r\n```"
        },
        {
            "created_at": "2018-06-29T14:50:22.223Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1692?focusedCommentId=16527756) by Wes McKinney (wesm):*\nI hope we can resolve this in the 0.11 release cycle"
        },
        {
            "created_at": "2020-07-11T22:48:24.312Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1692?focusedCommentId=17156159) by Wes McKinney (wesm):*\nIssue resolved by pull request 7290\n<https://github.com/apache/arrow/pull/7290>"
        }
    ]
}