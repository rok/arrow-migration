{
    "issue": {
        "title": "[Python] Int64Array can not be casted to DoubleArray?",
        "body": "***Note**: This issue was originally created as [ARROW-12818](https://issues.apache.org/jira/browse/ARROW-12818). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn numpy, we can cast int64 to float64. But in pyarrow, we can't.\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport pyarrow as pa\r\n\r\n1. timestamp\n   dt = pd.date_range('2021-01-01', periods=10)\n   \n1. int64\n   arr = dt.asi8\n   \n1. cast to float64\n   arr_double = arr.astype(np.float64)\n   \n1. to arrow array\n   ts = pa.array(dt.asi8, type=pa.timestamp('ns'))\n   \n1. to int64 array\n   ts_int64 = ts.cast(pa.int64())\n   \n1. cast to float64\n   ts_double = ts_int64.cast(pa.float64())\n   ```\n   \n   the last line raise an exception\n   \n   ```python\n   ---------------------------------------------------------------------------\n   ArrowInvalid Traceback (most recent call last)\n   <ipython-input-89-cc7cafd418c4> in <module>\n   ----> 1 pa.array(dt.asi8, type=pa.timestamp('ns')).cast(pa.int64()).cast(pa.float64())\n   \n   /opt/anaconda3/lib/python3.8/site-packages/pyarrow/array.pxi in pyarrow.lib.Array.cast()\n   \n   /opt/anaconda3/lib/python3.8/site-packages/pyarrow/compute.py in cast(arr, target_type, safe)\n    287 else:\n    288 options = CastOptions.unsafe(target_type)\n   --> 289 return call_function(\"cast\", [arr], options)\n    290 \n    291\n   \n   /opt/anaconda3/lib/python3.8/site-packages/pyarrow/_compute.pyx in pyarrow._compute.call_function()\n   \n   /opt/anaconda3/lib/python3.8/site-packages/pyarrow/_compute.pyx in pyarrow._compute.Function.call()\n   \n   /opt/anaconda3/lib/python3.8/site-packages/pyarrow/error.pxi in pyarrow.lib.pyarrow_internal_check_status()\n   \n   /opt/anaconda3/lib/python3.8/site-packages/pyarrow/error.pxi in pyarrow.lib.check_status()\n   \n   ArrowInvalid: Integer value 1609459200000000000 not in range: -9007199254740992 to 9007199254740992\n   ```",
        "created_at": "2021-05-18T09:54:28.000Z",
        "updated_at": "2021-05-18T15:22:55.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-05-18T15:22:55.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-18T11:59:38.844Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12818?focusedCommentId=17346845) by David Li (lidavidm):*\nHey `[~lf-shaw]`, you can do this if you pass `safe=False`:\r\n```\n\r\n>>> ts.cast(pa.int64()).cast(pa.float64(), safe=False)\r\n<pyarrow.lib.DoubleArray object at 0x7f25a084c820>\r\n[\r\n  1.60946e+18,\r\n  1.60955e+18,\r\n  1.60963e+18,\r\n  1.60972e+18,\r\n  1.6098e+18,\r\n  1.60989e+18,\r\n  1.60998e+18,\r\n  1.61006e+18,\r\n  1.61015e+18,\r\n  1.61024e+18\r\n]\r\n```\r\nThis will give you the same result as NumPy. The reason this happens is outside the [-9007199254740992, 9007199254740992] range, not all integers can be exactly represented as a double, so by default PyArrow checks to be safe - but you can override this."
        },
        {
            "created_at": "2021-05-18T15:22:37.278Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12818?focusedCommentId=17347001) by lf-shaw (lf-shaw):*\nYes, you are right! (y)\r\nThanks!"
        }
    ]
}