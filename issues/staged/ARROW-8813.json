{
    "issue": {
        "title": "[R] Implementing tidyr interface",
        "body": "***Note**: This issue was originally created as [ARROW-8813](https://issues.apache.org/jira/browse/ARROW-8813). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI think it would be reasonable to implement an interface to the `tidyr` package. The implementation would allow to lazily process ArrowTables before put it back into the memory. However, currently you need to collect the table first before applying tidyr methods. The following code chunk shows an example routine:\r\n```r\n\r\nlibrary(magrittr)\r\narrow_table <- arrow::read_feather(\"table.feather\", as_data_frame = FALSE) \r\nnested_df <-\r\n   arrow_table %>%\r\n   dplyr::select(ID, 4:7, Value) %>%\r\n   dplyr::filter(Value >= 5) %>%\r\n   dplyr::group_by(ID) %>%\r\n   dplyr::collect() %>%\r\n   tidyr::nest()\n```\r\nThe main focus might be the following three methods:\r\n \\* `tidyr::[un]nest()`,\r\n \\* `tidyr::pivot_[longer|wider]()`, and\r\n \\* `tidyr::seperate()`.\r\n\r\nI suppose the last two can be fairly quickly implemented, but `tidyr::nest()` and `tidyr::unnest()` cannot be implement before conversion to List<Struct> will be accessible.",
        "created_at": "2020-05-15T09:14:35.000Z",
        "updated_at": "2022-07-20T19:42:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-05-15T14:47:33.359Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8813?focusedCommentId=17108367) by Neal Richardson (npr):*\nIf you wanted to explore this, one challenge I see is that pivot_longer and pivot_wider aren't generics, so you can't just make arrow methods for them."
        },
        {
            "created_at": "2020-05-15T16:04:10.663Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8813?focusedCommentId=17108422) by Dominic Dennenmoser (domiden):*\nThanks for refering to that. I've just looked for issues or pull-requests mention anything in that direction. Fortunately, a generic version of `pivot_[longer|wider]()` will be available in the upcoming version of `tidyr`, and is already implemented into the development version ([#800](https://github.com/tidyverse/tidyr/issues/800))."
        },
        {
            "created_at": "2022-07-20T19:31:54.494Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8813?focusedCommentId=17569154) by Nigel McKernan (nmck160):*\nThe issue `[~domiden]` references was committed into `tidyr`\u00a0 1.1.0 back in May of 2020, as you can see [here](https://github.com/tidyverse/tidyr/releases#:~:text=pivot_longer()%20and%20pivot_wider()%20are%20now%20generic%20so%20implementations%0Acan%20be%20provided%20for%20objects%20other%20than%20data%20frames), more than 2 years ago.\r\n\r\n\u00a0\r\n\r\nWould it be possible now to incorporate some `tidyr` methods that have been converted to generics into `{}arrow{`}?\r\n\r\nEDIT: As well, the `nest()` generic is now [lazily-evaluated](https://github.com/tidyverse/tidyr/releases#:~:text=The%20nest()%20generic%20now%20avoids%20computing%20on%20.data%2C%20making%20it%20more%0Acompatible%20with%20lazy%20tibbles), making it easier to do remote operations, as of the `tidyr` 1.2.0 release earlier this year."
        }
    ]
}