{
    "issue": {
        "title": "[Format] Add metadata for single and double precision complex numbers",
        "body": "***Note**: This issue was originally created as [ARROW-638](https://issues.apache.org/jira/browse/ARROW-638). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nNumerical computing libraries like NumPy and TensorFlow feature complex64 and complex128 numbers",
        "created_at": "2017-03-16T03:24:58.000Z",
        "updated_at": "2022-01-26T08:42:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2017-03-16T16:41:57.225Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-638?focusedCommentId=15928404) by Julien Le Dem (julienledem):*\n\nI see several possibilities:\n - first class complex types: but we have to curate types so that we don't create too many of them.\n - have two float columns: but I guess we want the two values next to each other\n - have one float column where odd and even indices are the components of the complex value: which I guess would be the same binary representation as an array of numpy.complex values\n - embed floats in a fixed_width_byte_array: we lose meaning in the metadata but also allows a zero copy import of a numpy array.\n - define a generic row/struct/compound type which is a fixed width representation of several values: Basically the same binary representation as the previous one but associating metadata to it."
        },
        {
            "created_at": "2017-03-16T18:41:55.175Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-638?focusedCommentId=15928617) by Wes McKinney (wesm):*\nAs a practical matter, complex64 and complex128 probably need to be compatible with `std::complex`, which is implemented as a C struct with the values next to each other in memory \u2013 this is used in TensorFlow for example:\n\nhttps://github.com/tensorflow/tensorflow/blob/6dfa434252b1cc3f6c523edc329853b3e8e4911c/tensorflow/core/framework/numeric_types.h#L33\n\nin C++, this boils down to\n\n```Java\n  template<typename _Tp>\n    struct complex\n    {\n\n<SNIP>\n\n    private:\n      _Tp _M_real;\n      _Tp _M_imag;\n    };\n```"
        },
        {
            "created_at": "2019-08-21T16:16:29.225Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-638?focusedCommentId=16912456) by Wes McKinney (wesm):*\nThis might be simpler to handle as an ExtensionType in C++ to start"
        }
    ]
}