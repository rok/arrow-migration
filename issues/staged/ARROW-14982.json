{
    "issue": {
        "title": "[C++][Python] Create utils for deep-copying an Array/ ArrayData",
        "body": "***Note**: This issue was originally created as [ARROW-14982](https://issues.apache.org/jira/browse/ARROW-14982). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHi, I would like to request a util to deep copy an Array with the following semantic.\u00a0\r\n\r\n\u00a0\r\n```java\n\r\nResult<shared_ptr<ArrayData>> DeepCopyArrayData(const ArrayData& arr, int64 offset = 0, int64 length = -1/*, pool=...*/);\r\n```\r\n\u00a0\r\n\r\nThis was discussed some time back in Zulip [1].\u00a0\r\n\r\n\u00a0\r\n\r\n[1] <https://ursalabs.zulipchat.com/#narrow/stream/180245-dev/topic/create.20a.20deep.20copy.20of.20buffers>",
        "created_at": "2021-12-03T22:28:18.000Z",
        "updated_at": "2021-12-06T16:41:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-12-04T00:40:59.950Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14982?focusedCommentId=17453258) by David Li (lidavidm):*\nWe could perhaps wrap Concatenate in a kernel and name it deep_copy. (I think Concatenate on a single array suffices to copy the data.)"
        },
        {
            "created_at": "2021-12-06T10:50:48.622Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14982?focusedCommentId=17453938) by Antoine Pitrou (apitrou):*\n> with the following semantic\r\n\r\nWhich semantic exactly? I don't see a description of the expected behaviour here.\r\n\r\nNote that several different things were discussed in Zulip. The last one was \"copy only sliced buffers\"..."
        },
        {
            "created_at": "2021-12-06T14:30:36.118Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14982?focusedCommentId=17454046) by Niranda Perera (niranda):*\n`[~apitrou]` \u00a0 I thought the method signature was self-explanatory. :D Requirement is to deep copy an array from an offset (default, 0) to a length (default, length - offset). Yes, the zulip chat was about buffer offsets, but the main requirement was to deep copy arrays ultimately.\r\n\r\n\u00a0\r\n\r\n`[~lidavidm]` I am not entirely sure if we could use Concatenate (in general sense). May be, current concatenation does a deep copy even when we pass a single array vector. But, I think we could check offset=0 and return the input array (no copy) without violating the \"concat\" semantic IMO. \r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-12-06T14:43:26.819Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14982?focusedCommentId=17454054) by Antoine Pitrou (apitrou):*\nCan you explain why you have this requirement, though? I'm not saying we shouldn't add this, but I 'm a bit skeptical..."
        },
        {
            "created_at": "2021-12-06T15:14:32.007Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14982?focusedCommentId=17454071) by Niranda Perera (niranda):*\nWell, its quite similar to ARROW-10739. I want to slice an array and I want the result to be independent of the parent (deep-copy slice, than a zero-copy slice). Nevertheless\u00a0 I think deep-copy would be a useful utility, just like concat, etc."
        },
        {
            "created_at": "2021-12-06T15:24:57.927Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14982?focusedCommentId=17454075) by Antoine Pitrou (apitrou):*\nWell, ARROW-10739 only complains about sliced buffers. So I'm not sure I understand the requirement for a complete deep-copy."
        },
        {
            "created_at": "2021-12-06T16:16:57.202Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14982?focusedCommentId=17454112) by Niranda Perera (niranda):*\nIn Cylon, we do some buffer-level in-place operations. And for those we need a deep-copy. IMO, with or without offset, the dev effort would be the same for deep-copy isn't it?\r\n\r\nAnyways, say we have this.\r\n```java\n\r\ndef deep_copy(pa.Array: arr, int offset = 0, int length = None) -> pa.Array:\r\n```\r\nSo, following cases would be equivalent.\u00a0\r\n```java\n\r\na = pa.Array(...)\r\n\r\n# case 1 \r\nc1 = deep_copy(a, offset=10)\r\n\r\n# case 2 \r\nb = a.slice(10)\r\n...\r\nc2 = deep_copy(b)  # Deep copy, sees this as an array to be copied from 0 --> b.length(), but internally b has an offset from slicing \r\n\r\nassert(c1.data.offset = 0) # I'm not sure if ArrayData is exposed here\r\nassert(c2.data.offset = 0) # I'm not sure if ArrayData is exposed here\r\nassert(c1 == c2) \r\n```"
        },
        {
            "created_at": "2021-12-06T16:41:36.045Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14982?focusedCommentId=17454127) by Antoine Pitrou (apitrou):*\nWell, you can have some sliced buffers and others unsliced, for example in a struct array. And you may not always know upfront if some buffers have been sliced...\r\n\r\nThat said, let's add this and we can improve it later (for example make it more flexible).\r\n"
        }
    ]
}