{
    "issue": {
        "title": "build python lib failed on both X86 and ARMv8",
        "body": "***Note**: This issue was originally created as [ARROW-17265](https://issues.apache.org/jira/browse/ARROW-17265). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI want to build pyarrow lib in ARM platform. I download pyarrow source code version 8.0.0 and run \"python setup.py install\". An error occur:\r\n\r\nUsing ld linker\r\nConfigured for RELEASE build (set with cmake ~~DCMAKE_BUILD_TYPE=\\{release,debug,...})\r\n-~~ Build Type: RELEASE\r\n\u2013 Generator: Unix Makefiles\r\n\u2013 Build output directory: /root/build/pyarrow-8.0.0/build/temp.linux-x86_64-3.6/release\r\n\u2013 Found Python3: /root/anaconda3/envs/py36test/bin/python (found version \"3.6.13\") found components: Interpreter Development.Module NumPy\u00a0\r\n\u2013 Found Python3Alt: /root/anaconda3/envs/py36test/bin/python \u00a0\r\n\u2013 Found PkgConfig: /usr/bin/pkg-config (found version \"0.27.1\")\u00a0\r\n\u2013 Could NOT find Arrow (missing: Arrow_DIR)\r\n\u2013 Checking for module 'arrow'\r\n\u2013 \u00a0 No package 'arrow' found\r\nCMake Error at /usr/local/share/cmake-3.23/Modules/FindPackageHandleStandardArgs.cmake:230 (message):\r\n\u00a0 Could NOT find Arrow (missing: ARROW_INCLUDE_DIR ARROW_LIB_DIR\r\n\u00a0 ARROW_FULL_SO_VERSION ARROW_SO_VERSION)\r\nCall Stack (most recent call first):\r\n\u00a0 /usr/local/share/cmake-3.23/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE)\r\n\u00a0 cmake_modules/FindArrow.cmake:450 (find_package_handle_standard_args)\r\n\u00a0 cmake_modules/FindArrowPython.cmake:46 (find_package)\r\n\u00a0 CMakeLists.txt:231 (find_package)\r\n\r\n\r\n\u2013 Configuring incomplete, errors occurred!\r\n\r\n\u00a0\r\n\r\nThis error always occur no matter what version I choose(pyarrow 8.0.0 or 2.0.0) and no matter what platform (X86 or ARM c complier) I choose. When I downloaded arrow source code and enter python folder and run \"python setup.py install\" the same error occur.\r\n\r\nIt seems that it's an bug on cmake files. I could not build python lib for my ARM plarform.",
        "created_at": "2022-07-30T09:32:38.000Z",
        "updated_at": "2022-08-15T09:35:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-30T11:57:31.335Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17573252) by Rok Mihevc (rokm):*\nDid you build the C++ library too?\r\n\r\nBuild instructions are here: https://arrow.apache.org/docs/developers/python.html#build-and-test"
        },
        {
            "created_at": "2022-07-31T07:50:13.121Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17573356) by chendan (atptour2017):*\n`[~rokm]` I followed this step. However when I perform cmake it was still failed:\r\n\r\nAnd I attach the log files.\r\n\r\n[CMakeError.log](CMakeError.log)\r\n\r\nCMake Warning at cmake_modules/FindSnappyAlt.cmake:25 (find_package):\r\n\u00a0 By not providing \"FindSnappy.cmake\" in CMAKE_MODULE_PATH this project has\r\n\u00a0 asked CMake to find a package configuration file provided by \"Snappy\", but\r\n\u00a0 CMake did not find one.\r\n\r\n\u00a0 Could not find a package configuration file provided by \"Snappy\" with any\r\n\u00a0 of the following names:\r\n\r\n\u00a0 \u00a0 SnappyConfig.cmake\r\n\u00a0 \u00a0 snappy-config.cmake\r\n\r\n\u00a0 Add the installation prefix of \"Snappy\" to CMAKE_PREFIX_PATH or set\r\n\u00a0 \"Snappy_DIR\" to a directory containing one of the above files. \u00a0If \"Snappy\"\r\n\u00a0 provides a separate development package or SDK, be sure it has been\r\n\u00a0 installed.\r\nCall Stack (most recent call first):\r\n\u00a0 cmake_modules/ThirdpartyToolchain.cmake:267 (find_package)\r\n\u00a0 cmake_modules/ThirdpartyToolchain.cmake:1136 (resolve_dependency)\r\n\u00a0 CMakeLists.txt:575 (include)\r\n\r\n\r\nCMake Error at /usr/local/share/cmake-3.23/Modules/FindPackageHandleStandardArgs.cmake:230 (message):\r\n\u00a0 Could NOT find SnappyAlt (missing: Snappy_LIB Snappy_INCLUDE_DIR)\r\nCall Stack (most recent call first):\r\n\u00a0 /usr/local/share/cmake-3.23/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE)\r\n\u00a0 cmake_modules/FindSnappyAlt.cmake:89 (find_package_handle_standard_args)\r\n\u00a0 cmake_modules/ThirdpartyToolchain.cmake:267 (find_package)\r\n\u00a0 cmake_modules/ThirdpartyToolchain.cmake:1136 (resolve_dependency)\r\n\u00a0 CMakeLists.txt:575 (include)\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-07-31T10:30:09.033Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17573380) by Rok Mihevc (rokm):*\nIt looks like you're missing Snappy.\r\n\r\nDid you install dependencies?\r\n<https://arrow.apache.org/docs/developers/python.html#using-conda> if you're using conda or\r\n<https://arrow.apache.org/docs/developers/python.html#using-system-and-bundled-dependencies> if you're using Homebrew."
        },
        {
            "created_at": "2022-08-01T06:13:58.951Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17573564) by chendan (atptour2017):*\n`[~rokm]` \u00a0\r\n\r\nThanks! I did cmake command successfully in X86 platform. Then I did compiling with ARMv8 c compiler. After I set the c compiler and cxx compiler to be my own arm complier and did cmake,\u00a0 an error occured:\r\n\r\nError: unknown architecture `nocona'\r\n\r\nI know that the CMAKE_C_FLAGS and CMAKE_CXX_FLAGS should be set in cmake command. When I set it, the cmake is succuessful with armv8 cross compier.\r\n\r\nThen I run \"make -j4\". It was failed:\r\n\r\n(pyarrow-dev) [root@localhost build]# make -j4\r\n[ \u00a00%] Built target toolchain\r\n[ \u00a00%] Performing configure step for 'jemalloc_ep'\r\n[ \u00a04%] Built target arrow_dataset_objlib\r\nCMake Error at /root/build/arrow/cpp/build/jemalloc_ep-prefix/src/jemalloc_ep-stamp/jemalloc_ep-configure-DEBUG.cmake:37 (message):\r\n\u00a0 Command failed: 77\r\n\r\n\u00a0 \u00a0'./configure' 'AR=/opt/aarch64-kedacom-linux/bin/aarch64-kedacom-linux-gnu-ar' 'CC=/opt/aarch64-kedacom-linux/bin/aarch64-kedacom-linux-gnu-gcc' '~~{~~}prefix=/root/build/arrow/cpp/build/jemalloc_ep-prefix/src/jemalloc_ep/dist/' '{~~}{~~}with-jemalloc-prefix=je_arrow_' '{~~}{~~}with-private-namespace=je_arrow_private_' '{~~}{~~}without-export' '{~~}{~~}disable-shared' '{~~}{~~}disable-cxx' '{~~}{~~}disable-libdl' '{-}-disable-initial-exec-tls'\r\n\r\n\u00a0 See also\r\n\r\n\u00a0 \u00a0 /root/build/arrow/cpp/build/jemalloc_ep-prefix/src/jemalloc_ep-stamp/jemalloc_ep-configure-\\*.log\r\n\r\n\u2013 stdout output is:\r\nchecking for xsltproc... /usr/bin/xsltproc\r\n1\r\nchecking for x86_64-conda-linux-gnu-gcc... 2\r\n/opt/aarch64-kedacom-linux/bin/aarch64-kedacom-linux-gnu-gcc\r\nwrite conftest\r\nchecking whether the C compiler works... no\r\n\r\n\u2013 stderr output is:\r\nconfigure: error: in `/root/build/arrow/cpp/build/jemalloc_ep-prefix/src/jemalloc_ep':\r\nconfigure: error: C compiler cannot create executables\r\nSee `config.log' for more details\r\n\r\nCMake Error at /root/build/arrow/cpp/build/jemalloc_ep-prefix/src/jemalloc_ep-stamp/jemalloc_ep-configure-DEBUG.cmake:47 (message):\r\n\u00a0 Stopping after outputting logs.\r\n\r\nmake[2]: \\*\\*\\* [CMakeFiles/jemalloc_ep.dir/build.make:92: jemalloc_ep-prefix/src/jemalloc_ep-stamp/jemalloc_ep-configure] Error 1\r\nmake[1]: \\*\\*\\* [CMakeFiles/Makefile2:725: CMakeFiles/jemalloc_ep.dir/all] Error 2\r\nmake: \\*\\*\\* [Makefile:146: all] Error 2\r\n\r\nCan I just set -DARROW_JEMALLOC=OFF to not compile jemalloc? If I do not compile it, will it affect the building of pyarrow libs?\r\n\r\nI checked the configure file, the checking command is : $CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5. There should be some error in these variable. I add \"echo\" into the configure file. The CC is right. The CFLAGS is wrong:\r\n\r\n-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /root/anaconda3/envs/pyarrow-dev/include\r\n\r\nThe \"-march=nocona -mtune=haswell \" is wrong again for my arm cross compiler. How to set it correctly for the whole \"make -j4\" command? What kind of config parameters should be set?\r\n\r\nThanks!"
        },
        {
            "created_at": "2022-08-03T14:36:29.094Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17574751) by Rok Mihevc (rokm):*\n`[~atptour2017]` I've never transpiled Arrow so I can't really speak to it.\r\n\r\nTo be clear - you're on CentOS 7.9 and x86_64? I'm not sure about compatibility with arm64. `[~yibocai]` would know more.\r\n\r\nAs for jemalloc - if it's not available for your platform you can try with mimalloc, see available cmake options here: <https://arrow.apache.org/docs/developers/cpp/building.html#optional-components>\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-08-04T06:41:28.700Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17575053) by chendan (atptour2017):*\n`[~rokm]` \u00a0\r\n\r\nThis problem has been solved with exporting CFLAGS. However I have another question. Can I set\u00a0-DARROW_WITH_SNAPPY=OFF? In <https://arrow.apache.org/docs/developers/python.html#using-conda> it's ON. As the snappy shared lib is needed for linking but I found out that this lib is very difficult to build."
        },
        {
            "created_at": "2022-08-04T13:02:50.111Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17575255) by Rok Mihevc (rokm):*\n`[~atptour2017]` I'm not sure if Python build requires Snappy, if yes then you'll need it.\r\n\r\nWhat error are you getting now? Another option is to try a bundled build, see here: https://arrow.apache.org/docs/developers/cpp/building.html#build-dependency-management"
        },
        {
            "created_at": "2022-08-05T08:20:45.807Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17575637) by Rok Mihevc (rokm):*\n`[~atptour2017]`\r\nIt seems like a boost issue. If I understand correctly you're [using conda](https://arrow.apache.org/docs/developers/python.html#using-conda). Did you `conda activate pyarrow-dev` and `export ARROW_HOME=$CONDA_PREFIX`?"
        },
        {
            "created_at": "2022-08-15T09:34:32.641Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17265?focusedCommentId=17579610) by chendan (atptour2017):*\n`[~rokm]` \u00a0\r\n\r\nI run make -j4 in cpp/build. I found that some libs were built out:\r\n\r\nlibarrow.a \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 libarrow_python.a \u00a0 libarrow_python.so.200 \u00a0 \u00a0 \u00a0libarrow.so \u00a0 \u00a0 \u00a0libarrow.so.200.0.0\r\nlibarrow_bundled_dependencies.a \u00a0libarrow_python.so \u00a0libarrow_python.so.200.0.0 \u00a0libarrow.so.200 \u00a0libparquet.a\r\n\r\nHowever make command was not finished successfully:\r\n\r\n/opt/aarch64-kedacom-linux/lib/gcc/aarch64-kedacom-linux-gnu/8.3.0/../../../../aarch64-kedacom-linux-gnu/bin/ld: /root/anaconda3/envs/pyarrow-dev/lib/libthrift.so: error adding symbols: file in wrong format\r\n\r\nThis is because the libthrift.so has not been built out by my ARM cross-complier. Are the libs list upon enough for building python libs? If they are enough, I do not need to build thrift.\r\n\r\n\u00a0\r\n\r\nI have tried it. An error occured:\r\n\r\n(pyarrow-dev) [root@localhost python]# python setup.py install\r\nTraceback (most recent call last):\r\n\u00a0 File \"setup.py\", line 634, in <module>\r\n\u00a0 \u00a0 url='https://arrow.apache.org/'\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/site-packages/setuptools/_{_}init{_}_.py\", line 153, in setup\r\n\u00a0 \u00a0 return distutils.core.setup(\\*\\*attrs)\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/distutils/core.py\", line 108, in setup\r\n\u00a0 \u00a0 _setup_distribution = dist = klass(attrs)\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/site-packages/setuptools/dist.py\", line 457, in _{_}init{_}_\r\n\u00a0 \u00a0 for k, v in attrs.items()\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/distutils/dist.py\", line 281, in _{_}init{_}_\r\n\u00a0 \u00a0 self.finalize_options()\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/site-packages/setuptools/dist.py\", line 830, in finalize_options\r\n\u00a0 \u00a0 for ep in sorted(loaded, key=by_order):\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/site-packages/setuptools/dist.py\", line 829, in <lambda>\r\n\u00a0 \u00a0 loaded = map(lambda e: e.load(), filtered)\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/site-packages/pkg_resources/_{_}init{_}_.py\", line 2450, in load\r\n\u00a0 \u00a0 return self.resolve()\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/site-packages/pkg_resources/_{_}init{_}_.py\", line 2456, in resolve\r\n\u00a0 \u00a0 module = _{_}import{_}_(self.module_name, fromlist=['__name__'], level=0)\r\n\u00a0 File \"/root/anaconda3/envs/pyarrow-dev/lib/python3.6/site-packages/setuptools_scm/_{_}init{_}_.py\", line 5\r\n\u00a0 \u00a0 from _{_}future{_}_ import annotations\r\n\u00a0 \u00a0 ^\r\nSyntaxError: future feature annotations is not defined\r\n\r\n\u00a0\r\n\r\nI google it. It seems that I need to use python3.7 version to run setup.py. But I need to use python3.6. How to solve it?\r\n\r\n\u00a0\r\n\r\n\u00a0"
        }
    ]
}