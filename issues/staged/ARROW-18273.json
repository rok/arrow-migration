{
    "issue": {
        "title": "[Python] For extension types, compute kernels should default to storage types?",
        "body": "***Note**: This issue was originally created as [ARROW-18273](https://issues.apache.org/jira/browse/ARROW-18273). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, compute kernels don't recognize extensions types so that if you were to define semantic types to indicate things like \"this string column is an image label\", you then cannot do things like equals on it.\r\n\r\nFor example, take the LabelType from <https://github.com/apache/arrow/blob/c3824db8530075e0f8fd26974c193a310003c17a/python/pyarrow/tests/test_extension_type.py>\r\n\r\n```python\n\r\nIn [1]: import pyarrow as pa\r\n\r\nIn [2]: import pyarrow.compute as pc\r\n\r\nIn [3]: class LabelType(pa.PyExtensionType):\r\n...:\r\n...:     def __init__(self):\r\n...:         pa.PyExtensionType.__init__(self, pa.string())\r\n...:\r\n...:     def __reduce__(self):\r\n...:         return LabelType, ()\r\n...:\r\n\r\nIn [4]: tbl = pa.Table.from_arrays([pa.ExtensionArray.from_storage(LabelType(), pa.array(['cat', 'dog', 'person']))], names=['label'])\r\n\r\nIn [5]: tbl.filter(pc.field('label') == 'cat')\r\n---------------------------------------------------------------------------\r\nArrowNotImplementedError Traceback (most recent call last)\r\nCell In [5], line 1\r\n----> 1 tbl.filter(pc.field('label') == 'cat')\r\n\r\nFile ~/.venv/lance/lib/python3.10/site-packages/pyarrow/table.pxi:2953, in pyarrow.lib.Table.filter()\r\n\r\nFile ~/.venv/lance/lib/python3.10/site-packages/pyarrow/_exec_plan.pyx:391, in pyarrow._exec_plan._filter_table()\r\n\r\nFile ~/.venv/lance/lib/python3.10/site-packages/pyarrow/_exec_plan.pyx:128, in pyarrow._exec_plan.execplan()\r\n\r\nFile ~/.venv/lance/lib/python3.10/site-packages/pyarrow/error.pxi:144, in pyarrow.lib.pyarrow_internal_check_status()\r\n\r\nFile ~/.venv/lance/lib/python3.10/site-packages/pyarrow/error.pxi:121, in pyarrow.lib.check_status()\r\n\r\nArrowNotImplementedError: Function 'equal' has no kernel matching input types (extension<arrow.py_extension_type<LabelType>>, string)\r\n```\r\n\r\nfor query systems that push some of the compute down to Arrow (e.g., DuckDB), it also means that it's much harder for users to work with datasets with extension types because you don't know which functions will actually work.\r\n\r\nInstead, if we can make the compute kernels default to the storage type, it would make the extension system a lot easier to work with in Arrow.",
        "created_at": "2022-11-07T20:25:29.000Z",
        "updated_at": "2022-11-14T10:34:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-11-14T10:33:58.571Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18273?focusedCommentId=17633667) by Miles Granger (milesgranger):*\nI think this makes good sense, although I'm not sure about the implementation details of it. I think many (all?) kernels specify their allowed input types before runtime, but perhaps there is a way match based on storage type as well?\r\ncc `[~jorisvandenbossche]`"
        }
    ]
}