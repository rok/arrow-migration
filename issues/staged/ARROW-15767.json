{
    "issue": {
        "title": "[Python] Arrow Table with DenseUnion fails to convert to Python Pandas DataFrame",
        "body": "***Note**: This issue was originally created as [ARROW-15767](https://issues.apache.org/jira/browse/ARROW-15767). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA feather file containing column of nullable values errors when converting to a Pandas DataFrame. It can be read into a pyarrow.Table as follows:\r\n```python\n\r\nIn [1]: import pyarrow.feather as feather\r\n\r\nIn [2]: t = feather.read_table(\"nothing.arrow\")\r\n\r\nIn [3]: t\r\nOut[3]:\r\npyarrow.Table\r\ncol: dense_union<: null=0, : int32 not null=1>\r\n  child 0, : null\r\n  child 1, : int32 not null\r\n----\r\ncol: [  -- is_valid: all not null  -- type_ids:     [\r\n      1,\r\n      1,\r\n      1,\r\n      0\r\n    ]  -- value_offsets:     [\r\n      0,\r\n      1,\r\n      2,\r\n      0\r\n    ]  -- child 0 type: null\r\n1 nulls  -- child 1 type: int32\r\n    [\r\n      1,\r\n      2,\r\n      3\r\n    ]]\r\n```\r\nBut when\u00a0trying to convert the pyarrow.Table into a Pandas DataFrame, I get the following error:\r\n```python\n\r\nIn [4]: t.to_pandas()\r\n---------------------------------------------------------------------------\r\nArrowNotImplementedError                  Traceback (most recent call last)\r\n<ipython-input-25-8ba84762c39a> in <module>\r\n----> 1 t.to_pandas()\r\n\r\n~/miniconda3/lib/python3.9/site-packages/pyarrow/array.pxi in pyarrow.lib._PandasConvertible.to_pandas()\r\n\r\n~/miniconda3/lib/python3.9/site-packages/pyarrow/table.pxi in pyarrow.lib.Table._to_pandas()\r\n\r\n~/miniconda3/lib/python3.9/site-packages/pyarrow/pandas_compat.py in table_to_blockmanager(options, table, categories, ignore_metadata, types_mapper)\r\n    787     _check_data_column_metadata_consistency(all_columns)\r\n    788     columns = _deserialize_column_index(table, all_columns, column_indexes)\r\n--> 789     blocks = _table_to_blocks(options, table, categories, ext_columns_dtypes)\r\n    790\r\n    791     axes = [columns, index]\r\n\r\n~/miniconda3/lib/python3.9/site-packages/pyarrow/pandas_compat.py in _table_to_blocks(options, block_table, categories, extension_columns)\r\n   1126     # Convert an arrow table to Block from the internal pandas API\r\n   1127     columns = block_table.column_names\r\n-> 1128     result = pa.lib.table_to_blocks(options, block_table, categories,\r\n   1129                                     list(extension_columns.keys()))\r\n   1130     return [_reconstruct_block(item, columns, extension_columns)\r\n\r\n~/miniconda3/lib/python3.9/site-packages/pyarrow/table.pxi in pyarrow.lib.table_to_blocks()\r\n\r\n~/miniconda3/lib/python3.9/site-packages/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowNotImplementedError: No known equivalent Pandas block for Arrow data of type dense_union<: null=0, : int32 not null=1> is known.\r\n```\r\nNote the Arrow file is valid and can be read successfully by [Arrow.jl](https://github.com/apache/arrow-julia). A related issue is [arrow-julia#285](https://github.com/apache/arrow-julia/issues/285).  The  [nothing.arrow](nothing.arrow)  file used in this example is attached for convenience.",
        "created_at": "2022-02-23T16:25:24.000Z",
        "updated_at": "2022-02-24T14:27:21.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-02-24T14:26:58.183Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15767?focusedCommentId=17497425) by Joris Van den Bossche (jorisvandenbossche):*\nThere is nothing wrong with your file (it is indeed valid, as it can also be read by pyarrow into a pyarrow.Table), but as the error type indicates: this conversion is just not yet implemented. \r\n\r\nSpecifically for the union types, there are not yet much utilities implemented for interacting with this kind of data on the Python (numpy, pandas) <-> Arrow interaction layer. For example, also converting a python structure to a union array is not yet implemented (for this I found ARROW-2774). For the missing conversion to Python, I didn't directly find an issue.\r\n\r\nFor conversion to Python, only a conversion to a plain python list is supported:\r\n\r\n```Java\n\r\n>>> t[\"col\"].to_pylist()\r\n[1, 2, 3, None]\r\n```\r\n\r\nIn general, we could convert an arrow union type to an object dtype array in numpy/pandas, but that might also not always be very useful."
        }
    ]
}