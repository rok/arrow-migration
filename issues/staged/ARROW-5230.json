{
    "issue": {
        "title": "[Java] Read Struct Vector from ArrowStreamReader bugs",
        "body": "***Note**: This issue was originally created as [ARROW-5230](https://issues.apache.org/jira/browse/ARROW-5230). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAfter writing struct vector using\u00a0ArrowStreamWriter to a file,\u00a0read it back\u00a0using\u00a0ArrowStreamReader throws exception:\r\n> Exception in thread \"main\" java.lang.IllegalArgumentException: not all nodes and buffers were consumed. nodes: [ArrowFieldNode [length=100, nullCount=0], ArrowFieldNode [length=100, nullCount=0]] buffers: [ArrowBuf[26], udle: [11 16..29], ArrowBuf[27], udle: [11 32..432], ArrowBuf[28], udle: [11 432..445], ArrowBuf[29], udle: [11 448..848]]\n> at org.apache.arrow.vector.VectorLoader.load(VectorLoader.java:64)\n> at org.apache.arrow.vector.ipc.ArrowReader.loadRecordBatch(ArrowReader.java:219)\n> at org.apache.arrow.vector.ipc.ArrowStreamReader.loadNextBatch(ArrowStreamReader.java:121)\r\nHere's the code to reproduce this exception:\r\n```java\n\r\nimport org.apache.arrow.memory.RootAllocator;\r\nimport org.apache.arrow.vector.FieldVector;\r\nimport org.apache.arrow.vector.IntVector;\r\nimport org.apache.arrow.vector.VectorSchemaRoot;\r\nimport org.apache.arrow.vector.complex.StructVector;\r\nimport org.apache.arrow.vector.dictionary.DictionaryProvider;\r\nimport org.apache.arrow.vector.ipc.ArrowStreamReader;\r\nimport org.apache.arrow.vector.ipc.ArrowStreamWriter;\r\nimport org.apache.arrow.vector.types.pojo.ArrowType;\r\nimport org.apache.arrow.vector.types.pojo.Field;\r\nimport org.apache.arrow.vector.types.pojo.FieldType;\r\nimport org.apache.arrow.vector.types.pojo.Schema;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.concurrent.ThreadLocalRandom;\r\n\r\npublic class StructTest {\r\n\r\n    public static void writeBatch(OutputStream os) throws IOException {\r\n        List<Field> fields = Collections.singletonList(new Field(\"f-Struct(Int, Int)\", FieldType.nullable(ArrowType.Struct.INSTANCE), null));\r\n        Schema schema = new Schema(fields);\r\n        VectorSchemaRoot root = VectorSchemaRoot.create(schema, new RootAllocator(Integer.MAX_VALUE));\r\n        DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\r\n        ArrowStreamWriter writer = new ArrowStreamWriter(root, provider, os);\r\n        writer.start();\r\n        for (int i = 0; i < 2; i++) {\r\n            root.setRowCount(100);\r\n            List<FieldVector> vectors = root.getFieldVectors();\r\n            StructVector vector = (StructVector) vectors.get(0);\r\n            fillVector(vector, 100);\r\n            for (int j = 0; j < 100; j++) {\r\n                if (!vector.isNull(j)) {\r\n                    System.out.println(vector.getObject(j));\r\n                }\r\n            }\r\n            writer.writeBatch();\r\n        }\r\n        writer.end();\r\n        writer.close();\r\n    }\r\n\r\n    public static void fillVector(StructVector vector, int batchSize) {\r\n        vector.setInitialCapacity(batchSize);\r\n        vector.allocateNew();\r\n        vector.addOrGet(\"s1\", FieldType.nullable(new ArrowType.Int(32, true)), IntVector.class);\r\n        vector.addOrGet(\"s2\", FieldType.nullable(new ArrowType.Int(32, true)), IntVector.class);\r\n        fillVector((IntVector)(vector.getChild(\"s1\")), batchSize);\r\n        fillVector((IntVector) (vector.getChild(\"s2\")), batchSize);\r\n        for (int i = 0; i < batchSize; i++) {\r\n            vector.setIndexDefined(i);\r\n        }\r\n        vector.setValueCount(batchSize);\r\n    }\r\n\r\n    public static void fillVector(IntVector vector, int batchSize) {\r\n        vector.setInitialCapacity(batchSize);\r\n        vector.allocateNew();\r\n        for (int i = 0; i < batchSize; i++) {\r\n            vector.setSafe(i, 1, ThreadLocalRandom.current().nextInt());\r\n        }\r\n        vector.setValueCount(batchSize);\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        try (FileOutputStream fos = new FileOutputStream(\"result/struct.arrow\")) {\r\n            writeBatch(fos);\r\n            System.out.println(\"write succeed\");\r\n            fos.flush();\r\n        }\r\n\r\n        RootAllocator allocator = new RootAllocator(1000000000);\r\n\r\n        ByteArrayInputStream in = new ByteArrayInputStream(Files.readAllBytes(Paths.get(\"result/struct.arrow\")));\r\n\r\n        ArrowStreamReader reader = new ArrowStreamReader(in, allocator);\r\n\r\n        reader.loadNextBatch();\r\n\r\n    }\r\n}\r\n```\r\nEven arrow java write union data seems succeed,\u00a0 python\u00a0read nothing:\r\n\r\n\u00a0\r\n```java\n\r\ndef read_batch(path, number=100):\r\n    with open(path, 'rb') as f:\r\n        data = f.read()\r\n        print(\"size: \", len(data))\r\n        batches = list(pyarrow.ipc.open_stream(data))\r\n        print(batches)\r\n        print(batches[0].schema)\r\n        print(batches[0].slice(0, 8).to_pydict())\r\n        return\r\n\r\nif __name__ == \"__main__\":\r\n    read_batch('../result/struct.arrow')\r\n```\r\nThe result is:\u00a0\r\n\r\n\u00a0 \u00a0 OrderedDict([('f-Struct(Int, Int)', [{}, {}, {}, {}, {}, {}, {}, {}])])\r\n\r\n\u00a0\r\n\r\nIf I make struct record batches in python, java can\u00a0\u00a0read it back:\r\n\r\nWrite data:\r\n```java\n\r\ndef make_struct(path, batch_size=200, num_batch=2):\r\n    obj = get_struct_obj(batch_size)\r\n    batch = pa.RecordBatch.from_arrays([obj], ['fo'])\r\n    writer = pa.RecordBatchStreamWriter(path, batch.schema)\r\n    for _ in range(num_batch):\r\n        writer.write_batch(batch)\r\n    writer.close()\r\n\r\nmake_struct(\"struct.arrow\")\r\n\r\n```\r\nRead back:\r\n```java\n\r\nRootAllocator allocator = new RootAllocator(1000000000);\r\nByteArrayInputStream in = new ByteArrayInputStream(Files.readAllBytes(Paths.get(\"struct.arrow\")));\r\nArrowStreamReader reader = new ArrowStreamReader(in, allocator);\r\nreader.loadNextBatch();\r\n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2019-04-29T05:59:23.000Z",
        "updated_at": "2019-04-29T09:09:16.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-04-29T08:00:03.000Z"
    },
    "comments": [
        {
            "created_at": "2019-04-29T06:02:37.674Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5230?focusedCommentId=16828932) by Liya Fan (fan_li_ya):*\nHi [~Chaokun Yang], this seems like an interesting problem. If you agree, I'd like to take a look."
        },
        {
            "created_at": "2019-04-29T06:23:00.065Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5230?focusedCommentId=16828940) by Shawn Yang (Chaokun Yang):*\nHi Liya,\n    It would be great if you can take a look, I've update it to report\nanother problem.\nRegards\n\n\n"
        },
        {
            "created_at": "2019-04-29T06:48:35.786Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5230?focusedCommentId=16828953) by Liya Fan (fan_li_ya):*\n[~Chaokun Yang]. Thanks a lot :)"
        },
        {
            "created_at": "2019-04-29T07:36:20.907Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5230?focusedCommentId=16828994) by Liya Fan (fan_li_ya):*\nHi [~Chaokun Yang], the problem is that, the last parameter of the Field constructor should be the children fields:\r\n\r\n    List<Field> childList = Arrays.asList(\r\n            new Field(\"s1\", FieldType.nullable(new ArrowType.Int(32, true)), null),\r\n            new Field(\"s2\", FieldType.nullable(new ArrowType.Int(32, true)), null)\r\n    );\r\n\r\n    List<Field> fields = Collections.singletonList(new Field(\"f-Struct(Int, Int)\", FieldType.nullable(ArrowType.Struct.INSTANCE), <font color=\"red\">childList</font>));\r\n\r\nWhen I fixed this, the program runs smoothly."
        },
        {
            "created_at": "2019-04-29T08:01:00.075Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5230?focusedCommentId=16829005) by Shawn Yang (Chaokun Yang):*\nThank you, Liya. After add children fields, it runs successfully, but not\nfor UnionArray. Anyway, this is not a bug, I'll close it\n\n\n"
        },
        {
            "created_at": "2019-04-29T09:09:16.697Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5230?focusedCommentId=16829045) by Liya Fan (fan_li_ya):*\nGood to know. Thanks for your feedback."
        }
    ]
}