{
    "issue": {
        "title": "[Python] Add factory function to create a Table from Columns and Schema.",
        "body": "***Note**: This issue was originally created as [ARROW-2572](https://issues.apache.org/jira/browse/ARROW-2572). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAt the moment it seems to be impossible in Python to add custom metadata to a Table or Column. The closest I've come is to create a list of new Fields (by \"appending\" metadata to existing Fields), and then creating a new Schema from these Fields using the Schema factory function. But I can't see how to create a new table from the existing Columns and my new Schema, which I understand would be the way to do it in C++?\r\n\r\nEssentially,\u00a0wrappers for the Table's Make(...) functions\u00a0seem to be missing.",
        "created_at": "2018-05-11T08:44:51.000Z",
        "updated_at": "2019-08-22T13:34:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-08-22T13:34:23.000Z"
    },
    "comments": [
        {
            "created_at": "2018-05-11T11:44:26.507Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16471776) by Antoine Pitrou (apitrou):*\nActually, `Table.from_arrays` allows you to pass columns (instead of arrays) and an optional schema. Since that's not very discoverable, we may want to add a `Table.from_columns` alias to that method. Also, the `Table.from_arrays` docstring doesn't mention the schema parameter."
        },
        {
            "created_at": "2018-05-11T11:46:06.412Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16471783) by Antoine Pitrou (apitrou):*\nIf you want to try out contributing, this would be a good issue to start and submit a PR for."
        },
        {
            "created_at": "2018-05-11T12:03:27.863Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16471804) by Thomas Buhrmann (buhrmann):*\nAnother (discoverable) workaround was to convert the table to record batches and then use the from_batches function, but yes, the aliases would be much nicer.\u00a0\r\n\r\nPerhaps next week I may try to set up a dev environment and see whether I can contribute. Thanks for the nudge ;)"
        },
        {
            "created_at": "2019-03-30T21:08:28.865Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16805981) by Wes McKinney (wesm):*\nDo you want to try contributing a patch?"
        },
        {
            "created_at": "2019-05-13T14:10:28.424Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16838562) by Antoine Pitrou (apitrou):*\n`[~jorisvandenbossche]`"
        },
        {
            "created_at": "2019-06-18T09:33:19.121Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16866393) by Joris Van den Bossche (jorisvandenbossche):*\nThe `Table.from_arrays` nowadays clearly mentions that it accepts both arrays as columns: https://arrow.apache.org/docs/python/generated/pyarrow.Table.html#pyarrow.Table.from_arrays (and also the schema is now mentioned in the docstring).\r\n\r\nOf course, when looking for a method to create a Table from columns, I agree a `from_columns` is certainly more discoverable. But it might also be API clutter ..\r\n\r\nWould we want to make it an exact alias? Or actually a separate function that is more strict (not allowing a list of arrays)? Because for a list of columns, you would not necessarily need to pass the column names (or schema), as is required in `from_arrays`."
        },
        {
            "created_at": "2019-06-18T14:46:42.018Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16866668) by Wes McKinney (wesm):*\nI don't think we need to add an alias. Perhaps add a section in the documentation if there is not one currently"
        },
        {
            "created_at": "2019-06-24T02:32:39.221Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16870761) by Wes McKinney (wesm):*\nI removed from 0.14.0 milestone but since this is a minor documentation fix please feel free to submit a PR"
        },
        {
            "created_at": "2019-08-21T17:33:52.099Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16912541) by Wes McKinney (wesm):*\nNow that `arrow::Column` is gone it would be good to look at this again"
        },
        {
            "created_at": "2019-08-22T13:33:54.925Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2572?focusedCommentId=16913308) by Joris Van den Bossche (jorisvandenbossche):*\nGiven that Columns no longer exist, I think this can be closed.\r\n\r\nIf you have defined fields (eg to add custom metadata), you can pass them in a schema to create the table:\r\n\r\n```Java\n\r\nfield1 = pa.field('field1', pa.int64(), metadata=dict(a=\"A\", b=\"B\")) \r\nfield2 = pa.field('field2', pa.int64(), nullable=False)\r\n\r\ntable = pa.Table.from_arrays([pa.array([1, 2]), pa.array([3, 4])], schema=pa.schema([field1, field2]))\r\n```\r\n\r\n"
        }
    ]
}