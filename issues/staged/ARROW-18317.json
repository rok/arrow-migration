{
    "issue": {
        "title": "[Go] Problem of dictionary update during a communication via an IPC stream ",
        "body": "***Note**: This issue was originally created as [ARROW-18317](https://issues.apache.org/jira/browse/ARROW-18317). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nDictionaries do not seem to be updated correctly when sending a record on an IPC stream.\u00a0\r\n\r\nThe following example creates a 1st record with a single field named \"field\" and initialized with the value \"value_0. This record is then serialized with an ipc writer and deserialized with an ipc reader.\r\n\r\nA second record is then created with the value \"value_1\". After serialization and deserialization, the expected value for the field is \"value_1\" but I get \"value_0\".\u00a0\r\n\r\nBased on a quick analysis via the debugger, I suspect an error in combining the dictionary from step 1 with the dictionary from step 2. The resulting dictionary contains the concatenation of the two dictionaries (i.e. value_0value_1), but the offsets values used to read the field (of the second record) refer \"value_0\". It may be that the offset arrays are not correctly combined or something like that when the second record is received.\r\n\r\nBelow a code snippet to reproduce the issue.\r\n```java\n\r\n// NOTE: Release methods are not managed in this test for simplicity.\r\nfunc TestDictionary(t *testing.T) {\r\n   pool := memory.NewGoAllocator()\r\n   // A schema with a single dictionary field\r\n   schema := arrow.NewSchema([]arrow.Field{{Name: \"field\", Type: &arrow.DictionaryType{\r\n      IndexType: arrow.PrimitiveTypes.Uint16,\r\n      ValueType: arrow.BinaryTypes.String,\r\n      Ordered:   false,\r\n   }}}, nil)\r\n   // IPC writer and reader\r\n   var bufWriter bytes.Buffer\r\n   ipcWriter := ipc.NewWriter(&bufWriter, ipc.WithSchema(schema))\r\n   bufReader := bytes.NewReader([]byte{})\r\n   var ipcReader *ipc.Reader\r\n\r\n   // Create a first record with field = \"value_0\" \r\n   record := CreateRecord(t, pool, schema, 0)\r\n   expectedJson, err := record.MarshalJSON()\r\n   require.NoError(t, err)\r\n   // Serialize and deserialize the record via an IPC stream\r\n   json, ipcReader, err := EncodeDecodeIpcStream(t, record, &bufWriter, ipcWriter, bufReader, ipcReader)\r\n   require.NoError(t, err)\r\n   // Compare the expected JSON with the actual JSON\r\n   require.JSONEq(t, string(expectedJson), string(json))\r\n\r\n   // Create a second record with field = \"value_1\" \r\n   record = CreateRecord(t, pool, schema, 1)\r\n   expectedJson, err = record.MarshalJSON()\r\n   require.NoError(t, err)\r\n   // Serialize and deserialize the record via an IPC stream\r\n   json, ipcReader, err = EncodeDecodeIpcStream(t, record, &bufWriter, ipcWriter, bufReader, ipcReader)\r\n   require.NoError(t, err)\r\n   // Compare the expected JSON with the actual JSON\r\n   // field = \"value_0\" but should be \"value_1\"\r\n   require.JSONEq(t, string(expectedJson), string(json))\r\n}\r\n\r\n// Create a record with a single field.\r\n// The value of field `field` depends on the value passed in parameter.\r\nfunc CreateRecord(t *testing.T, pool memory.Allocator, schema *arrow.Schema, value int) arrow.Record {\r\n   rb := array.NewRecordBuilder(pool, schema)\r\n   fieldB := rb.Field(0).(*array.BinaryDictionaryBuilder)\r\n   err := fieldB.AppendString(fmt.Sprintf(\"value_%d\", value))\r\n   if err != nil {\r\n      t.Fatal(err)\r\n   }\r\n   return rb.NewRecord()\r\n}\r\n\r\n// Encode and decode a record over a tuple of IPC writer and reader.\r\n// IPC writer and reader are the same from one call to another.\r\nfunc EncodeDecodeIpcStream(t *testing.T,\r\n   record arrow.Record,\r\n   bufWriter *bytes.Buffer, ipcWriter *ipc.Writer,\r\n   bufReader *bytes.Reader, ipcReader *ipc.Reader) ([]byte, *ipc.Reader, error) {\r\n\r\n   // Serialize the record via an ipc writer\r\n   if err := ipcWriter.Write(record); err != nil {\r\n      return nil, ipcReader, err\r\n   }\r\n   serializedRecord := bufWriter.Bytes()\r\n   bufWriter.Reset()\r\n\r\n   // Deserialize the record via an ipc reader\r\n   bufReader.Reset(serializedRecord)\r\n   if ipcReader == nil {\r\n      newIpcReader, err := ipc.NewReader(bufReader)\r\n      if err != nil {\r\n         return nil, newIpcReader, err\r\n      }\r\n      ipcReader = newIpcReader\r\n   }\r\n   ipcReader.Next()\r\n   record = ipcReader.Record()\r\n\r\n   // Return the decoded record as a json string\r\n   json, err := record.MarshalJSON()\r\n   if err != nil {\r\n      return nil, ipcReader, err\r\n   }\r\n   return json, ipcReader, nil\r\n} \n```",
        "created_at": "2022-11-13T17:45:42.000Z",
        "updated_at": "2022-11-15T19:42:59.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Go",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-11-15T15:56:05.000Z"
    },
    "comments": [
        {
            "created_at": "2022-11-14T17:05:02.489Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17633942) by Matthew Topol (zeroshade):*\n`[~lquerel]` Please check the PR and double check that it fixes your situation outside of the test, once you comment on the PR that it's good on your end then I'm happy to merge this and have it included in the v10.0.1 release (since it's still unreleased so I can add this to it)."
        },
        {
            "created_at": "2022-11-14T19:21:34.453Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634012) by Laurent Querel (lquerel):*\n`[~zeroshade]` Thanks. I will check this PR with my code today.\r\n\r\nHowever, I have a question. It seems that the fix is to replace and not merge the dictionaries at the receiver level. What happens if the sender sends data from the 1st dictionary?\r\n\r\nThis also leads me to ask the question of delta dictionaries support. How can we activate it to minimize the number of dictionary transmission?\u00a0"
        },
        {
            "created_at": "2022-11-14T19:51:06.175Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634027) by Laurent Querel (lquerel):*\n`[~zeroshade]` This PR fixes the problem. However I'm interested in better understanding the proper way to use dictionaries in general to minimize their additional cost (see my previous comment).\u00a0"
        },
        {
            "created_at": "2022-11-14T20:43:50.782Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634044) by Matthew Topol (zeroshade):*\nHey `[~lquerel]` \u00a0 It looks like the IPC module currently doesn't expose the option to enable writing dictionary deltas (they should automatically get read correctly if reading from something that is outputting them).\u00a0\r\n\r\nHandling writing dictionary deltas is controlled by the `emitDictDeltas` member of the `ipc.Writer` type. In theory it should be sufficient to just add an `ipc.Option` that sets it to true. Would you be willing to make a PR for that and add a unit test using dictionary deltas? Otherwise I'll add that to my list of tasks to do.\u00a0"
        },
        {
            "created_at": "2022-11-14T22:08:27.544Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634066) by Laurent Querel (lquerel):*\n`[~zeroshade]` I just created this Jira issue and will try to create a PR asap. https://issues.apache.org/jira/browse/ARROW-18326\u00a0"
        },
        {
            "created_at": "2022-11-14T22:18:14.541Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634067) by Laurent Querel (lquerel):*\n`[~zeroshade]` I don't feel like I can create a new branch on this project to create a new PR. \u00a0Could you help me in this process or should I assign you the Jira issue previously created?"
        },
        {
            "created_at": "2022-11-14T22:26:03.674Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634069) by Matthew Topol (zeroshade):*\n`[~lquerel]` \u00a0You have to fork the project, make a new branch on your fork, and then create a PR from that.\r\n\r\nThe general guidelines can be found here: <https://arrow.apache.org/docs/developers/overview.html>\u00a0there's also a link there for the `New Contributor's Guide` which might address any other questions you have.\r\n\r\nIn this case, just fork the `apache/arrow` repo to your own github username and make a branch there. Then make the necessary changes to `go/arrow/ipc/ipc.go` and tests in `go/arrow/ipc/ipc_test.go`. Then you should be able to submit the PR from your branch to push upstream. Please make sure to prefix the title of your PR with `ARROW-18326: [Go]` so it picks up from the JIRA card. You can tag me to review it. Comment back on here if you run into any further issues!"
        },
        {
            "created_at": "2022-11-14T23:45:59.780Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634080) by Laurent Querel (lquerel):*\n`[~zeroshade]` \u00a0\r\n\r\nI created the following draft PR <https://github.com/apache/arrow/pull/14639>\u00a0\r\n\r\nHowever, the test does not work with the dictionary deltas option set to true. I'm not sure if dictionary deltas are properly handled in the existing code.\u00a0\r\n\r\nCould you help me on this?"
        },
        {
            "created_at": "2022-11-15T00:05:29.887Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634088) by Matthew Topol (zeroshade):*\n`[~lquerel]` I'll poke at it in the morning EST and add comments for anything I find."
        },
        {
            "created_at": "2022-11-15T07:59:28.596Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634219) by Kouhei Sutou (kou):*\nShould this be a blocker of 10.0.1?"
        },
        {
            "created_at": "2022-11-15T15:56:05.914Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18317?focusedCommentId=17634417) by Matthew Topol (zeroshade):*\nIssue resolved by pull request 14636\n<https://github.com/apache/arrow/pull/14636>"
        }
    ]
}