{
    "issue": {
        "title": "[Python] parquet Int64 col cast to float64 on load in pandas",
        "body": "***Note**: This issue was originally created as [ARROW-10133](https://issues.apache.org/jira/browse/ARROW-10133). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nUnder certain conditions a saved parquet table with a column that is Int64 and all NA seems to be cast to a float64 with all NaN on load. The desired behavior is to have it stay as Int64. Attached is a table where said issue occurs: the second column here should be a int64 but is being loaded as a float64 in Pandas.\r\n\r\n\u00a0\r\n\r\nInterestingly, it seems to be correctly interpreting the column as a Int64 when loading in R, so perhaps its only a Pandas issue.\r\n\r\n\u00a0\r\nimport pyarrow.parquet as pq\r\nimport boto3\r\nimport pandas as pd\r\nimport io\r\nobj = boto3.client('s3').get_object(Bucket=\"...\", Key='...') # file attached to ticket\r\nx = pq.read_table(io.BytesIO(obj['Body'].read()))\r\ny = x.to_pandas() # this is where the undesired int64 to a float64 cast occurs\r\n\r\n1. >>> x\n1. pyarrow.Table\n1. product_id: string\n1. cost: int64\n1. name: string\n   \n1. >>> y.dtypes\n1. product_id object\n1. cost float64\n1. name object\n1. dtype: object",
        "created_at": "2020-09-29T13:41:50.000Z",
        "updated_at": "2020-10-12T13:33:58.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-10-12T13:33:58.000Z"
    },
    "comments": [
        {
            "created_at": "2020-09-30T09:35:41.317Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10133?focusedCommentId=17204605) by Joris Van den Bossche (jorisvandenbossche):*\n`[~skyetetra]` by default, pandas does currently not support missing values in integer columns. So once you have integers with missing values, those will be casted to floats. See https://pandas.pydata.org/docs/user_guide/missing_data.html for more details.\r\n\r\nSo what you describe is expected behaviour. There is work under way to actually support integers with missing values in pandas: de dtype itself will already exist, and in the upcoming pandas 1.2 release there will also be an option to use those dtypes when reading parquet files (https://github.com/pandas-dev/pandas/pull/31242)"
        },
        {
            "created_at": "2020-10-12T13:33:37.982Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10133?focusedCommentId=17212365) by Joris Van den Bossche (jorisvandenbossche):*\nGoing to close this, as I don't think there is a direct action item for pyarrow."
        }
    ]
}