{
    "issue": {
        "title": "[Rust] [DataFusion] sql_csv example errors when running",
        "body": "***Note**: This issue was originally created as [ARROW-6290](https://issues.apache.org/jira/browse/ARROW-6290). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe current version of\u00a0<https://github.com/apache/arrow/blob/master/rust/datafusion/examples/csv_sql.rs>\u00a0errors when running it.\r\n```java\n\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ExecutionError(\"Cannot compare Float32 with Float64\")', src/libcore/result.rs:1084:5\n```\r\nI believe that this is due to column c11 being declared as DataType::Float32\u00a0while the WHERE clause\u00a0parses the numbers as\u00a0DataType::Float64. Since the comparison_ops only matches when the parsed data types for left and right are the same, this errors out.\r\n\r\nI was able to get this running locally through either of the following two methods:\r\n\r\n(1) by changing the schema for c11 to be a DataType::Float64.\r\n\r\n(2) by forcing a compute::cast in the case that the left data type is different from the right data type in the BinaryExpr (this is likely not the best long-term fix, but it works for this case).\r\n\r\nIt is also possible that this issue could be due to some mistake or incorrect assumption I am making when running it on my end (I am pretty new to the project).\r\n\r\n\u00a0",
        "created_at": "2019-08-19T10:42:35.000Z",
        "updated_at": "2019-09-07T16:35:46.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-08-20T20:13:18.000Z"
    },
    "comments": [
        {
            "created_at": "2019-08-20T13:06:20.281Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6290?focusedCommentId=16911306) by Andy Grove (andygrove):*\nThanks for the bug report. What should be happening here is that the query optimizer should be automatically inserting the CAST operation. This example runs as part of CI so I'm surprised this regression has crept in."
        },
        {
            "created_at": "2019-08-20T20:13:18.291Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6290?focusedCommentId=16911707) by Paddy Horan (paddyhoran):*\nIssue resolved by pull request 5136\n<https://github.com/apache/arrow/pull/5136>"
        }
    ]
}