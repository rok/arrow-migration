{
    "issue": {
        "title": "[C++] Simplify AggregateNodeOptions aggregates/targets",
        "body": "***Note**: This issue was originally created as [ARROW-16549](https://issues.apache.org/jira/browse/ARROW-16549). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently AggregateNodeOptions is:\r\n\r\n```\n\r\nclass ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\r\n public:\r\n  // aggregations which will be applied to the targetted fields\r\n  std::vector<internal::Aggregate> aggregates;\r\n  // fields to which aggregations will be applied\r\n  std::vector<FieldRef> targets;\r\n  // output field names for aggregations\r\n  std::vector<std::string> names;\r\n  // keys by which aggregations will be grouped\r\n  std::vector<FieldRef> keys;\r\n};\r\n```\r\n\r\nIt is not very obvious how `aggregates` and `targets` are related.  My initial read of the comments led me to think that each aggregate would be applied to each target and you would end up with `len(aggregates) * len(targets)` output fields.  In reality the `aggregate` at index `i` only applies to the `target` at index `i`.  It would be simpler to add a `FieldRef target` to `internal::Aggregate` (and `Aggregate` should not be `internal`).\r\n\r\nAlternatively, the entire `internal::Aggregate` could be replaced by a \"call\" `arrow::compute::Expression`",
        "created_at": "2022-05-12T16:53:48.000Z",
        "updated_at": "2022-07-04T10:45:05.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-06-27T14:40:35.000Z"
    },
    "comments": [
        {
            "created_at": "2022-05-13T01:00:49.212Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16549?focusedCommentId=17536392) by Vibhatha Lakmal Abeykoon (vibhatha):*\ncc `[~westonpace]` \u00a0I think this make sense. Also it is easier for the user. I think it would be okay to have it as a field within the `Aggregate` and put it in `arrow::compute::` namespace as you're suggesting. But `call` is much straight forward.\u00a0\r\n\r\nBut to make it clear to the user, I would say the struct is fine for now. WDYT?"
        },
        {
            "created_at": "2022-05-17T14:15:50.333Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16549?focusedCommentId=17538226) by Vibhatha Lakmal Abeykoon (vibhatha):*\nHow about including `names` field within the aggregates? cc `[~westonpace]` \u00a0\r\n\r\nI have added the main change which is moving 'target` inside the `Aggregate` object.\u00a0\r\n\r\nBut the current change breaks the `R`-bindings. And looking at this specific piece of code,\u00a0\r\n\r\n<https://github.com/apache/arrow/blob/c032290b9ea2699ce29f4fa26e6826911e13fcca/r/R/query-engine.R#L125>\r\n\r\nI think, may be we can put the names inside the Aggregate? (optional or user-provided).\r\n\r\nAppreiciate your thoughts, \u00a0 `[~npr]`"
        },
        {
            "created_at": "2022-05-17T15:32:16.174Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16549?focusedCommentId=17538287) by Weston Pace (westonpace):*\nMoving `names` inside of the `Aggregate` makes a lot of sense to me.  I think that's a good idea."
        },
        {
            "created_at": "2022-06-27T14:40:35.560Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16549?focusedCommentId=17559200) by Weston Pace (westonpace):*\nIssue resolved by pull request 13150\n<https://github.com/apache/arrow/pull/13150>"
        }
    ]
}