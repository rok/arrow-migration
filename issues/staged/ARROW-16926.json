{
    "issue": {
        "title": "csv reader errors clobbered by subsequent reads",
        "body": "***Note**: This issue was originally created as [ARROW-16926](https://issues.apache.org/jira/browse/ARROW-16926). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently you can reproduce this issue by reading a csv file with garbage string values where float64 are expected. If you place the bad data in the first part of the file, then subsequent r.r.Read() will clobber the parse err that was set inside r.read(rec)\r\n\r\nSo at the bottom of the loop body, r.read(rec) is called, we end up in func (r \\*Reader) parseFloat64(field array.Builder, str string)\r\nit encounters an error, and sets err on the reader:\r\nv, err := strconv.ParseFloat(str, 64)\r\nif err != nil && r.err == nil {\r\nr.err = err\r\nfield.AppendNull()\r\nreturn\r\n}\r\n\r\nHowever, when we come back out of the call to the loop, we advance in the for loop without checking the err and on the subsequent call to r.r.Read() we clobber the r.err.\r\n\r\nThis means that if the last chunk has no error, after we read the csv, calls to r.Err() on the reader will return nil, even though an err took place during parse.",
        "created_at": "2022-06-28T15:25:05.000Z",
        "updated_at": "2022-06-29T17:49:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Go",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-06-29T17:49:04.000Z"
    },
    "comments": [
        {
            "created_at": "2022-06-29T17:49:04.833Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16926?focusedCommentId=17560606) by Matthew Topol (zeroshade):*\nIssue resolved by pull request 13451\n<https://github.com/apache/arrow/pull/13451>"
        }
    ]
}