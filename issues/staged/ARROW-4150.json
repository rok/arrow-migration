{
    "issue": {
        "title": "[C++] Do not return buffers containing nullptr from internal allocations",
        "body": "***Note**: This issue was originally created as [ARROW-4150](https://issues.apache.org/jira/browse/ARROW-4150). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen a 0-byte buffer is allocated, or at the start of a BufferBuilder, the buffer's data pointer can be null. This leads to passing null arguments (with zero sizes) to standard functions such as memset() and memcpy() in many places. UBSAN doesn't like it.\r\n\r\nSince a null pointer often means \"failed allocating\" or \"programmer error\", we might want to use a non-null pointer to a static empty piece of data instead.",
        "created_at": "2019-01-03T15:33:17.000Z",
        "updated_at": "2019-01-04T17:41:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-01-04T17:40:52.000Z"
    },
    "comments": [
        {
            "created_at": "2019-01-03T18:51:00.923Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4150?focusedCommentId=16733368) by Antoine Pitrou (apitrou):*\nWe have two possible solutions actually:\r\n- follow standard malloc() conventions and return a different pointer everytime, even for 0-size allocations; this means allocating actual memory (probably in 64-byte increments if we want the right alignment)\n- return the same pointer for all 0-size allocations, in which case we can simply return a statically-allocated piece of memory; this makes us non-malloc() compliant, but we don't pretend we are\n"
        },
        {
            "created_at": "2019-01-03T18:52:41.767Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4150?focusedCommentId=16733371) by Antoine Pitrou (apitrou):*\nActually, the unique pointer requirement seems to be glibc-specific. The POSIX and C++ malloc specifications don't make such a requirement."
        },
        {
            "created_at": "2019-01-03T18:59:27.907Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4150?focusedCommentId=16733376) by Wes McKinney (wesm):*\nWhere do you think the nullptr sanitization should take place? In the Buffer constructor? "
        },
        {
            "created_at": "2019-01-03T19:27:19.574Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4150?focusedCommentId=16733417) by Antoine Pitrou (apitrou):*\nI'm not proposing to sanitize the Buffer class itself, rather to make sure that our allocation and resize routines always return buffers with non-null data pointers."
        },
        {
            "created_at": "2019-01-03T20:01:17.824Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4150?focusedCommentId=16733465) by Ben Kietzman (bkietz):*\nBut `buffer.data()` will need to recognize that its data pointer is `0xdeadbeef` and return `nullptr` instead"
        },
        {
            "created_at": "2019-01-03T20:45:34.043Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4150?focusedCommentId=16733503) by Wes McKinney (wesm):*\nI see what `[~pitrou]` is saying \u2013 we use memcpy and memcmp on buffers that originate from our memory allocation functions. The suggestion is not to have null pointers for memory whose origin we know. So we will ignore the issue for general `arrow::Buffer` "
        },
        {
            "created_at": "2019-01-04T17:40:52.155Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4150?focusedCommentId=16734376) by Wes McKinney (wesm):*\nIssue resolved by pull request 3309\n<https://github.com/apache/arrow/pull/3309>"
        },
        {
            "created_at": "2019-01-04T17:41:31.353Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4150?focusedCommentId=16734377) by Wes McKinney (wesm):*\nI renamed the issue to make it a bit more explicit what is going on"
        }
    ]
}