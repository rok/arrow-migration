{
    "issue": {
        "title": "[C++] RecordBatch::Equals ignores field names",
        "body": "***Note**: This issue was originally created as [ARROW-18087](https://issues.apache.org/jira/browse/ARROW-18087). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe `RecordBatch::Equals` method only checks the equality of the schema of both batches if `check_metadata=True`, with a result that it doesn't actually check the schema (eg field names) by default.\r\n\r\nPython illustration:\r\n\r\n```Java\n\r\nIn [3]: batch1 = pa.record_batch(pd.DataFrame({'a': [1, 2, 3]}))\r\n\r\nIn [4]: batch2 = pa.record_batch(pd.DataFrame({'b': [1, 2, 3]}))\r\n\r\nIn [5]: batch1.equals(batch2)\r\nOut[5]: True\r\n\r\nIn [6]: batch1.equals(batch2, check_metadata=True)\r\nOut[6]: False\r\n```\r\n\r\nMy expectation is that RecordBatch equality always requires equal field names (as Table::Equals does). And the `check_metadata` keyword should only control whether the metadata of the schema is considered (as the documentation also says), not whether the schema is checked at all.",
        "created_at": "2022-10-18T15:48:32.000Z",
        "updated_at": "2022-10-29T03:22:11.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-10-26T18:56:04.000Z"
    },
    "comments": [
        {
            "created_at": "2022-10-26T18:56:04.582Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18087?focusedCommentId=17624689) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 14451\n<https://github.com/apache/arrow/pull/14451>"
        }
    ]
}