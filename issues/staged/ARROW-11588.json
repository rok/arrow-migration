{
    "issue": {
        "title": "[C++] Add traceable general purpose queue(s)",
        "body": "***Note**: This issue was originally created as [ARROW-11588](https://issues.apache.org/jira/browse/ARROW-11588). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere are a few places we queue data/jobs today (e.g. readahead, thread pool).\u00a0\u00a0 In order to reduce complexity (single responsibility) and add traceability (so we can tell where queues are filling up)\u00a0 we should create general purpose queues (e.g. the boost lockfree one) and add some basic performance counters/events (queue size, queue full, queue starved).\r\n\r\nWe will need multiple queue implementations.\u00a0 Some places will need a spsc lock free queue and others will need a multi-producer / multi-consumer queue with proper waits (and potentially more queues than that).",
        "created_at": "2021-02-10T18:59:33.000Z",
        "updated_at": "2021-06-07T20:30:24.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2021-06-07T20:30:24.000Z"
    },
    "comments": [
        {
            "created_at": "2021-02-11T13:51:44.085Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11588?focusedCommentId=17283034) by Antoine Pitrou (apitrou):*\nSounds good to me. On a general basis, we try to minimize the Boost dependencies, but that's only a guideline (especially if header-only)."
        },
        {
            "created_at": "2021-06-07T20:30:24.135Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11588?focusedCommentId=17358851) by Weston Pace (westonpace):*\nCleaning up my issues.\u00a0 General queues seems to be more of a pipe dream.\u00a0 Different operators have had different queuing needs and so we are likely to have multiple types.\u00a0 David has already made good work on tracing and I feel this issue could probably be better served by a \"execution graph tracing\" issue."
        }
    ]
}