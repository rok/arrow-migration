{
    "issue": {
        "title": "[JS] Create table from Arrays",
        "body": "***Note**: This issue was originally created as [ARROW-7109](https://issues.apache.org/jira/browse/ARROW-7109). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI am trying to generate an arrow table from JS arrays and followed the example from\u00a0[here \\| [https://observablehq.com/@lmeyerov/manipulating-flat-arrays-arrow-style]] but I am struggling to generate different schemas, most importantly how to provide a type different then 'floatingpoint'. Right now, I have:\r\n```java\n\r\nconst data = Table.from({\r\n  schema: {\r\n    fields: [{name: 'a', nullable: false, children: Array(0), \r\n     type: {name: 'floatingpoint', precision: 'SINGLE'}}]    \r\n    },    \r\n  batches: [{        \r\n   count: 10,        \r\n   columns: [{ name: 'a', count: 10, VALIDITY: [], \r\n    DATA: Array.from({ length: 10 }, () => 'a') }]}]  \r\n})\r\n```\r\nWhich, of course is non-sense but I couldn't figure out how to provide the type (I tried type: Utf8 among others).\u00a0 In general wouldn't it be a nice to have create Table from object function?\r\n\r\nOn another note, are there any plans to make the docs a little bit more descriptive? Happy to contribute!",
        "created_at": "2019-11-11T13:17:18.000Z",
        "updated_at": "2021-04-24T23:47:26.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-24T23:47:25.000Z"
    },
    "comments": [
        {
            "created_at": "2019-11-11T23:37:37.178Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16971900) by Brian Hulette (bhulette):*\nHey Sascha, sorry about the confusion, that notebook is based on a pretty old version of arrow JS. Since then, [~paul.e.taylor] has added a lot of syntax to make it a lot easier to build tables from JS arrays. There's an example in the [README](https://github.com/apache/arrow/tree/master/js#create-a-table-from-javascript-arrays), I also suggested a change to `[~lmeyerov]`'s notebook to use the new syntax: https://observablehq.com/@theneuralbit/manipulating-flat-arrays-arrow-style\r\n\r\nDoes that help?"
        },
        {
            "created_at": "2019-11-12T00:41:56.131Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16971935) by Leo Meyerovich (lmeyerov):*\nThanks `[~bhulette]`! Happy to update the tutorial if there are specific sections you can help point to \u2013 for interim, I put a forward pointer to yours."
        },
        {
            "created_at": "2019-11-12T01:36:13.049Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16971970) by Brian Hulette (bhulette):*\nI think the table creation is the only thing that needs updating. I think I made the observable version of a pull request- I \"suggested\" my changes: https://observablehq.com/compare/5cff242aeff80264@685...c095c1810b0369f1@689"
        },
        {
            "created_at": "2019-11-12T02:25:08.006Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16971996) by Leo Meyerovich (lmeyerov):*\nThanks, merged! I see <https://observablehq.com/d/6e565d7662d984ea>\u00a0I & II are also out of date, so should update too."
        },
        {
            "created_at": "2019-11-12T09:13:32.530Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16972208) by Sascha Hofmann (saschahofmann):*\nThat was exactly what I was looking for! No clue how I overlooked this part pretty sure I scanned the readme multiple times. The Table.new method works like a charm! It's not mentioned in the [docs \\|\u00a0[https://arrow.apache.org/docs/js/classes/table.html]] yet. I think it would be useful to enrich them with some more examples. I have no clue how TypeDoc works but happy to contribute."
        },
        {
            "created_at": "2019-11-12T15:46:23.839Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16972547) by Neal Richardson (npr):*\nFWIW the JS docs haven't been updated in a year and a half: https://github.com/apache/arrow-site/tree/asf-site/docs/js"
        },
        {
            "created_at": "2019-11-12T17:06:39.194Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16972629) by Sascha Hofmann (saschahofmann):*\nThat explains a lot :'D"
        },
        {
            "created_at": "2019-11-12T17:13:02.021Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16972634) by Leo Meyerovich (lmeyerov):*\nThanks \u2013 we use Arrow heavily internally for webgl->nodejs->nodeopencl+pydata, while our external efforts here are more of a labor of love. So while very much production quality, the docs are still generally \"grep arrow + our codebase\"\u00a0:)\u00a0Helping update the tutorials or docs based on your experiences would be awesome if you're up for it!\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2019-11-13T18:21:50.866Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16973582) by Sascha Hofmann (saschahofmann):*\nI'd be happy to add some examples on how to use some if the functionalities on e.g. the Table. Not sure where to start though."
        },
        {
            "created_at": "2019-11-13T19:02:02.583Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16973604) by Leo Meyerovich (lmeyerov):*\nAwesome!\u00a0\r\n\r\n\u00a0\r\n\r\nHow to stream record batches in/out seems like the most meaningful. At least here, a lot of our use ends up being about this. So maybe help to share some of the arrow APIs used and maybe how/why.\u00a0\r\n\r\n\u00a0\r\n1. Maybe a start is revisiting the early microbatch tutorial I had done before the API stabilized:\n   \n   [https://observablehq.com/d/6e565d7662d984ea\u00a0](https://observablehq.com/d/6e565d7662d984ea)\n   \n   \u00a0\n   \n   ^^^ Aimed to show microbatch API and prove some numbers\n   \n   \u00a0\n   \n   2. As a followup, demoing common fast IO needs: fast browser<>node, node process <> node process, and node process <> python process. A lot of our code ends up looking like:\n   \n   \u00a0\n   \n   ```\n   export\u00a0function\u00a0asTable(source:\u00a0Table\u00a0|\u00a0AsyncIterable<RecordBatch>,\u00a0fields:\u00a0string[]\u00a0=\u00a0[])\u00a0{\n   \u00a0\u00a0\u00a0\u00a0return\u00a0AsyncIterableX.defer(async\u00a0()\u00a0=>\u00a0{\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(source)\u00a0{\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0batches\u00a0=\u00a0source\u00a0instanceof\u00a0Table\u00a0?\u00a0source.chunks\u00a0:\u00a0await\u00a0toArray(source);\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(batches.length\u00a0>\u00a00)\u00a0{\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(![fields](fields)fields.length)\u00a0{\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0AsyncIterableX.of(new\u00a0Table(batches));\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0table\u00a0=\u00a0new\u00a0Table(batches).select(...fields);\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(table.schema.fields.length\u00a0===\u00a0fields.length)\u00a0{\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0AsyncIterableX.of(table);\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0AsyncIterableX.empty<Table>();\n   \u00a0\u00a0\u00a0\u00a0});\n   }\n   \n   export\u00a0function\u00a0asBatches(fn:\u00a0()\u00a0=>\u00a0DeferFnReturn)\u00a0{\n   \u00a0\u00a0\u00a0\u00a0return\u00a0asReaders(fn).concatAll()\u00a0as\u00a0BatchesReturn;\n   }\n   \n   export\u00a0function\u00a0asReaders(fn:\u00a0()\u00a0=>\u00a0DeferFnReturn)\u00a0{\n   \u00a0\u00a0\u00a0\u00a0return\u00a0AsyncIterableX.defer(async\u00a0()\u00a0=>\u00a0{\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0x\u00a0=\u00a0await\u00a0fn();\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0RecordBatchStreamReader.readAll(x);\n   \u00a0\u00a0\u00a0\u00a0})\u00a0as\u00a0ReadersReturn;\n   }\n   ```\n   \u00a0\n   and\n   \u00a0\n   ```\n   asReaders(()\u00a0=>\u00a0{\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0nodeEncodingsStream\u00a0=\u00a0asTable(Array.isArray(nodeEncodings)\u00a0?\u00a0this.node.table.encodings(nodeEncodings)\u00a0:\u00a0nodeEncodings);\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0edgeEncodingsStream\u00a0=\u00a0asTable(Array.isArray(edgeEncodings)\u00a0?\u00a0this.edge.table.encodings(edgeEncodings)\u00a0:\u00a0edgeEncodings);\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0recordBatchesStream\u00a0=\u00a0AsyncIterable.concat(\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0`preshaped`\u00a0is\u00a0an\u00a0AsyncIterable<AsyncIterable<RecordBatch>>,\u00a0so\u00a0flatten\u00a0it\u00a0here\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AsyncIterable.as(preshaped).flatMap((x)\u00a0=>\u00a0asTable(x)),\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Calling\u00a0memoize()\u00a0on\u00a0the\u00a0node/edge\u00a0encodings\u00a0streams\u00a0ensures\u00a0they\u00a0start\u00a0downloading\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0immediately,\u00a0instead\u00a0of\u00a0serially\u00a0after\u00a0the\u00a0incoming\u00a0RecordBatch\u00a0streams\u00a0have\u00a0completed\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nodeEncodingsStream.memoize().flatMap((\\{\u00a0chunks\u00a0})\u00a0=>\u00a0AsyncIterable.as(chunks)),\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0edgeEncodingsStream.memoize().flatMap((\\{\u00a0chunks\u00a0})\u00a0=>\u00a0AsyncIterable.as(chunks)),\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0recordBatchesStream\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(RecordBatchStreamWriter.throughNode(\\{\u00a0autoDestroy:\u00a0false\u00a0}))\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(this.got.stream.post('/preshaped/shaped',\u00a0\\{\u00a0headers:\u00a0octetstream\u00a0}));\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n   ```\n   \u00a0"
        },
        {
            "created_at": "2019-11-25T12:10:20.847Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=16981500) by Sascha Hofmann (saschahofmann):*\nSorry I haven't responded earlier! I will have a look at this.\u00a0"
        },
        {
            "created_at": "2021-04-24T23:47:26.008Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7109?focusedCommentId=17331336) by Dominik Moritz (domoritz):*\nThe Table.new API makes creating tables a lot easier now. I also created ARROW-12528 to improve support for typed arrays as inputs. "
        }
    ]
}