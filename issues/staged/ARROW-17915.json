{
    "issue": {
        "title": "[C++] Error when using Substrait ProjectRel",
        "body": "***Note**: This issue was originally created as [ARROW-17915](https://issues.apache.org/jira/browse/ARROW-17915). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAfter ARROW-16989 and ARROW-15584, there is new behaviour with ProjectRel. I implemented a solution that worked with DuckDB's consumer in https://github.com/voltrondata/substrait-r/pull/181, but when I try with Arrow's compiler I get an error:\r\n\r\n```R\n\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\n\r\nplan_as_json <- '{\r\n  \"extensionUris\": [\r\n    {\r\n      \"extensionUriAnchor\": 1,\r\n      \"uri\": \"https://github.com/apache/arrow/blob/master/format/substrait/extension_types.yaml\"\r\n    }\r\n  ],\r\n  \"relations\": [\r\n    {\r\n      \"rel\": {\r\n        \"project\": {\r\n          \"common\": {\"emit\": {\"outputMapping\": [2, 3]}},\r\n          \"input\": {\r\n            \"read\": {\r\n              \"baseSchema\": {\r\n                \"names\": [\"int\", \"dbl\"],\r\n                \"struct\": {\"types\": [{\"i32\": {}}, {\"fp64\": {}}]}\r\n              },\r\n              \"localFiles\": {\r\n                \"items\": [\r\n                  {\r\n                    \"uriFile\": \"file://THIS_IS_THE_TEMP_FILE\",\r\n                    \"parquet\": {}\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          },\r\n          \"expressions\": [\r\n            {\"selection\": {\"directReference\": {\"structField\": {\"field\": 1}}}},\r\n            {\"selection\": {\"directReference\": {\"structField\": {\"field\": 0}}}}\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}'\r\n\r\ntemp_parquet <- tempfile()\r\nwrite_parquet(data.frame(int = integer(), dbl = double()), temp_parquet)\r\nplan_as_json <- gsub(\"THIS_IS_THE_TEMP_FILE\", temp_parquet, plan_as_json)\r\narrow:::do_exec_plan_substrait(plan_as_json)\r\n#> Error: Invalid: Invalid column index to add field.\r\n#> /Users/dewey/Desktop/rscratch/arrow/cpp/src/arrow/engine/substrait/relation_internal.cc:338  project_schema->AddField( num_columns + static_cast<int>(project.expressions().size()) - 1, std::move(project_field))\r\n#> /Users/dewey/Desktop/rscratch/arrow/cpp/src/arrow/engine/substrait/serde.cc:156  FromProto(plan_rel.has_root() ? plan_rel.root().input() : plan_rel.rel(), ext_set, conversion_options)\r\n```\r\n\r\n\r\nIt's admittedly a goofy thing to do: to compute a new column that is an identical copy of an existing column and then discard the original. I can and should simplify the substrait that I'm generating, but maybe this is also valid substrait that should be accepted?",
        "created_at": "2022-10-03T13:13:18.000Z",
        "updated_at": "2022-10-16T08:51:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-10-14T14:00:21.000Z"
    },
    "comments": [
        {
            "created_at": "2022-10-14T14:00:21.120Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17915?focusedCommentId=17617746) by Ben Kietzman (bkietz):*\nIssue resolved by pull request 14295\n<https://github.com/apache/arrow/pull/14295>"
        }
    ]
}