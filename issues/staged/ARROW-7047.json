{
    "issue": {
        "title": "[C++][Dataset] Filter expressions should not require exact type match",
        "body": "***Note**: This issue was originally created as [ARROW-7047](https://issues.apache.org/jira/browse/ARROW-7047). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt's not trivial for users to be able to ensure that scalars are of identical type to the fields they relate to in Expressions. For one, FieldExpressions don't contain a type reference, so at the time when I construct `field_ref(\"col1\") > scalar(42)`, I don't know exactly what type col1 is to be able to ensure that scalar(42) matches. Even if it were available, I wouldn't be able to determine what type to make it if the expression were `(field_ref(\"col1\") + field_ref(\"col2\")) > scalar(42)`.\r\n\r\nWe should allow CompareExpressions to cast the inputs as necessary. This should be among integer types and floating point types, and across integers and floats too. Likewise among date/timestamp types, and probably if comparing a string scalar against a date/timestamp column, the string should be parsed as a datetime. We also need to think about DictionaryTypes (though in practice this is moot until we have a comparison kernels that work on strings).\r\n\r\n`[~fsaintjacques]` `[~bkietz]`",
        "created_at": "2019-11-01T22:05:21.000Z",
        "updated_at": "2020-04-10T15:32:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-11-15T23:34:21.000Z"
    },
    "comments": [
        {
            "created_at": "2019-11-05T13:27:30.054Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7047?focusedCommentId=16967527) by Francois Saint-Jacques (fsaintjacques):*\nIn typical databases, this is not the responsibility of physical operators (the dataset module in this case). It is assumed that inputs are properly typed/casted by who ever generates the physical plan. I would propose that we create an interface to bind/validate/cast an expression to a Schema, e.g.\r\n\r\n\r\n```c++\n\r\n/// \\brief Bind an expression to a schema\r\n///\r\n/// Binding will try to align types of expressions and referenced fields. It will also checks that all references are valid.\r\nResult<Expression> Expression::Bind(const Schema& schema, BindOptions options);\r\n```\r\n\r\nThis utility could be used by high level languages and the planner (execution engine). This could be exposed as an option in the ScannerBuilder interface, or an optional parameter to the AddFilter."
        },
        {
            "created_at": "2019-11-05T14:20:11.114Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7047?focusedCommentId=16967561) by Ben Kietzman (bkietz):*\n`[~fsaintjacques]` thanks, that seems reasonable. I'll add `CastExpression` and `Bind` can insert these everywhere a type mismatch is encountered. \r\nIt seems like a direct extension of `Expression::Validate`, is it worth keeping them both? `Bind` could also output the expression's evaluated type\r\n\r\nFieldExpressions are currently not typed but it seems reasonable to add optional typing when the field's type is known."
        },
        {
            "created_at": "2019-11-15T23:34:21.741Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7047?focusedCommentId=16975476) by Neal Richardson (npr):*\nIssue resolved by pull request 5813\n<https://github.com/apache/arrow/pull/5813>"
        }
    ]
}