{
    "issue": {
        "title": "[Python] Failing test with pandas master for extension type conversion",
        "body": "***Note**: This issue was originally created as [ARROW-7857](https://issues.apache.org/jira/browse/ARROW-7857). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe pandas master test build has one failure\r\n\r\n\r\n```Java\n\r\n_______________ test_conversion_extensiontype_to_extensionarray ________________\r\n\r\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fcd6c580bd0>\r\n\r\n    def test_conversion_extensiontype_to_extensionarray(monkeypatch):\r\n# converting extension type to linked pandas ExtensionDtype/Array\r\n        import pandas.core.internals as _int\r\n    \r\n        storage = pa.array([1, 2, 3, 4], pa.int64())\r\n        arr = pa.ExtensionArray.from_storage(MyCustomIntegerType(), storage)\r\n        table = pa.table({'a': arr})\r\n    \r\n        if LooseVersion(pd.__version__) < \"0.26.0.dev\":\r\n# ensure pandas Int64Dtype has the protocol method (for older pandas)\r\n            monkeypatch.setattr(\r\n                pd.Int64Dtype, '__from_arrow__', _Int64Dtype__from_arrow__,\r\n                raising=False)\r\n    \r\n# extension type points to Int64Dtype, which knows how to create a\r\n# pandas ExtensionArray\r\n>       result = table.to_pandas()\r\n\r\nopt/conda/envs/arrow/lib/python3.7/site-packages/pyarrow/tests/test_pandas.py:3560: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\npyarrow/ipc.pxi:559: in pyarrow.lib.read_message\r\n    ???\r\npyarrow/table.pxi:1369: in pyarrow.lib.Table._to_pandas\r\n    ???\r\nopt/conda/envs/arrow/lib/python3.7/site-packages/pyarrow/pandas_compat.py:764: in table_to_blockmanager\r\n    blocks = _table_to_blocks(options, table, categories, ext_columns_dtypes)\r\nopt/conda/envs/arrow/lib/python3.7/site-packages/pyarrow/pandas_compat.py:1102: in _table_to_blocks\r\n    for item in result]\r\nopt/conda/envs/arrow/lib/python3.7/site-packages/pyarrow/pandas_compat.py:1102: in <listcomp>\r\n    for item in result]\r\nopt/conda/envs/arrow/lib/python3.7/site-packages/pyarrow/pandas_compat.py:723: in _reconstruct_block\r\n    pd_ext_arr = pandas_dtype.__from_arrow__(arr)\r\nopt/conda/envs/arrow/lib/python3.7/site-packages/pandas/core/arrays/integer.py:108: in __from_arrow__\r\n    array = array.cast(pyarrow_type)\r\npyarrow/table.pxi:240: in pyarrow.lib.ChunkedArray.cast\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   pyarrow.lib.ArrowNotImplementedError: No cast implemented from extension<arrow.py_extension_type> to int64\r\n```",
        "created_at": "2020-02-14T09:20:08.000Z",
        "updated_at": "2020-04-19T23:49:11.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-03-21T23:25:51.000Z"
    },
    "comments": [
        {
            "created_at": "2020-02-14T09:33:16.128Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7857?focusedCommentId=17036839) by Joris Van den Bossche (jorisvandenbossche):*\nThe test can easily be fixed on our side, but it would also be solved by implementing casting for extension types: ARROW-7858"
        },
        {
            "created_at": "2020-03-21T23:25:52.006Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7857?focusedCommentId=17064103) by Kouhei Sutou (kou):*\nIssue resolved by pull request 6664\n<https://github.com/apache/arrow/pull/6664>"
        }
    ]
}