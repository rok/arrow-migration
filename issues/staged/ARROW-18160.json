{
    "issue": {
        "title": "[C++] Scanner slicing large row groups leads to inefficient RAM usage",
        "body": "***Note**: This issue was originally created as [ARROW-18160](https://issues.apache.org/jira/browse/ARROW-18160). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs an example, consider a 4GB parquet file with 1 giant row group.  At the moment it is inevitable that we read this in as one large 4GB record batch (there are other JIRAs for sub-row-group reads which, if implemented, would obsolete this one).\r\n\r\nWe then slice off pieces of that 4GB parquet file for processing:\r\n\r\n```\n\r\nnext_batch = current.slice(0, batch_size)\r\ncurrent = current.slice(batch_size)\r\n```\r\n\r\nHowever, even though `current` is shrinking each time, it always references the entire data (slicing doesn't allow memory to be freed).  We may want to investigate alternative strategies here so that we can free up memory when we are done processing it.",
        "created_at": "2022-10-25T16:43:58.000Z",
        "updated_at": "2022-10-25T17:57:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-25T16:44:50.749Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18160?focusedCommentId=17623926) by David Li (lidavidm):*\nThe only way (without sub-group reads) is copying, right?"
        },
        {
            "created_at": "2022-10-25T17:55:03.615Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18160?focusedCommentId=17623957) by Weston Pace (westonpace):*\nWell, there is a somewhat drastic approach, which would be to add a \"clone\" capability or a \"reallocate but only reference sliced portion\" capability.  If a small hit to performance can deliver large RAM savings it might be worth it sometimes.  I'm not sure it's justified in this case yet but wanted to mention it for consideration.\r\n\r\nAlternatively, some kind of unique allocator which allows returning portions of buffers as we read through them could be considered."
        },
        {
            "created_at": "2022-10-25T17:57:49.189Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18160?focusedCommentId=17623958) by Weston Pace (westonpace):*\nOh.  Yes, that is copying.  Sorry, didn't read your message clearly."
        }
    ]
}