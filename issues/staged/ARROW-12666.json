{
    "issue": {
        "title": "[Python] Array construction from numpy array is unclear about zero copy behaviour",
        "body": "***Note**: This issue was originally created as [ARROW-12666](https://issues.apache.org/jira/browse/ARROW-12666). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen building an Arrow array from a numpy array it's very confusing from the user point of view that the result is not always a new array.\r\n\r\nUnder the hood Arrow sometimes reuses the memory if no casting is needed\r\n```python\n\r\nnpa = np.array([1, 2, 3]*3)\r\narrow_array = pa.array(npa, type=pa.int64())\r\nnpa[npa == 2] = 10\r\nprint(arrow_array.to_pylist())\r\n# Prints: [1, 10, 3, 1, 10, 3, 1, 10, 3]\r\n```\r\nand sometimes doesn't if a cast is involved\r\n```python\n\r\nnpa = np.array([1, 2, 3]*3)\r\narrow_array = pa.array(npa, type=pa.int32())\r\nnpa[npa == 2] = 10\r\nprint(arrow_array.to_pylist())\r\n# Prints: [1, 2, 3, 1, 2, 3, 1, 2, 3]\r\n```\r\nFor non primite types instead it does always copy\r\n```python\n\r\nnpa = np.array([\"a\", \"b\", \"c\"]*3)\r\narrow_array = pa.array(npa, type=pa.string())\r\nnpa[npa == \"b\"] = \"X\"\r\nprint(arrow_array.to_pylist())\r\n# Prints: ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\r\n# Different from numpy array that was modified\r\n```\r\nThis behaviour needs a lot of attention from the user and understanding of what's going on, which makes pyarrow hard to use.\r\n\r\nA `copy=True/False` should be added to `pa.array` and the default value should probably be `copy=True` so that by default you can always create an arrow array out of a numpy one (as `copy=False`\u00a0 would probably have to throw an exception in some cases where we can't guarantee zero copy, like when building from a Python List)",
        "created_at": "2021-05-06T09:31:51.000Z",
        "updated_at": "2022-10-06T09:08:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-05-17T09:55:44.039Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12666?focusedCommentId=17346032) by Joris Van den Bossche (jorisvandenbossche):*\n> `copy=False`  would probably have to throw an exception in some cases where we can't guarantee zero copy, like when building from a Python List\r\n\r\nOr `copy=False` could also not guarantee that no copy is made, but will only try to not make a copy if possible. That's basically the behaviour of the `copy` keyword in `numpy.array(..)`\r\n\r\nOn the general issue, I agree that the current behaviour is not ideal and potentially being confusing/having surprising effects. But I also think it's not that easy to change. I think a lot of people rely on the zero-copy behaviour to avoid unnecessary copies (eg if you just convert to Arrow to then directly write that to Parquet file, then you don't want to make an additional copy)."
        }
    ]
}