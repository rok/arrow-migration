{
    "issue": {
        "title": "[Python] New pyarrow.Table functions: from_pydict(), from_pylist() and to_pylist()",
        "body": "***Note**: This issue was originally created as [ARROW-4032](https://issues.apache.org/jira/browse/ARROW-4032). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHere's a proposal to create a pyarrow.Table.from_pydict() function.\r\n\r\nRight now only pyarrow.Table.from_pandas() exist and there are inherit problems using Pandas with NULL support for Int(s) and Boolean(s)\r\n\r\n<http://pandas.pydata.org/pandas-docs/version/0.23.4/gotchas.html>\r\n\r\n`NaN`, Integer\u00a0`NA`\u00a0values and\u00a0`NA`\u00a0type promotions:\r\n\r\nSample python code on how this would work.\r\n\r\n\u00a0\r\n```java\n\r\nimport pyarrow as pa\r\nfrom datetime import datetime\r\n\r\n# convert microseconds to milliseconds. More support for MS in parquet.\r\ntoday = datetime.now()\r\ntoday = datetime(today.year, today.month, today.day, today.hour, today.minute, today.second, today.microsecond - today.microsecond % 1000)\r\n\r\ntest_list = [\r\n{\"name\": \"Tom\", \"age\": 10},\r\n{\"name\": \"Mark\", \"age\": 5, \"city\": \"San Francisco\"},\r\n{\"name\": \"Pam\", \"age\": 7, \"birthday\": today}\r\n]\r\n\r\ndef from_pylist(pylist, schema=None, columns=None, safe=True):\r\n    arrow_columns = list()\r\n    if schema:\r\n        columns = schema.names\r\n    if not columns:\r\n        return\r\n    for column in columns:\r\n        arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe))\r\n    arrow_table = pa.Table.from_arrays(arrow_columns, columns)\r\n    if schema:\r\n        arrow_table = arrow_table.cast(schema, safe=safe)\r\n    return arrow_table\r\n\r\ntest = from_pylist(test_list, columns=['name' , 'age', 'city', 'birthday', 'dummy'])\r\n\r\ntest_schema = pa.schema([\r\npa.field('name', pa.string()),\r\npa.field('age', pa.int16()),\r\npa.field('city', pa.string()),\r\npa.field('birthday', pa.timestamp('ms'))\r\n])\r\n\r\ntest2 = from_pylist(test_list, schema=test_schema)\r\n```",
        "created_at": "2018-12-14T19:31:18.000Z",
        "updated_at": "2019-07-31T07:45:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2019-07-31T07:45:35.000Z"
    },
    "comments": [
        {
            "created_at": "2018-12-14T19:35:52.574Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4032?focusedCommentId=16721727) by Wes McKinney (wesm):*\nYou can do `pa.array(pylist)` already. So if we had a function to convert StructArray to Table then this would mostly do what you're describing. This was partly the intent of ARROW-40"
        },
        {
            "created_at": "2018-12-14T20:01:21.385Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4032?focusedCommentId=16721745) by David Lee (davlee1972@yahoo.com):*\nUpdated the sample code to include Schema and Safe options..\r\n\r\nPassing in a schema will allow conversions from microseconds to milliseconds."
        },
        {
            "created_at": "2018-12-15T03:53:12.136Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4032?focusedCommentId=16721986) by David Lee (davlee1972@yahoo.com):*\nEnded up just writing from_pylist() and to_pylist().. They run much faster than going through pandas..\u00a0\r\n```Java\n\r\ndef from_pylist(pylist, names=None, schema=None, safe=True):\r\n    arrow_columns = list()\r\n    if schema:\r\n        for column in schema.names:\r\n            arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n        arrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n    else:\r\n        for column in names:\r\n            arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe))\r\n        arrow_table = pa.Table.from_arrays(arrow_columns, names)\r\n    return arrow_table\r\n\r\ndef to_pylist(arrow_table):\r\n    pylist = list()\r\n    for row in range(arrow_table.num_rows):\r\n        pylist.append({arrow_table.schema.names[i]: arrow_table[i][row] for i in range(arrow_table.num_columns)})\r\n    return pylist\r\n\r\ndef from_pydict(pydict, names=None, schema=None, safe=True):\r\n    arrow_columns = list()\r\n    dict_columns = list(pydict.keys())\r\n    if schema:\r\n        for column in schema.names:\r\n            if column in pydict:\r\n                arrow_columns.append(pa.array(pydict[column], safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n            else:\r\n                arrow_columns.append(pa.array([None] * len(pydict[dict_columns[0]]), safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n        arrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n    else:\r\n        if not names:\r\n            names = dict_columns\r\n        for column in names:\r\n            if column in dict_columns:\r\n                arrow_columns.append(pa.array(pydict[column], safe=safe))\r\n            else:\r\n                arrow_columns.append(pa.array([None] * len(pydict[dict_columns[0]]), safe=safe))\r\n        arrow_table = pa.Table.from_arrays(arrow_columns, names)\r\n    return arrow_table\r\n```"
        },
        {
            "created_at": "2018-12-17T18:30:59.573Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4032?focusedCommentId=16723259) by David Lee (davlee1972@yahoo.com):*\nI'll see if I can do a git pull and submit a change.."
        },
        {
            "created_at": "2019-01-09T19:39:27.237Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4032?focusedCommentId=16738590) by David Lee (davlee1972@yahoo.com):*\nBeen testing this internally and haven't seen any problems or performance issues.. Removed all my pyarrow\u00a0 <> pandas code so I don't have to deal with all the numpy problems with types and NULL support.\r\n\r\n\u00a0\r\n```python\n\r\ndef from_pylist(pylist, names=None, schema=None, safe=True):\r\n    arrow_columns = list()\r\n    if schema:\r\n        for column in schema.names:\r\n            arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n        arrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n    else:\r\n        for column in names:\r\n            arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe))\r\n        arrow_table = pa.Table.from_arrays(arrow_columns, names)\r\n    return arrow_table\r\n\r\ndef to_pylist(arrow_table):\r\n    pydict = arrow_table.to_pydict()\r\n    pylist = [{column: pydict[column][row] for column in arrow_table.schema.names} for row in range(arrow_table.num_rows)]\r\n    return pylist\r\n\r\ndef from_pydict(pydict, names=None, schema=None, safe=True):\r\n    arrow_columns = list()\r\n    dict_columns = list(pydict.keys())\r\n    if schema:\r\n        for column in schema.names:\r\n            if column in pydict:\r\n                arrow_columns.append(pa.array(pydict[column], safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n            else:\r\n                arrow_columns.append(pa.array([None] * len(pydict[dict_columns[0]]), safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n        arrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n    else:\r\n        if not names:\r\n            names = dict_columns\r\n        for column in names:\r\n            if column in dict_columns:\r\n                arrow_columns.append(pa.array(pydict[column], safe=safe))\r\n            else:\r\n                arrow_columns.append(pa.array([None] * len(pydict[dict_columns[0]]), safe=safe))\r\n        arrow_table = pa.Table.from_arrays(arrow_columns, names)\r\n    return arrow_table\r\n\r\ndef get_table_keys(arrow_table, key_columns):\r\n    pydict = arrow_table.to_pydict()\r\n    keys_set = set([tuple([pydict[key_column][row] for key_column in key_columns]) for row in range(arrow_table.num_rows)])\r\n    return keys_set\r\n\r\n\u00a0\n```\r\n\u00a0"
        },
        {
            "created_at": "2019-01-09T20:01:50.940Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4032?focusedCommentId=16738614) by David Lee (davlee1972@yahoo.com):*\nTests: With and Without safe=False\r\n\r\n```python\n\r\nmy_list = [\r\n{'a':'one', 'b': 1},\r\n{'a':'two', 'b': 2},\r\n{'a':'three', 'b': 3},\r\n{'a':'missing', 'b': None}\r\n]\r\n\r\nschema = pa.schema([\r\n    pa.field('a', pa.string()),\r\n    pa.field('b', pa.int16())\r\n])\r\n\r\narrow_table = from_pylist(my_list, schema=schema)\r\narrow_table2 = pa.Table.from_pandas(pd.DataFrame(my_list), preserve_index=False)\r\narrow_table3 = pa.Table.from_pandas(pd.DataFrame(my_list), schema = schema, preserve_index=False, safe=False)\r\n\r\n>>> arrow_table.schema\r\na: string\r\nb: int16\r\n\r\n>>> arrow_table2.schema\r\na: string\r\nb: double\r\nmetadata\r\n--------\r\nOrderedDict([(b'pandas',\r\n              b'{\"index_columns\": [], \"column_indexes\": [], \"columns\": [{\"na'\r\n              b'me\": \"a\", \"field_name\": \"a\", \"pandas_type\": \"unicode\", \"nump'\r\n              b'y_type\": \"object\", \"metadata\": null}, {\"name\": \"b\", \"field_n'\r\n              b'ame\": \"b\", \"pandas_type\": \"float64\", \"numpy_type\": \"float64\"'\r\n              b', \"metadata\": null}], \"pandas_version\": \"0.23.4\"}')])\r\n\r\n>>> arrow_table3.schema\r\na: string\r\nb: int16\r\nmetadata\r\n--------\r\nOrderedDict([(b'pandas',\r\n              b'{\"index_columns\": [], \"column_indexes\": [], \"columns\": [{\"na'\r\n              b'me\": \"a\", \"field_name\": \"a\", \"pandas_type\": \"unicode\", \"nump'\r\n              b'y_type\": \"object\", \"metadata\": null}, {\"name\": \"b\", \"field_n'\r\n              b'ame\": \"b\", \"pandas_type\": \"int16\", \"numpy_type\": \"float64\", '\r\n              b'\"metadata\": null}], \"pandas_version\": \"0.23.4\"}')])\r\n\r\n```"
        },
        {
            "created_at": "2019-07-31T07:45:14.635Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4032?focusedCommentId=16896867) by Joris Van den Bossche (jorisvandenbossche):*\nClosing this issue in favor of your new issue ARROW-6001, as I think it is about the same."
        }
    ]
}