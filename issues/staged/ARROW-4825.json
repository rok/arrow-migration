{
    "issue": {
        "title": "[Python][C++] MemoryPool is destructed before deallocating its buffers leads to segfault ",
        "body": "***Note**: This issue was originally created as [ARROW-4825](https://issues.apache.org/jira/browse/ARROW-4825). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nConsider the following test function:\r\n\r\n```\r\ndef test_memory_pool():\r\n\u00a0 \u00a0 import pyarrow as pa\r\n\u00a0 \u00a0 pool = pa.logging_memory_pool(pa.default_memory_pool())\r\n\u00a0 \u00a0 buf = pa.allocate_buffer(10, memory_pool=pool)\r\n```\r\n\r\nthat will fail with segfault when `pool` is garbage collected before `buf`. However, the following test function succeeds:\r\n\r\n```\r\ndef test_memory_pool():\r\n\u00a0 \u00a0 import pyarrow as pa\r\n\u00a0 \u00a0 pool = pa.logging_memory_pool(pa.default_memory_pool())\r\n\u00a0 \u00a0 buf = pa.allocate_buffer(10, memory_pool=pool)\r\n\u00a0 \u00a0 del buf\r\n```\r\n\r\nbecause all buffers are freed before `pool` destruction.\r\n\r\nTo fix this issue, the pool instance should be attached to buffer instances that the pool is creating. This will ensure that `pool` will be alive until all its buffers are destroyed.",
        "created_at": "2019-03-11T12:36:39.000Z",
        "updated_at": "2021-08-04T09:55:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-03-11T22:04:35.380Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4825?focusedCommentId=16790005) by Pearu Peterson (pearu):*\nSo, as pointer out by `[~wesmckinn]`, the pool is already attached to the Buffer instances but via MemoryPool pointer.\r\n\r\nConfirming that the change from `MemoryPool\\*` to `std::shared_ptr<MemoryPool>&` in relevant functions fixes the issue.\r\n\r\nAlthough, this change needs to be applied to all of Arrow C++ source codes that use MemoryPool (there are alot), it seems a right thing to do."
        }
    ]
}