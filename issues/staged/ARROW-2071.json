{
    "issue": {
        "title": "[Python] Reduce runtime of builds in Travis CI",
        "body": "***Note**: This issue was originally created as [ARROW-2071](https://issues.apache.org/jira/browse/ARROW-2071). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor some reason, recently each Python build has been taking about 15 minutes to run. I speculate this is due to VM thrashing caused by reduced resources on the Travis CI workers, related to the problem I fixed in ARROW-2062.\r\n\r\nWe should experiment, but it seems like perhaps this can be fixed either by:\r\n\r\n- Reducing the size of the Plasma store on Travis CI\n- Disabling valgrind in Plasma tests\n  \n  The slowness could be caused by something else, though, so we should investigate (and have pytest report slow tests in the logs)",
        "created_at": "2018-01-31T21:27:05.000Z",
        "updated_at": "2018-02-06T14:24:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-02-05T21:48:57.000Z"
    },
    "comments": [
        {
            "created_at": "2018-01-31T22:44:25.581Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16347716) by Antoine Pitrou (apitrou):*\nExperimenting in https://github.com/apache/arrow/pull/1541 :\r\n- Python 2.7:\n  ```Java\n  \n  ========================== slowest 15 test durations ===========================\n  285.93s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_serialization.py::test_custom_serialization\n  44.93s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_serialization.py::test_primitive_serialization\n  42.07s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_subscribe_deletions\n  29.15s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_subscribe\n  12.06s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_serialization.py::test_serialize_to_buffer\n  12.06s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_serialization.py::test_complex_serialization\n  8.30s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_use_one_memory_mapped_file\n  6.74s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_store_full\n  5.35s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_many_hashes\n  4.60s setup    pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_use_one_memory_mapped_file\n  4.52s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_create_with_metadata\n  3.33s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_get\n  2.80s teardown pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_use_one_memory_mapped_file\n  2.68s call     pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_create_existing\n  2.55s teardown pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_store_full\n  ======= 510 passed, 46 skipped, 3 xfailed, 6 warnings in 509.55 seconds ========\n  ```\n- Python 3.6:\n  ```Java\n  \n  ========================== slowest 15 test durations ===========================\n  236.05s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_serialization.py::test_custom_serialization\n  41.78s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_subscribe_deletions\n  38.78s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_serialization.py::test_primitive_serialization\n  28.87s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_subscribe\n  9.01s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_serialization.py::test_complex_serialization\n  8.90s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_serialization.py::test_serialize_to_buffer\n  8.30s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_use_one_memory_mapped_file\n  6.90s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_store_full\n  5.32s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_many_hashes\n  4.88s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_create_with_metadata\n  4.59s setup    pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_use_one_memory_mapped_file\n  3.34s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_get\n  2.92s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_create_existing\n  2.82s teardown pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_use_one_memory_mapped_file\n  2.54s teardown pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_store_full\n  ======= 510 passed, 46 skipped, 3 xfailed, 8 warnings in 447.68 seconds ========\n  ```\n  \n  I'm quite surprised by the runtimes. `pyarrow/tests/test_serialization.py::test_custom_serialization` only takes 1.7s here.\n  In the end the total time taken by Python tests was 15 minutes, while the whole build was 41 minutes long."
        },
        {
            "created_at": "2018-02-02T20:10:26.408Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16350894) by Antoine Pitrou (apitrou):*\n<https://github.com/apache/arrow/pull/1550> addresses the serialization tests (kind of... they still take one minute) but not the plasma tests."
        },
        {
            "created_at": "2018-02-04T18:53:30.494Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16351861) by Uwe Korn (uwe):*\nIssue resolved by pull request 1550\n<https://github.com/apache/arrow/pull/1550>"
        },
        {
            "created_at": "2018-02-04T21:04:25.700Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16351891) by Wes McKinney (wesm):*\nI am reopening since there's probably still some work to do here to improve test runtimes"
        },
        {
            "created_at": "2018-02-05T12:25:33.048Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16352315) by Antoine Pitrou (apitrou):*\nI am not able to reproduce the slowness with a debug build on Ubuntu 16.04 with gcc 4.9.3."
        },
        {
            "created_at": "2018-02-05T13:33:40.817Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16352381) by Antoine Pitrou (apitrou):*\nNeither can I reproduce with clang 4.0.0."
        },
        {
            "created_at": "2018-02-05T13:55:34.178Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16352400) by Antoine Pitrou (apitrou):*\nI opened <https://github.com/apache/arrow/pull/1560> to try and investigate which option(s) may incur the slowness."
        },
        {
            "created_at": "2018-02-05T15:13:08.803Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16352516) by Antoine Pitrou (apitrou):*\nOk, so it seems the slowness in plasma tests is due to the use of Valgrind (`export PLASMA_VALGRIND=1`)."
        },
        {
            "created_at": "2018-02-05T15:43:52.395Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16352560) by Antoine Pitrou (apitrou):*\nI'm managing to get the plasma tests much faster with Valgrind:\r\n```Java\n\r\n4.90s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_many_hashes\r\n4.38s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_subscribe_deletions\r\n3.12s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_subscribe\r\n3.06s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_get\r\n2.85s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_create_existing\r\n1.79s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_create_with_metadata\r\n1.49s setup    pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_use_one_memory_mapped_file\r\n1.41s call     pyarrow-test-3.6/lib/python3.6/site-packages/pyarrow/tests/test_plasma.py::TestPlasmaClient::test_use_one_memory_mapped_file\n```\r\n\r\nStill haven't managed to diagnose the serialization tests slowness."
        },
        {
            "created_at": "2018-02-05T17:41:07.268Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16352679) by Antoine Pitrou (apitrou):*\nOk, I managed to demystify the serialization tests issue. It occurs when pytorch is installed. Why? Because it seems the pytorch build is buggy and fails importing:\r\n\r\n```Java\n\r\n$ python -c \"import torch\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/home/antoine/miniconda3/envs/ttt/lib/python3.6/site-packages/torch/__init__.py\", line 53, in <module>\r\n    from torch._C import *\r\nImportError: /home/antoine/miniconda3/envs/ttt/lib/python3.6/site-packages/torch/lib/libTHC.so.1: undefined symbol: THLongStorage_inferSizeN\r\n```\r\n\r\nYou'll see this too in the Travis-CI test output:\r\n```Java\n\r\nSKIP [1] /home/travis/build/apache/arrow/pyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_serialization.py:349: could not import 'torch'\r\n```\r\n\r\nBut why does it take so much CPU time?\r\nBecause `import torch` is tried at each call to `assert_equal()` in `test_serialization.py` \u2013 that function calls itself recursively for each element in a container... And failing to import is actually costly, because it invokes the dynamic loader every time.\r\n\r\nThere is a simple solution which is to blacklist the module once it has failed importing."
        },
        {
            "created_at": "2018-02-05T18:31:38.378Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16352736) by Antoine Pitrou (apitrou):*\nBy the way, there's also a \"pytorch\" conda channel with some pytorch builds (by the same person \"soumith\"):\r\n\r\n<https://anaconda.org/pytorch/pytorch/files>\r\n\r\nAFAICT locally, they work better (but that may depend on conda environment details...)."
        },
        {
            "created_at": "2018-02-05T21:48:57.866Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2071?focusedCommentId=16352972) by Wes McKinney (wesm):*\nIssue resolved by pull request 1561\n<https://github.com/apache/arrow/pull/1561>"
        }
    ]
}