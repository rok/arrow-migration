{
    "issue": {
        "title": "[Java] ArrowMessage failed to parse compressed grpc stream",
        "body": "***Note**: This issue was originally created as [ARROW-11177](https://issues.apache.org/jira/browse/ARROW-11177). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nInvalidProtocolBufferException will be thrown in ArrowMessage.frame if we use gzip compress in Grpc.\r\n\r\nThe reason is stream.available\u00a0will still be 1 after we read compressed data. There should be another attempt read to change InflaterInputStream.reachEOF to be true, and make stream.available to be 0.\r\n\r\nThus we need check stream.available after read tag from stream.",
        "created_at": "2021-01-08T02:39:37.000Z",
        "updated_at": "2022-06-07T11:50:17.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: FlightRPC",
            "Component: Java",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-01-08T02:42:09.935Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11177?focusedCommentId=17260950) by David Li (lidavidm):*\nThanks for the report!\r\n\r\nWe haven't tried to use gRPC's compression yet. Note Arrow itself supports compression of data (e.g. for the FeatherV2 format) which may also be an option (but that is also not yet something we've tried.) It would be interesting to see which performs better. IIRC, gRPC only offers a few simple codecs (gz), but Arrow supports more expensive ones too (lz4, zstd, etc)."
        },
        {
            "created_at": "2021-01-08T02:52:14.138Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11177?focusedCommentId=17260954) by Jackey Lee (Jackey Lee):*\nYeah, we are working on the compression performance test currently, all of these will be tested."
        }
    ]
}