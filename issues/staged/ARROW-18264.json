{
    "issue": {
        "title": "[Python] Add Time64Scalar.value field",
        "body": "***Note**: This issue was originally created as [ARROW-18264](https://issues.apache.org/jira/browse/ARROW-18264). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAt the moment, when pandas is not installed, it is not possible to access the underlying value for a Time64Scalar of \"ns\" precision without casting it to int64.\r\n```java\n\r\ntime_ns = pa.array([1, 2, 3],pa.time64(\"ns\"))\r\nscalar = time_ns[0]\r\nscalar.as_py() \n```\r\nRaises:\r\n```java\n\r\nValueError: Nanosecond resolution temporal type 1 is not safely convertible to microseconds to convert to datetime.datetime. Install pandas to return as Timestamp with nanosecond support or access the .value attribute\n```\r\nBut value isn't available:\r\n```java\n\r\nscalar.value \n```\r\nRaises:\r\n```java\n\r\nAttributeError: 'pyarrow.lib.Time64Scalar' object has no attribute 'value' \n```\r\nThe workaround is to do:\r\n```java\n\r\nscalar.cast(pa.int64()).as_py() \n```\r\nIt'd be good if a value field was added to Time64Scalar, just like the TimestampScalar\r\n```java\n\r\ntimestamp_ns = pa.array([1, 2, 3],pa.timestamp(\"ns\", \"UTC\"))\r\nscalar = timestamp_ns[0]\r\nscalar.value \n```",
        "created_at": "2022-11-07T11:43:35.000Z",
        "updated_at": "2022-11-15T12:42:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-11-15T08:42:09.000Z"
    },
    "comments": [
        {
            "created_at": "2022-11-15T08:42:09.835Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18264?focusedCommentId=17634234) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 14637\n<https://github.com/apache/arrow/pull/14637>"
        }
    ]
}