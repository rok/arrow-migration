{
    "issue": {
        "title": "[Dev][Archery] Test is failed with semver 2.13.0",
        "body": "***Note**: This issue was originally created as [ARROW-10364](https://issues.apache.org/jira/browse/ARROW-10364). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nhttps://github.com/apache/arrow/runs/1276765550?check_suite_focus=true\r\n\r\n```\n\r\n=================================== FAILURES ===================================\r\n_____________________________ test_release_basics ______________________________\r\n\r\nfake_jira = <test_release.FakeJira object at 0x7fac73641630>\r\n\r\n    def test_release_basics(fake_jira):\r\n>       r = Release.from_jira(\"1.0.0\", jira=fake_jira)\r\n\r\narchery/tests/test_release.py:202: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\narchery/release.py:281: in from_jira\r\n    version = jira.project_version(version, project='ARROW')\r\narchery/release.py:93: in project_version\r\n    return versions[versions.index(version_string)]\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:203: in wrapper\r\n    return operator(self, other)\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:573: in __eq__\r\n    return self.compare(other) == 0\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:493: in compare\r\n    other = cls.parse(other)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'archery.release.Version'>, version = '1.0.0'\r\n\r\n        @classmethod\r\n        def parse(cls, version):\r\n            \"\"\"\r\n            Parse version string to a VersionInfo instance.\r\n    \r\n            :param version: version string\r\n            :return: a :class:`VersionInfo` instance\r\n            :raises: :class:`ValueError`\r\n            :rtype: :class:`VersionInfo`\r\n    \r\n            .. versionchanged:: 2.11.0\r\n               Changed method from static to classmethod to\r\n               allow subclasses.\r\n    \r\n            >>> semver.VersionInfo.parse('3.4.5-pre.2+build.4')\r\n            VersionInfo(major=3, minor=4, patch=5, \\\r\n    prerelease='pre.2', build='build.4')\r\n            \"\"\"\r\n            match = cls._REGEX.match(ensure_str(version))\r\n            if match is None:\r\n                raise ValueError(\"%s is not valid SemVer string\" % version)\r\n    \r\n            version_parts = match.groupdict()\r\n    \r\n            version_parts[\"major\"] = int(version_parts[\"major\"])\r\n            version_parts[\"minor\"] = int(version_parts[\"minor\"])\r\n            version_parts[\"patch\"] = int(version_parts[\"patch\"])\r\n    \r\n>           return cls(**version_parts)\r\nE           TypeError: __init__() got an unexpected keyword argument 'major'\r\n\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:734: TypeError\r\n________________________ test_previous_and_next_release ________________________\r\n\r\nfake_jira = <test_release.FakeJira object at 0x7fac7372d668>\r\n\r\n    def test_previous_and_next_release(fake_jira):\r\n>       r = Release.from_jira(\"3.0.0\", jira=fake_jira)\r\n\r\narchery/tests/test_release.py:229: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\narchery/release.py:281: in from_jira\r\n    version = jira.project_version(version, project='ARROW')\r\narchery/release.py:93: in project_version\r\n    return versions[versions.index(version_string)]\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:203: in wrapper\r\n    return operator(self, other)\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:573: in __eq__\r\n    return self.compare(other) == 0\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:493: in compare\r\n    other = cls.parse(other)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'archery.release.Version'>, version = '3.0.0'\r\n\r\n        @classmethod\r\n        def parse(cls, version):\r\n            \"\"\"\r\n            Parse version string to a VersionInfo instance.\r\n    \r\n            :param version: version string\r\n            :return: a :class:`VersionInfo` instance\r\n            :raises: :class:`ValueError`\r\n            :rtype: :class:`VersionInfo`\r\n    \r\n            .. versionchanged:: 2.11.0\r\n               Changed method from static to classmethod to\r\n               allow subclasses.\r\n    \r\n            >>> semver.VersionInfo.parse('3.4.5-pre.2+build.4')\r\n            VersionInfo(major=3, minor=4, patch=5, \\\r\n    prerelease='pre.2', build='build.4')\r\n            \"\"\"\r\n            match = cls._REGEX.match(ensure_str(version))\r\n            if match is None:\r\n                raise ValueError(\"%s is not valid SemVer string\" % version)\r\n    \r\n            version_parts = match.groupdict()\r\n    \r\n            version_parts[\"major\"] = int(version_parts[\"major\"])\r\n            version_parts[\"minor\"] = int(version_parts[\"minor\"])\r\n            version_parts[\"patch\"] = int(version_parts[\"patch\"])\r\n    \r\n>           return cls(**version_parts)\r\nE           TypeError: __init__() got an unexpected keyword argument 'major'\r\n\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:734: TypeError\r\n_____________________________ test_release_issues ______________________________\r\n\r\nfake_jira = <test_release.FakeJira object at 0x7fac73896588>\r\n\r\n    def test_release_issues(fake_jira):\r\n# major release issues\r\n>       r = Release.from_jira(\"1.0.0\", jira=fake_jira)\r\n\r\narchery/tests/test_release.py:272: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\narchery/release.py:281: in from_jira\r\n    version = jira.project_version(version, project='ARROW')\r\narchery/release.py:93: in project_version\r\n    return versions[versions.index(version_string)]\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:203: in wrapper\r\n    return operator(self, other)\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:573: in __eq__\r\n    return self.compare(other) == 0\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:493: in compare\r\n    other = cls.parse(other)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'archery.release.Version'>, version = '1.0.0'\r\n\r\n        @classmethod\r\n        def parse(cls, version):\r\n            \"\"\"\r\n            Parse version string to a VersionInfo instance.\r\n    \r\n            :param version: version string\r\n            :return: a :class:`VersionInfo` instance\r\n            :raises: :class:`ValueError`\r\n            :rtype: :class:`VersionInfo`\r\n    \r\n            .. versionchanged:: 2.11.0\r\n               Changed method from static to classmethod to\r\n               allow subclasses.\r\n    \r\n            >>> semver.VersionInfo.parse('3.4.5-pre.2+build.4')\r\n            VersionInfo(major=3, minor=4, patch=5, \\\r\n    prerelease='pre.2', build='build.4')\r\n            \"\"\"\r\n            match = cls._REGEX.match(ensure_str(version))\r\n            if match is None:\r\n                raise ValueError(\"%s is not valid SemVer string\" % version)\r\n    \r\n            version_parts = match.groupdict()\r\n    \r\n            version_parts[\"major\"] = int(version_parts[\"major\"])\r\n            version_parts[\"minor\"] = int(version_parts[\"minor\"])\r\n            version_parts[\"patch\"] = int(version_parts[\"patch\"])\r\n    \r\n>           return cls(**version_parts)\r\nE           TypeError: __init__() got an unexpected keyword argument 'major'\r\n\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:734: TypeError\r\n_______________________ test_release_commits[1.0.0-771] ________________________\r\n\r\nfake_jira = <test_release.FakeJira object at 0x7fac73856e10>, version = '1.0.0'\r\nncommits = 771\r\n\r\n    @pytest.mark.parametrize(('version', 'ncommits'), [\r\n        (\"1.0.0\", 771),\r\n        (\"0.17.1\", 27),\r\n        (\"0.17.0\", 569),\r\n        (\"0.15.1\", 41)\r\n    ])\r\n    def test_release_commits(fake_jira, version, ncommits):\r\n>       r = Release.from_jira(version, jira=fake_jira)\r\n\r\narchery/tests/test_release.py:313: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\narchery/release.py:281: in from_jira\r\n    version = jira.project_version(version, project='ARROW')\r\narchery/release.py:93: in project_version\r\n    return versions[versions.index(version_string)]\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:203: in wrapper\r\n    return operator(self, other)\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:573: in __eq__\r\n    return self.compare(other) == 0\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:493: in compare\r\n    other = cls.parse(other)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'archery.release.Version'>, version = '1.0.0'\r\n\r\n        @classmethod\r\n        def parse(cls, version):\r\n            \"\"\"\r\n            Parse version string to a VersionInfo instance.\r\n    \r\n            :param version: version string\r\n            :return: a :class:`VersionInfo` instance\r\n            :raises: :class:`ValueError`\r\n            :rtype: :class:`VersionInfo`\r\n    \r\n            .. versionchanged:: 2.11.0\r\n               Changed method from static to classmethod to\r\n               allow subclasses.\r\n    \r\n            >>> semver.VersionInfo.parse('3.4.5-pre.2+build.4')\r\n            VersionInfo(major=3, minor=4, patch=5, \\\r\n    prerelease='pre.2', build='build.4')\r\n            \"\"\"\r\n            match = cls._REGEX.match(ensure_str(version))\r\n            if match is None:\r\n                raise ValueError(\"%s is not valid SemVer string\" % version)\r\n    \r\n            version_parts = match.groupdict()\r\n    \r\n            version_parts[\"major\"] = int(version_parts[\"major\"])\r\n            version_parts[\"minor\"] = int(version_parts[\"minor\"])\r\n            version_parts[\"patch\"] = int(version_parts[\"patch\"])\r\n    \r\n>           return cls(**version_parts)\r\nE           TypeError: __init__() got an unexpected keyword argument 'major'\r\n\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:734: TypeError\r\n_______________________ test_release_commits[0.17.1-27] ________________________\r\n\r\nfake_jira = <test_release.FakeJira object at 0x7fac739019e8>, version = '0.17.1'\r\nncommits = 27\r\n\r\n    @pytest.mark.parametrize(('version', 'ncommits'), [\r\n        (\"1.0.0\", 771),\r\n        (\"0.17.1\", 27),\r\n        (\"0.17.0\", 569),\r\n        (\"0.15.1\", 41)\r\n    ])\r\n    def test_release_commits(fake_jira, version, ncommits):\r\n>       r = Release.from_jira(version, jira=fake_jira)\r\n\r\narchery/tests/test_release.py:313: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\narchery/release.py:281: in from_jira\r\n    version = jira.project_version(version, project='ARROW')\r\narchery/release.py:93: in project_version\r\n    return versions[versions.index(version_string)]\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:203: in wrapper\r\n    return operator(self, other)\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:573: in __eq__\r\n    return self.compare(other) == 0\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:493: in compare\r\n    other = cls.parse(other)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'archery.release.Version'>, version = '0.17.1'\r\n\r\n        @classmethod\r\n        def parse(cls, version):\r\n            \"\"\"\r\n            Parse version string to a VersionInfo instance.\r\n    \r\n            :param version: version string\r\n            :return: a :class:`VersionInfo` instance\r\n            :raises: :class:`ValueError`\r\n            :rtype: :class:`VersionInfo`\r\n    \r\n            .. versionchanged:: 2.11.0\r\n               Changed method from static to classmethod to\r\n               allow subclasses.\r\n    \r\n            >>> semver.VersionInfo.parse('3.4.5-pre.2+build.4')\r\n            VersionInfo(major=3, minor=4, patch=5, \\\r\n    prerelease='pre.2', build='build.4')\r\n            \"\"\"\r\n            match = cls._REGEX.match(ensure_str(version))\r\n            if match is None:\r\n                raise ValueError(\"%s is not valid SemVer string\" % version)\r\n    \r\n            version_parts = match.groupdict()\r\n    \r\n            version_parts[\"major\"] = int(version_parts[\"major\"])\r\n            version_parts[\"minor\"] = int(version_parts[\"minor\"])\r\n            version_parts[\"patch\"] = int(version_parts[\"patch\"])\r\n    \r\n>           return cls(**version_parts)\r\nE           TypeError: __init__() got an unexpected keyword argument 'major'\r\n\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:734: TypeError\r\n_______________________ test_release_commits[0.17.0-569] _______________________\r\n\r\nfake_jira = <test_release.FakeJira object at 0x7fac73823198>, version = '0.17.0'\r\nncommits = 569\r\n\r\n    @pytest.mark.parametrize(('version', 'ncommits'), [\r\n        (\"1.0.0\", 771),\r\n        (\"0.17.1\", 27),\r\n        (\"0.17.0\", 569),\r\n        (\"0.15.1\", 41)\r\n    ])\r\n    def test_release_commits(fake_jira, version, ncommits):\r\n>       r = Release.from_jira(version, jira=fake_jira)\r\n\r\narchery/tests/test_release.py:313: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\narchery/release.py:281: in from_jira\r\n    version = jira.project_version(version, project='ARROW')\r\narchery/release.py:93: in project_version\r\n    return versions[versions.index(version_string)]\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:203: in wrapper\r\n    return operator(self, other)\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:573: in __eq__\r\n    return self.compare(other) == 0\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:493: in compare\r\n    other = cls.parse(other)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'archery.release.Version'>, version = '0.17.0'\r\n\r\n        @classmethod\r\n        def parse(cls, version):\r\n            \"\"\"\r\n            Parse version string to a VersionInfo instance.\r\n    \r\n            :param version: version string\r\n            :return: a :class:`VersionInfo` instance\r\n            :raises: :class:`ValueError`\r\n            :rtype: :class:`VersionInfo`\r\n    \r\n            .. versionchanged:: 2.11.0\r\n               Changed method from static to classmethod to\r\n               allow subclasses.\r\n    \r\n            >>> semver.VersionInfo.parse('3.4.5-pre.2+build.4')\r\n            VersionInfo(major=3, minor=4, patch=5, \\\r\n    prerelease='pre.2', build='build.4')\r\n            \"\"\"\r\n            match = cls._REGEX.match(ensure_str(version))\r\n            if match is None:\r\n                raise ValueError(\"%s is not valid SemVer string\" % version)\r\n    \r\n            version_parts = match.groupdict()\r\n    \r\n            version_parts[\"major\"] = int(version_parts[\"major\"])\r\n            version_parts[\"minor\"] = int(version_parts[\"minor\"])\r\n            version_parts[\"patch\"] = int(version_parts[\"patch\"])\r\n    \r\n>           return cls(**version_parts)\r\nE           TypeError: __init__() got an unexpected keyword argument 'major'\r\n\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:734: TypeError\r\n_______________________ test_release_commits[0.15.1-41] ________________________\r\n\r\nfake_jira = <test_release.FakeJira object at 0x7fac73942470>, version = '0.15.1'\r\nncommits = 41\r\n\r\n    @pytest.mark.parametrize(('version', 'ncommits'), [\r\n        (\"1.0.0\", 771),\r\n        (\"0.17.1\", 27),\r\n        (\"0.17.0\", 569),\r\n        (\"0.15.1\", 41)\r\n    ])\r\n    def test_release_commits(fake_jira, version, ncommits):\r\n>       r = Release.from_jira(version, jira=fake_jira)\r\n\r\narchery/tests/test_release.py:313: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\narchery/release.py:281: in from_jira\r\n    version = jira.project_version(version, project='ARROW')\r\narchery/release.py:93: in project_version\r\n    return versions[versions.index(version_string)]\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:203: in wrapper\r\n    return operator(self, other)\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:573: in __eq__\r\n    return self.compare(other) == 0\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:493: in compare\r\n    other = cls.parse(other)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'archery.release.Version'>, version = '0.15.1'\r\n\r\n        @classmethod\r\n        def parse(cls, version):\r\n            \"\"\"\r\n            Parse version string to a VersionInfo instance.\r\n    \r\n            :param version: version string\r\n            :return: a :class:`VersionInfo` instance\r\n            :raises: :class:`ValueError`\r\n            :rtype: :class:`VersionInfo`\r\n    \r\n            .. versionchanged:: 2.11.0\r\n               Changed method from static to classmethod to\r\n               allow subclasses.\r\n    \r\n            >>> semver.VersionInfo.parse('3.4.5-pre.2+build.4')\r\n            VersionInfo(major=3, minor=4, patch=5, \\\r\n    prerelease='pre.2', build='build.4')\r\n            \"\"\"\r\n            match = cls._REGEX.match(ensure_str(version))\r\n            if match is None:\r\n                raise ValueError(\"%s is not valid SemVer string\" % version)\r\n    \r\n            version_parts = match.groupdict()\r\n    \r\n            version_parts[\"major\"] = int(version_parts[\"major\"])\r\n            version_parts[\"minor\"] = int(version_parts[\"minor\"])\r\n            version_parts[\"patch\"] = int(version_parts[\"patch\"])\r\n    \r\n>           return cls(**version_parts)\r\nE           TypeError: __init__() got an unexpected keyword argument 'major'\r\n\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:734: TypeError\r\n_______________________ test_maintenance_patch_selection _______________________\r\n\r\nfake_jira = <test_release.FakeJira object at 0x7fac73620128>\r\n\r\n    def test_maintenance_patch_selection(fake_jira):\r\n>       r = Release.from_jira(\"0.17.1\", jira=fake_jira)\r\n\r\narchery/tests/test_release.py:322: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\narchery/release.py:281: in from_jira\r\n    version = jira.project_version(version, project='ARROW')\r\narchery/release.py:93: in project_version\r\n    return versions[versions.index(version_string)]\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:203: in wrapper\r\n    return operator(self, other)\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:573: in __eq__\r\n    return self.compare(other) == 0\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:493: in compare\r\n    other = cls.parse(other)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'archery.release.Version'>, version = '0.17.1'\r\n\r\n        @classmethod\r\n        def parse(cls, version):\r\n            \"\"\"\r\n            Parse version string to a VersionInfo instance.\r\n    \r\n            :param version: version string\r\n            :return: a :class:`VersionInfo` instance\r\n            :raises: :class:`ValueError`\r\n            :rtype: :class:`VersionInfo`\r\n    \r\n            .. versionchanged:: 2.11.0\r\n               Changed method from static to classmethod to\r\n               allow subclasses.\r\n    \r\n            >>> semver.VersionInfo.parse('3.4.5-pre.2+build.4')\r\n            VersionInfo(major=3, minor=4, patch=5, \\\r\n    prerelease='pre.2', build='build.4')\r\n            \"\"\"\r\n            match = cls._REGEX.match(ensure_str(version))\r\n            if match is None:\r\n                raise ValueError(\"%s is not valid SemVer string\" % version)\r\n    \r\n            version_parts = match.groupdict()\r\n    \r\n            version_parts[\"major\"] = int(version_parts[\"major\"])\r\n            version_parts[\"minor\"] = int(version_parts[\"minor\"])\r\n            version_parts[\"patch\"] = int(version_parts[\"patch\"])\r\n    \r\n>           return cls(**version_parts)\r\nE           TypeError: __init__() got an unexpected keyword argument 'major'\r\n\r\n/opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/semver.py:734: TypeError\r\n=============================== warnings summary ===============================\r\n../../../../../../../opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/jwt/utils.py:8\r\n  /opt/hostedtoolcache/Python/3.5.10/x64/lib/python3.5/site-packages/jwt/utils.py:8: CryptographyDeprecationWarning: Python 3.5 support will be dropped in the next release ofcryptography. Please upgrade your Python.\r\n    from cryptography.hazmat.primitives.asymmetric.utils import (\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n=========================== short test summary info ============================\r\nFAILED archery/tests/test_release.py::test_release_basics - TypeError: __init...\r\nFAILED archery/tests/test_release.py::test_previous_and_next_release - TypeEr...\r\nFAILED archery/tests/test_release.py::test_release_issues - TypeError: __init...\r\nFAILED archery/tests/test_release.py::test_release_commits[1.0.0-771] - TypeE...\r\nFAILED archery/tests/test_release.py::test_release_commits[0.17.1-27] - TypeE...\r\nFAILED archery/tests/test_release.py::test_release_commits[0.17.0-569] - Type...\r\nFAILED archery/tests/test_release.py::test_release_commits[0.15.1-41] - TypeE...\r\nFAILED archery/tests/test_release.py::test_maintenance_patch_selection - Type...\r\n=================== 8 failed, 34 passed, 1 warning in 23.52s ===================\r\nError: Process completed with exit code 1.\r\n```",
        "created_at": "2020-10-21T20:29:46.000Z",
        "updated_at": "2021-03-30T09:45:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Archery",
            "Component: Developer Tools",
            "Type: test"
        ],
        "closed": true,
        "closed_at": "2021-03-30T09:45:13.000Z"
    },
    "comments": [
        {
            "created_at": "2021-03-30T09:45:13.267Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10364?focusedCommentId=17311338) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 8501\n<https://github.com/apache/arrow/pull/8501>"
        }
    ]
}