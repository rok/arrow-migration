{
    "issue": {
        "title": "[R] binding for grepl has different behaviour with NA compared to R base grepl",
        "body": "***Note**: This issue was originally created as [ARROW-16007](https://issues.apache.org/jira/browse/ARROW-16007). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe arrow binding to `grepl` behaves slightly differently than the base R `{}grepl{`}, in that it returns `NA` for `NA` inputs, whereas base `grepl` returns `{}FALSE with NA inputs. arrow's implementation is consistent with stringr::str_detect(){`}, and both `str_detect()` and `grepl()` are bound to `match_substring_regex` and `match_substring` in arrow.\r\n\r\nI don't know if this is something you would want to change so that the `grepl` behaviour aligns with base `{}grepl{`}, or simply document this difference?\r\n\r\nReprex:\r\n\u00a0\r\n```r\n\r\nlibrary(arrow, warn.conflicts = FALSE, quietly = TRUE)\r\nlibrary(dplyr, warn.conflicts = FALSE, quietly = TRUE)\r\nlibrary(stringr, quietly = TRUE)\r\n\r\nalpha_df <- data.frame(alpha = c(\"alpha\", \"bet\", NA_character_))\r\nalpha_dataset <- InMemoryDataset$create(alpha_df)\r\n\r\nmutate(alpha_df,\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0grepl_is_a = grepl(\"a\", alpha),\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0stringr_is_a = str_detect(alpha, \"a\"))\r\n#> \u00a0 alpha grepl_is_a stringr_is_a\r\n#> 1 alpha \u00a0 \u00a0 \u00a0 TRUE \u00a0 \u00a0 \u00a0 \u00a0 TRUE\r\n#> 2 \u00a0 bet \u00a0 \u00a0 \u00a0FALSE \u00a0 \u00a0 \u00a0 \u00a0FALSE\r\n#> 3 \u00a0<NA> \u00a0 \u00a0 \u00a0FALSE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 NA\r\n\r\nmutate(alpha_dataset,\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0grepl_is_a = grepl(\"a\", alpha),\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0stringr_is_a = str_detect(alpha, \"a\")) |>\u00a0\r\n\u00a0 collect()\r\n#> \u00a0 alpha grepl_is_a stringr_is_a\r\n#> 1 alpha \u00a0 \u00a0 \u00a0 TRUE \u00a0 \u00a0 \u00a0 \u00a0 TRUE\r\n#> 2 \u00a0 bet \u00a0 \u00a0 \u00a0FALSE \u00a0 \u00a0 \u00a0 \u00a0FALSE\r\n#> 3 \u00a0<NA> \u00a0 \u00a0 \u00a0 \u00a0 NA \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 NA\r\n\r\n# base R grepl returns FALSE for NA\r\ngrepl(\"a\", alpha_df$alpha) # bound to arrow_match_substring_regex\r\n#> [1] \u00a0TRUE FALSE FALSE\r\n\r\ngrepl(\"a\", alpha_df$alpha, fixed = TRUE) # bound to arrow_match_substring\r\n#> [1] \u00a0TRUE FALSE FALSE\r\n\r\n# stringr::str_dectect returns NA for NA\r\nstr_detect(alpha_df$alpha, \"a\")\r\n#> [1] \u00a0TRUE FALSE \u00a0 \u00a0NA\r\n\r\nalpha_array <- Array$create(alpha_df$alpha)\r\n\r\n# arrow functions return null for null (NA)\r\ncall_function(\"match_substring_regex\", alpha_array, options = list(pattern = \"a\"))\r\n#> Array\r\n#> <bool>\r\n#> [\r\n#> \u00a0 true,\r\n#> \u00a0 false,\r\n#> \u00a0 null\r\n#> ]\r\n\r\ncall_function(\"match_substring\", alpha_array, options = list(pattern = \"a\"))\r\n#> Array\r\n#> <bool>\r\n#> [\r\n#> \u00a0 true,\r\n#> \u00a0 false,\r\n#> \u00a0 null\r\n#> ]\r\n```\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2022-03-22T19:06:42.000Z",
        "updated_at": "2022-03-28T21:02:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-03-26T00:23:43.000Z"
    },
    "comments": [
        {
            "created_at": "2022-03-22T19:12:17.127Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17510837) by Andy Teucher (ateucher):*\nI meant to add - whether you'd like to change the behaviour or document the differences, I'd be keen to take it on!"
        },
        {
            "created_at": "2022-03-22T19:32:11.348Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17510845) by Jonathan Keane (jonkeane):*\nGood catch, as far as I see there was not a principled reason to diverge like this.\r\n\r\nWe would of course welcome a PR to add tests for this + update the Arrow `grepl` behavior to match base R's. Let us know if you would like any pointers"
        },
        {
            "created_at": "2022-03-22T20:51:49.349Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17510895) by Andy Teucher (ateucher):*\nGreat! I anticipate that I will need some pointers, but will do some investigation first."
        },
        {
            "created_at": "2022-03-23T22:25:31.561Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17511513) by Andy Teucher (ateucher):*\n`[~jonkeane]` I'd like a bit of advice if you don't mind. My initial thoughts on this were to do it in the C++ code in the arrow library, and add a `null_as_false` boolean option to `MatchSubstringOptions`, and set `null_as_false` to `true` when `RegexSubstringMatcher` is called by `grepl`, and `false` otherwise (to match stringr behaviour with `starts_with`, `str_detect` etc). I'm muddling my way through and making decent progress on that path, but then it occurred to me that if this is just a special case in R, maybe it's better to do it on the R side and just change `NA` to `FALSE` in the return value of the binding of `grepl`?"
        },
        {
            "created_at": "2022-03-24T05:03:10.565Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17511592) by Andy Teucher (ateucher):*\nI have pushed up my work so far trying to implement `null_as_false` in the C++ code [here](https://github.com/apache/arrow/compare/master...ateucher:r-grepl-na).\r\n\r\nI am struggling with a couple of things:\r\n1. how to detect `NULL` values in a `string_view` (differentiated from an empty string). Right now I am using `string_view::empty()` but I don't think that's right.\n1. The code logic I've written is working in that the argument `null_as_false` is going to the right place (tested with a bunch of `std::cout` peppered around), but the `return false;` [here](https://github.com/ateucher/arrow/blob/c9c07ae8170cd931d839a288f3c19ac9118eccde/cpp/src/arrow/compute/kernels/scalar_string_ascii.cc#L1459) is being shortcut somewhere that I can't find, as it is still returning `NULL`.\n   \n   I'm actually struggling to figure out where the R vector gets passed into (and out of) the C++ innards, as I'm guessing that's where those NULLs are captured and returned as NULLs, and probably where the casting to FALSE should happen.\n   \n   This is my first foray into C++ and this is a big complex codebase, so I know it's entirely possible I'm totally on the wrong track :)"
        },
        {
            "created_at": "2022-03-24T17:29:21.376Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17511971) by Jonathan Keane (jonkeane):*\nYou've definitely identified the two paths for this. I agree with your hesitance that empty string and nulls shouldn't be conflated. \r\n\r\nThe string conversion from R is a bit complicated, but https://github.com/apache/arrow/blob/ddb663b1724034f64cc53d62bd2d5a4e8fa42954/r/src/r_to_arrow.cpp#L777-L824 (and the rest of that file) is a good starting point.\r\n\r\n\r\nAll of that being said, I would probably go the second route you mention (and sorry for not responding with this earlier!):\r\n\r\n>  but then it occurred to me that if this is just a special case in R, maybe it's better to do it on the R side and just change NA to FALSE in the return value of the binding of grepl?\r\n\r\nYou could put a call to `if_else` + `is.na` bindings inside of the `grepl` binding and get the behavior in R. We do have some support via options for different null handling behaviors for other functions, but I suspect R is a bit of an outlier here (I tried to construct a reprex in Python to see if I could see what it does, but every `re.match()` with anything missing-like is a type error!). "
        },
        {
            "created_at": "2022-03-24T17:52:28.524Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17511992) by Andy Teucher (ateucher):*\nOk, great thanks. No need to apologize about the timeliness of your reply - even if not the right path it's been fun trying to figure it out.\r\n\r\nI do think the R `grepl` behaviour is definitely an outlier (and IMO probably not the best).\r\n\r\nJust to clarify, using `if_else` + `is.na` inside the `grepl` binding will utilize those bindings and thus happen in arrow at `collect` time?"
        },
        {
            "created_at": "2022-03-24T18:45:42.286Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17512025) by Jonathan Keane (jonkeane):*\nYeah the (possibly slightly misnamed) `call_binding` builds an Expression that will later be evaluated at `collect` time. A similar setup is used at https://github.com/apache/arrow/blob/012ae6e961dbb472c7862f40be5dc972a9bd3e91/r/R/dplyr-funcs-datetime.R#L221-L226 in `ISOdatetime` to run `sec=NA` into `0` here (another R oddity!)"
        },
        {
            "created_at": "2022-03-24T20:02:49.355Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17512069) by Andy Teucher (ateucher):*\nPerfect. I've got it working, just need to rejig things a bit since many of the other bindings call the grepl binding, and we don't want that behaviour to propagate into `str_detect` etc."
        },
        {
            "created_at": "2022-03-24T23:22:20.694Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17512117) by Andy Teucher (ateucher):*\nI've created a PR [here](https://github.com/apache/arrow/pull/12711) - happy to receive feedback on the approach!"
        },
        {
            "created_at": "2022-03-26T00:23:43.549Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16007?focusedCommentId=17512644) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 12711\n<https://github.com/apache/arrow/pull/12711>"
        }
    ]
}