{
    "issue": {
        "title": "[Python] Allow subclassing & monkey-patching of Table",
        "body": "***Note**: This issue was originally created as [ARROW-6486](https://issues.apache.org/jira/browse/ARROW-6486). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, many classes in `pyarrow` behave strangely to the Python user: they are neither subclassable not monkey-patchable.\r\n\r\n\u00a0\r\n\r\n`>>> import pyarrow as pa`\r\n `>>> class MyTable(pa.Table):`\r\n `... pass`\r\n `...`\r\n `>>> table = MyTable.from_arrays([], [])`\r\n `>>> type(table)`\r\n `<class 'pyarrow.lib.Table'>`\r\n\r\nThe factory method did not return an instance of our subclass...\r\n\r\nNever mind, let's monkey-patch `Table`:\r\n\r\n`>>> pa.TableOriginal = pa.Table`\r\n `>>> pa.Table = MyTable`\r\n `>>> table = pa.Table.from_arrays([], [])`\r\n `>>> type(table)`\r\n `<class 'pyarrow.lib.Table'>`\r\n\r\n\u00a0\r\n\r\nOK, that did not work either.\r\n\r\nLet's be sneaky:\r\n\r\n`>>> table.__class__ = MyTable`\r\n `Traceback (most recent call last):`\r\n \\` File \"<stdin>\", line 1, in <module>`\r\n `TypeError: __class__ assignment only supported for heap types or ModuleType subclasses`\r\n `>>>`\r\n\r\n\u00a0\r\n\r\nThere is currently no way to modify or extend the behaviour of a `Table` instance. Users can use only what `pyarrow` provides out of the box. - This is likely to be a source of frustration for many python users.\r\n\r\n\u00a0\r\n\r\nThe attached PR remedies this for the `Table` class:\r\n\r\n`>>> import pyarrow as pa`\r\n `>>> class MyTable(pa.Table):`\r\n `... pass`\r\n `...`\r\n `>>> table = MyTable.from_arrays([], [])`\r\n `>>> type(table)`\r\n `<class '__main__.MyTable'>`\r\n `>>>`\r\n `>>> pa.TableOriginal = pa.Table`\r\n `>>> pa.Table = MyTable`\r\n `>>> table = pa.Table.from_arrays([], [])`\r\n `>>> type(table)`\r\n `<class '__main__.MyTable'>`\r\n `>>>`\r\n\r\n\u00a0\r\n\r\nIdeally, these modifications would be extended to the other cython-defined classes of `pyarrow`, but given that Table is likely to be the interface that most users begin their interaction with, I thought this would be a good start.\r\n\r\nKeeping the changes limited to a single class should also keep merge conflicts manageable.",
        "created_at": "2019-09-08T13:37:45.000Z",
        "updated_at": "2019-09-11T14:20:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-09-11T14:20:28.000Z"
    },
    "comments": [
        {
            "created_at": "2019-09-09T05:34:59.887Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6486?focusedCommentId=16925371) by Joris Van den Bossche (jorisvandenbossche):*\nCan you give an example use case where you want to subclass Table?\r\n\r\nFrom experience with pandas, properly enabling subclassing of a complex data structure adds quite some complexity to the code with lots of corner cases. So I am personally hesitant to go down this path for pyarrow Table."
        }
    ]
}