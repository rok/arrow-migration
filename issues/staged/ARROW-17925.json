{
    "issue": {
        "title": "[Python] Use ExtensionScalar.as_py() as fallback in ExtensionArray to_pandas?",
        "body": "***Note**: This issue was originally created as [ARROW-17925](https://issues.apache.org/jira/browse/ARROW-17925). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis was raised in ARROW-17813 by `[~changhiskhan]`:\r\n\r\n> **ExtensionArray => pandas**\n> \n> Just for discussion, I was curious whether you had any thoughts around using the extension scalar as a fallback mechanism. It's a lot simpler to define an ExtensionScalar with `as_py` than a pandas extension dtype. So if an ExtensionArray doesn't have an equivalent pandas dtype, would it make sense to convert it to just an object series whose elements are the result of `as_py`?\r\n\r\nand I also mentioned this in ARROW-17535:\r\n\r\n> That actually brings up a question: if an ExtensionType defines an ExtensionScalar (but not an associciated pandas dtype, or custom to_numpy conversion), should we use this scalar's `as_py()` for the to_numpy/to_pandas conversion as well for plain extension arrays? (not the nested case) \n> \n> Because currently, if you have an ExtensionArray like that (for example using the example from the docs: https://arrow.apache.org/docs/dev/python/extending_types.html#custom-scalar-conversion), we still use the storage type conversion for to_numpy/to_pandas, and only use the scalar's conversion in `to_pylist`.",
        "created_at": "2022-10-04T10:11:57.000Z",
        "updated_at": "2022-10-12T17:37:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-04T10:21:29.284Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17925?focusedCommentId=17612555) by Joris Van den Bossche (jorisvandenbossche):*\nTo give a concrete copy-pastable example (using the one from the docs: https://arrow.apache.org/docs/dev/python/extending_types.html#custom-scalar-conversion):\r\n\r\n```python\n\r\nfrom collections import namedtuple\r\nimport pyarrow as pa\r\n\r\nPoint3D = namedtuple(\"Point3D\", [\"x\", \"y\", \"z\"])\r\n\r\nclass Point3DScalar(pa.ExtensionScalar):\r\n    def as_py(self) -> Point3D:\r\n        return Point3D(*self.value.as_py())\r\n\r\nclass Point3DType(pa.PyExtensionType):\r\n    def __init__(self):\r\n        pa.PyExtensionType.__init__(self, pa.list_(pa.float32(), 3))\r\n\r\n    def __reduce__(self):\r\n        return Point3DType, ()\r\n\r\n    def __arrow_ext_scalar_class__(self):\r\n        return Point3DScalar\r\n```\r\n\r\n```Java\n\r\nstorage = pa.array([[1, 2, 3], [4, 5, 6]], pa.list_(pa.float32(), 3))\r\narr = pa.ExtensionArray.from_storage(Point3DType(), storage)\r\n\r\n>>> arr.to_pandas().values\r\narray([array([1., 2., 3.], dtype=float32),\r\n       array([4., 5., 6.], dtype=float32)], dtype=object)\r\n\r\n>>> arr.to_pylist()\r\n[Point3D(x=1.0, y=2.0, z=3.0), Point3D(x=4.0, y=5.0, z=6.0)]\r\n```\r\n\r\nSo here, `to_pylist` gives the nice scalars, while in `to_pandas()`, we have the raw numpy arrays from converting the storage list array. \r\n\r\nWe _could_ do this automatically in `to_pandas` as well if we detect that the ExtensionType raises NotImplementedError for `to_pandas_dtype` and returns a subclass from `\\_\\_arrow_ext_scalar_class\\_\\_`. \r\n\r\nOn the other hand, you can also do this yourself by overriding `to_pandas()`? \r\n\r\nAnd what about `to_numpy()`?"
        },
        {
            "created_at": "2022-10-04T12:05:54.459Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17925?focusedCommentId=17612580) by Rok Mihevc (rokm):*\nAs a user I would like to have an opt-in 'no thinking' route and an obvious way to override if needed."
        },
        {
            "created_at": "2022-10-05T08:02:50.776Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17925?focusedCommentId=17612884) by Joris Van den Bossche (jorisvandenbossche):*\n`[~rokm]` but what is your _preferred_ no-thinking route? Is that to use `Scalar.as_py()` if you define that (and then convert to object dtype Series in pandas?), or to use the storage array conversion?"
        },
        {
            "created_at": "2022-10-05T09:29:13.171Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17925?focusedCommentId=17612922) by Rok Mihevc (rokm):*\nI suppose `as_py` as the overridable \"thinking\" route and storage array conversion as \"no-thinking\" (although that is not explicitly opt-in)."
        },
        {
            "created_at": "2022-10-12T17:37:50.754Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17925?focusedCommentId=17616608) by Chang She (changhiskhan):*\nMy head hurts trying to keep it all straight:\r\n\r\nso we have:\r\n- 3 \"targets\" for conversion (pylist, numpy, pandas)\n- At least 6 different knobs that can be turned:\n    => 4 different overrideable mechanisms (to_py, to_pylist, to_numpy, to_pandas)\n    => Storage fallback\n    => pandas extensionDtype <> pa.ExtensionType\n- Some of these are defined/performed in C++ and others in Python\n  \n  hard to think how to give devs clear guidance on the order of things"
        }
    ]
}