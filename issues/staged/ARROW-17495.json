{
    "issue": {
        "title": "[R] arrow_eval: do we need both nse_funcs and .cache$functions?",
        "body": "***Note**: This issue was originally created as [ARROW-17495](https://issues.apache.org/jira/browse/ARROW-17495). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently we have 2 copies of the same information, once in `nse_funcs` and once in `{}.cache$functions{`}. I wasn't able to figure out the reason for this. Maybe I am missing something or maybe this is just legacy code that we can update. \u00a0\u00a0",
        "created_at": "2022-08-22T13:02:45.000Z",
        "updated_at": "2022-08-25T08:12:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-08-24T09:00:46.789Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17495?focusedCommentId=17584136) by Nicola Crane (thisisnic):*\n`[~dragosmg]` I was trying to look into this, and saw this in the docs for the `update_cache` param for `register_binding()`:\r\n\r\n\"The reason why .cache$functions is needed in addition to nse_funcs for non-aggregate functions could be revisited...it is currently used as the data mask in mutate, filter, and aggregate (but not summarise) because the data mask has to be a list.\"\r\n\r\nGiven that `[~paleolimbot]` made the PR for the function registry stuff, he might be the person to ask about this?\r\n\r\n"
        },
        {
            "created_at": "2022-08-24T09:03:10.438Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17495?focusedCommentId=17584137) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nThanks for the pointer. I raised this ticket after a conversation with him as we were both wondering why the duplication existed."
        },
        {
            "created_at": "2022-08-24T16:17:23.139Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17495?focusedCommentId=17584353) by Dewey Dunnington (paleolimbot):*\nDragos got here first, but for the public record, I have no idea why it's there and I think it should be removed, personally (unless somebody pipes up here with the reason for its existence)."
        },
        {
            "created_at": "2022-08-24T16:28:50.403Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17495?focusedCommentId=17584360) by Neal Richardson (npr):*\nPer https://github.com/apache/arrow/blob/master/r/R/arrow-package.R#L64-L67, nse_funcs can't be fully populated until load time. \r\n\r\nFeel free to try removing it and seeing what breaks, and be sure to check benchmarks--I don't know how much overhead there is in re-creating a bunch of function definitions every time you arrow_eval, maybe it's a lot and maybe it isn't."
        },
        {
            "created_at": "2022-08-25T08:12:42.731Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17495?focusedCommentId=17584703) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nI can look into it (maybe after I finish with the capstone).\r\n\r\nAs far as I can tell, both `.cache$functions` and `nse_funcs` are created at load time. `cache$functions` is `nse_funcs` + Arrow Compute functions (prefixed with `{}arrow_{`}). \r\nI bumped into this while trying to register / translate a user-defined function with pre-existing bindings. I needed to update either `cache.functions` or `nse_funcs` - we can update the former via `{}update_cache = TRUE{`}, but then I had to change `call_binding()` to fetch from the updated `cache` and not from `{}nse_funcs{`}. This led me to think that folks might be confused by these 2 objects that overlap by quite a bit and are in some situations interchangeable (mostly nse_funcs can be replaced by `cache$functions` which includes it).\u00a0"
        }
    ]
}