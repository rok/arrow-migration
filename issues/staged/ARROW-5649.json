{
    "issue": {
        "title": "[Integration][C++] Create round trip integration test for extension types",
        "body": "***Note**: This issue was originally created as [ARROW-5649](https://issues.apache.org/jira/browse/ARROW-5649). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWith Java and C++ code merged we should verify round-trip of the type.",
        "created_at": "2019-06-19T04:40:59.000Z",
        "updated_at": "2020-05-05T10:56:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Integration",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-05-05T10:56:41.000Z"
    },
    "comments": [
        {
            "created_at": "2020-03-04T23:41:45.298Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5649?focusedCommentId=17051690) by Neal Richardson (npr):*\nIs this effectively a duplicate of ARROW-2255 (integration tests of custom metadata)?"
        },
        {
            "created_at": "2020-03-05T17:49:53.028Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5649?focusedCommentId=17052379) by Bryan Cutler (bryanc):*\n`[~npr]` I think in the scope of our current integration tests, yes this is effectively the same. It would be nice to test the addition steps of creating the extension type array across implementations and verifying it works as expected. Not sure how that would be done in our existing integration testing framework though."
        },
        {
            "created_at": "2020-03-05T17:52:27.110Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5649?focusedCommentId=17052382) by Neal Richardson (npr):*\nYeah, agree that might be nice IIUC that's out of scope of what our integration tests do. That sounds more about library functionality/API than it does about proper Arrow format support."
        },
        {
            "created_at": "2020-03-06T04:19:36.336Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5649?focusedCommentId=17052740) by Micah Kornfield (emkornfield@gmail.com):*\nAgree with everything said here.\u00a0 For the time being this is effectively the same as ensuring extension type propagation, and at least for Java I'm not sure there is really a good way to exercise the code paths (the java integration tests could really use some work to make them work closer to the normal path APIs).\r\n\r\n\u00a0\r\n\r\nI'm going to close this for now."
        },
        {
            "created_at": "2020-03-09T15:07:01.586Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5649?focusedCommentId=17055055) by Ben Kietzman (bkietz):*\nIn addition to preserving custom metadata, checking for extension type propagation will require extending the test runners for each language: they must register an extension type (I arbitrarily nominate uuid from the C++ unit tests for extension types) which will be serialized to its storage type and the reserved metadata fields. This must round trip to ensure that those fields are correctly emplaced and intercepted by each implementation."
        },
        {
            "created_at": "2020-05-05T10:56:41.851Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5649?focusedCommentId=17099774) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 6959\n<https://github.com/apache/arrow/pull/6959>"
        }
    ]
}