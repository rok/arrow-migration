{
    "issue": {
        "title": "[R] Not all group generic functions are supported for Arrays",
        "body": "***Note**: This issue was originally created as [ARROW-15008](https://issues.apache.org/jira/browse/ARROW-15008). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen trying to do some math with decimal types, I noticed that a lot of the group generic functions are not implemented. Many users will use the dplyr bindings (where these are accessible), but it's useful to do this on Arrays and Scalars, too, particularly for decimal types whose math isn't accessible anywhere else in R.\r\n\r\nSome template code that might be helpful from carrow:\r\n\r\n\r\n```R\n\r\n#' @export\r\nMath.carrow_vctr <- function(x, ...) {\r\n  switch(\r\n    .Generic,\r\n    abs =, sign =, sqrt =,\r\n    floor =, ceiling =, trunc =,\r\n    round =, signif =,\r\n    exp =, log =, expm1 =, log1p =,\r\n    cos =, sin =, tan =,\r\n    cospi =, sinpi =, tanpi =,\r\n    acos =, asin =, atan =,\r\n    cosh =, sinh =, tanh =,\r\n    acosh =, asinh =, atanh =,\r\n    lgamma =, gamma =, digamma =, trigamma =,\r\n    cumsum =, cumprod =, cummax =, cumin = {\r\n      assert_arrow(\"Math group generics\")\r\n      array <- as_arrow_array(x)\r\n      arrow_array <- from_carrow_array(array, arrow::Array)\r\n      getNamespace(\"base\")[[.Generic]](arrow_array)\r\n    },\r\n    stop(sprintf(\"Math generic '%s' not supported for carrow_vctr()\", .Generic)) # nocov\r\n  )\r\n}\r\n\r\n#' @export\r\nOps.carrow_vctr <- function(e1, e2) {\r\n  if (missing(e2)) {\r\n    switch(\r\n      .Generic,\r\n      \"!\" =, \"+\" =, \"-\" = {\r\n        assert_arrow(\"Unary Ops group generics\")\r\n        array <- as_carrow_array(e1)\r\n        arrow_array <- from_carrow_array(array, arrow::Array)\r\n        result <- getNamespace(\"base\")[[.Generic]](arrow_array)\r\n        return(as_carrow_vctr(result))\r\n      },\r\n# R catches these before we do with 'invalid unary operator'\r\n      stop(sprintf(\"Unary '%s' not supported for carrow_vctr()\", .Generic)) # nocov\r\n    )\r\n  }\r\n\r\n  switch(\r\n    .Generic,\r\n    \"+\" =, \"-\" =, \"*\" =, \"/\" =, \"^\" =, \"%%\" =, \"%/%\" =,\r\n    \"&\" =, \"|\" =, \"!\" =,\r\n    \"==\" =, \"!=\" =, \"<\" =, \"<=\" =, \">=\" =, \">\" = {\r\n      assert_arrow(\"Ops group generics\")\r\n      vctr1 <- as_carrow_vctr(e1)\r\n      vctr2 <- as_carrow_vctr(e2)\r\n      array1 <- as_carrow_array(vctr1)\r\n      array2 <- as_carrow_array(vctr2)\r\n      arrow_array1 <- from_carrow_array(array1, arrow::Array)\r\n      arrow_array2 <- from_carrow_array(array2, arrow::Array)\r\n\r\n      result <- getNamespace(\"base\")[[.Generic]](arrow_array1, arrow_array2)\r\n      as_carrow_vctr(result)\r\n    },\r\n    stop(sprintf(\"Ops generic '%s' not supported for carrow_vctr()\", .Generic)) # nocov\r\n  )\r\n}\r\n\r\n#' @export\r\nSummary.carrow_vctr <- function(x, ..., na.rm = FALSE) {\r\n  assert_arrow(\"Math group generics\")\r\n  switch(\r\n    .Generic,\r\n    all =, any =,\r\n    sum =, prod =,\r\n    min =, max =,\r\n    range = {\r\n# make sure dots are empty because we ignore them\r\n      stopifnot(...length() == 0L)\r\n\r\n      array <- as_carrow_array(x)\r\n      arrow_array <- from_carrow_array(array, arrow::Array)\r\n      getNamespace(\"base\")[[.Generic]](arrow_array, na.rm = na.rm)\r\n    },\r\n    stop(sprintf(\"Summary generic '%s' not supported for carrow_vctr()\", .Generic)) # nocov\r\n  )\r\n}\r\n\r\n#' @export\r\nComplex.carrow_vctr <- function(z) {\r\n  stop(\"Complex group generics are not supported for carrow_vctr\", call. = FALSE)\r\n}\r\n```\r\n\r\nAnd some tests that might be useful to copy:\r\n\r\n\r\n```R\n\r\n\r\ntest_that(\"Math generics work\", {\r\n# none of these are implemented in Arrow, so none are here either\r\n})\r\n\r\ntest_that(\"Ops numeric generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n\r\n  v1 <- c(1:5, NA)\r\n  v2 <- 6:11\r\n  vctr1 <- as_carrow_vctr(v1)\r\n  vctr2 <- as_carrow_vctr(v2)\r\n\r\n# unary expressions are broken in Arrow so these don't work\r\n# expect_identical(\r\n#   from_carrow_array(as_carrow_array(+vctr1)),\r\n#   +v1\r\n# )\r\n  #\r\n# expect_identical(\r\n#   from_carrow_array(as_carrow_array(-vctr1)),\r\n#   -v1\r\n# )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 + vctr2)),\r\n    v1 + v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 - vctr2)),\r\n    v1 - v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 * vctr2)),\r\n    v1 * v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 / vctr2)),\r\n    v1 / v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 ^ vctr2)),\r\n    as.integer(v1 ^ v2)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 %% vctr2)),\r\n    v1 %% v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 %/% vctr2)),\r\n    v1 %/% v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 + vctr2)),\r\n    v1 + v2\r\n  )\r\n})\r\n\r\ntest_that(\"Ops logical generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n  skip(\"until logical conversion is improved\")\r\n\r\n  v1 <- c(TRUE, TRUE, FALSE, FALSE, NA, NA, NA)\r\n  v2 <- c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, NA)\r\n  vctr1 <- as_carrow_vctr(v1)\r\n  vctr2 <- as_carrow_vctr(v2)\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(!vctr1)),\r\n    !v1\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 & vctr2)),\r\n    v1 & v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 & vctr2)),\r\n    v1 | v2\r\n  )\r\n})\r\n\r\ntest_that(\"Ops comparison generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n  skip(\"until logical conversion is improved\")\r\n\r\n  v1 <- c(1, 2, 3, 4, 5, 1, NA, 3, NA, 5, NA)\r\n  v2 <- c(5, 4, 3, 2, 1, NA, 4, NA, 2, 1, NA)\r\n  vctr1 <- as_carrow_vctr(v1)\r\n  vctr2 <- as_carrow_vctr(v2)\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 == vctr2)),\r\n    v1 == v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 != vctr2)),\r\n    v1 != v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 < vctr2)),\r\n    v1 < v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 <= vctr2)),\r\n    v1 <= v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 >= vctr2)),\r\n    v1 >= v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 > vctr2)),\r\n    v1 > v2\r\n  )\r\n})\r\n\r\ntest_that(\"Summary numeric generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n\r\n  v1 <- c(1:5, NA)\r\n  vctr1 <- as_carrow_vctr(v1)\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(sum(vctr1, na.rm = TRUE))),\r\n    as.double(sum(v1, na.rm = TRUE))\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(sum(vctr1, na.rm = FALSE))),\r\n    as.double(sum(v1, na.rm = FALSE))\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(min(vctr1, na.rm = TRUE))),\r\n    min(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(min(vctr1, na.rm = FALSE))),\r\n    min(v1, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(max(vctr1, na.rm = TRUE))),\r\n    max(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(max(vctr1, na.rm = FALSE))),\r\n    max(v1, na.rm = FALSE)\r\n  )\r\n\r\n  skip(\"not all Summary generics are implemented in Arrow\")\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(range(vctr1, na.rm = TRUE))),\r\n    range(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(range(vctr1, na.rm = FALSE))),\r\n    range(v1, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(prod(vctr1, na.rm = TRUE))),\r\n    prod(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(prod(vctr1, na.rm = FALSE))),\r\n    prod(v1, na.rm = FALSE)\r\n  )\r\n})\r\n\r\ntest_that(\"Summary logical generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n  skip(\"until logical conversion is fixed\")\r\n\r\n  v1 <- c(FALSE, FALSE, NA)\r\n  v2 <- c(TRUE, TRUE, NA)\r\n  vctr1 <- as_carrow_vctr(v1)\r\n  vctr2 <- as_carrow_vctr(v2)\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(any(vctr1, na.rm = TRUE))),\r\n    any(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(any(vctr1, na.rm = FALSE))),\r\n    any(v1, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(any(vctr2, na.rm = TRUE))),\r\n    any(v2, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(any(vctr2, na.rm = FALSE))),\r\n    any(v2, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(all(vctr1, na.rm = TRUE))),\r\n    all(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(all(vctr1, na.rm = FALSE))),\r\n    all(v1, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(all(vctr2, na.rm = TRUE))),\r\n    all(v2, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(all(vctr2, na.rm = FALSE))),\r\n    all(v2, na.rm = FALSE)\r\n  )\r\n})\r\n```\r\n",
        "created_at": "2021-12-07T15:15:15.000Z",
        "updated_at": "2021-12-07T17:25:21.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-12-07T17:25:21.000Z"
    },
    "comments": [
        {
            "created_at": "2021-12-07T15:17:25.808Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15008?focusedCommentId=17454705) by Neal Richardson (npr):*\nDuplicate of ARROW-13337?"
        },
        {
            "created_at": "2021-12-07T17:24:47.610Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15008?focusedCommentId=17454768) by Dewey Dunnington (paleolimbot):*\nClosing this as duplicate (added the info to the other ticket!)"
        }
    ]
}