{
    "issue": {
        "title": "[C++] IO: single pass coalescing algorithm",
        "body": "***Note**: This issue was originally created as [ARROW-8543](https://issues.apache.org/jira/browse/ARROW-8543). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe current coalescing algorithm is a two pass algorithm (where N is number of ranges) (first implemented in https://issues.apache.org/jira/browse/ARROW-7995). In the first pass, the Coalesce() function finds the begin and end of a candidate range that can be coalesced. In the second, pass the CoalesceUntilLargeEnough() function goes over the ranges from begin to end and adds coalesced range to the result (out).\r\n\r\nThe proposal is to convert the algorithm to an single pass algorithm that computes coalesced ranges while making the first pass over the ranges in the list. This algorithm is also shorter in lines of code and hence (hopefully) more maintainable in long term.\r\n\r\nCorrection: Post sorting, the current algorithm is O(N) and the improvement is O(N). I called the current algo O(N^2) due to an oversight.\r\n\r\n\u00a0",
        "created_at": "2020-04-21T17:28:59.000Z",
        "updated_at": "2020-04-21T19:13:32.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-04-21T19:12:44.000Z"
    },
    "comments": [
        {
            "created_at": "2020-04-21T17:41:47.452Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8543?focusedCommentId=17088901) by Antoine Pitrou (apitrou):*\nCan you explain why the current algorithm is O(N^2)? CoalesceUntilLargeEnough() is called on disjoint subsets of the ranges, so each range is examined only once.\r\n\r\n(however, the algorithm is O(N log N) due to sorting)\r\n"
        },
        {
            "created_at": "2020-04-21T18:22:15.771Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8543?focusedCommentId=17088946) by Mayur Srivastava (mayuropensource):*\nHi `[~apitrou]`,\r\n\r\nThanks for looking into it!\r\n\r\nI agree on O(N log N) due to sorting. My comment was mainly on post sorting algorithm.\r\n\r\n\u00a0\r\n\r\nThe algorithm is as follows (let me know if I'm making a mistake) (ref: <https://github.com/apache/arrow/blob/master/cpp/src/arrow/io/interfaces.cc>):\r\n```\n\r\nstart=ranges.begin(), prev=start, next=prev\r\n\r\nwhile (++next != end) {\r\n  if (isLargerThanHole(prev, next)) {\r\n    if (next - start > 1) {\r\n      CoalesceUtilLargeEnough(start, next, coalesced output)\r\n    } \r\n    else {\r\n      // append start to coalesced output\r\n    }\r\n    start = next;\r\n  }\r\n  prev = next;\r\n}\r\n\r\nif (next - start > 1) {\r\n  CoalesceUtilLargeEnough(start, next, coalesced output)\r\n} \r\nelse {\r\n  // append start to coalesced output\r\n}\n```\r\nTo simplify, let's assume there is no hole in the ranges.\r\n\r\nThen, we increment 'next' till the end in the 'while' loop. This is the first pass iterating from start to end in Coalesce().\r\n\r\nThen we call\u00a0CoalesceUtilLargeEnough() which will iterate from start to end and append coalesced ranges to the result. This is the second pass in CoalesceUntilLargeEnough().\r\n\r\nThis is the reason I called it two pass algorithm.\r\n\r\n\u00a0\r\n\r\nMy proposal (<https://github.com/apache/arrow/pull/7002>) is to change it to a single pass.\r\n\r\nOther than single pass benefits, it does less copying and is shorter in number of lines of code.\r\n\r\n\u00a0\r\n\r\nLet me know what you think about it.\r\n\r\n\u00a0\r\n\r\nThanks,\r\n\r\nMayur"
        },
        {
            "created_at": "2020-04-21T18:25:52.341Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8543?focusedCommentId=17088949) by Antoine Pitrou (apitrou):*\nThat part is O(N). You missed the `start = next` line."
        },
        {
            "created_at": "2020-04-21T18:35:07.431Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8543?focusedCommentId=17088959) by Mayur Srivastava (mayuropensource):*\nYou are right.\r\n\r\nI should correct myself. The correct statement is \"change 2 pass algorithm (O(N)) with a constant 2 to 1 pass algorithm (O(N)) with a constant 1\".\r\n\r\nWhat do you think?"
        },
        {
            "created_at": "2020-04-21T18:42:41.918Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8543?focusedCommentId=17088966) by Mayur Srivastava (mayuropensource):*\nThank you for fixing the PR! This is my first contribution so I'm not well versed.\r\n\r\n\u00a0\r\n\r\nThanks,\r\n\r\nMayur\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-04-21T19:12:44.508Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8543?focusedCommentId=17088992) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 7002\n<https://github.com/apache/arrow/pull/7002>"
        }
    ]
}