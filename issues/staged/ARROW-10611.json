{
    "issue": {
        "title": "[Python] Deletion of existing file when write_table fails",
        "body": "***Note**: This issue was originally created as [ARROW-10611](https://issues.apache.org/jira/browse/ARROW-10611). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n[https://github.com/apache/arrow/blob/47f2e0cb03ed8ad265e0688ada8162bf46066483/python/pyarrow/parquet.py#L1737arrow/python/pyarrow/parquet.py](https://github.com/apache/arrow/blob/47f2e0cb03ed8ad265e0688ada8162bf46066483/python/pyarrow/parquet.py#L1737)\r\n\r\nLine 1737 in\u00a0[47f2e0c](https://github.com/apache/arrow/commit/47f2e0cb03ed8ad265e0688ada8162bf46066483)\r\n\n|\u00a0|os.remove(_stringify_path(where))|\r<br>\r<br>\u00a0\r<br>\r<br>When write_table encounters a problem, the exception handler removes the attempted output parquet file (see snippet below).\r<br>This logic makes sense in order to make sure no file with inconsistent content/state remains.\r<br>However, if a file with the same name already exists, it gets also deleted.\r<br>\r<br>Would it make sense to add an option to let the user choose the behaviour in such a case, e. g. to choose to keep an existing file and to only overwrite it if the action is successful?\r<br>And/or: Would it make sense to check early if the intended file can be written and fail early if that is not the case (without deleting a preexisting file)?\r<br>E. g. if the directory has permission 755 and the already existing file has permission 444, then the write attempt fails with a PermissionError but the exception handler deletes the preexisting file. This behaviour is a bit counterintuitive?\r<br>Or would you say the responsibility lies with the people setting the file/directory permissions right?\r<br>\r<br>\u00a0\r<br>\r<br>`except Exception:`\r<br>\r<br>`\u00a0 \u00a0if _is_path_like(where):`\r<br>\r<br>`\u00a0 \u00a0 \u00a0 try:`\r<br>\r<br>`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0os.remove(_stringify_path(where))`\r<br>\r<br>`\u00a0 \u00a0 \u00a0 except os.error:`\r<br>\r<br>`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0pass`\r<br>\r<br>``\r<br>\r<br>As <https://github.com/chr1st1ank>\u00a0added in <https://github.com/apache/arrow/issues/8607>:\u00a0\r<br>\r<br>This can be reproduced with the following commands in ipython. Pandas uses pyarrow to read/write Parquet.\r<br>In effect the attempt to write to a file without write permissions to it results in the deletion of this file (of course only if the user has permissions enough on the directory to delete the file).\r<br>\r<br>>> import pandas as pd\r<br>>> \r<br>>> df = pd.DataFrame(data=\\{'col1': [1, 2], 'col2': [3, 4]})\r<br>>> df.to_parquet('df.parquet.gzip', compression='gzip')\r<br>>> pd.read_parquet('df.parquet.gzip')\r<br>>> !ls -l 'df.parquet.gzip'\r<br>\r<br>-rw-r-~~r~~- 1 myuser domain users 1529 Nov 13 09:31 df.parquet.gzip\r<br>\r<br>\r<br>>> !chmod 000 'df.parquet.gzip'\r<br>>> df.to_parquet('df.parquet.gzip', compression='gzip')\r<br>\r<br>---------------------------------------------------------------------------\r<br> \r<br> PermissionError Traceback (most recent call last)\r<br> \r<br> <ipython-input-10-584c5c8752e0> in <module>\r<br> ----> 1 df.to_parquet('df.parquet.gzip', compression='gzip')\r<br>\r<br>\r<br> ~/.conda/envs/pct-dev/lib/python3.6/site-packages/pandas/core/frame.py in to_parquet(self, fname, engine, compression, index, partition_cols, \\*\\*kwargs)\r<br> 2220 index=index,\r<br> 2221 partition_cols=partition_cols,\r<br> -> 2222 \\*\\*kwargs\r<br> 2223 )\r<br> 2224\r<br>\r<br>\r<br> ~/.conda/envs/pct-dev/lib/python3.6/site-packages/pandas/io/parquet.py in to_parquet(df, path, engine, compression, index, partition_cols, \\*\\*kwargs)\r<br> 252 index=index,\r<br> 253 partition_cols=partition_cols,\r<br> --> 254 \\*\\*kwargs\r<br> 255 )\r<br> 256\r<br>\r<br>\r<br> ~/.conda/envs/pct-dev/lib/python3.6/site-packages/pandas/io/parquet.py in write(self, df, path, compression, coerce_timestamps, index, partition_cols, \\*\\*kwargs)\r<br> 115 compression=compression,\r<br> 116 coerce_timestamps=coerce_timestamps,\r<br> --> 117 \\*\\*kwargs\r<br> 118 )\r<br> 119\r<br>\r<br>\r<br> ~/.conda/envs/pct-dev/lib/python3.6/site-packages/pyarrow/parquet.py in write_table(table, where, row_group_size, version, use_dictionary, compression, use_deprecated_int96_timestamps, coerce_timestamps, allow_truncated_timestamps, flavor, \\*\\*kwargs)\r<br> 1122 compression=compression,\r<br> 1123 use_deprecated_int96_timestamps=use_int96,\r<br> -> 1124 \\*\\*kwargs) as writer:\r<br> 1125 writer.write_table(table, row_group_size=row_group_size)\r<br> 1126 except Exception:\r<br>\r<br>\r<br> ~/.conda/envs/pct-dev/lib/python3.6/site-packages/pyarrow/parquet.py in __init__(self, where, schema, flavor, version, use_dictionary, compression, use_deprecated_int96_timestamps, \\*\\*options)\r<br> 338 if _is_path_like(where):\r<br> 339 fs = _get_fs_from_path(where)\r<br> --> 340 sink = self.file_handle = fs.open(where, 'wb')\r<br> 341 else:\r<br> 342 sink = where\r<br>\r<br>\r<br> ~/.conda/envs/pct-dev/lib/python3.6/site-packages/pyarrow/filesystem.py in open(self, path, mode)\r<br> 243 \"\"\"\r<br> 244 path = _stringify_path(path)\r<br> --> 245 return open(path, mode=mode)\r<br> 246 \r<br> 247 @property\r<br>\r<br>\r<br> PermissionError: [Errno 13] Permission denied: 'df.parquet.gzip'\r<br>\r<br>\u00a0\r<br>\r<br>>> !ls -l 'df.parquet.gzip'\r<br> ls: cannot access df.parquet.gzip: No such file or directory\r<br>\r<br>\u00a0|\n|-|-|-|\n",
        "created_at": "2020-11-16T09:14:04.000Z",
        "updated_at": "2021-06-09T13:20:48.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}