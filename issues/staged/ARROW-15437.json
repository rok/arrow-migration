{
    "issue": {
        "title": "[Python][FlightRPC] Flaky test test_interrupt",
        "body": "***Note**: This issue was originally created as [ARROW-15437](https://issues.apache.org/jira/browse/ARROW-15437). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFound during 7.0.0 verification, it seems we aren't accounting for all possible ways to find the exception we expect\r\n```\n\r\npyarrow/tests/test_flight.py::test_interrupt FAILED \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0[ 93%]\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\u00a0 \u00a0 def test_interrupt():\r\n\u00a0 \u00a0 \u00a0 \u00a0 if threading.current_thread().ident != threading.main_thread().ident:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pytest.skip(\"test only works from main Python thread\")\r\n# Skips test if not available\r\n\u00a0 \u00a0 \u00a0 \u00a0 raise_signal = util.get_raise_signal()\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 def signal_from_thread():\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 time.sleep(0.5)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise_signal(signal.SIGINT)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 exc_types = (KeyboardInterrupt, pa.ArrowCancelled)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 def test(read_all):\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 try:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 try:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t = threading.Thread(target=signal_from_thread)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 with pytest.raises(exc_types) as exc_info:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.start()\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 read_all()\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 finally:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.join()\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 except KeyboardInterrupt:\r\n# In case KeyboardInterrupt didn't interrupt read_all\r\n# above, at least prevent it from stopping the test suite\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pytest.fail(\"KeyboardInterrupt didn't interrupt Flight read_all\")\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 e = exc_info.value.__context__\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 assert isinstance(e, pa.ArrowCancelled) or \\\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 isinstance(e, KeyboardInterrupt)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 with CancelFlightServer() as server:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 client = FlightClient((\"localhost\", server.port))\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 reader = client.do_get(flight.Ticket(b\"\"))\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 test(reader.read_all)pyarrow/tests/test_flight.py:1952:\u00a0\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\u00a0read_all = <built-in method read_all of pyarrow._flight.FlightStreamReader object at 0x7f40a80c6f40>\u00a0 \u00a0 def test(read_all):\r\n\u00a0 \u00a0 \u00a0 \u00a0 try:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 try:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t = threading.Thread(target=signal_from_thread)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 with pytest.raises(exc_types) as exc_info:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.start()\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 read_all()\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 finally:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 t.join()\r\n\u00a0 \u00a0 \u00a0 \u00a0 except KeyboardInterrupt:\r\n# In case KeyboardInterrupt didn't interrupt read_all\r\n# above, at least prevent it from stopping the test suite\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pytest.fail(\"KeyboardInterrupt didn't interrupt Flight read_all\")\r\n\u00a0 \u00a0 \u00a0 \u00a0 e = exc_info.value.__context__\r\n> \u00a0 \u00a0 \u00a0 assert isinstance(e, pa.ArrowCancelled) or \\\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 isinstance(e, KeyboardInterrupt)\r\nE \u00a0 \u00a0 \u00a0 AssertionError: assert (False or False)\r\nE \u00a0 \u00a0 \u00a0 \u00a0+ \u00a0where False = isinstance(None, <class 'pyarrow.lib.ArrowCancelled'>)\r\nE \u00a0 \u00a0 \u00a0 \u00a0+ \u00a0 \u00a0where <class 'pyarrow.lib.ArrowCancelled'> = pa.ArrowCancelled\r\nE \u00a0 \u00a0 \u00a0 \u00a0+ \u00a0and \u00a0 False = isinstance(None, KeyboardInterrupt)pyarrow/tests/test_flight.py:1945: AssertionError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /tmp/arrow/apache-arrow-7.0.0/python/pyarrow/tests/test_flight.py(1945)test()\r\n-> assert isinstance(e, pa.ArrowCancelled) or \\\r\n(Pdb) p e\r\nNone\r\n(Pdb) p exc_info\r\n<ExceptionInfo ArrowCancelled('Operation cancelled. Detail: received signal 2') tblen=5>\r\n(Pdb) p exc_info.value\r\nArrowCancelled('Operation cancelled. Detail: received signal 2')\r\n(Pdb) p exc_info.value.__context__\r\nNone\r\n \n```",
        "created_at": "2022-01-25T00:03:14.000Z",
        "updated_at": "2022-01-26T04:11:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: FlightRPC",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-01-25T13:51:12.000Z"
    },
    "comments": [
        {
            "created_at": "2022-01-25T13:51:12.265Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15437?focusedCommentId=17481835) by Krisztian Szucs (kszucs):*\nIssue resolved by pull request 12245\n<https://github.com/apache/arrow/pull/12245>"
        }
    ]
}