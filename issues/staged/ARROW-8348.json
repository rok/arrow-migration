{
    "issue": {
        "title": "[C++] Support optional sentinel values in primitive Array for nulls",
        "body": "***Note**: This issue was originally created as [ARROW-8348](https://issues.apache.org/jira/browse/ARROW-8348). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is an optional feature where a sentinel value is stored in null cells and is exposed via an accessor method, e.g. `optional<T> Array<T>::HasSentinel() const;`. This would allow zero-copy bi-directional conversion with R.",
        "created_at": "2020-04-06T15:57:59.000Z",
        "updated_at": "2021-12-06T13:00:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-04-06T16:46:10.088Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8348?focusedCommentId=17076462) by Felix Benning (Felix Benning):*\nUsage of a Zero Sentinel:\r\nSince null checking is not without cost, it might be helpful to some algorithms, if the content \"underneath\" the nulls is zero. For example in means, or scalar products and thus matrix multiplication, knowing that the array has zeros where the na's are, would allow these algorithms to pretend that there are no na's. Since setting all nulls to zero in a matrix of n columns and n rows costs O(n^2), it would make sense to set them all to zero before matrix multiplication i.e. O(n^3) and similarly expensive algorithms. If there was a `na_are_zero` flag, other algorithms could later utilize this work already being done. Algorithms which change the data and violate this contract, would only need to reset the flag. And in some use cases, it might be possible to use idle time of the computer to \"clean up\" the na's, preparing for the next query.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-04-10T14:28:33.500Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8348?focusedCommentId=17080522) by Wes McKinney (wesm):*\nI'm not sure about this. It might be useful to set a field in `Field::metadata` to indicate that null values contain a sentinel value that came from R, so when you convert back you can `memcpy` the data over without having to set the sentinels manually"
        },
        {
            "created_at": "2020-04-23T14:13:53.030Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8348?focusedCommentId=17090647) by Francois Saint-Jacques (fsaintjacques):*\nI'm not proposing this as a format change, just a C++ interface niceties. It could be done with Metadata, but string typing is a pain."
        }
    ]
}