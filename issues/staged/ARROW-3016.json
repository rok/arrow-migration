{
    "issue": {
        "title": "[C++] Add ability to enable call stack logging for each memory allocation",
        "body": "***Note**: This issue was originally created as [ARROW-3016](https://issues.apache.org/jira/browse/ARROW-3016). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt is possible to gain programmatic access to the call stack in C/C++, e.g.\r\n\r\nhttps://eli.thegreenplace.net/2015/programmatic-access-to-the-call-stack-in-c/\r\n\r\nIt would be valuable to have a debugging option to log the sizes of memory allocations as well as showing the call stack where that allocation is performed. In complex programs, this could help determine the origin of a memory leak",
        "created_at": "2018-08-07T21:17:37.000Z",
        "updated_at": "2022-02-04T12:31:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Documentation",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-02-03T13:36:50.000Z"
    },
    "comments": [
        {
            "created_at": "2018-08-10T01:12:44.592Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3016?focusedCommentId=16575636) by Francois Saint-Jacques (fsaintjacques):*\nYou can already achieve this on linux with perf and uprobe, see <http://www.brendangregg.com/blog/2015-06-28/linux-ftrace-uprobe.html>.\u00a0All you need is debug symbols. I tend to prefer the non-intrusive runtime approach instead of adding one more library as a dependency."
        },
        {
            "created_at": "2018-08-10T01:41:56.799Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3016?focusedCommentId=16575653) by Wes McKinney (wesm):*\nSorry, I meant logging in calls to `arrow::MemoryPool::Allocate`"
        },
        {
            "created_at": "2018-08-10T01:58:09.572Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3016?focusedCommentId=16575673) by Francois Saint-Jacques (fsaintjacques):*\nMy comment still stands, with perf-record (and the proper flag, i.e. --call-graph=$unwinder_type), you can set a trigger on uprobes (a userland function) and it'll sample invocations to this function with the full callstack (plus some function parameters if you want, e.g. the size). All of this info is saved in the perf.data file for later post-processing with perf-script.\r\n\r\nNo need to add any code in the library."
        },
        {
            "created_at": "2018-08-14T14:49:13.575Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3016?focusedCommentId=16579905) by Wes McKinney (wesm):*\nCool. Well, let's add some documentation about this to show a reusable recipe for developers to be able to do allocation tracing"
        },
        {
            "created_at": "2019-08-21T17:43:33.597Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3016?focusedCommentId=16912553) by Wes McKinney (wesm):*\nI'm still frequently interested to log memory allocations. It's been a year since the last discussion and there's still no developer documentation about best practices for doing this"
        },
        {
            "created_at": "2021-02-17T16:08:01.723Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3016?focusedCommentId=17285938) by Antoine Pitrou (apitrou):*\nI know `[~maartenbreddels]` has been experimenting with low-level profiling, perhaps he would like to take a look at this.\r\nhttps://www.maartenbreddels.com/perf/jupyter/python/tracing/gil/2021/01/14/Tracing-the-Python-GIL.html\r\n"
        },
        {
            "created_at": "2021-02-18T10:09:37.040Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3016?focusedCommentId=17286400) by Maarten Breddels (maartenbreddels):*\nI'd also recommend using perf with uprobes for this, especially for non-Python programs this should work well, but might require the `-fno-omit-frame-pointer` for compilation, or passing `--call-graph dwarf` to perf as mentioned above.\u00a0The output of perf-script is easy to parse and finding leaks should be possible this way, but I wouldn't be surprised if there are a ton of tools out there already (I know they exist for finding deadlocks).\r\n\r\nFor combining with Python, it could be useful to add support for mem allocations in the `per4m` package so the leak information can be merged info with VizTracer's output. Collecting Python stack traces of mem leaks should be possible (i.e. not a visualization as with VizTracer), but would require some extra steps/work.\r\n\r\nI think in general, tooling like this should not be done in userland, because you become blind to what is happening in the kernel. Getting deep stack traces from perf that go into the kernel can be useful, especially with memory allocations.\u00a0One can even see the time spend on setting up pages and all and this has given me ideas on looking into using huge pages.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-02-03T13:36:50.397Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3016?focusedCommentId=17486482) by David Li (lidavidm):*\nIssue resolved by pull request 12307\n<https://github.com/apache/arrow/pull/12307>"
        }
    ]
}