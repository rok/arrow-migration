{
    "issue": {
        "title": "[C++] Create new thread pool benchmark demonstrating the \"scheduling\" bottleneck",
        "body": "***Note**: This issue was originally created as [ARROW-12903](https://issues.apache.org/jira/browse/ARROW-12903). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe benchmark ThreadPoolSpawn (in thread_pool_benchmark.cc) is used to help understand the cost of adding a new thread task and to know when it is worth it / not worth it to schedule additional work.\u00a0 For example, it seems that for small (1000) task sizes we start to lose the benefit of threads in as few as 2 threads.\r\n\r\nHowever, this benchmark is actually demonstrating a worst-case scenario in terms of \"scheuduling\" overhead.\u00a0 Without changing the thread pool implementation at all we can considerably improve the efficiency of this benchmark.\u00a0 This Jira is to add an alternative best-case scenario to better help understand the cost of new thread tasks.",
        "created_at": "2021-05-28T03:26:29.000Z",
        "updated_at": "2022-07-12T14:04:45.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-12T14:04:45.315Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12903?focusedCommentId=17565730) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}