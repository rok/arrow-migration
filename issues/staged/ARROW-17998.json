{
    "issue": {
        "title": "[Java] Support for textual JSON schema representation (was: JSON representation of pojo.Schema is incompatible with flatbuffers JSON generated via C++ API)",
        "body": "***Note**: This issue was originally created as [ARROW-17998](https://issues.apache.org/jira/browse/ARROW-17998). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI have JSON arrow::Schema representation generated from flatbuffers format in C++:\r\n\r\n\u00a0\r\n```java\n\r\nconst void* schemaBytes;\r\n\r\nstd::string fbsSchemaFile;\u00a0 \u00a0 \r\nflatbuffers::LoadFile(\"/path/to/Schema.fbs\", false, &fbsSchemaFile);\r\n\r\nflatbuffers::Parser parser;\r\nparser.Parse(fbsSchemaFile.c_str());\r\n\r\nstd::string json;\r\nflatbuffers::GenerateTextFromTable(parser, schemaBytes, \"org.apache.arrow.flatbuf.Schema\", &json);\r\n\r\nreturn json;\n```\r\n\u00a0\r\n\r\nWhen I'm trying to read this JSON in Java and create pojo.Schema:\r\n\r\n\u00a0\r\n```java\n\r\nString json; // Read from file.\r\nSchema.fromJSON(json);\n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nIt fails because JSON formats in flatbuffers generation and in Java using Jackson bindings are a bit different:\r\n\r\n\u00a0\r\n\r\nC++ Schema Flatbuffers JSON example:\r\n```java\n\r\n{\r\n  fields: [\r\n    {\r\n      name: \"cc_call_center_sk\",\r\n      type_type: \"Int\",\r\n      type: {\r\n        bitWidth: 32,\r\n        is_signed: true\r\n      },\r\n      children: [\r\n\r\n      ],\r\n      custom_metadata: [\r\n        {\r\n          key: \"metadata\",\r\n          value: \"some_metadata\"\r\n        }\r\n      ]\r\n    },\r\n  ],\r\n  custom_metadata: [\r\n    {\r\n      key: \"metadata\",\r\n      value: \"some_metadata\"\r\n    }\r\n  ]\r\n}\n```\r\nJava Schema JSON example:\r\n```java\n\r\n{\r\n\u00a0 \"fields\" : [ {\r\n\u00a0 \u00a0 \"name\" : \"cc_call_center_sk\",\r\n\u00a0 \u00a0 \"nullable\" : true,\r\n\u00a0 \u00a0 \"type\" : {\r\n\u00a0 \u00a0 \u00a0 \"name\" : \"int\",\r\n\u00a0 \u00a0 \u00a0 \"bitWidth\" : 32,\r\n\u00a0 \u00a0 \u00a0 \"isSigned\" : true\r\n\u00a0 \u00a0 },\r\n\u00a0 \u00a0 \"children\" : [ ],\r\n\u00a0 \u00a0 \"metadata\" : [ {\r\n\u00a0 \u00a0 \u00a0 \"value\" : \"some_metadata\",\r\n\u00a0 \u00a0 \u00a0 \"key\" : \"metadata\"\r\n\u00a0 \u00a0 } ]\r\n\u00a0 } ],\r\n\u00a0 \"metadata\" : [ {\r\n\u00a0 \u00a0 \"value\" : \"some_metadata\",\r\n\u00a0 \u00a0 \"key\" : \"metadata\"\r\n\u00a0 } ]\r\n} \n```\r\nThere is a difference in type id declaration:\r\n\r\n`{**}type_type{**}` field is used in C++ flatbuffers\r\n\r\n`{**}name{**}` field inside `{**}type{**}` field is used in Java\r\n\r\n\u00a0\r\n\r\nAlso, there is a difference in `{**}metadata{**}` field:\r\n\r\n`{**}custom_metadata{**}` name is used in C++ flatbuffers\r\n\r\n`{**}metadata{**}` name is used in Java\r\n\r\n\u00a0\r\n\r\nIt makes it impossible to re-use JSON representation from Java in C++ and vice-versa\r\n\r\nProbably the same issue exists in other languages",
        "created_at": "2022-10-12T07:41:34.000Z",
        "updated_at": "2022-10-12T12:13:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Format",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-10-12T12:02:10.000Z"
    },
    "comments": [
        {
            "created_at": "2022-10-12T08:34:06.604Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616274) by Antoine Pitrou (apitrou):*\nI don't think we have ever guaranteed anything concerning these JSON formats (which we don't control, since both are produced by third-party tools).\r\n\r\nIf you want to exchange Arrow data or metadata between Java and C++, the idiomatic and efficient solution is to use the Arrow IPC format (as a stream or file). Why are you trying to use JSON for this?"
        },
        {
            "created_at": "2022-10-12T08:39:46.658Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616279) by Pavel Kovalenko (jokser):*\n`[~apitrou]` \u00a0\r\n\r\nJSON format is needed to create/modify Arrow schemas manually without developing extra tools around it"
        },
        {
            "created_at": "2022-10-12T08:43:57.543Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616280) by Antoine Pitrou (apitrou):*\nWhat do you mean? All Arrow implementations provide APIs to create and modify Arrow schemas."
        },
        {
            "created_at": "2022-10-12T09:00:53.010Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616287) by Pavel Kovalenko (jokser):*\n`[~apitrou]` \u00a0\r\n\r\nYes. But in this case, you need to write code every time for any schema migration case. It's ok if you have only server-to-server communication.\r\n\r\nLet's imagine you have an initial schema stored somewhere and want to change it (e.g. change the type of column, nullable, or add more metadata). If you have a user (who may not be a programmer) who wants to do it you need to provide him some API, or he needs to write some script, or he can just change the JSON file which is the simplest way.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-10-12T09:14:44.146Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616293) by Antoine Pitrou (apitrou):*\nI don't understand what you say, sorry.\r\n\r\nAnd in any case, as I said, we don't control the JSON output by those utilities, so I'm not sure how we would provide any kind of compatibility between them.\r\n\r\ncc `[~lidavidm]` for opinions, but I'm inclined to close this.\r\n"
        },
        {
            "created_at": "2022-10-12T11:54:32.087Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616379) by David Li (lidavidm):*\nI do not believe the Jackson annotations are part of the public API. They're there to support integration testing.\r\n\r\nSee this discussion for a formal discussion of using the Flatbuffers JSON representation: https://github.com/apache/arrow/issues/13803\r\n\r\nSo I believe this is a duplicate of ARROW-8952 for Java and will mark it as such."
        },
        {
            "created_at": "2022-10-12T12:01:59.880Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616380) by Antoine Pitrou (apitrou):*\nIf it's a duplicate then we should not leave this open."
        },
        {
            "created_at": "2022-10-12T12:02:53.082Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616381) by David Li (lidavidm):*\nWell, we could use this to track the Java implementation separately from C++."
        },
        {
            "created_at": "2022-10-12T12:13:54.158Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17998?focusedCommentId=17616384) by Antoine Pitrou (apitrou):*\nThe issue text would be rather misleading then :-)"
        }
    ]
}