{
    "issue": {
        "title": "Interacting with arrow/pyarrow in C++",
        "body": "***Note**: This issue was originally created as [ARROW-2091](https://issues.apache.org/jira/browse/ARROW-2091). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI've been searching online for a while but cannot figure out how to do this. Please help if this is already a resolved issue.\r\n\r\nI have a c+/python application that interacts with arrow/pyarrow. I want to write a C+ api that takes python objects directly and operate on them in c++.\r\n```java\n\r\nPyObject* process_table(PyObject* table)\r\n{\r\n    // process the arrow table\r\n    std::shared_ptr<arrow::Table> tablePtr = table; // How?\r\n}\n```\r\nThe problem here is: how do I extract the internal std::shared_ptr<Table> from the PyObject?\r\n\r\nUnfortunately we are not using cython in our stack, we operate on PyObject \\* directly in c++.\r\n\r\nI can easily do this on numpy arrays:\r\n```java\n\r\nPyObject * process_array(PyObject* arr)\r\n{\r\n    PyArray_Check(arr);\r\n    // process the PyArrayObject directly\r\n    ...\r\n}\n```\r\n\r\nI wonder is there any way to achieve this level of c++ integration without using cython? Thanks!",
        "created_at": "2018-02-05T16:12:55.000Z",
        "updated_at": "2018-02-06T15:43:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-02-06T15:43:34.000Z"
    },
    "comments": [
        {
            "created_at": "2018-02-05T16:45:43.095Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2091?focusedCommentId=16352631) by Wes McKinney (wesm):*\nHi, we already have a JIRA about documenting this: ARROW-1021. I would recommend looking at turbodbc's bindings for an example of use from C++ without Cython https://github.com/blue-yonder/turbodbc/tree/master/cpp/turbodbc_arrow/Library/src"
        },
        {
            "created_at": "2018-02-05T16:48:11.084Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2091?focusedCommentId=16352633) by Uwe Korn (uwe):*\nYes, this is possible using the code supplied in `arrow/python/pyarrow.h`:\r\n```java\n\r\n#include <arrow/python/pyarrow.h>\r\n\r\nPyObject* process_table(PyObject* table)\r\n{\r\n    arrow::py::import_pyarrow();\r\n    std::shared_ptr<arrow::Table> tablePtr;\r\n    if (not arrow::py::unwrap_table(table, &tablePtr).ok()) {\r\n      // Handle error\r\n    }\r\n    // work on the tablePtr\r\n}\n```"
        },
        {
            "created_at": "2018-02-05T17:06:43.272Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2091?focusedCommentId=16352649) by Jun (fangandma):*\nThanks a lot! I'll follow those links. It will be very useful if these info are available in documentation. "
        },
        {
            "created_at": "2018-02-06T15:43:34.252Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2091?focusedCommentId=16354029) by Jun (fangandma):*\nLooks like I have all I need. It's just not documented!"
        }
    ]
}