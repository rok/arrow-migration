{
    "issue": {
        "title": "[C++/Python] Writing dictionary encoded columns to parquet is extremely slow when using chunk size",
        "body": "***Note**: This issue was originally created as [ARROW-5089](https://issues.apache.org/jira/browse/ARROW-5089). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, there is a workaround for dict encoded columns in place to handle writing dict encoded columns to parquet.\r\n\r\nThe workaround converts the dict encoded array to its plain version before writing to parquet. This is painfully slow since for every row group the entire array is converted over and over again.\r\n\r\nThe following example is orders of magnitude slower than the non-dict encoded version:\r\n```Java\n\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\nimport pandas as pd\r\ndf = pd.DataFrame({\"col\": [\"A\", \"B\"] * 100000}).astype(\"category\")\r\ntable = pa.Table.from_pandas(df)\r\nbuf = pa.BufferOutputStream()\r\npq.write_table(\r\n    table,\r\n    buf,\r\n    chunk_size=100,\r\n)\r\n\u00a0\n```",
        "created_at": "2019-04-02T08:40:16.000Z",
        "updated_at": "2019-08-16T16:40:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-08-16T16:39:01.000Z"
    },
    "comments": [
        {
            "created_at": "2019-08-16T16:39:01.567Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5089?focusedCommentId=16909208) by Wes McKinney (wesm):*\nThis is resolved in master through my patches related to writing DictionaryArray to Parquet\r\n\r\n0.14.1:\r\n\r\n```Java\n\r\nIn [2]: timeit pq.write_table(table, pa.BufferOutputStream(), chunk_size=100)                               \r\n3.18 s \u00b1 16.7 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\n\r\nIn [3]: timeit pq.write_table(table, pa.BufferOutputStream())                                               \r\n6.28 ms \u00b1 120 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\nmaster (to be 0.15.0)\r\n\r\n```Java\n\r\nIn [3]: timeit pq.write_table(table, pa.BufferOutputStream(), chunk_size=100)              \r\n27.5 ms \u00b1 2.49 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n\r\nIn [4]: timeit pq.write_table(table, pa.BufferOutputStream())                              \r\n5.8 ms \u00b1 22.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\nIndeed, a difference of about 100x"
        }
    ]
}