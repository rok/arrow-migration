{
    "issue": {
        "title": "[Ruby] Gem red-arrow 1.0.0 fails to build on Ruby 2.7",
        "body": "***Note**: This issue was originally created as [ARROW-9565](https://issues.apache.org/jira/browse/ARROW-9565). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```Java\n\r\n$ ruby -v\r\nruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux]\r\n\r\n$ gem install red-arrow\r\nBuilding native extensions. This could take a while...\r\nERROR:  Error installing red-arrow:\r\n\tERROR: Failed to build gem native extension.    current directory: /home/user/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/red-arrow-1.0.0/ext/arrow\r\n/home/user/.rbenv/versions/2.7.1/bin/ruby -I /home/user/.rbenv/versions/2.7.1/lib/ruby/2.7.0 -r ./siteconf20200727-6654-1c65wu0.rb extconf.rb\r\nchecking --enable-debug-build option... no\r\nchecking C++ compiler... g++\r\nchecking g++ version... 9.3 (gnu++14)\r\nmkmf-gnome2 is deprecated. Use mkmf-gnome instead.\r\nchecking for --enable-debug-build option... no\r\nchecking for -Wall option to compiler... yes\r\nchecking for -Waggregate-return option to compiler... yes\r\nchecking for -Wcast-align option to compiler... yes\r\nchecking for -Wextra option to compiler... yes\r\nchecking for -Wformat=2 option to compiler... yes\r\nchecking for -Winit-self option to compiler... yes\r\nchecking for -Wlarger-than-65500 option to compiler... yes\r\nchecking for -Wmissing-declarations option to compiler... yes\r\nchecking for -Wmissing-format-attribute option to compiler... yes\r\nchecking for -Wmissing-include-dirs option to compiler... yes\r\nchecking for -Wmissing-noreturn option to compiler... yes\r\nchecking for -Wmissing-prototypes option to compiler... yes\r\nchecking for -Wnested-externs option to compiler... no\r\nchecking for -Wold-style-definition option to compiler... yes\r\nchecking for -Wpacked option to compiler... yes\r\nchecking for -Wp,-D_FORTIFY_SOURCE=2 option to compiler... yes\r\nchecking for -Wpointer-arith option to compiler... yes\r\nchecking for -Wundef option to compiler... yes\r\nchecking for -Wout-of-line-declaration option to compiler... no\r\nchecking for -Wunsafe-loop-optimizations option to compiler... yes\r\nchecking for -Wwrite-strings option to compiler... yes\r\nchecking for Homebrew... no\r\nchecking for arrow... yes\r\nchecking for arrow-glib... yes\r\ncreating Makefilecurrent directory: /home/user/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/red-arrow-1.0.0/ext/arrow\r\nmake \"DESTDIR=\" cleancurrent directory: /home/user/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/red-arrow-1.0.0/ext/arrow\r\nmake \"DESTDIR=\"\r\ncompiling arrow.cpp\r\ncompiling converters.cpp\r\nIn file included from converters.cpp:20:\r\nconverters.hpp:288:11: error: \u2018SparseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  288 |     VISIT(SparseUnion)\r\n      |           ^~~~~~~~~~~\r\nconverters.hpp:258:38: note: in definition of macro \u2018VISIT\u2019\r\n  258 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                                      ^~~~\r\nconverters.hpp:289:11: error: \u2018DenseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  289 |     VISIT(DenseUnion)\r\n      |           ^~~~~~~~~~\r\nconverters.hpp:258:38: note: in definition of macro \u2018VISIT\u2019\r\n  258 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                                      ^~~~\r\nconverters.hpp:258:19: error: \u2018arrow::Status red_arrow::ListArrayValueConverter::Visit(const int&)\u2019 cannot be overloaded with \u2018arrow::Status red_arrow::ListArrayValueConverter::Visit(const int&)\u2019\r\n  258 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:289:5: note: in expansion of macro \u2018VISIT\u2019\r\n  289 |     VISIT(DenseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:258:19: note: previous declaration \u2018arrow::Status red_arrow::ListArrayValueConverter::Visit(const int&)\u2019\r\n  258 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:288:5: note: in expansion of macro \u2018VISIT\u2019\r\n  288 |     VISIT(SparseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:258:19: error: \u2018arrow::Status red_arrow::ListArrayValueConverter::Visit(const int&)\u2019 marked \u2018override\u2019, but does not override\r\n  258 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:288:5: note: in expansion of macro \u2018VISIT\u2019\r\n  288 |     VISIT(SparseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:392:11: error: \u2018SparseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  392 |     VISIT(SparseUnion)\r\n      |           ^~~~~~~~~~~\r\nconverters.hpp:361:38: note: in definition of macro \u2018VISIT\u2019\r\n  361 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                                      ^~~~\r\nconverters.hpp:393:11: error: \u2018DenseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  393 |     VISIT(DenseUnion)\r\n      |           ^~~~~~~~~~\r\nconverters.hpp:361:38: note: in definition of macro \u2018VISIT\u2019\r\n  361 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                                      ^~~~\r\nconverters.hpp:361:19: error: \u2018arrow::Status red_arrow::StructArrayValueConverter::Visit(const int&)\u2019 cannot be overloaded with \u2018arrow::Status red_arrow::StructArrayValueConverter::Visit(const int&)\u2019\r\n  361 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:393:5: note: in expansion of macro \u2018VISIT\u2019\r\n  393 |     VISIT(DenseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:361:19: note: previous declaration \u2018arrow::Status red_arrow::StructArrayValueConverter::Visit(const int&)\u2019\r\n  361 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:392:5: note: in expansion of macro \u2018VISIT\u2019\r\n  392 |     VISIT(SparseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:361:19: error: \u2018arrow::Status red_arrow::StructArrayValueConverter::Visit(const int&)\u2019 marked \u2018override\u2019, but does not override\r\n  361 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:392:5: note: in expansion of macro \u2018VISIT\u2019\r\n  392 |     VISIT(SparseUnion)\r\n      |     ^~~~~\r\nconverters.hpp: In member function \u2018VALUE red_arrow::StructArrayValueConverter::convert(const arrow::StructArray&, int64_t)\u2019:\r\nconverters.hpp:343:35: error: \u2018const class arrow::StructType\u2019 has no member named \u2018num_fields\u2019\r\n  343 |       const auto n = struct_type->num_fields();\r\n      |                                   ^~~~~~~~~~\r\nconverters.hpp:345:46: error: \u2018const class arrow::StructType\u2019 has no member named \u2018field\u2019\r\n  345 |         const auto field_type = struct_type->field(i).get();\r\n      |                                              ^~~~~\r\nIn file included from /home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/ruby.h:29,\r\n                 from /home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby.h:33,\r\n                 from /home/user/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/glib2-3.4.3/ext/glib2/rbgobject.h:26,\r\n                 from red-arrow.hpp:33,\r\n                 from converters.hpp:20,\r\n                 from converters.cpp:20:\r\n/home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/intern.h:857:5: error: void value not ignored as it ought to be\r\n  857 |     (__builtin_constant_p(str) && __builtin_constant_p(len)) ? \\\r\n      |     ^\r\n/home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/defines.h:119:53: note: in definition of macro \u2018RB_GNUC_EXTENSION_BLOCK\u2019\r\n  119 | #define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })\r\n      |                                                     ^\r\nconverters.hpp:348:16: note: in expansion of macro \u2018rb_utf8_str_new\u2019\r\n  348 |         key_ = rb_utf8_str_new(field_name.data(), field_name.length());\r\n      |                ^~~~~~~~~~~~~~~\r\nIn file included from converters.cpp:20:\r\nconverters.hpp: At global scope:\r\nconverters.hpp:484:11: error: \u2018SparseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  484 |     VISIT(SparseUnion)\r\n      |           ^~~~~~~~~~~\r\nconverters.hpp:453:38: note: in definition of macro \u2018VISIT\u2019\r\n  453 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                                      ^~~~\r\nconverters.hpp:485:11: error: \u2018DenseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  485 |     VISIT(DenseUnion)\r\n      |           ^~~~~~~~~~\r\nconverters.hpp:453:38: note: in definition of macro \u2018VISIT\u2019\r\n  453 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                                      ^~~~\r\nconverters.hpp:453:19: error: \u2018arrow::Status red_arrow::UnionArrayValueConverter::Visit(const int&)\u2019 cannot be overloaded with \u2018arrow::Status red_arrow::UnionArrayValueConverter::Visit(const int&)\u2019\r\n  453 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:485:5: note: in expansion of macro \u2018VISIT\u2019\r\n  485 |     VISIT(DenseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:453:19: note: previous declaration \u2018arrow::Status red_arrow::UnionArrayValueConverter::Visit(const int&)\u2019\r\n  453 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:484:5: note: in expansion of macro \u2018VISIT\u2019\r\n  484 |     VISIT(SparseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:522:38: error: \u2018SparseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  522 |     void convert_sparse(const arrow::SparseUnionArray& array) {\r\n      |                                      ^~~~~~~~~~~~~~~~\r\n      |                                      UnionArray\r\nconverters.hpp:536:37: error: \u2018DenseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  536 |     void convert_dense(const arrow::DenseUnionArray& array) {\r\n      |                                     ^~~~~~~~~~~~~~~\r\n      |                                     UnionArray\r\nconverters.hpp:453:19: error: \u2018arrow::Status red_arrow::UnionArrayValueConverter::Visit(const int&)\u2019 marked \u2018override\u2019, but does not override\r\n  453 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:484:5: note: in expansion of macro \u2018VISIT\u2019\r\n  484 |     VISIT(SparseUnion)\r\n      |     ^~~~~\r\nconverters.hpp: In member function \u2018VALUE red_arrow::UnionArrayValueConverter::convert(const arrow::UnionArray&, int64_t)\u2019:\r\nconverters.hpp:437:42: error: ISO C++ forbids declaration of \u2018type name\u2019 with no type [-fpermissive]\r\n  437 |         convert_sparse(static_cast<const arrow::SparseUnionArray&>(array));\r\n      |                                          ^~~~~\r\nconverters.hpp:437:42: error: expected \u2018>\u2019\r\nconverters.hpp:437:42: error: expected \u2018(\u2019\r\n  437 |         convert_sparse(static_cast<const arrow::SparseUnionArray&>(array));\r\n      |                                          ^~~~~\r\n      |                                          (\r\nconverters.hpp:437:49: error: \u2018SparseUnionArray\u2019 is not a member of \u2018arrow\u2019; did you mean \u2018UnionArray\u2019?\r\n  437 |         convert_sparse(static_cast<const arrow::SparseUnionArray&>(array));\r\n      |                                                 ^~~~~~~~~~~~~~~~\r\n      |                                                 UnionArray\r\nconverters.hpp:437:66: error: expected primary-expression before \u2018>\u2019 token\r\n  437 |         convert_sparse(static_cast<const arrow::SparseUnionArray&>(array));\r\n      |                                                                  ^\r\nconverters.hpp:440:41: error: ISO C++ forbids declaration of \u2018type name\u2019 with no type [-fpermissive]\r\n  440 |         convert_dense(static_cast<const arrow::DenseUnionArray&>(array));\r\n      |                                         ^~~~~\r\nconverters.hpp:440:41: error: expected \u2018>\u2019\r\nconverters.hpp:440:41: error: expected \u2018(\u2019\r\n  440 |         convert_dense(static_cast<const arrow::DenseUnionArray&>(array));\r\n      |                                         ^~~~~\r\n      |                                         (\r\nconverters.hpp:440:48: error: \u2018DenseUnionArray\u2019 is not a member of \u2018arrow\u2019; did you mean \u2018UnionArray\u2019?\r\n  440 |         convert_dense(static_cast<const arrow::DenseUnionArray&>(array));\r\n      |                                                ^~~~~~~~~~~~~~~\r\n      |                                                UnionArray\r\nconverters.hpp:440:64: error: expected primary-expression before \u2018>\u2019 token\r\n  440 |         convert_dense(static_cast<const arrow::DenseUnionArray&>(array));\r\n      |                                                                ^\r\nconverters.hpp: In member function \u2018void red_arrow::UnionArrayValueConverter::convert_sparse(const int&)\u2019:\r\nconverters.hpp:524:58: error: request for member \u2018type\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  524 |         std::static_pointer_cast<arrow::UnionType>(array.type()).get();\r\n      |                                                          ^~~~\r\nIn file included from /home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/ruby.h:29,\r\n                 from /home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby.h:33,\r\n                 from /home/user/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/glib2-3.4.3/ext/glib2/rbgobject.h:26,\r\n                 from red-arrow.hpp:33,\r\n                 from converters.hpp:20,\r\n                 from converters.cpp:20:\r\n/home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/intern.h:857:5: error: void value not ignored as it ought to be\r\n  857 |     (__builtin_constant_p(str) && __builtin_constant_p(len)) ? \\\r\n      |     ^\r\n/home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/defines.h:119:53: note: in definition of macro \u2018RB_GNUC_EXTENSION_BLOCK\u2019\r\n  119 | #define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })\r\n      |                                                     ^\r\nconverters.hpp:530:21: note: in expansion of macro \u2018rb_utf8_str_new\u2019\r\n  530 |       field_name_ = rb_utf8_str_new(field_name.data(), field_name.length());\r\n      |                     ^~~~~~~~~~~~~~~\r\nIn file included from converters.cpp:20:\r\nconverters.hpp:531:38: error: request for member \u2018field\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  531 |       const auto field_array = array.field(index).get();\r\n      |                                      ^~~~~\r\nconverters.hpp: In member function \u2018void red_arrow::UnionArrayValueConverter::convert_dense(const int&)\u2019:\r\nconverters.hpp:538:58: error: request for member \u2018type\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  538 |         std::static_pointer_cast<arrow::UnionType>(array.type()).get();\r\n      |                                                          ^~~~\r\nIn file included from /home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/ruby.h:29,\r\n                 from /home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby.h:33,\r\n                 from /home/user/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/glib2-3.4.3/ext/glib2/rbgobject.h:26,\r\n                 from red-arrow.hpp:33,\r\n                 from converters.hpp:20,\r\n                 from converters.cpp:20:\r\n/home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/intern.h:857:5: error: void value not ignored as it ought to be\r\n  857 |     (__builtin_constant_p(str) && __builtin_constant_p(len)) ? \\\r\n      |     ^\r\n/home/user/.rbenv/versions/2.7.1/include/ruby-2.7.0/ruby/defines.h:119:53: note: in definition of macro \u2018RB_GNUC_EXTENSION_BLOCK\u2019\r\n  119 | #define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })\r\n      |                                                     ^\r\nconverters.hpp:544:21: note: in expansion of macro \u2018rb_utf8_str_new\u2019\r\n  544 |       field_name_ = rb_utf8_str_new(field_name.data(), field_name.length());\r\n      |                     ^~~~~~~~~~~~~~~\r\nIn file included from converters.cpp:20:\r\nconverters.hpp:545:38: error: request for member \u2018field\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  545 |       const auto field_array = array.field(index);\r\n      |                                      ^~~~~\r\nconverters.hpp:547:22: error: request for member \u2018value_offset\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  547 |       index_ = array.value_offset(index_);\r\n      |                      ^~~~~~~~~~~~\r\nconverters.hpp: At global scope:\r\nconverters.hpp:608:11: error: \u2018SparseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  608 |     VISIT(SparseUnion)\r\n      |           ^~~~~~~~~~~\r\nconverters.hpp:577:38: note: in definition of macro \u2018VISIT\u2019\r\n  577 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                                      ^~~~\r\nconverters.hpp:609:11: error: \u2018DenseUnionArray\u2019 in namespace \u2018arrow\u2019 does not name a type; did you mean \u2018UnionArray\u2019?\r\n  609 |     VISIT(DenseUnion)\r\n      |           ^~~~~~~~~~\r\nconverters.hpp:577:38: note: in definition of macro \u2018VISIT\u2019\r\n  577 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                                      ^~~~\r\nconverters.hpp:577:19: error: \u2018arrow::Status red_arrow::DictionaryArrayValueConverter::Visit(const int&)\u2019 cannot be overloaded with \u2018arrow::Status red_arrow::DictionaryArrayValueConverter::Visit(const int&)\u2019\r\n  577 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:609:5: note: in expansion of macro \u2018VISIT\u2019\r\n  609 |     VISIT(DenseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:577:19: note: previous declaration \u2018arrow::Status red_arrow::DictionaryArrayValueConverter::Visit(const int&)\u2019\r\n  577 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:608:5: note: in expansion of macro \u2018VISIT\u2019\r\n  608 |     VISIT(SparseUnion)\r\n      |     ^~~~~\r\nconverters.hpp:577:19: error: \u2018arrow::Status red_arrow::DictionaryArrayValueConverter::Visit(const int&)\u2019 marked \u2018override\u2019, but does not override\r\n  577 |     arrow::Status Visit(const arrow::TYPE ## Array& array) override {   \\\r\n      |                   ^~~~~\r\nconverters.hpp:608:5: note: in expansion of macro \u2018VISIT\u2019\r\n  608 |     VISIT(SparseUnion)\r\n      |     ^~~~~\r\nconverters.hpp: In member function \u2018VALUE red_arrow::DictionaryArrayValueConverter::convert(const arrow::DictionaryArray&, int64_t)\u2019:\r\nconverters.hpp:569:28: error: \u2018const class arrow::DictionaryArray\u2019 has no member named \u2018GetValueIndex\u2019\r\n  569 |       value_index_ = array.GetValueIndex(index);\r\n      |                            ^~~~~~~~~~~~~\r\nconverters.hpp: In instantiation of \u2018arrow::Status red_arrow::ListArrayValueConverter::visit_value(const ArrayType&) [with ArrayType = int]\u2019:\r\nconverters.hpp:288:5:   required from here\r\nconverters.hpp:306:17: error: request for member \u2018null_count\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  306 |       if (array.null_count() > 0) {\r\n      |           ~~~~~~^~~~~~~~~~\r\nconverters.hpp:309:22: error: request for member \u2018IsNull\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  309 |           if (!array.IsNull(i + offset_)) {\r\n      |                ~~~~~~^~~~~~\r\nconverters.hpp: In instantiation of \u2018void red_arrow::StructArrayValueConverter::fill_field(const ArrayType&) [with ArrayType = int]\u2019:\r\nconverters.hpp:392:5:   required from here\r\nconverters.hpp:410:17: error: request for member \u2018IsNull\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  410 |       if (array.IsNull(index_)) {\r\n      |           ~~~~~~^~~~~~\r\nconverters.hpp: In instantiation of \u2018void red_arrow::UnionArrayValueConverter::convert_value(const ArrayType&) [with ArrayType = int]\u2019:\r\nconverters.hpp:484:5:   required from here\r\nconverters.hpp:497:17: error: request for member \u2018IsNull\u2019 in \u2018array\u2019, which is of non-class type \u2018const int\u2019\r\n  497 |       if (array.IsNull(index_)) {\r\n      |           ~~~~~~^~~~~~\r\nconverters.hpp:500:21: error: no matching function for call to \u2018red_arrow::ArrayValueConverter::convert(const int&, int64_t&)\u2019\r\n  500 |         rb_hash_aset(result,\r\n      |         ~~~~~~~~~~~~^~~~~~~~\r\n  501 |                      field_name_,\r\n      |                      ~~~~~~~~~~~~\r\n  502 |                      array_value_converter_->convert(array, index_));\r\n      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nconverters.hpp:55:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::NullArray&, int64_t)\u2019\r\n   55 |     inline VALUE convert(const arrow::NullArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:55:50: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::NullArray&\u2019\r\n   55 |     inline VALUE convert(const arrow::NullArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:60:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::BooleanArray&, int64_t)\u2019\r\n   60 |     inline VALUE convert(const arrow::BooleanArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:60:53: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::BooleanArray&\u2019\r\n   60 |     inline VALUE convert(const arrow::BooleanArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:65:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Int8Array&, int64_t)\u2019\r\n   65 |     inline VALUE convert(const arrow::Int8Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:65:50: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Int8Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Int8Type>&\u2019}\r\n   65 |     inline VALUE convert(const arrow::Int8Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:70:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Int16Array&, int64_t)\u2019\r\n   70 |     inline VALUE convert(const arrow::Int16Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:70:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Int16Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Int16Type>&\u2019}\r\n   70 |     inline VALUE convert(const arrow::Int16Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:75:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Int32Array&, int64_t)\u2019\r\n   75 |     inline VALUE convert(const arrow::Int32Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:75:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Int32Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Int32Type>&\u2019}\r\n   75 |     inline VALUE convert(const arrow::Int32Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:80:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Int64Array&, int64_t)\u2019\r\n   80 |     inline VALUE convert(const arrow::Int64Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:80:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Int64Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Int64Type>&\u2019}\r\n   80 |     inline VALUE convert(const arrow::Int64Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:85:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const UInt8Array&, int64_t)\u2019\r\n   85 |     inline VALUE convert(const arrow::UInt8Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:85:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const UInt8Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::UInt8Type>&\u2019}\r\n   85 |     inline VALUE convert(const arrow::UInt8Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:90:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const UInt16Array&, int64_t)\u2019\r\n   90 |     inline VALUE convert(const arrow::UInt16Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:90:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const UInt16Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::UInt16Type>&\u2019}\r\n   90 |     inline VALUE convert(const arrow::UInt16Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:95:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const UInt32Array&, int64_t)\u2019\r\n   95 |     inline VALUE convert(const arrow::UInt32Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:95:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const UInt32Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::UInt32Type>&\u2019}\r\n   95 |     inline VALUE convert(const arrow::UInt32Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:100:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const UInt64Array&, int64_t)\u2019\r\n  100 |     inline VALUE convert(const arrow::UInt64Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:100:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const UInt64Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::UInt64Type>&\u2019}\r\n  100 |     inline VALUE convert(const arrow::UInt64Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:110:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const FloatArray&, int64_t)\u2019\r\n  110 |     inline VALUE convert(const arrow::FloatArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:110:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const FloatArray&\u2019 {aka \u2018const arrow::NumericArray<arrow::FloatType>&\u2019}\r\n  110 |     inline VALUE convert(const arrow::FloatArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:115:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const DoubleArray&, int64_t)\u2019\r\n  115 |     inline VALUE convert(const arrow::DoubleArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:115:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const DoubleArray&\u2019 {aka \u2018const arrow::NumericArray<arrow::DoubleType>&\u2019}\r\n  115 |     inline VALUE convert(const arrow::DoubleArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:120:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::BinaryArray&, int64_t)\u2019\r\n  120 |     inline VALUE convert(const arrow::BinaryArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:120:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::BinaryArray&\u2019\r\n  120 |     inline VALUE convert(const arrow::BinaryArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:130:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::StringArray&, int64_t)\u2019\r\n  130 |     inline VALUE convert(const arrow::StringArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:130:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::StringArray&\u2019\r\n  130 |     inline VALUE convert(const arrow::StringArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:138:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::FixedSizeBinaryArray&, int64_t)\u2019\r\n  138 |     inline VALUE convert(const arrow::FixedSizeBinaryArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:138:61: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::FixedSizeBinaryArray&\u2019\r\n  138 |     inline VALUE convert(const arrow::FixedSizeBinaryArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:146:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Date32Array&, int64_t)\u2019\r\n  146 |     inline VALUE convert(const arrow::Date32Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:146:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Date32Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Date32Type>&\u2019}\r\n  146 |     inline VALUE convert(const arrow::Date32Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:153:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Date64Array&, int64_t)\u2019\r\n  153 |     inline VALUE convert(const arrow::Date64Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:153:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Date64Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Date64Type>&\u2019}\r\n  153 |     inline VALUE convert(const arrow::Date64Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:162:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Time32Array&, int64_t)\u2019\r\n  162 |     inline VALUE convert(const arrow::Time32Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:162:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Time32Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Time32Type>&\u2019}\r\n  162 |     inline VALUE convert(const arrow::Time32Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:174:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Time64Array&, int64_t)\u2019\r\n  174 |     inline VALUE convert(const arrow::Time64Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:174:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Time64Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Time64Type>&\u2019}\r\n  174 |     inline VALUE convert(const arrow::Time64Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:186:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const TimestampArray&, int64_t)\u2019\r\n  186 |     inline VALUE convert(const arrow::TimestampArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:186:55: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const TimestampArray&\u2019 {aka \u2018const arrow::NumericArray<arrow::TimestampType>&\u2019}\r\n  186 |     inline VALUE convert(const arrow::TimestampArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.cpp:23:9: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::ListArray&, int64_t)\u2019\r\n   23 |   VALUE ArrayValueConverter::convert(const arrow::ListArray& array,\r\n      |         ^~~~~~~~~~~~~~~~~~~\r\nconverters.cpp:23:62: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::ListArray&\u2019\r\n   23 |   VALUE ArrayValueConverter::convert(const arrow::ListArray& array,\r\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.cpp:28:9: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::StructArray&, int64_t)\u2019\r\n   28 |   VALUE ArrayValueConverter::convert(const arrow::StructArray& array,\r\n      |         ^~~~~~~~~~~~~~~~~~~\r\nconverters.cpp:28:64: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::StructArray&\u2019\r\n   28 |   VALUE ArrayValueConverter::convert(const arrow::StructArray& array,\r\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.cpp:33:9: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::UnionArray&, int64_t)\u2019\r\n   33 |   VALUE ArrayValueConverter::convert(const arrow::UnionArray& array,\r\n      |         ^~~~~~~~~~~~~~~~~~~\r\nconverters.cpp:33:63: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::UnionArray&\u2019\r\n   33 |   VALUE ArrayValueConverter::convert(const arrow::UnionArray& array,\r\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.cpp:38:9: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::DictionaryArray&, int64_t)\u2019\r\n   38 |   VALUE ArrayValueConverter::convert(const arrow::DictionaryArray& array,\r\n      |         ^~~~~~~~~~~~~~~~~~~\r\nconverters.cpp:38:68: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::DictionaryArray&\u2019\r\n   38 |   VALUE ArrayValueConverter::convert(const arrow::DictionaryArray& array,\r\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nIn file included from converters.cpp:20:\r\nconverters.hpp:213:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::Decimal128Array&, int64_t)\u2019\r\n  213 |     inline VALUE convert(const arrow::Decimal128Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:213:56: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::Decimal128Array&\u2019\r\n  213 |     inline VALUE convert(const arrow::Decimal128Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp: In instantiation of \u2018VALUE red_arrow::DictionaryArrayValueConverter::convert_value(const ArrayType&, int64_t) [with ArrayType = int; VALUE = long unsigned int; int64_t = long int]\u2019:\r\nconverters.hpp:608:5:   required from here\r\nconverters.hpp:621:54: error: no matching function for call to \u2018red_arrow::ArrayValueConverter::convert(const int&, const int64_t&)\u2019\r\n  621 |       return array_value_converter_->convert(array, i);\r\n      |                                                      ^\r\nconverters.hpp:55:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::NullArray&, int64_t)\u2019\r\n   55 |     inline VALUE convert(const arrow::NullArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:55:50: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::NullArray&\u2019\r\n   55 |     inline VALUE convert(const arrow::NullArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:60:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::BooleanArray&, int64_t)\u2019\r\n   60 |     inline VALUE convert(const arrow::BooleanArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:60:53: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::BooleanArray&\u2019\r\n   60 |     inline VALUE convert(const arrow::BooleanArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:65:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Int8Array&, int64_t)\u2019\r\n   65 |     inline VALUE convert(const arrow::Int8Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:65:50: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Int8Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Int8Type>&\u2019}\r\n   65 |     inline VALUE convert(const arrow::Int8Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:70:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Int16Array&, int64_t)\u2019\r\n   70 |     inline VALUE convert(const arrow::Int16Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:70:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Int16Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Int16Type>&\u2019}\r\n   70 |     inline VALUE convert(const arrow::Int16Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:75:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Int32Array&, int64_t)\u2019\r\n   75 |     inline VALUE convert(const arrow::Int32Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:75:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Int32Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Int32Type>&\u2019}\r\n   75 |     inline VALUE convert(const arrow::Int32Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:80:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Int64Array&, int64_t)\u2019\r\n   80 |     inline VALUE convert(const arrow::Int64Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:80:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Int64Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Int64Type>&\u2019}\r\n   80 |     inline VALUE convert(const arrow::Int64Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:85:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const UInt8Array&, int64_t)\u2019\r\n   85 |     inline VALUE convert(const arrow::UInt8Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:85:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const UInt8Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::UInt8Type>&\u2019}\r\n   85 |     inline VALUE convert(const arrow::UInt8Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:90:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const UInt16Array&, int64_t)\u2019\r\n   90 |     inline VALUE convert(const arrow::UInt16Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:90:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const UInt16Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::UInt16Type>&\u2019}\r\n   90 |     inline VALUE convert(const arrow::UInt16Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:95:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const UInt32Array&, int64_t)\u2019\r\n   95 |     inline VALUE convert(const arrow::UInt32Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:95:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const UInt32Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::UInt32Type>&\u2019}\r\n   95 |     inline VALUE convert(const arrow::UInt32Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:100:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const UInt64Array&, int64_t)\u2019\r\n  100 |     inline VALUE convert(const arrow::UInt64Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:100:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const UInt64Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::UInt64Type>&\u2019}\r\n  100 |     inline VALUE convert(const arrow::UInt64Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:110:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const FloatArray&, int64_t)\u2019\r\n  110 |     inline VALUE convert(const arrow::FloatArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:110:51: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const FloatArray&\u2019 {aka \u2018const arrow::NumericArray<arrow::FloatType>&\u2019}\r\n  110 |     inline VALUE convert(const arrow::FloatArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:115:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const DoubleArray&, int64_t)\u2019\r\n  115 |     inline VALUE convert(const arrow::DoubleArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:115:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const DoubleArray&\u2019 {aka \u2018const arrow::NumericArray<arrow::DoubleType>&\u2019}\r\n  115 |     inline VALUE convert(const arrow::DoubleArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:120:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::BinaryArray&, int64_t)\u2019\r\n  120 |     inline VALUE convert(const arrow::BinaryArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:120:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::BinaryArray&\u2019\r\n  120 |     inline VALUE convert(const arrow::BinaryArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:130:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::StringArray&, int64_t)\u2019\r\n  130 |     inline VALUE convert(const arrow::StringArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:130:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::StringArray&\u2019\r\n  130 |     inline VALUE convert(const arrow::StringArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:138:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::FixedSizeBinaryArray&, int64_t)\u2019\r\n  138 |     inline VALUE convert(const arrow::FixedSizeBinaryArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:138:61: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::FixedSizeBinaryArray&\u2019\r\n  138 |     inline VALUE convert(const arrow::FixedSizeBinaryArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:146:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Date32Array&, int64_t)\u2019\r\n  146 |     inline VALUE convert(const arrow::Date32Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:146:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Date32Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Date32Type>&\u2019}\r\n  146 |     inline VALUE convert(const arrow::Date32Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:153:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Date64Array&, int64_t)\u2019\r\n  153 |     inline VALUE convert(const arrow::Date64Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:153:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Date64Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Date64Type>&\u2019}\r\n  153 |     inline VALUE convert(const arrow::Date64Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:162:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Time32Array&, int64_t)\u2019\r\n  162 |     inline VALUE convert(const arrow::Time32Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:162:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Time32Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Time32Type>&\u2019}\r\n  162 |     inline VALUE convert(const arrow::Time32Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:174:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const Time64Array&, int64_t)\u2019\r\n  174 |     inline VALUE convert(const arrow::Time64Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:174:52: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const Time64Array&\u2019 {aka \u2018const arrow::NumericArray<arrow::Time64Type>&\u2019}\r\n  174 |     inline VALUE convert(const arrow::Time64Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.hpp:186:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const TimestampArray&, int64_t)\u2019\r\n  186 |     inline VALUE convert(const arrow::TimestampArray& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:186:55: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const TimestampArray&\u2019 {aka \u2018const arrow::NumericArray<arrow::TimestampType>&\u2019}\r\n  186 |     inline VALUE convert(const arrow::TimestampArray& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.cpp:23:9: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::ListArray&, int64_t)\u2019\r\n   23 |   VALUE ArrayValueConverter::convert(const arrow::ListArray& array,\r\n      |         ^~~~~~~~~~~~~~~~~~~\r\nconverters.cpp:23:62: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::ListArray&\u2019\r\n   23 |   VALUE ArrayValueConverter::convert(const arrow::ListArray& array,\r\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.cpp:28:9: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::StructArray&, int64_t)\u2019\r\n   28 |   VALUE ArrayValueConverter::convert(const arrow::StructArray& array,\r\n      |         ^~~~~~~~~~~~~~~~~~~\r\nconverters.cpp:28:64: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::StructArray&\u2019\r\n   28 |   VALUE ArrayValueConverter::convert(const arrow::StructArray& array,\r\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.cpp:33:9: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::UnionArray&, int64_t)\u2019\r\n   33 |   VALUE ArrayValueConverter::convert(const arrow::UnionArray& array,\r\n      |         ^~~~~~~~~~~~~~~~~~~\r\nconverters.cpp:33:63: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::UnionArray&\u2019\r\n   33 |   VALUE ArrayValueConverter::convert(const arrow::UnionArray& array,\r\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nconverters.cpp:38:9: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::DictionaryArray&, int64_t)\u2019\r\n   38 |   VALUE ArrayValueConverter::convert(const arrow::DictionaryArray& array,\r\n      |         ^~~~~~~~~~~~~~~~~~~\r\nconverters.cpp:38:68: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::DictionaryArray&\u2019\r\n   38 |   VALUE ArrayValueConverter::convert(const arrow::DictionaryArray& array,\r\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nIn file included from converters.cpp:20:\r\nconverters.hpp:213:18: note: candidate: \u2018VALUE red_arrow::ArrayValueConverter::convert(const arrow::Decimal128Array&, int64_t)\u2019\r\n  213 |     inline VALUE convert(const arrow::Decimal128Array& array,\r\n      |                  ^~~~~~~\r\nconverters.hpp:213:56: note:   no known conversion for argument 1 from \u2018const int\u2019 to \u2018const arrow::Decimal128Array&\u2019\r\n  213 |     inline VALUE convert(const arrow::Decimal128Array& array,\r\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\r\nmake: *** [Makefile:237: converters.o] Error 1make failed, exit code 2\r\n\r\n```",
        "created_at": "2020-07-27T10:40:56.000Z",
        "updated_at": "2020-07-28T00:45:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Ruby",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-07-27T11:02:54.000Z"
    },
    "comments": [
        {
            "created_at": "2020-07-27T11:02:11.892Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9565?focusedCommentId=17165620) by Dimitrij Denissenko (dimitrij.denissenko@blacksquaremedia.com):*\nIgnore, works fine with `libarrow-dev 1.0.0`"
        },
        {
            "created_at": "2020-07-27T11:02:54.764Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9565?focusedCommentId=17165622) by Dimitrij Denissenko (dimitrij.denissenko@blacksquaremedia.com):*\nRequires libarrow 1.0 (obviously)"
        }
    ]
}