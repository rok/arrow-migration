{
    "issue": {
        "title": "[Rust] Invalid write of size 1 in StringBuilder",
        "body": "***Note**: This issue was originally created as [ARROW-10618](https://issues.apache.org/jira/browse/ARROW-10618). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n# What is the problem?\r\nI encounter memory errors with using the safe api of StringBuilder. I used the exact same code with PrimitiveBuilders and don't encounter the issue with them. \r\n\r\n# How to reproduce?\r\n\r\nI encounter when creating multiple builder whilst reading a very large csv. The csv I've used is this kaggle dataset: https://www.kaggle.com/colinmorris/reddit-usernames\r\n\r\n\u00a0\r\n```c++\n\r\nuse arrow::array::StringBuilder;\r\n\r\nfn main () {\r\n    let batch_size = 1024;\r\n    let file = std::fs::File::open(\"users.csv\").unwrap();\r\n    let mut rdr = csv::Reader::from_reader(file);\r\n\r\n    // to make sure exceeding limit is not the cause of invalid mem write\r\n    let mut builder = StringBuilder::new(batch_size * 2);\r\n\r\n    for (i, result) in rdr.records().enumerate() {\r\n\r\n        let record = result.unwrap();\r\n        builder.append_value(record.get(0).unwrap()).unwrap();\r\n\r\n        if i % batch_size == 0 {\r\n            builder.finish();\r\n            builder = StringBuilder::new(batch_size * 2)\r\n        }\r\n    }\r\n}\r\n\u00a0\n```\r\n##  Cargo.toml\r\n\r\n```c\n\r\n[package]\r\nname = \"memcheck\"\r\nversion = \"0.1.0\"\r\nauthors = [\"ritchie46 <ritchie46@gmail.com>\"]\r\nedition = \"2018\"\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\n[dependencies]\r\narrow = {version = \"2\", default_features = false}\r\ncsv = \"1.1\"\r\n\r\n```\r\n\u00a0\r\n# Valgrind output\r\n\r\n```c\n\r\n==11917== Memcheck, a memory error detector\r\n==11917== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==11917== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\r\n==11917== Command: ./memcheck\r\n==11917== \r\n==11917== Invalid read of size 1\r\n==11917==    at 0x13C022: arrow::util::bit_util::set_bits_raw (bit_util.rs:128)\r\n==11917==    by 0x150B71: <arrow::array::builder::BufferBuilder<arrow::datatypes::BooleanType> as arrow::array::builder::BufferBuilderTrait<arrow::datatypes::BooleanType>>::append_n (builder.rs:374)\r\n==11917==    by 0x151164: arrow::array::builder::PrimitiveBuilder<T>::append_slice (builder.rs:596)\r\n==11917==    by 0x152417: arrow::array::builder::StringBuilder::append_value (builder.rs:1771)\r\n==11917==    by 0x12D0ED: memcheck::main (exec.rs:773)\r\n==11917==    by 0x12C3CA: core::ops::function::FnOnce::call_once (dfa.rs:794)\r\n==11917==    by 0x12CACD: std::sys_common::backtrace::__rust_begin_short_backtrace (dfa.rs:840)\r\n==11917==    by 0x1307E0: std::rt::lang_start::{{closure}} (rt.rs:66)\r\n==11917==    by 0x25F746: call_once<(),Fn<()>> (function.rs:259)\r\n==11917==    by 0x25F746: do_call<&Fn<()>,i32> (panicking.rs:381)\r\n==11917==    by 0x25F746: try<i32,&Fn<()>> (panicking.rs:345)\r\n==11917==    by 0x25F746: catch_unwind<&Fn<()>,i32> (panic.rs:396)\r\n==11917==    by 0x25F746: std::rt::lang_start_internal (rt.rs:51)\r\n==11917==    by 0x1307B6: std::rt::lang_start (rt.rs:65)\r\n==11917==    by 0x12D369: main (in /home/ritchie46/code/polars/target/debug/memcheck)\r\n==11917==  Address 0x5f01e80 is 0 bytes after a block of size 1,024 alloc'd\r\n==11917==    at 0x4C31E76: memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==11917==    by 0x4C31F91: posix_memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==11917==    by 0x25E453: aligned_malloc (alloc.rs:95)\r\n==11917==    by 0x25E453: alloc (alloc.rs:22)\r\n==11917==    by 0x25E453: realloc_fallback (alloc.rs:41)\r\n==11917==    by 0x25E453: realloc (alloc.rs:50)\r\n==11917==    by 0x25E453: __rdl_realloc (alloc.rs:378)\r\n==11917==    by 0x136D5C: alloc::alloc::realloc (alloc.rs:120)\r\n==11917==    by 0x13B811: arrow::memory::reallocate (memory.rs:187)\r\n==11917==    by 0x188A54: arrow::buffer::MutableBuffer::reserve (buffer.rs:666)\r\n==11917==    by 0x150CBD: <arrow::array::builder::BufferBuilder<arrow::datatypes::BooleanType> as arrow::array::builder::BufferBuilderTrait<arrow::datatypes::BooleanType>>::reserve (builder.rs:402)\r\n==11917==    by 0x150A1E: <arrow::array::builder::BufferBuilder<arrow::datatypes::BooleanType> as arrow::array::builder::BufferBuilderTrait<arrow::datatypes::BooleanType>>::append_n (builder.rs:371)\r\n==11917==    by 0x151164: arrow::array::builder::PrimitiveBuilder<T>::append_slice (builder.rs:596)\r\n==11917==    by 0x152417: arrow::array::builder::StringBuilder::append_value (builder.rs:1771)\r\n==11917==    by 0x12D0ED: memcheck::main (exec.rs:773)\r\n==11917==    by 0x12C3CA: core::ops::function::FnOnce::call_once (dfa.rs:794)\r\n==11917== \r\n==11917== Invalid write of size 1\r\n==11917==    at 0x13C024: arrow::util::bit_util::set_bits_raw (bit_util.rs:128)\r\n==11917==    by 0x150B71: <arrow::array::builder::BufferBuilder<arrow::datatypes::BooleanType> as arrow::array::builder::BufferBuilderTrait<arrow::datatypes::BooleanType>>::append_n (builder.rs:374)\r\n==11917==    by 0x151164: arrow::array::builder::PrimitiveBuilder<T>::append_slice (builder.rs:596)\r\n==11917==    by 0x152417: arrow::array::builder::StringBuilder::append_value (builder.rs:1771)\r\n==11917==    by 0x12D0ED: memcheck::main (exec.rs:773)\r\n==11917==    by 0x12C3CA: core::ops::function::FnOnce::call_once (dfa.rs:794)\r\n==11917==    by 0x12CACD: std::sys_common::backtrace::__rust_begin_short_backtrace (dfa.rs:840)\r\n==11917==    by 0x1307E0: std::rt::lang_start::{{closure}} (rt.rs:66)\r\n==11917==    by 0x25F746: call_once<(),Fn<()>> (function.rs:259)\r\n==11917==    by 0x25F746: do_call<&Fn<()>,i32> (panicking.rs:381)\r\n==11917==    by 0x25F746: try<i32,&Fn<()>> (panicking.rs:345)\r\n==11917==    by 0x25F746: catch_unwind<&Fn<()>,i32> (panic.rs:396)\r\n==11917==    by 0x25F746: std::rt::lang_start_internal (rt.rs:51)\r\n==11917==    by 0x1307B6: std::rt::lang_start (rt.rs:65)\r\n==11917==    by 0x12D369: main (in /home/ritchie46/code/polars/target/debug/memcheck)\r\n==11917==  Address 0x5f01e80 is 0 bytes after a block of size 1,024 alloc'd\r\n==11917==    at 0x4C31E76: memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==11917==    by 0x4C31F91: posix_memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==11917==    by 0x25E453: aligned_malloc (alloc.rs:95)\r\n==11917==    by 0x25E453: alloc (alloc.rs:22)\r\n==11917==    by 0x25E453: realloc_fallback (alloc.rs:41)\r\n==11917==    by 0x25E453: realloc (alloc.rs:50)\r\n==11917==    by 0x25E453: __rdl_realloc (alloc.rs:378)\r\n==11917==    by 0x136D5C: alloc::alloc::realloc (alloc.rs:120)\r\n==11917==    by 0x13B811: arrow::memory::reallocate (memory.rs:187)\r\n==11917==    by 0x188A54: arrow::buffer::MutableBuffer::reserve (buffer.rs:666)\r\n==11917==    by 0x150CBD: <arrow::array::builder::BufferBuilder<arrow::datatypes::BooleanType> as arrow::array::builder::BufferBuilderTrait<arrow::datatypes::BooleanType>>::reserve (builder.rs:402)\r\n==11917==    by 0x150A1E: <arrow::array::builder::BufferBuilder<arrow::datatypes::BooleanType> as arrow::array::builder::BufferBuilderTrait<arrow::datatypes::BooleanType>>::append_n (builder.rs:371)\r\n==11917==    by 0x151164: arrow::array::builder::PrimitiveBuilder<T>::append_slice (builder.rs:596)\r\n==11917==    by 0x152417: arrow::array::builder::StringBuilder::append_value (builder.rs:1771)\r\n==11917==    by 0x12D0ED: memcheck::main (exec.rs:773)\r\n==11917==    by 0x12C3CA: core::ops::function::FnOnce::call_once (dfa.rs:794)\r\n\r\n```\r\n\r\n# Environment.\r\n\r\nConfirmed invalid write on Ubuntu 18.04 and a Segfault 11 on MacOs.\r\ncargo 1.49.0-nightly (d5556aeb8 2020-11-04)\r\n",
        "created_at": "2020-11-16T13:50:09.000Z",
        "updated_at": "2021-12-16T17:01:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": []
}