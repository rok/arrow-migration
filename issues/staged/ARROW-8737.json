{
    "issue": {
        "title": "[Rust] [Parquet] Parquet array reader panics",
        "body": "***Note**: This issue was originally created as [ARROW-8737](https://issues.apache.org/jira/browse/ARROW-8737). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm trying to read some parquet files produced by Apache Spark 3.0.0-preview2 and the parquet crate is panicking. It should at least fail with an Err rather than panic.\r\n```java\n\r\nthread '<unnamed>' panicked at 'index out of bounds: the len is 1024 but the index is 1087', /home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/parquet-0.17.0/src/arrow/record_reader.rs:415:21\r\nstack backtrace:\r\n   0:     0x564dbc25a9d4 - backtrace::backtrace::libunwind::trace::hfcd33194db0151d4\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1:     0x564dbc25a9d4 - backtrace::backtrace::trace_unsynchronized::hfd1904bbbd5335b5\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2:     0x564dbc25a9d4 - std::sys_common::backtrace::_print_fmt::h8476c57b177b254e\r\n                               at src/libstd/sys_common/backtrace.rs:78\r\n   3:     0x564dbc25a9d4 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h73acbc5f6d4b1044\r\n                               at src/libstd/sys_common/backtrace.rs:59\r\n   4:     0x564dbc28727c - core::fmt::write::hdf236390fbd68d3d\r\n                               at src/libcore/fmt/mod.rs:1069\r\n   5:     0x564dbc2536c3 - std::io::Write::write_fmt::h5722fa40bb2afafd\r\n                               at src/libstd/io/mod.rs:1532\r\n   6:     0x564dbc25d2d5 - std::sys_common::backtrace::_print::ha468e873aada7c78\r\n                               at src/libstd/sys_common/backtrace.rs:62\r\n   7:     0x564dbc25d2d5 - std::sys_common::backtrace::print::h149365a2f029de62\r\n                               at src/libstd/sys_common/backtrace.rs:49\r\n   8:     0x564dbc25d2d5 - std::panicking::default_hook::{{closure}}::hb4a33f9e05934a52\r\n                               at src/libstd/panicking.rs:198\r\n   9:     0x564dbc25d012 - std::panicking::default_hook::hc4535d7b0c743abd\r\n                               at src/libstd/panicking.rs:218\r\n  10:     0x564dbc25d918 - std::panicking::rust_panic_with_hook::haa34a96a6dbd5a2e\r\n                               at src/libstd/panicking.rs:477\r\n  11:     0x564dbc25d51b - rust_begin_unwind\r\n                               at src/libstd/panicking.rs:385\r\n  12:     0x564dbc285071 - core::panicking::panic_fmt::hd101a87121fa411f\r\n                               at src/libcore/panicking.rs:89\r\n  13:     0x564dbc285032 - core::panicking::panic_bounds_check::ha0668dcff6357ef4\r\n                               at src/libcore/panicking.rs:65\r\n  14:     0x564dbbcdbf46 - parquet::arrow::record_reader::RecordReader<T>::read_records::hc8f50faae4afaae7\r\n  15:     0x564dbbc4da98 - <parquet::arrow::array_reader::PrimitiveArrayReader<T> as parquet::arrow::array_reader::ArrayReader>::next_batch::hb4e5b687cd08ee46\r\n  16:     0x564dbbcca3c9 - <core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::try_fold::h4206004da76eb745\r\n  17:     0x564dbbc51c51 - <parquet::arrow::array_reader::StructArrayReader as parquet::arrow::array_reader::ArrayReader>::next_batch::hf1c89300e65c72e8\r\n  18:     0x564dbbcacaba - <parquet::arrow::arrow_reader::ParquetRecordBatchReader as arrow::record_batch::RecordBatchReader>::next_batch::ha906d7eb32c7238a\r\n  19:     0x564dbbbe33b8 - std::sys_common::backtrace::__rust_begin_short_backtrace::hc2fd908045ecbee0\r\n  20:     0x564dbbb4a7ff - core::ops::function::FnOnce::call_once{{vtable.shim}}::h58c848a35fea035b\r\n  21:     0x564dbc264f7a - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::ha26a994a135d55de\r\n                               at /rustc/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src/liballoc/boxed.rs:1034\r\n  22:     0x564dbc264f7a - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::h677072ad3ba2806b\r\n                               at /rustc/1836e3b42a5b2f37fd79104eedbe8f48a5afdee6/src/liballoc/boxed.rs:1034\r\n  23:     0x564dbc264f7a - std::sys::unix::thread::Thread::new::thread_start::h7c46ce580f54dd0e\r\n                               at src/libstd/sys/unix/thread.rs:87\r\n  24:     0x7f332cf79669 - start_thread\r\n                               at /build/glibc-t7JzpG/glibc-2.30/nptl/pthread_create.c:479\r\n  25:     0x7f332ce85323 - clone\r\n  26:                0x0 - <unknown>\r\nError: DataFusionError(General(\"Error receiving batch: RecvError\"))\r\n \n```",
        "created_at": "2020-05-08T02:44:44.000Z",
        "updated_at": "2021-04-26T12:30:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-04-26T12:30:51.000Z"
    },
    "comments": [
        {
            "created_at": "2020-05-08T02:52:44.177Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8737?focusedCommentId=17102191) by Andy Grove (andygrove):*\nI was able to work around the issue by increasing a batch size from 1024 to 4096, but seems like there is a missing bounds check in this code."
        },
        {
            "created_at": "2021-04-26T12:30:49.571Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8737?focusedCommentId=17332093) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/72"
        }
    ]
}