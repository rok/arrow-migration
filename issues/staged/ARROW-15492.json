{
    "issue": {
        "title": "[Python] handle timestamp type in parquet file for compatibility with older HiveQL",
        "body": "***Note**: This issue was originally created as [ARROW-15492](https://issues.apache.org/jira/browse/ARROW-15492). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHi there,\r\n\r\n\r\nI face an issue when I write a parquet file by PyArrow.\r\n\r\nIn the older version of Hive, it can only recognize the timestamp type stored in INT96, so I use table.write_to_data with `use_deprecated\u00a0timestamp_int96_timestamps=True` option to save the parquet file. But the HiveQL will skip conversion when the metadata of parquet file is not created_by \"parquet-mr\".\r\n\r\n[hive/ParquetRecordReaderBase.java at f1ff99636a5546231336208a300a114bcf8c5944 \u00b7 apache/hive (github.com)](https://github.com/apache/hive/blob/f1ff99636a5546231336208a300a114bcf8c5944/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/ParquetRecordReaderBase.java#L137-L139)\r\n\r\n\u00a0\r\n\r\nSo I have to save the timestamp columns with timezone info(pad to UTC+8).\r\n\r\nBut when pyarrow.parquet read from a dir which contains parquets created by both PyArrow and parquet-mr, Arrow.Table will ignore the timezone info for parquet-mr files.\r\n\r\n\u00a0\r\n\r\nMaybe PyArrow can expose the created_by option in pyarrow({**}prefer{**}, parquet::WriterProperties::created_by is available in the C++ ).\r\n\r\nOr handle the timestamp type with timezone which files created by parquet-mr?\r\n\r\n\u00a0\r\n\r\nMaybe related to https://issues.apache.org/jira/browse/ARROW-14422",
        "created_at": "2022-01-28T02:17:26.000Z",
        "updated_at": "2022-04-08T12:27:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-02-06T06:57:44.770Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15492?focusedCommentId=17487634) by Micah Kornfield (emkornfield):*\nOn the exposing the write field, per the other Jira I don't think we should do it.\u00a0 It makes it much harder to deal with bugs that might occur in a particular version of the library.\r\n\r\n\u00a0\r\n> Or handle the timestamp type with timezone which files created by parquet-mr?\r\nI'm not familiar with this, could you link the to specification on this or provide more details?\u00a0 It seems like this might be a better approach."
        },
        {
            "created_at": "2022-02-08T03:54:29.571Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15492?focusedCommentId=17488578) by nero (amznero):*\n`[~emkornfield]` \u00a0\r\n\r\nIn Parquet format, there is a flag named \"isAdjustedToUTC\" to indicate whether the timestamp type is local timezone or UTC.\r\n\r\n\u00a0\r\n\r\nRef: [parquet-format/LogicalTypes.md at master \u00b7 apache/parquet-format (github.com)](https://github.com/apache/parquet-format/blob/master/LogicalTypes.md#local-semantics-timestamps-not-normalized-to-utc)"
        },
        {
            "created_at": "2022-02-08T05:50:17.963Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15492?focusedCommentId=17488603) by Micah Kornfield (emkornfield):*\nSo this looks like an oversight with int96. The logical type with isAdjustedToUtc isn't accounted for when making the [arrow type for int96](https://github.com/apache/arrow/blob/85f192a45755b3f15653fdc0a8fbd788086e125f/cpp/src/parquet/arrow/schema_internal.cc#L197). It is used for [int64\\|#L197]. \u00a0 `[~amznero]` \u00a0 would you be interested in contributing a fix for this?"
        },
        {
            "created_at": "2022-02-11T06:02:19.868Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15492?focusedCommentId=17490684) by nero (amznero):*\nI read the parquet-format document again, I found that I misunderstood the isAdjustedToUTC flag.\u00a0\r\n\r\nParquet format only has 7 physical types(BOOLEAN, INT32, INT64, INT96, FLOAT, DOUBLE, BYTE_ARRAY).\u00a0\r\n> Logical types are used to extend the types that parquet can be used to store, by specifying how the primitive types should be interpreted\r\nThe isAdjustedToUTC flag is only contained in the timestamp logical type which is stored in the int64 physical type. So INT96(deprecated in [PARQUET-323] INT96 should be marked as deprecated) cannot get time zone information from this flag.\r\n\r\nWhen hive reads a parquet column stored in the INT96 type, it will look at the table property(or use the local time zone if it is absent) to adjust the time zone.\r\n> - Hive will read Parquet MR int96 timestamp data and adjust values using a time zone from a table property, if set, or using the local time zone if it is absent. No adjustment will be applied to data written by Impala.\r\nHive:\r\n \\* [HIVE-12767] Implement table property to address Parquet int96 timestamp bug - ASF JIRA (apache.org)\r\n\r\nSpark:\r\n \\* [SPARK-12297] Add work-around for Parquet/Hive int96 timestamp bug. - ASF JIRA (apache.org)\r\n\r\n\u00a0\r\n\r\nSo I'm not sure whether Arrow should adjust int96 type data stored in parquet file with the local time zone?"
        },
        {
            "created_at": "2022-02-11T06:28:54.722Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15492?focusedCommentId=17490695) by Micah Kornfield (emkornfield):*\nOK so it isn't a bug with missing the logical type.\r\n\r\n\u00a0\r\n\r\n> So I'm not sure whether Arrow should adjust int96 type data stored in parquet file with the local time zone?\r\n\r\nThe only solution seems to be to pass in an optional target timezone to convert to.\u00a0 There is no guarantee local time aligns with the writer's timezone.\u00a0 \u00a0I think the C++ library has started vendoring the necessary utilities to do the time zone conversions.\u00a0\u00a0\r\n\r\n\u00a0\r\n\r\nAn alternative could also be to provide additional metadata that consumers could use to determine the source and pad as necessary outside of pyarrow.\u00a0\u00a0"
        },
        {
            "created_at": "2022-02-11T08:35:51.360Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15492?focusedCommentId=17490747) by nero (amznero):*\n> There is no guarantee local time aligns with the writer's timezone. I think the C++ library has started vendoring the necessary utilities to do the time zone conversions\r\n\r\nLooking forward to it.(y)\r\n\r\n\u00a0\r\n\r\n> An alternative could also be to provide additional metadata that consumers could use to determine the source and pad as necessary outside of pyarrow.\u00a0\u00a0\r\n\r\nYes, since Arrow can perceive the writer's timezone or the timezone stored in pyarrow.timestamp type when Arrow saves a table as a parquet file.\r\n\r\n\u00a0\r\n\r\nBut for now, PyArrow seems cannot restore the timezone from the metadata when saving a parquet file with use_deprecated_int96_timestamps=True(pyarrow.parquet.write_table).\r\n```python\n\r\nfrom datetime import datetime\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as parquet\r\n\r\ndate = datetime(2022, 1, 1)\r\ntimestamp = int(date.timestamp())\r\n\r\npa_array = pa.array([timestamp])\r\npa_fields = [pa.field(\"t\", pa.timestamp('s', tz='Asia/Shanghai'))]\r\npa_table = pa.Table.from_arrays([pa_array], schema=pa.schema(pa_fields))\r\nprint(pa_table)\r\n# pyarrow.Table\r\n# t: timestamp[ns, tz=Asia/Shanghai]\r\n# ----\r\n# t: [[1970-01-01 00:00:01.640966400]]\r\nprint(pa_table.to_pandas())\r\n#                           t\r\n# 0 2022-01-01 00:00:00+08:00\r\n\r\n\r\n# A: write pyarrow.Tableto parquet (INT64 & Timestamp logical type)\r\nparquet.write_table(pa_table, \"test_int64_timestamp.parquet\")\r\nprint(parquet.read_table(\"test_int64_timestamp.parquet\"))\r\n# pyarrow.Table\r\n# t: timestamp[ms, tz=Asia/Shanghai]\r\n# ----\r\n# t: [[2021-12-31 16:00:00.000]]\r\n\r\n# as same as pa_table, work fine here\r\n\r\n# ---------------------------------------------------------------------------------------\r\n\r\n# B: write pyarrow.Table to parquet (INT96) \r\nparquet.write_table(pa_table, \"test_int96.parquet\", use_deprecated_int96_timestamps=True)\r\nprint(parquet.read_table(\"test_int96.parquet\"))\r\n\r\n# loss the time zone here\r\n\r\n# pyarrow.Table\r\n# t: timestamp[ns]\r\n# ----\r\n# t: [[2021-12-31 16:00:00.000000000]]\r\n\r\n# also affect in pandas.DataFrame\r\nprint(parquet.read_table(\"test_int96.parquet\").to_pandas())\r\n#                     t\r\n# 0 2021-12-31 16:00:00\r\n```\r\n\u00a0\r\n\r\nMaybe Arrow should add the timezone to the metadata when writing timestamp type data into INT96?"
        }
    ]
}