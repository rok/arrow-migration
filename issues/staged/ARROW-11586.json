{
    "issue": {
        "title": "[Rust] [Datafusion] Invalid SQL sometimes panics",
        "body": "***Note**: This issue was originally created as [ARROW-11586](https://issues.apache.org/jira/browse/ARROW-11586). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nExecuting the invalid SQL \"select 1 order by x\" will panic rather returning an Err:\r\n\r\n\u00a0```\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: Plan(\"Invalid identifier \\'x\\' for schema Int64(1)\")', /Users/marc/.cargo/git/checkouts/arrow-3a9cfebb6b7b2bdc/643f420/rust/datafusion/src/sql/planner.rs:649:76\r\nstack backtrace:\r\n   0: _rust_begin_unwind\r\n   1: core::panicking::panic_fmt\r\n   2: core::option::expect_none_failed\r\n   3: core::result::Result<T,E>::unwrap\r\n   4: datafusion::sql::planner::SqlToRel<S>::order_by::`closure`\r\n   5: core::iter::adapters::map_try_fold::`closure`\r\n   6: core::iter::traits::iterator::Iterator::try_fold\r\n   7: <core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::try_fold\r\n   8: <core::iter::adapters::ResultShunt<I,E> as core::iter::traits::iterator::Iterator>::try_fold\r\n   9: core::iter::traits::iterator::Iterator::find\r\n  10: <core::iter::adapters::ResultShunt<I,E> as core::iter::traits::iterator::Iterator>::next\r\n  11: <alloc::vec::Vec<T> as alloc::vec::SpecFromIterNested<T,I>>::from_iter\r\n  12: <alloc::vec::Vec<T> as alloc::vec::SpecFromIter<T,I>>::from_iter\r\n  13: <alloc::vec::Vec<T> as core::iter::traits::collect::FromIterator<T>>::from_iter\r\n  14: core::iter::traits::iterator::Iterator::collect\r\n  15: <core::result::Result<V,E> as core::iter::traits::collect::FromIterator<core::result::Result<A,E>>>::from_iter::`closure`\r\n  16: core::iter::adapters::process_results\r\n  17: <core::result::Result<V,E> as core::iter::traits::collect::FromIterator<core::result::Result<A,E>>>::from_iter\r\n  18: core::iter::traits::iterator::Iterator::collect\r\n  19: datafusion::sql::planner::SqlToRel<S>::order_by\r\n  20: datafusion::sql::planner::SqlToRel<S>::query_to_plan\r\n  21: datafusion::sql::planner::SqlToRel<S>::sql_statement_to_plan\r\n  22: datafusion::sql::planner::SqlToRel<S>::statement_to_plan\r\n  23: datafusion::execution::context::ExecutionContext::create_logical_plan\r\n```\r\n\r\nThis is happening because of an `unwrap` at https://github.com/apache/arrow/blob/6cfbd22b457d873365fa60df31905857856608ee/rust/datafusion/src/sql/planner.rs#L652. \r\n\r\nPerhaps the error should be returned as the Result rather than panicking, so the error can be handled? There are a number of other places in the planner where `unwrap()` is used, so they may warrant similar treatment.\r\n\u00a0",
        "created_at": "2021-02-10T18:45:48.000Z",
        "updated_at": "2021-03-11T16:21:01.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-02-12T22:29:52.000Z"
    },
    "comments": [
        {
            "created_at": "2021-02-12T14:31:43.454Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11586?focusedCommentId=17283728) by Marc Prud'hommeaux (mprudhom):*\nUnless there is some specific reason to panic there, replacing the `.unwrap()` with `?` fixes the issue: https://github.com/apache/arrow/pull/9479/files. I wonder if the other `unwrap()` instances in that module could similarly be turned into Result?"
        },
        {
            "created_at": "2021-02-12T22:29:52.747Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11586?focusedCommentId=17284022) by Andrew Lamb (alamb):*\nIssue resolved by pull request 9479\n<https://github.com/apache/arrow/pull/9479>"
        }
    ]
}