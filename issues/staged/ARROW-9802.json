{
    "issue": {
        "title": "[FlightRPC][Java] CallStatus.metadata should get copied into the gRPC StatusRuntimeException",
        "body": "***Note**: This issue was originally created as [ARROW-9802](https://issues.apache.org/jira/browse/ARROW-9802). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nReported on the mailing list.\r\n```\n\r\nI had been doing it that way, but I found that If I was sending something\r\nalong the lines of:\r\n\r\nErrorFlightMetadata errorFlightMetadata = new ErrorFlightMetadata();\r\nerrorFlightMetadata.insert(\"my_custom_key\", \"hello\");\r\nlistener.error(CallStatus.INTERNAL\r\n    .withDescription(\"Testing description\")\r\n    .withCause(new RuntimeException(\"My cause\"))\r\n    .withMetadata(errorFlightMetadata)\r\n    .toRuntimeException());\r\n\r\n\r\nI would only receive the description back by the time it was throwing a\r\nPython error:\r\n\r\nFlightInternalError: gRPC returned internal error, with message:\r\nTesting description. Client context: IOError: Server never sent a data\r\nmessage. Detail: Internal. gRPC client debug context:\r\n{\"created\":\"@1597858462.086707300\",\"description\":\"Error received from\r\npeer ipv6:[::1]:12233\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1056,\"grpc_message\":\"Testing\r\ndescription\",\"grpc_status\":13}\r\n\r\n(catching the exception and checking FlightInternalError.extra_info returns\r\nnothing as well)\r\n\r\nHowever if I manually create a grpc status exception like so:\r\n\r\nprivate static Metadata.Key<byte[]> arrowStatusDetail =\r\n    Metadata.Key.of(\"x-arrow-status-detail-bin\",\r\nMetadata.BINARY_BYTE_MARSHALLER);\r\nprivate static Metadata.Key<byte[]> grpcStatusDetail =\r\n    Metadata.Key.of(\"grpc-status-details-bin\", Metadata.BINARY_BYTE_MARSHALLER);\r\nprivate static Metadata.Key<String> statusCode =\r\n    Metadata.Key.of(\"x-arrow-status\", Metadata.ASCII_STRING_MARSHALLER);\r\nprivate static Metadata.Key<byte[]> message =\r\n    Metadata.Key.of(\"x-arrow-status-message-bin\",\r\nMetadata.BINARY_BYTE_MARSHALLER);\r\n\r\nMetadata metadata = new Metadata();\r\nmetadata.put(arrowStatusDetail, \"my_internal_details\".getBytes());\r\nmetadata.put(grpcStatusDetail, \"this_is_in_extra_info\".getBytes());\r\nmetadata.put(statusCode, \"1\");\r\nmetadata.put(message, \"my_internal_message\".getBytes());\r\nreturn new StatusRuntimeException(Status.INTERNAL, metadata);\r\nStatusUtils.toGrpcStatus doesn't copy the metadata from the CallStatus into the gRPC status it constructs. \r\nThen I receive this back on the Python side:\r\n\r\nFlightInternalError: my_internal_message. Detail: my_internal_details.\r\nClient context: IOError: Server never sent a data message. Detail:\r\nInternal. gRPC client debug context:\r\n{\"created\":\"@1597859023.244971700\",\"description\":\"Error received from\r\npeer ipv6:[::1]:12233\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1056,\"grpc_message\":\"\",\"grpc_status\":13}\r\n\r\nand FlightInternalError.extra_info contains the bytes for\r\n\"this_is_in_extra_info\"  - I can pretty much put whatever I need in there\r\nto add richer metadata and utilize it on the client.\r\n\r\nIt feels a bit awkward / maybe incorrect to dive into the C++ code to\r\nhijack those metadata keys just to transport extra metadata from Java ->\r\nC++. If the above approach with CallStatus is incorrect for bringing extra\r\ndata to the client then let me know.\r\n\r\n```\r\nStatusUtils.toGrpcStatus doesn't copy the metadata from the CallStatus into the gRPC status it constructs; I think that's the issue.",
        "created_at": "2020-08-19T18:07:39.000Z",
        "updated_at": "2020-08-19T18:07:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: FlightRPC",
            "Component: Java",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": []
}