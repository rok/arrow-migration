{
    "issue": {
        "title": "[Rust] support nested types",
        "body": "***Note**: This issue was originally created as [ARROW-2482](https://issues.apache.org/jira/browse/ARROW-2482). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe Rust Array type doesn't seem to support nested types so far. We should implement it.",
        "created_at": "2018-04-20T16:25:14.000Z",
        "updated_at": "2018-07-27T15:52:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-05-01T10:08:47.000Z"
    },
    "comments": [
        {
            "created_at": "2018-04-20T18:33:42.519Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2482?focusedCommentId=16446170) by Andy Grove (andygrove):*\nNested types are supported by ArrayData::<font color=\"#9876aa\">Struct</font>(Vec<Rc<Array>>). They are just arrays of arrays.\r\n\r\nThere is a test in arrays.rs\r\n```java\n\r\n#[test]\r\nfn test_struct() {\r\n    let _schema = DataType::Struct(vec![\r\n        Field::new(\"a\", DataType::Int32, false),\r\n        Field::new(\"b\", DataType::Float32, false),\r\n    ]);\r\n\r\n    let a = Rc::new(Array::from(vec![1, 2, 3, 4, 5]));\r\n    let b = Rc::new(Array::from(vec![1.1, 2.2, 3.3, 4.4, 5.5]));\r\n    let _ = Rc::new(Array::from(vec![a, b]));\r\n}\r\n```\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2018-04-20T19:07:04.145Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2482?focusedCommentId=16446218) by Chao Sun (csun):*\nHmm. What if you have a nested array? is this supported? the nested array needs to be in a contiguous byte array, right?\r\nSee the C++ impl: https://github.com/apache/arrow/blob/master/cpp/src/arrow/array.h#L403. I couldn't find a 1-1 mapping of this in the Rust impl."
        },
        {
            "created_at": "2018-04-28T15:07:59.718Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2482?focusedCommentId=16457646) by Andy Grove (andygrove):*\nHi Chao. That's List that you linked to, not struct. I have just asked on them mailing list to confirm, but I don't think there is a requirement that the child arrays in a struct need to be aligned with each other."
        },
        {
            "created_at": "2018-04-28T16:12:46.996Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2482?focusedCommentId=16457682) by Andy Grove (andygrove):*\nPR to make spec more specific about this: https://github.com/apache/arrow/pull/1959"
        },
        {
            "created_at": "2018-05-01T10:08:47.609Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2482?focusedCommentId=16459579) by Uwe Korn (uwe):*\nIssue resolved by pull request 1959\n<https://github.com/apache/arrow/pull/1959>"
        }
    ]
}