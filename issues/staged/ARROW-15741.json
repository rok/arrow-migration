{
    "issue": {
        "title": "[Format] Clarify thread safety of C stream interface",
        "body": "***Note**: This issue was originally created as [ARROW-15741](https://issues.apache.org/jira/browse/ARROW-15741). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe C stream interface has the method `get_next` that mutates the producer side.\r\n\r\nWe do not mention whether there is some kind of thread safety associated to such interface. For example, can the interface be shared between two threads and both call get_next at the same time?\r\n\r\n",
        "created_at": "2022-02-21T07:17:48.000Z",
        "updated_at": "2022-03-16T22:12:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-03-16T16:49:40.000Z"
    },
    "comments": [
        {
            "created_at": "2022-02-21T07:29:24.874Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15741?focusedCommentId=17495357) by Jorge Leit\u00e3o (jorgecarleitao):*\n`[~apitrou]`, thoughts?"
        },
        {
            "created_at": "2022-02-21T13:12:38.164Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15741?focusedCommentId=17495518) by Antoine Pitrou (apitrou):*\nI don't think any thread safety can be assumed. If the consumer wants to call get_next from several threads, it should probably ensure all accesses are serialized."
        },
        {
            "created_at": "2022-02-21T15:59:30.769Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15741?focusedCommentId=17495602) by Antoine Pitrou (apitrou):*\n`[~lidavidm]` \u00a0 What do you think?"
        },
        {
            "created_at": "2022-02-22T01:47:46.499Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15741?focusedCommentId=17495818) by David Li (lidavidm):*\nI agree with Antoine, we shouldn't assume any thread safety. For instance, what would it do if multiple consumers called it concurrently? Would they each just get a random batch? And even if that's useful semantics, presumably some synchronization would be done internally - at which point, why not just do the synchronization externally?"
        },
        {
            "created_at": "2022-02-22T20:30:30.230Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15741?focusedCommentId=17496304) by Weston Pace (westonpace):*\nI agree that we should not allow concurrent calls.  I don't think we lose any functionality for this.\r\n\r\nA source may be able to be truly accessed in parallel and it may not.  For an example of the negative case, if the stream is backed by a TCP socket then calling get_next multiple times is probably useless (we will just block the threads waiting on the socket anyways).\r\n\r\nOn the other hand, if the stream is a dataset scan on an S3 data source then the source can (and should) be accessing multiple batches of data at once.  Instead of allowing multiple calls to get_next the producer should just be configured (external to the stream API) to allow some amount of readahead and the producer should buffer internally.\r\n\r\nNote that my opinion is probably heavily influenced by the fact that this is how we handle this problem today."
        },
        {
            "created_at": "2022-03-16T16:49:40.060Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15741?focusedCommentId=17507725) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 12647\n<https://github.com/apache/arrow/pull/12647>"
        }
    ]
}