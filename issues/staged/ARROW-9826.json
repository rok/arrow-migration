{
    "issue": {
        "title": "[Rust] add set function to PrimitiveArray",
        "body": "***Note**: This issue was originally created as [ARROW-9826](https://issues.apache.org/jira/browse/ARROW-9826). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor in-place value replacement in Array, a `set()` function (maybe unsafe?) would be required.",
        "created_at": "2020-08-22T06:33:48.000Z",
        "updated_at": "2021-04-26T12:33:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T12:33:35.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-25T03:59:35.414Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9826?focusedCommentId=17183712) by Neville Dipale (nevi_me):*\nOnce arrays are built, they're meant to be immutable. Wouldn't this better belong in ArrayBuilder?"
        },
        {
            "created_at": "2020-08-26T13:05:41.441Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9826?focusedCommentId=17185175) by Francesco Gadaleta (frag):*\nYes, it makes sense to me.\r\n\r\nGenerally speaking if arrays are immutable, there are some operations that should directly modify elements at specific index.\r\n\r\nHow are you going about that?\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-09-07T02:50:04.369Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9826?focusedCommentId=17191414) by Paddy Horan (paddyhoran):*\nEssentially, we are not addressing that.\u00a0 I don't believe any of the other implementations support this.\u00a0 It's kind of against the general principles of Arrow.\r\n\r\n\u00a0\r\n\r\nHowever, there is nothing stopping you adding this for yourself in your application.\u00a0 You have access to underlying buffers.\u00a0 We are trailing behind the C++ impl in terms of what we support in Rust so we will likely focus on \"catching up\" for now."
        },
        {
            "created_at": "2020-09-08T04:16:41.818Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9826?focusedCommentId=17191943) by Jorge Leit\u00e3o (jorgecarleitao):*\n> Generally speaking if arrays are immutable, there are some operations that should directly modify elements at specific index.\r\n\r\nif arrays as immutable, there should be\u00a0_no_ operations that modify its elements, right?\r\n\r\nI also understood that arrays are immutable. Some general reasons is that this allows to pass slices of data by reference, both within a thread and across threads, without the need to worry about data races or threads waiting around. It is a whole computational model.\r\n\r\nIn rust, it allow us to use `Arc` to safely share arrays across threads, as otherwise we would need a Mutex or other mechanism.\r\n\r\nTo \"modify\" elements, we create a new array with the modified elements (see e.g. `src/compute`).\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-09-08T07:13:00.133Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9826?focusedCommentId=17191997) by Francesco Gadaleta (frag):*\nBut that can be extremely inefficient. If one needs to change a dozen values in a column of millions of elements, that can become prohibitive.\nIn-place value changes are quite a common operation in data science.\n\n"
        },
        {
            "created_at": "2021-04-26T12:33:33.752Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9826?focusedCommentId=17332120) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/97"
        }
    ]
}