{
    "issue": {
        "title": "[C++] Investigate auto-cancelling async pipeline utilities when all consumer-side references are lost",
        "body": "***Note**: This issue was originally created as [ARROW-11875](https://issues.apache.org/jira/browse/ARROW-11875). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor example, if there is a large readahead queue and the consumer side loses its references the producer side might still try and fill up the queue.",
        "created_at": "2021-03-05T18:10:07.000Z",
        "updated_at": "2021-04-07T22:20:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-03-05T18:14:31.359Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11875?focusedCommentId=17296252) by Antoine Pitrou (apitrou):*\nThat may be nice indeed. Also there could be an option to disable this behaviour if we need it at some point."
        },
        {
            "created_at": "2021-04-07T22:20:51.821Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11875?focusedCommentId=17316755) by Weston Pace (westonpace):*\nARROW-12220 enhances the background reader so it at least stops the background thread.\u00a0 However, it might still be blocked on a call to the I/O source iterator.\u00a0 It could trigger a stop token to cancel that call in `Cleanup`'s destructor."
        }
    ]
}