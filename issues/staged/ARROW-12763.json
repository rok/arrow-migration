{
    "issue": {
        "title": "[R] Optimize dplyr queries that use head/tail after arrange",
        "body": "***Note**: This issue was originally created as [ARROW-12763](https://issues.apache.org/jira/browse/ARROW-12763). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nUse the Arrow C++ function `partition_nth_indices` to optimize dplyr queries like this:\r\n```r\n\r\niris %>%\r\n  Table$create() %>% \r\n  arrange(desc(Sepal.Length)) %>%\r\n  head(10) %>%\r\n  collect()\r\n```\r\nThis query sorts the full table even though it doesn't need to. It could use `partition_nth_indices` to find the rows containing the top 10 values of `Sepal.Length` and only collect and sort those 10 rows.\r\n\r\nTest to see if this improves performance in practice on larger data.",
        "created_at": "2021-05-12T20:32:39.000Z",
        "updated_at": "2022-04-20T21:28:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-10-15T19:45:28.000Z"
    },
    "comments": [
        {
            "created_at": "2021-09-28T18:26:53.533Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12763?focusedCommentId=17421598) by Neal Richardson (npr):*\nSee discussion on ARROW-13767. I think this means we should use the top_k node when that is added (ARROW-13973)"
        },
        {
            "created_at": "2021-10-15T19:45:28.699Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12763?focusedCommentId=17429470) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 11405\n<https://github.com/apache/arrow/pull/11405>"
        }
    ]
}