{
    "issue": {
        "title": "[R] Support tidyselect where() selection helper in dplyr verbs",
        "body": "***Note**: This issue was originally created as [ARROW-12778](https://issues.apache.org/jira/browse/ARROW-12778). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSince we can now determine the data type of an unevaluated array expression (ARROW-12291) I think we should be able to support the `where()` selection helper.\r\n\r\nThis is already done for the `relocate()` verb (in ARROW-12781 ) but not for any other verbs.\u00a0\r\n\r\nSteps required to do this:\r\n1. ARROW-12781\u00a0\n1. ARROW-12105\n1. Remove the `check_select_helpers()` function definition and remove all the calls to it\n1. Modify any remaining the `expect_error()` tests that test\u00a0`where()` and check for the error message `\"Unsupported selection helper\"`",
        "created_at": "2021-05-13T17:28:13.000Z",
        "updated_at": "2022-10-14T14:25:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-10-14T14:25:28.000Z"
    },
    "comments": [
        {
            "created_at": "2022-09-13T11:59:11.197Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12778?focusedCommentId=17603536) by Dewey Dunnington (paleolimbot):*\nI think the missing piece is something like `simulate_data_frame()` (which is what dbplyr and the substrait R package use to support `where()`:\r\n\r\n```R\n\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\n\r\nsimulate_data_frame <- function(schema) {\r\n  arrays <- lapply(schema$fields, function(field) concat_arrays(type = field$type))\r\n  vectors <- lapply(\r\n    arrays,\r\n    function(array) tryCatch(\r\n      as.vector(array), \r\n      error = function(...) vctrs::unspecified()\r\n    )\r\n  )\r\n  \r\n  names(vectors) <- names(schema)\r\n  tibble::new_tibble(vectors, nrow = 0)\r\n}\r\n\r\nsimulate_data_frame(schema(col1 = int32(), col2 = string()))\r\n#> # A tibble: 0 \u00d7 2\r\n#> # \u2026 with 2 variables: col1 <int>, col2 <chr>\r\n```\r\n\r\n\r\nIn substrait R, for example, `[~thisisnic]` implemented `where()` support with only a few lines! https://github.com/voltrondata/substrait-r/blob/ed6f4057b90c91275bcce5a125b0836e60ab4e8d/R/pkg-dplyr.R#L242"
        },
        {
            "created_at": "2022-09-30T04:14:21.387Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12778?focusedCommentId=17611352) by Kirill M\u00fcller (krlmlr):*\nI wonder if we could also offer native type checks, such as `is_int32()` or `is_decimal()`, to do the selection the other way around."
        },
        {
            "created_at": "2022-10-11T12:10:38.829Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12778?focusedCommentId=17615737) by Nicola Crane (thisisnic):*\nI've opened ARROW-17896 re native type checking"
        },
        {
            "created_at": "2022-10-14T13:03:03.293Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12778?focusedCommentId=17617718) by Neal Richardson (npr):*\nIs this issue resolved by ARROW-12105, or is there more to do?"
        },
        {
            "created_at": "2022-10-14T14:25:22.467Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12778?focusedCommentId=17617764) by Nicola Crane (thisisnic):*\nNope, this is done now, will close! :D"
        }
    ]
}