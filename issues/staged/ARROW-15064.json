{
    "issue": {
        "title": "[C++] Vectorize CheckStringHasNoStructuralChars in CSV writer",
        "body": "***Note**: This issue was originally created as [ARROW-15064](https://issues.apache.org/jira/browse/ARROW-15064). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs a follow up to ARROW-14095, we could try to speed up an internal function in the CSV writer that currently scans all unquoted values. See <https://github.com/apache/arrow/pull/11849#discussion_r764278957>",
        "created_at": "2021-12-10T17:55:54.000Z",
        "updated_at": "2022-02-16T13:46:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-02-16T13:46:36.000Z"
    },
    "comments": [
        {
            "created_at": "2021-12-10T17:56:12.918Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15064?focusedCommentId=17457300) by David Li (lidavidm):*\nWe should complete ARROW-14993 first to evaluate the impact."
        },
        {
            "created_at": "2021-12-10T18:14:37.698Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15064?focusedCommentId=17457310) by Antoine Pitrou (apitrou):*\nSee the work recently done on the CSV parser:\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/csv/parser.cc#L68-L229"
        },
        {
            "created_at": "2022-02-11T10:32:23.748Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15064?focusedCommentId=17490824) by Yibo Cai (yibocai):*\nSee about 10% performance improvement using sse4 `_mm_cmpistrc` instruction.\r\nhttps://gist.github.com/cyb70289/fd34cbcd191d1ffaf7a1f28cae316f0b\r\n\r\nI have one question. Current code extracts and validates strings in a StringArray one by one. Guess we may get better performance if validating the whole underlying string buffer directly.\r\nPer my understanding, strings will be continuously stored in the StringArray buffer. Is it guaranteed?\r\n\r\ncc `[~apitrou]`, `[~lidavidm]`"
        },
        {
            "created_at": "2022-02-11T13:44:22.009Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15064?focusedCommentId=17490929) by David Li (lidavidm):*\nStringArrays are contiguous, but the null bitmap needs to be accounted for. (I suppose we could do a 'fast' check of the entire buffer, especially since null slots shouldn't have values in them, actually - and if there's an error, go back and scan the individual strings.)"
        },
        {
            "created_at": "2022-02-14T15:12:53.942Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15064?focusedCommentId=17492052) by Antoine Pitrou (apitrou):*\nIndeed, the common case will be the no-error case, so it's reasonable to first check the entire buffer.\r\n\r\nI'll be curious about the overall speedup."
        },
        {
            "created_at": "2022-02-15T06:17:36.001Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15064?focusedCommentId=17492383) by Yibo Cai (yibocai):*\nI included the simd optimization in benchmark PR (https://github.com/apache/arrow/pull/12399).\r\nBig improvement is observed.\r\n\r\n**xeon gold 5218, clang-12**\r\n```bash\n\r\n                   benchmark        baseline       contender  change\r\n WriteCsvStringRejectQuote/1 432.081 MiB/sec   1.135 GiB/sec   168.883 {'null_percent': 1.0}\r\n WriteCsvStringRejectQuote/0 526.387 MiB/sec   1.171 GiB/sec   127.893 {'null_percent': 0.0}\r\nWriteCsvStringRejectQuote/10 467.402 MiB/sec 930.257 MiB/sec    99.027 {'null_percent': 10.0}\r\nWriteCsvStringRejectQuote/50 284.164 MiB/sec 390.586 MiB/sec    37.451 {'null_percent': 50.0}\r\n```\r\n\r\n**neoverse n1, clang-12**\r\n```bash\n\r\n                   benchmark        baseline        contender  change\r\n WriteCsvStringRejectQuote/0 437.518 MiB/sec 1002.930 MiB/sec   129.232 {'null_percent': 0.0}\r\n WriteCsvStringRejectQuote/1 490.913 MiB/sec  951.709 MiB/sec    93.865 {'null_percent': 1.0}\r\nWriteCsvStringRejectQuote/10 452.676 MiB/sec  821.253 MiB/sec    81.422 {'null_percent': 10.0}\r\nWriteCsvStringRejectQuote/50 290.193 MiB/sec  404.060 MiB/sec    39.238 {'null_percent': 50.0}\r\n```\r\n"
        },
        {
            "created_at": "2022-02-15T09:29:59.461Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15064?focusedCommentId=17492475) by Antoine Pitrou (apitrou):*\nBenchmark result on AMD Zen 2:\r\n```Java\n\r\n                   benchmark        baseline       contender  change %                                                                                                                                                                                         counters\r\n WriteCsvStringRejectQuote/1   1.037 GiB/sec   2.122 GiB/sec   104.631   {'family_index': 3, 'per_family_instance_index': 1, 'run_name': 'WriteCsvStringRejectQuote/1', 'repetitions': 3, 'repetition_index': 2, 'threads': 1, 'iterations': 1984, 'null_percent': 1.0}\r\n WriteCsvStringRejectQuote/0   1.067 GiB/sec   2.053 GiB/sec    92.333   {'family_index': 3, 'per_family_instance_index': 0, 'run_name': 'WriteCsvStringRejectQuote/0', 'repetitions': 3, 'repetition_index': 1, 'threads': 1, 'iterations': 1973, 'null_percent': 0.0}\r\nWriteCsvStringRejectQuote/10 945.249 MiB/sec   1.651 GiB/sec    78.814 {'family_index': 3, 'per_family_instance_index': 2, 'run_name': 'WriteCsvStringRejectQuote/10', 'repetitions': 3, 'repetition_index': 1, 'threads': 1, 'iterations': 1917, 'null_percent': 10.0}\r\nWriteCsvStringRejectQuote/50 511.968 MiB/sec 638.657 MiB/sec    24.746 {'family_index': 3, 'per_family_instance_index': 3, 'run_name': 'WriteCsvStringRejectQuote/50', 'repetitions': 3, 'repetition_index': 0, 'threads': 1, 'iterations': 1759, 'null_percent': 50.0}\r\n  WriteCsvStringWithQuote/50 439.945 MiB/sec 467.325 MiB/sec     6.223   {'family_index': 2, 'per_family_instance_index': 3, 'run_name': 'WriteCsvStringWithQuote/50', 'repetitions': 3, 'repetition_index': 2, 'threads': 1, 'iterations': 1289, 'null_percent': 50.0}\r\n  WriteCsvStringWithQuote/10 656.004 MiB/sec 691.477 MiB/sec     5.407   {'family_index': 2, 'per_family_instance_index': 2, 'run_name': 'WriteCsvStringWithQuote/10', 'repetitions': 3, 'repetition_index': 0, 'threads': 1, 'iterations': 1078, 'null_percent': 10.0}\r\n   WriteCsvStringWithQuote/1 732.607 MiB/sec 768.625 MiB/sec     4.916     {'family_index': 2, 'per_family_instance_index': 1, 'run_name': 'WriteCsvStringWithQuote/1', 'repetitions': 3, 'repetition_index': 2, 'threads': 1, 'iterations': 1120, 'null_percent': 1.0}\r\n    WriteCsvStringNoQuote/10 916.419 MiB/sec 947.749 MiB/sec     3.419     {'family_index': 1, 'per_family_instance_index': 2, 'run_name': 'WriteCsvStringNoQuote/10', 'repetitions': 3, 'repetition_index': 2, 'threads': 1, 'iterations': 1678, 'null_percent': 10.0}\r\n          WriteCsvNumeric/50 156.539 MiB/sec 160.526 MiB/sec     2.547           {'family_index': 0, 'per_family_instance_index': 3, 'run_name': 'WriteCsvNumeric/50', 'repetitions': 3, 'repetition_index': 2, 'threads': 1, 'iterations': 1098, 'null_percent': 50.0}\r\nWriteCsvNumericCheckQuote/10 289.526 MiB/sec 295.533 MiB/sec     2.075 {'family_index': 4, 'per_family_instance_index': 2, 'run_name': 'WriteCsvNumericCheckQuote/10', 'repetitions': 3, 'repetition_index': 2, 'threads': 1, 'iterations': 1017, 'null_percent': 10.0}\r\n           WriteCsvNumeric/0 349.901 MiB/sec 356.905 MiB/sec     2.002             {'family_index': 0, 'per_family_instance_index': 0, 'run_name': 'WriteCsvNumeric/0', 'repetitions': 3, 'repetition_index': 2, 'threads': 1, 'iterations': 1387, 'null_percent': 0.0}\r\n   WriteCsvStringWithQuote/0 789.500 MiB/sec 804.251 MiB/sec     1.868     {'family_index': 2, 'per_family_instance_index': 0, 'run_name': 'WriteCsvStringWithQuote/0', 'repetitions': 3, 'repetition_index': 2, 'threads': 1, 'iterations': 1217, 'null_percent': 0.0}\r\n           WriteCsvNumeric/1 347.620 MiB/sec 353.424 MiB/sec     1.669             {'family_index': 0, 'per_family_instance_index': 1, 'run_name': 'WriteCsvNumeric/1', 'repetitions': 3, 'repetition_index': 1, 'threads': 1, 'iterations': 1363, 'null_percent': 1.0}\r\n    WriteCsvStringNoQuote/50 515.147 MiB/sec 518.962 MiB/sec     0.741     {'family_index': 1, 'per_family_instance_index': 3, 'run_name': 'WriteCsvStringNoQuote/50', 'repetitions': 3, 'repetition_index': 1, 'threads': 1, 'iterations': 1637, 'null_percent': 50.0}\r\n     WriteCsvStringNoQuote/1   1.026 GiB/sec   1.034 GiB/sec     0.707       {'family_index': 1, 'per_family_instance_index': 1, 'run_name': 'WriteCsvStringNoQuote/1', 'repetitions': 3, 'repetition_index': 1, 'threads': 1, 'iterations': 1774, 'null_percent': 1.0}\r\n WriteCsvNumericCheckQuote/1 321.161 MiB/sec 322.807 MiB/sec     0.513   {'family_index': 4, 'per_family_instance_index': 1, 'run_name': 'WriteCsvNumericCheckQuote/1', 'repetitions': 3, 'repetition_index': 0, 'threads': 1, 'iterations': 1040, 'null_percent': 1.0}\r\n     WriteCsvStringNoQuote/0   1.094 GiB/sec   1.099 GiB/sec     0.455       {'family_index': 1, 'per_family_instance_index': 0, 'run_name': 'WriteCsvStringNoQuote/0', 'repetitions': 3, 'repetition_index': 0, 'threads': 1, 'iterations': 1877, 'null_percent': 0.0}\r\n WriteCsvNumericCheckQuote/0 333.251 MiB/sec 333.635 MiB/sec     0.115   {'family_index': 4, 'per_family_instance_index': 0, 'run_name': 'WriteCsvNumericCheckQuote/0', 'repetitions': 3, 'repetition_index': 0, 'threads': 1, 'iterations': 1058, 'null_percent': 0.0}\r\nWriteCsvNumericCheckQuote/50 168.984 MiB/sec 168.963 MiB/sec    -0.012  {'family_index': 4, 'per_family_instance_index': 3, 'run_name': 'WriteCsvNumericCheckQuote/50', 'repetitions': 3, 'repetition_index': 0, 'threads': 1, 'iterations': 985, 'null_percent': 50.0}\r\n          WriteCsvNumeric/10 314.985 MiB/sec 314.424 MiB/sec    -0.178           {'family_index': 0, 'per_family_instance_index': 2, 'run_name': 'WriteCsvNumeric/10', 'repetitions': 3, 'repetition_index': 0, 'threads': 1, 'iterations': 1298, 'null_percent': 10.0}\r\n```"
        }
    ]
}