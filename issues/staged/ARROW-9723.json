{
    "issue": {
        "title": "[C++] Expected behaviour of \"mode\" kernel with NaNs ?",
        "body": "***Note**: This issue was originally created as [ARROW-9723](https://issues.apache.org/jira/browse/ARROW-9723). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nARROW-9638 added a \"mode\" kernel to arrow::compute. There was some remaining discussion on how NaNs should be handled.\r\n\r\nThe merged PR added the behaviour to \"skip\" NaNs (similarly as it skips nulls). So eg:\r\n\r\n```python\n\r\n[NaN, NaN, 1] -> mode:1, count:1\r\n[null, null, 1] -> mode:1, count:1\r\n[null, null, null] -> null\r\n[NaN, NaN, NaN] -> null  # should this be NaN instead?\r\n```\r\n\r\nBut, for example `scipy.stats` does not skip NaNs and would for the last line above return `mode:NaN, count:1` (the NaNs are not equal to each other, so each NaN is counted separately, giving a count of 1).  \r\nAlso, in other aggregations like `sum` we skip nulls but not NaNs (so `sum([NaN, NaN, 1])` would be NaN).\r\n\r\nOn the other hand, as `[~apitrou]` argued in the PR, for `sum` it's more straightforward and informative to propagate the NaN to the result (at least it indicates there are NaNs in the data), while for `mode` the count of 1 can also be surprising/misleading.\r\n\r\n\r\n",
        "created_at": "2020-08-13T12:44:43.000Z",
        "updated_at": "2021-08-02T18:34:32.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-08-27T11:11:43.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-13T12:51:31.265Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9723?focusedCommentId=17176981) by Antoine Pitrou (apitrou):*\nThe question is: which behaviour would be useful?\r\n\r\nIMHO, two possible behaviours are useful for [NaN, NaN, NaN]:\r\n- return `(mode: NaN, count: 3)`\n- return `null`\n  \n  Returning `(mode: NaN, count: 1)`, OTOH, sounds pointless regardless of the user's intentions. It's only pedantically correct (and even not quite so: if the definition of \"mode\" involves equality, then it's wrong)."
        },
        {
            "created_at": "2020-08-13T14:06:55.502Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9723?focusedCommentId=17177037) by Yibo Cai (yibocai):*\n+1 for `(mode: NaN, count: 3)`\r\nscipy's behaviour is counter-intuitive, <https://github.com/scipy/scipy/issues/9815>."
        },
        {
            "created_at": "2020-08-14T02:07:47.253Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9723?focusedCommentId=17177427) by Yibo Cai (yibocai):*\nWill add an option to select how to deal with NaN.\r\n- Ignore NaN\n  ```\n  \n  [NaN, NaN, 1] -> mode:1, count:1\n  [NaN, NaN, NaN] -> null\n  ```\n- Don't ignore NaN\n  ```\n  \n  [NaN, NaN, 1] -> mode:NaN, count:2\n  [NaN, NaN, NaN] -> mode:NaN, count:3\n  [NaN, 1] -> mode:1, count:1     // normal values take precedence over NaN\n  ```\n  \n"
        },
        {
            "created_at": "2020-08-14T02:28:01.766Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9723?focusedCommentId=17177432) by Yibo Cai (yibocai):*\nGiven there's ongoing work of adding a general aggregate option through selection vectors (ARROW-9054), maybe we don't need the mode specific option.\r\nIf NaN can be filtered, then we can ignore case1 in above comment, only handle the \"Don't ignore NaN\" case."
        },
        {
            "created_at": "2020-08-27T11:11:43.475Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9723?focusedCommentId=17185785) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 8061\n<https://github.com/apache/arrow/pull/8061>"
        },
        {
            "created_at": "2020-08-27T12:19:18.875Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9723?focusedCommentId=17185817) by Joris Van den Bossche (jorisvandenbossche):*\nThanks `[~yibocai]` !\r\n"
        }
    ]
}