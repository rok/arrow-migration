{
    "issue": {
        "title": "[Java] Support compact fixed-width vectors",
        "body": "***Note**: This issue was originally created as [ARROW-5821](https://issues.apache.org/jira/browse/ARROW-5821). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn shuffle stage of some applications, FixedWitdhVectors may have very little non-null data.\r\nIn this case, directly serialize vectors is not a good choice, generally we can compact the vector make it only holding non-null value and create a BitVector to trace the indices for non-null values so that it could be deserialized properly.",
        "created_at": "2019-07-02T08:36:28.000Z",
        "updated_at": "2019-09-03T08:26:12.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-09-03T08:26:12.000Z"
    },
    "comments": [
        {
            "created_at": "2019-07-02T23:00:34.162Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5821?focusedCommentId=16877350) by Jacques Nadeau (jnadeau):*\nIf I understand the ask correctly, it seems like you are proposing to change the format to have a new integer representation that doesn't support constant lookup. I'm not sure now is the right time to do something like this."
        },
        {
            "created_at": "2019-07-02T23:49:17.990Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5821?focusedCommentId=16877369) by Wes McKinney (wesm):*\nIt might be more fruitful to discuss this in the context of on-wire IPC compression generally. See ARROW-300"
        },
        {
            "created_at": "2019-07-03T01:46:43.884Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5821?focusedCommentId=16877410) by Ji Liu (tianchen92):*\nThanks a lot for your feedback. `[~jnadeau]` `[~wesmckinn]`\r\n\r\nMore exactly, I suggest to provide a utility class in arrow-algorithm module and not break the IPC format anymore. The role the utility plays is that for a given fixed width vector which has lot of null values (e.g. valueCount=1000, nullCount=990), it could make non-null value move ahead and make valueCount=10, create a BitVector to trace null value indices. Meanwhile, for a given compacted vector and BitVector, it could recovery the original data format(e.g. valueCount=1000, nullCount=990).\r\n\r\nIn some cases, before shuffle and after shuffle, use this kind of utility will greatly reduce the data size. Moreover, the control is in the hands of users and we do not need worry about IPC format since we won't change it anymore.\r\n\r\nThanks!"
        }
    ]
}