{
    "issue": {
        "title": "[Rust] [DataFusion] Add inner (hash) equijoin physical plan",
        "body": "***Note**: This issue was originally created as [ARROW-9555](https://issues.apache.org/jira/browse/ARROW-9555). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHere is an overview of how I think we should implement support for equijoins, at least for the initial implementation.\r\n \\* Read all batches from the left-side of the join into a single Vec<RecordBatch>\r\n \\* Create a map something like HashMap<Vec<ScalarValue>, Vec<(usize,usize)>> to map keys to batch/row indices\r\n \\* Iterate over this Vec<RecordBatch> and create an entry in a hash map, mapping the join keys to the index of the batch and row in the Vec<RecordBatch>\r\n \\* For each input partition on the right-side of the join, return an output partition that is an iterator/stream that:\r\n \\*\\* For each input row, evaluate the join keys\r\n \\*\\* Look up those join keys in the hash map\r\n \\*\\* If a match is found:\r\n \\*\\*\\* For each (batch, row) index create an output row which has the values from both the left and right row and emit it\r\n \\*\\* If no match is found:\r\n \\*\\*\\* Do not emit a row",
        "created_at": "2020-07-24T19:24:23.000Z",
        "updated_at": "2020-11-21T17:34:55.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2020-11-21T17:34:39.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-14T16:10:19.629Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9555?focusedCommentId=17232063) by Andy Grove (andygrove):*\n`[~jorgecarleitao]` fyi I have tried to spec out the implementation that I had in mind since I have not found the time to implement this myself."
        },
        {
            "created_at": "2020-11-15T15:19:32.205Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9555?focusedCommentId=17232314) by Jorge Leit\u00e3o (jorgecarleitao):*\nThanks `[~andygrove]`. I consider this node kind of important, so I will give it a go."
        },
        {
            "created_at": "2020-11-17T06:19:07.335Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9555?focusedCommentId=17233286) by Jorge Leit\u00e3o (jorgecarleitao):*\nI have a draft almost ready.\r\n\r\nThe implementation is blocked by #8689. Specifically, I need an API in arrow to create an array from multiple arrays (each array in the new recordBatch will be composed by multiple entries from different arrays).\r\n\r\nThis is related to the work I have been doing on generalizing the filtering operation (as we also need to build an array a single array), `take` (same issue), sort-merge (same, but create an array from two arrays). The join is the extreme case where we need to create an array from N+1 arrays (N batches from the left + 1 from the right).\r\n\r\nI will be working on top of the code in #8689 as that is paramount for me to accomplish this."
        },
        {
            "created_at": "2020-11-21T17:34:39.965Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9555?focusedCommentId=17236740) by Andy Grove (andygrove):*\nIssue resolved by pull request 8709\n<https://github.com/apache/arrow/pull/8709>"
        }
    ]
}