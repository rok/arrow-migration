{
    "issue": {
        "title": "[C++] Implement zero-copy Slice method on arrow::Buffer that retains reference to parent",
        "body": "***Note**: This issue was originally created as [ARROW-317](https://issues.apache.org/jira/browse/ARROW-317). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis will help prevent referenced memory from being garbage-collected while it is referenced by other buffers (for example, in an IPC setting, where we construct Arrow vectors/arrays without copying the input memory).\n\nClosely related to this: resizeable buffers that are referenced by other buffers should return error status when calling `Resize` (if possible). ",
        "created_at": "2016-10-04T03:19:06.000Z",
        "updated_at": "2017-02-13T16:34:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2016-10-18T01:18:47.000Z"
    },
    "comments": [
        {
            "created_at": "2016-10-12T04:21:30.170Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-317?focusedCommentId=15567513) by Leif Mortenson (leif):*\nHow does this relate to ARROW-33?"
        },
        {
            "created_at": "2016-10-12T14:43:13.278Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-317?focusedCommentId=15568916) by Wes McKinney (wesm):*\nThis is buffer-level slicing / refcounting \u2013 slicing an Array is more complicated because of the null bitmap. There, it's not enough to slice the bitmap buffer because you may fall in the middle of a byte. Array slicing will need to be implemented via an ArrayView object of sorts that has an offset into another array \u2013 another idea is that all arrays could have a value offset in memory, so if you did\n\n```\nstd::shared_ptr<Array> arr_slice = arr->Slice(5);\n```\n\nThen `arr_slice` would have an offset of 5 into arr's buffers. \n\nBuffer level slicing is much simpler since it's just bytes\n\n```Java\nclass BufferView : public Buffer {\n public:\n   ...\n private:\n   std::shared_ptr<Buffer> parent_;\n   int64_t offset_;\n};\n```\n\nOne option is to make `Buffer::data` virtual to address to deal with parent mutation issues (so that `BufferView::data` returns `parent_->data() + offset_`)"
        },
        {
            "created_at": "2016-10-13T20:32:14.759Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-317?focusedCommentId=15573092) by Wes McKinney (wesm):*\nI implemented this in pandas prototyping:\n\nhttps://github.com/pandas-dev/pandas2/pull/40/files#diff-3d95cc22572f59dbfc29d31c19c9bed4R41\n\nper https://github.com/pandas-dev/pandas2/issues/44 my working plan is to make pandas depend on libarrow so we can all this buffer wrangling / memory management in one place"
        },
        {
            "created_at": "2016-10-17T15:37:50.716Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-317?focusedCommentId=15582558) by Wes McKinney (wesm):*\nsee https://github.com/apache/arrow/pull/177"
        },
        {
            "created_at": "2016-10-18T01:18:47.995Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-317?focusedCommentId=15584054) by Wes McKinney (wesm):*\nIssue resolved by pull request 177\n<https://github.com/apache/arrow/pull/177>"
        }
    ]
}