{
    "issue": {
        "title": "[C++] Vector kernels should implement or reject null_handling = INTERSECTION",
        "body": "***Note**: This issue was originally created as [ARROW-16145](https://issues.apache.org/jira/browse/ARROW-16145). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs discovered in ARROW-13530, right now the framework will let you register a vector kernel with null_handling = INTERSECTION, but doesn't actually implement that (it'll preallocate but won't compute the result). We should either implement it, or decide it makes no sense and explicitly reject registering kernels with this null handling mode.",
        "created_at": "2022-04-07T17:56:58.000Z",
        "updated_at": "2022-04-11T20:47:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-04-11T20:46:46.662Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16145?focusedCommentId=17520805) by Eduardo Ponce (edponce):*\nBy definition vector functions can have different input and output sizes which, in general, make it difficult to perform a priori a logical intersection of the null bitmaps. All of the existing vector kernels seem to produce an output of a different size than its input. Given this is the common case, I think that the compute machinery should not resolve null handling for vector kernels automatically, but rather require kernels to resolve them explicitly and reject `null_handling = INTERSECTION`."
        }
    ]
}