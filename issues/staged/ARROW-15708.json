{
    "issue": {
        "title": "[R] [CI] skip snappy encoded parquets on clang sanitizer",
        "body": "***Note**: This issue was originally created as [ARROW-15708](https://issues.apache.org/jira/browse/ARROW-15708). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nShowing up in our nightlies with:\r\n\r\n```Java\n\r\n\r\n    #17 0x7f5004603315 in arrow::Future<std::__1::vector<std::__1::shared_ptr<arrow::ChunkedArray>, std::__1::allocator<std::__1::shared_ptr<arrow::ChunkedArray> > > > arrow::internal::OptionalParallelForAsync<parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::__1::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, arrow::internal::Executor*)::$_4&, std::__1::shared_ptr<parquet::arrow::ColumnReaderImpl>, std::__1::shared_ptr<arrow::ChunkedArray> >(bool, std::__1::vector<std::__1::shared_ptr<parquet::arrow::ColumnReaderImpl>, std::__1::allocator<std::__1::shared_ptr<parquet::arrow::ColumnReaderImpl> > >, parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::__1::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, arrow::internal::Executor*)::$_4&, arrow::internal::Executor*) /arrow/cpp/src/arrow/util/parallel.h:95:7\r\n    #18 0x7f50046026d9 in parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::__1::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, arrow::internal::Executor*) /arrow/cpp/src/parquet/arrow/reader.cc:1198:10\r\n    #19 0x7f5004601994 in parquet::arrow::RowGroupGenerator::ReadOneRowGroup(arrow::internal::Executor*, std::__1::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, int, std::__1::vector<int, std::__1::allocator<int> > const&) /arrow/cpp/src/parquet/arrow/reader.cc:1090:18\r\n    #20 0x7f5004658330 in parquet::arrow::RowGroupGenerator::operator()()::'lambda'()::operator()() const /arrow/cpp/src/parquet/arrow/reader.cc:1064:14\r\n    #21 0x7f500465806f in std::__1::enable_if<is_future<arrow::Future<std::__1::function<arrow::Future<std::__1::shared_ptr<arrow::RecordBatch> > ()> > >::value, void>::type arrow::detail::ContinueFuture::operator()<parquet::arrow::RowGroupGenerator::operator()()::'lambda'(), arrow::Future<std::__1::function<arrow::Future<std::__1::shared_ptr<arrow::RecordBatch> > ()> >, arrow::Future<std::__1::function<arrow::Future<std::__1::shared_ptr<arrow::RecordBatch> > ()> > >(arrow::Future<std::__1::function<arrow::Future<std::__1::shared_ptr<arrow::RecordBatch> > ()> >, parquet::arrow::RowGroupGenerator::operator()()::'lambda'()&&) const /arrow/cpp/src/arrow/util/future.h:177:9\r\n    #22 0x7f5004657c03 in void arrow::detail::ContinueFuture::IgnoringArgsIf<parquet::arrow::RowGroupGenerator::operator()()::'lambda'(), arrow::Future<std::__1::function<arrow::Future<std::__1::shared_ptr<arrow::RecordBatch> > ()> >, arrow::internal::Empty const&>(std::__1::integral_constant<bool, true>, arrow::Future<std::__1::function<arrow::Future<std::__1::shared_ptr<arrow::RecordBatch> > ()> >&&, parquet::arrow::RowGroupGenerator::operator()()::'lambda'()&&, arrow::internal::Empty const&) const /arrow/cpp/src/arrow/util/future.h:186:5\r\n    #23 0x7f500465797a in arrow::Future<arrow::internal::Empty>::ThenOnComplete<parquet::arrow::RowGroupGenerator::operator()()::'lambda'(), arrow::Future<arrow::internal::Empty>::PassthruOnFailure<parquet::arrow::RowGroupGenerator::operator()()::'lambda'()> >::operator()(arrow::Result<arrow::internal::Empty> const&) && /arrow/cpp/src/arrow/util/future.h:599:25\r\n    #24 0x7f5005c95bfe in arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) && /arrow/cpp/src/arrow/util/functional.h:140:17\r\n    #25 0x7f5005c948f5 in arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::__1::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool) /arrow/cpp/src/arrow/util/future.cc:298:7\r\n    #26 0x7f5005c94017 in arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState) /arrow/cpp/src/arrow/util/future.cc:327:7\r\n    #27 0x7f50042731fe in arrow::Future<arrow::internal::Empty>::DoMarkFinished(arrow::Result<arrow::internal::Empty>) /arrow/cpp/src/arrow/util/future.h:712:14\r\n    #28 0x7f5004272df8 in void arrow::Future<arrow::internal::Empty>::MarkFinished<arrow::internal::Empty, void>(arrow::Status) /arrow/cpp/src/arrow/util/future.h:463:12\r\n    #29 0x7f500465244b in arrow::Future<arrow::internal::Empty> arrow::internal::Executor::DoTransfer<arrow::internal::Empty, arrow::Future<arrow::internal::Empty>, arrow::Status>(arrow::Future<arrow::internal::Empty>, bool)::'lambda'(arrow::Status const&)::operator()(arrow::Status const&) /arrow/cpp/src/arrow/util/thread_pool.h:217:21\r\n    #30 0x7f500465244b in arrow::Future<arrow::internal::Empty>::WrapStatusyOnComplete::Callback<arrow::Future<arrow::internal::Empty> arrow::internal::Executor::DoTransfer<arrow::internal::Empty, arrow::Future<arrow::internal::Empty>, arrow::Status>(arrow::Future<arrow::internal::Empty>, bool)::'lambda'(arrow::Status const&)>::operator()(arrow::FutureImpl const&) && /arrow/cpp/src/arrow/util/future.h:509:9\r\n    #31 0x7f5005c95bfe in arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) && /arrow/cpp/src/arrow/util/functional.h:140:17\r\n    #32 0x7f5005d6f147 in arrow::internal::FnOnce<void ()>::operator()() && /arrow/cpp/src/arrow/util/functional.h:140:17\r\n    #33 0x7f5005d6dc65 in arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) /arrow/cpp/src/arrow/util/thread_pool.cc:178:11\r\n    #34 0x7f5005d6d67b in arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3::operator()() const /arrow/cpp/src/arrow/util/thread_pool.cc:349:7\r\n    #35 0x7f5005d6d67b in decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3&&) /usr/bin/../include/c++/v1/type_traits:3899:1\r\n    #36 0x7f5005d6cf9c in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3> >(void*) /usr/bin/../include/c++/v1/thread:291:5\r\n    #37 0x7f50182343f8 in start_thread (/lib64/libpthread.so.0+0x93f8)\r\n    #38 0x7f50180774c2 in clone (/lib64/libc.so.6+0x1014c2)\r\n```\r\n\r\nhttps://dev.azure.com/ursacomputing/crossbow/_build/results?buildId=19810&view=logs&j=0da5d1d9-276d-5173-c4c4-9d4d4ed14fdb&t=d9b15392-e4ce-5e4c-0c8c-b69645229181&l=4096",
        "created_at": "2022-02-17T00:53:24.000Z",
        "updated_at": "2022-02-19T18:51:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Continuous Integration",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-02-19T14:15:19.000Z"
    },
    "comments": [
        {
            "created_at": "2022-02-19T14:15:19.821Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15708?focusedCommentId=17494979) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 12443\n<https://github.com/apache/arrow/pull/12443>"
        }
    ]
}