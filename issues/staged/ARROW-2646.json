{
    "issue": {
        "title": "[C++/Python] Pandas roundtrip for date objects",
        "body": "***Note**: This issue was originally created as [ARROW-2646](https://issues.apache.org/jira/browse/ARROW-2646). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nArrow currently casts date objects to nanosecond precision datetime objects.\u00a0I'd like to have a way to preserve the type during a roundtrip\r\n```Java\n\r\n>>> import pandas as pd\r\n>>> import pyarrow as pa\r\n>>> import datetime\r\n>>> pa.date32().to_pandas_dtype()\r\ndtype('<M8[ns]')\r\n>>> df = pd.DataFrame({'date': [datetime.date(2018, 1, 1)]})\r\n>>> df.dtypes\r\ndate object\r\ndtype: object\r\n>>> df_rountrip = pa.Table.from_pandas(df).to_pandas()\r\n>>> df_rountrip.dtypes\r\ndate    datetime64[ns]\r\ndtype: object\r\n```\r\nI'd expect something like\u00a0this to work:\r\n```Java\n\r\n>>> import pandas.testing as pdt\r\n>>> df_rountrip = pa.Table.from_pandas(df).to_pandas(date_as_object=True)\r\n>>> pdt.assert_frame_equal(df_rountrip, df)\r\n```",
        "created_at": "2018-05-30T09:03:29.000Z",
        "updated_at": "2018-09-13T21:16:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-09-13T21:16:03.000Z"
    },
    "comments": [
        {
            "created_at": "2018-06-12T20:40:14.427Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2646?focusedCommentId=16510173) by Wes McKinney (wesm):*\n`[~fjetter]` would you like to do this for 0.10.0? We might consider some kind of Options object (like we have in C++) to manage all of these conversion parameters that may show up in many functions (to avoid having to maintain a lot of the same function signatures)"
        },
        {
            "created_at": "2018-06-14T15:41:46.024Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2646?focusedCommentId=16512634) by Uwe Korn (uwe):*\n`[~wesmckinn]` I'm still not convinced that an Options object would work well with Python users. Do you have an example of a Python project that uses it? I would expect that users would much more favour kwargs are done in Pandas/Matplotlib/\u2026 . While there are certain drawbacks for a library developer, I think it will be much more appreciated by users."
        },
        {
            "created_at": "2018-06-29T14:35:47.828Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2646?focusedCommentId=16527728) by Antoine Pitrou (apitrou):*\nThe standard `csv` module has both a notion of \"dialect\" and additional `**kwargs` to each function so that you can override individual options. Intuitively, it allows accepting individual option arguments without listing and documenting them explicitly for each method.\r\n\r\nI tend to prefer the options object / dialect approach myself, but it's true I'm more in the library developer camp :-)"
        },
        {
            "created_at": "2018-09-10T12:15:31.801Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2646?focusedCommentId=16609091) by Krisztian Szucs (kszucs):*\nI do prefer kwargs on python side. We could introduce mixins to reduce the redundant function signatures."
        },
        {
            "created_at": "2018-09-13T21:16:03.717Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2646?focusedCommentId=16614075) by Wes McKinney (wesm):*\nIssue resolved by pull request 2535\n<https://github.com/apache/arrow/pull/2535>"
        }
    ]
}