{
    "issue": {
        "title": "[Format] Handling of buffer padding in the IPC metadata",
        "body": "***Note**: This issue was originally created as [ARROW-412](https://issues.apache.org/jira/browse/ARROW-412). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSee discussion in ARROW-399. Do we include padding bytes in the metadata or set the actual used bytes? In the latter case, the padding would be a part of the format (any buffers continue to be expected to be 64-byte padded, to permit AVX512 instructions)",
        "created_at": "2016-12-08T22:05:53.000Z",
        "updated_at": "2019-10-06T21:44:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-10-06T21:44:14.000Z"
    },
    "comments": [
        {
            "created_at": "2017-08-29T01:25:30.218Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-412?focusedCommentId=16144630) by Wes McKinney (wesm):*\nThis is a slightly thorny subject. \n\nIn C++, generally the buffers already have padding in the size, but if we call `buffer->Resize(size)` with a size that does not have padding, then the buffer capacity will have padding, even though the size is less. \n\nWhen we write buffers in IPC messages, padding must be added so that at minimum the end of a buffer starts and ends on an 8 byte boundary, and maybe preferable 64 byte ending boundary. This padding is being included in the buffer metadata in the Flatbuffers message: https://github.com/apache/arrow/blob/master/cpp/src/arrow/ipc/writer.cc#L171\n\nThe problem with this is that buffer sizes may change in IPC round trips. So if we're hashing buffer contents then hash values may change. If the IPC receiver is concerned about this, then the buffer size could be adjusted based on the other parts of the metadata. \n\nOne solution is to send the accurate buffer sizes. The receiver could decide how to set the size and capacity of the computed buffers on receive. This wouldn't change the actual memory layout on the wire (because padding for alignment purposes is required), just the buffer size metadata."
        },
        {
            "created_at": "2019-03-30T20:14:33.200Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-412?focusedCommentId=16805962) by Wes McKinney (wesm):*\nMy inclination on this would be that the `Buffer` Flatbuffers struct reflects the intent of the materialized Buffer object in the client language. So if a sender of the protocol intends for the receiver to have a 64-byte padded buffer, then this padding should be included in the Buffer struct. \r\n\r\nI can propose some language in the Format documentation to make this clear"
        },
        {
            "created_at": "2019-10-06T21:44:14.700Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-412?focusedCommentId=16945474) by Wes McKinney (wesm):*\nIssue resolved by pull request 4370\n<https://github.com/apache/arrow/pull/4370>"
        }
    ]
}