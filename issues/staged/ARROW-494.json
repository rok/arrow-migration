{
    "issue": {
        "title": "[C++] When MemoryMappedFile is destructed, memory is unmapped even if buffer referecnes still exist",
        "body": "***Note**: This issue was originally created as [ARROW-494](https://issues.apache.org/jira/browse/ARROW-494). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'd like to see if there is some way to \"protect\" the memory map from premature destruction. This is a slight artifact of MemoryMappedFile's implementation sharing code with normal on-disk files (which read into allocated memory), i.e. the `Close` function unmaps the memory and closes the file handle. This would amount to creating a Buffer subclass that retains ownership of the file descriptor and memory map, so that if any Buffer still references the memory map, then `MemoryMappedFile::Close` will not unmap the memory or close the file. But then the unmapping / file close would need to happen when the last Buffer reference is destroyed. ",
        "created_at": "2017-01-19T01:58:30.000Z",
        "updated_at": "2017-02-13T16:34:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2017-01-23T11:43:15.000Z"
    },
    "comments": [
        {
            "created_at": "2017-01-22T21:20:47.347Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-494?focusedCommentId=15833706) by Wes McKinney (wesm):*\nPR: https://github.com/apache/arrow/pull/298"
        },
        {
            "created_at": "2017-01-23T11:43:15.747Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-494?focusedCommentId=15834313) by Wes McKinney (wesm):*\nIssue resolved by pull request 298\n<https://github.com/apache/arrow/pull/298>"
        }
    ]
}