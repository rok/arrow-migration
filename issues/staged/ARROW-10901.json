{
    "issue": {
        "title": "[JS] toArray delivers double length arrays in some cases",
        "body": "***Note**: This issue was originally created as [ARROW-10901](https://issues.apache.org/jira/browse/ARROW-10901). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen calling `toArray`\u00a0on a column, one would expect that a column of length 10, would give back an array of length 10. Instead, it sometimes gives back an array of length 20.\r\n\r\nI think this is the case for elements where the type is something like Int64, where it's not guaranteed JS will actually fit the number into it Float (which iirc is not 64 bit exactly). \r\nAt the same time, if I call `toArray`, I would expect the numbers to stay the same.",
        "created_at": "2020-12-14T14:38:22.000Z",
        "updated_at": "2022-01-09T03:23:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-01-09T03:23:34.000Z"
    },
    "comments": [
        {
            "created_at": "2021-02-05T05:49:37.117Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10901?focusedCommentId=17279363) by Paul Taylor (paul.e.taylor):*\ntoArray() on the Numeric vector types returns a zero-copy TypedArray view over the underlying `data` buffer for vectors/single-chunk columns. For multi-chunk columns it copies the data from each chunk into a single contiguous buffer.\r\n\r\ntoArray() is a method to deserialize values from their binary Arrow representation to JS values, potentially at the cost of additional copy/deserialization. For example, Utf8Vector will return an Array of strings, DateVector will return an Array of Dates, etc.\r\n\r\nIf you want the numeric values of an IntVector, you can use the `.values` getter directly. This returns the underlying Vector's binary data as a JS typed array of the appropriate byte-width, excepting the 64-bit cases.\r\n\r\nNot every environment implements the `BigInt64Array` and `BigUint64Array`. Since we want to support those environments, we've opted to return the 32-bit variants of the 64-bit Vector types.\r\n\r\nIf you're targeting only environments with BigInts, the `Int64Vector` and `Uint64Vector` have additional `.values64` getters that return `BigInt64Array` or `BigUint64Array` respectively. These getters will throw an error if called in an environment without BigInts."
        }
    ]
}