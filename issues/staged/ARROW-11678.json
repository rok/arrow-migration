{
    "issue": {
        "title": "[python] Warn users if ParquetWriter coerces an explicitly defined schema",
        "body": "***Note**: This issue was originally created as [ARROW-11678](https://issues.apache.org/jira/browse/ARROW-11678). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\npyarrow should warn users if it coerces a explicitly defined schema. Not warning the user leads to confusing behavious as illustrated below:\r\n\r\n\u00a0\r\n\r\n<font color=\"#af00db\">import</font>\u00a0<font color=\"#267f99\">pyarrow</font>\u00a0<font color=\"#af00db\">as</font>\u00a0<font color=\"#267f99\">pa</font>\r\n <font color=\"#af00db\">import</font>\u00a0<font color=\"#267f99\">pyarrow</font><font color=\"#000000\">.</font><font color=\"#267f99\">parquet</font>\u00a0<font color=\"#af00db\">as</font>\u00a0<font color=\"#267f99\">pq</font>\r\n\r\n<font color=\"#001080\">schema</font><font color=\"#000000\">\u00a0=\u00a0</font><font color=\"#267f99\">pa</font><font color=\"#000000\">.schema({</font>\r\n \u00a0\u00a0\u00a0\u00a0<font color=\"#a31515\">'code'</font><font color=\"#000000\">:\u00a0</font><font color=\"#267f99\">pa</font><font color=\"#000000\">.uint32(),</font>\r\n })\r\n\r\nwith\u00a0<font color=\"#267f99\">pq</font><font color=\"#000000\">.</font><font color=\"#267f99\">ParquetWriter</font><font color=\"#000000\">(</font><font color=\"#a31515\">'test_metadata.parquet'</font><font color=\"#000000\">,\u00a0</font><font color=\"#001080\">schema</font><font color=\"#000000\">)\u00a0</font><font color=\"#af00db\">as</font>\u00a0<font color=\"#001080\">pqwriter</font><font color=\"#000000\">:</font>\r\n \u00a0\u00a0\u00a0\u00a0<font color=\"#001080\">code</font><font color=\"#000000\">\u00a0=\u00a0</font><font color=\"#098658\">111000</font>\r\n \u00a0\u00a0\u00a0\u00a0<font color=\"#001080\">table</font><font color=\"#000000\">\u00a0=\u00a0</font><font color=\"#267f99\">pa</font><font color=\"#000000\">.Table.from_pydict({</font>\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<font color=\"#a31515\">'code'</font><font color=\"#000000\">:\u00a0</font><font color=\"#267f99\">pa</font><font color=\"#000000\">.nulls(</font><font color=\"#098658\">10</font><font color=\"#000000\">,\u00a0</font><font color=\"#001080\">schema</font><font color=\"#000000\">.field(</font><font color=\"#a31515\">'code'</font><font color=\"#000000\">).type).fill_null(</font><font color=\"#001080\">code</font><font color=\"#000000\">),</font>\r\n <font color=\"#000000\">\u00a0\u00a0\u00a0\u00a0})</font>\r\n \u00a0\u00a0\u00a0\u00a0<font color=\"#001080\">pqwriter</font><font color=\"#000000\">.</font><font color=\"#795e26\">write_table</font><font color=\"#000000\">(</font><font color=\"#001080\">table</font><font color=\"#000000\">)</font>\r\n\r\n<font color=\"#001080\">existing_table</font><font color=\"#000000\">\u00a0=\u00a0</font><font color=\"#267f99\">pq</font><font color=\"#000000\">.</font><font color=\"#795e26\">read_table</font><font color=\"#000000\">(</font><font color=\"#a31515\">'test_metadata.parquet'</font><font color=\"#000000\">)</font>\r\n\r\n<font color=\"#af00db\">with</font>\u00a0<font color=\"#267f99\">pq</font><font color=\"#000000\">.</font><font color=\"#267f99\">ParquetWriter</font><font color=\"#000000\">(</font><font color=\"#a31515\">'test_metadata.parquet'</font><font color=\"#000000\">,\u00a0</font><font color=\"#001080\">schema</font><font color=\"#000000\">)\u00a0</font><font color=\"#af00db\">as</font>\u00a0<font color=\"#001080\">pqwriter</font><font color=\"#000000\">:</font>\r\n \u00a0\u00a0\u00a0\u00a0<font color=\"#001080\">pqwriter</font><font color=\"#000000\">.</font><font color=\"#795e26\">write_table</font><font color=\"#000000\">(</font><font color=\"#001080\">existing_table</font><font color=\"#000000\">)</font>\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n----\r\n**Error Message:**\r\n\r\nValueError: Table schema does not match schema used to create file:\r\n table:\r\n code: int64\r\n \u2013 field metadata \u2013\r\n PARQUET:field_id: '1' vs.\r\n file:\r\n code: uint32",
        "created_at": "2021-02-17T18:33:04.000Z",
        "updated_at": "2021-08-05T00:24:21.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-02-17T18:55:11.283Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11678?focusedCommentId=17286083) by ARF (ARF1):*\nJust did some more tests. This problem seems to be limited specifically to the uint32 datatype.\r\n\r\nAll the following datatypes round-trip without issues: int64, uint64, int32, int16, uint16"
        },
        {
            "created_at": "2021-02-17T19:53:00.613Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11678?focusedCommentId=17286116) by Weston Pace (westonpace):*\nParquet version 1 did not have support to fit the entire uint32 range so it upcasts to int64.\u00a0 See ARROW-436.\r\n\r\nThis is expected behavior.\u00a0 If you specify version=\"2.0\" it should round trip correctly.\r\n```java\n\r\npq.ParquetWriter('test_metadata.parquet', schema, version='2.0')\r\n```"
        },
        {
            "created_at": "2021-02-17T19:56:27.683Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11678?focusedCommentId=17286118) by ARF (ARF1):*\nDictArray has similar problems:\r\n\r\n`dictionary<values=string, indices=int8, ordered=0>`\r\n\r\nbecomes:\r\n\r\n\u00a0`dictionary<values=string, indices=int32, ordered=0>`"
        },
        {
            "created_at": "2021-02-17T20:00:02.223Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11678?focusedCommentId=17286120) by ARF (ARF1):*\n`[~westonpace]` I see. Thank you for your comment. I would have expected at least a warning that upcasting is happening.\r\n\r\nI.e. if ParquetWriter encounters a schema that will cause upcasting given the (implicitly) chosen version, it should emit a python warning.\r\n\r\nAfter all, if users make the effort to explicitly specify a schema, they will expect it to be followed..."
        },
        {
            "created_at": "2021-02-17T21:33:14.338Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11678?focusedCommentId=17286154) by ARF (ARF1):*\nOk, `pq.ParquetWriter('test_metadata.parquet', schema, version='2.0')` does fix the `uint32` issue.\r\n\r\nIt does not however fix the above mentioned problem with round-tripping:\r\n`dictionary<values=string, indices=int8, ordered=0>`"
        },
        {
            "created_at": "2021-02-26T13:21:39.999Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11678?focusedCommentId=17291643) by ARF (ARF1):*\nI modified the issue to take into account `[~westonpace]`'s explanations and focussed it on the \"warning to user\" aspect."
        }
    ]
}