{
    "issue": {
        "title": "ArrayData buffers are inconsistent accross implementations",
        "body": "***Note**: This issue was originally created as [ARROW-12223](https://issues.apache.org/jira/browse/ARROW-12223). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nArrayData implementations seems to share close structure fields accross languages, but their usage is not consistent accross implementation.\r\n\r\n\u00a0\r\n\r\nExample using ListArray's offsets buffer, in C++, Rust and JavaScript implementation:\r\n\r\n\u00a0- C++: offset's buffer is the second buffer (validity bitmap is first buffer, and buffers are laid in a type-dependant way)\u00a0https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/array_nested.cc#L189\r\n\r\n\u00a0- Rust: offset's buffer is the first buffer (validity bitmap is not part of the collection, and buffers are laid in a type-dependant way)\u00a0https://github.com/apache/arrow/blob/master/rust/arrow/src/array/array_list.rs#L235\r\n\r\n\u00a0- JavaScript: offset's buffer is the first buffer (they have fixed position) <https://github.com/apache/arrow/blob/8e43f23dcc6a9e630516228f110c48b64d13cec6/js/src/data.ts#L125>\r\n\r\n\u00a0\r\n\r\nNote that we have the same inconsistency for validity and data buffers.\r\n\r\n\u00a0\r\n\r\nThis is important in my project because I would like to transport buffers list accross technologies, and ArrayData seemed the easiest structure to transport.",
        "created_at": "2021-04-06T10:28:14.000Z",
        "updated_at": "2021-08-04T14:29:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: JavaScript",
            "Component: Rust",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-08-04T14:29:57.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-26T12:50:42.637Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12223?focusedCommentId=17332240) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/207"
        },
        {
            "created_at": "2021-04-30T08:01:35.311Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12223?focusedCommentId=17337163) by Vincent Trumpff (vincent-tr):*\nThanks for pushing on it!\r\n\r\nNote that there is not only inconsistency between rust implementation and the others, but also between C++ and JavaScript implementation."
        },
        {
            "created_at": "2021-04-30T13:21:33.869Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12223?focusedCommentId=17337386) by Vincent Trumpff (vincent-tr):*\nReopening as we still have difference between\u00a0C++ and JavaScript unless I missed something?\r\n\r\n\u00a0\r\n\r\nEdit:\r\n\r\nIf the community do agree with the point, I would be happy to propose a PR on C++ and JavaScript sources."
        },
        {
            "created_at": "2021-05-02T05:16:01.086Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12223?focusedCommentId=17337954) by Micah Kornfield (emkornfield):*\nAs far as I know it has not been the goal of the project to have identical implementations of items not specified in the specification (IPC/File and FFI ABI)."
        },
        {
            "created_at": "2021-08-04T14:29:57.129Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12223?focusedCommentId=17393221) by Antoine Pitrou (apitrou):*\nLate answer, but I don't think this is a bug indeed. If you want to transport data between runtimes, there are two official solutions:\r\n- the Arrow IPC protocol\n- the Arrow C data interface (only for in-process data sharing, guaranteed zero-copy)"
        }
    ]
}