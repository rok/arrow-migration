{
    "issue": {
        "title": "[Rust] Intermittent build failure in parquet encoding",
        "body": "***Note**: This issue was originally created as [ARROW-10943](https://issues.apache.org/jira/browse/ARROW-10943). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI saw this test failure locally\r\n```java\n\r\n---- encodings::encoding::tests::test_bool stdout ----\r\nthread 'encodings::encoding::tests::test_bool' panicked at 'Invalid byte when reading bool', parquet/src/util/bit_util.rs:73:18\r\n \n```\r\nI ran \"cargo test\" again and it passed\r\n\r\n\u00a0\r\n\r\nWe have seen this happen in CI as well",
        "created_at": "2020-12-16T16:49:59.000Z",
        "updated_at": "2021-02-24T01:51:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-12-24T03:24:12.000Z"
    },
    "comments": [
        {
            "created_at": "2020-12-16T18:14:11.942Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17250519) by Andrew Lamb (alamb):*\nsee https://github.com/apache/arrow/pull/8930#issuecomment-746661642 for some more context\r\n\r\nI ran the arrow test suite this morning under valgrind and it didn't report any issue\r\n\r\nIt started happening after https://github.com/apache/arrow/pull/8698 was merged (though that did not necessarily introduce the problem). [~gbowyer@fastmail.co.uk] did you see anything similar to this during development"
        },
        {
            "created_at": "2020-12-16T20:29:29.832Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17250620) by Greg Bowyer (gbowyer@fastmail.co.uk):*\nI didnt see anything during development of 8698, is this specific to windows?"
        },
        {
            "created_at": "2020-12-17T00:56:13.623Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17250710) by Greg Bowyer (gbowyer@fastmail.co.uk):*\nIt might be unrelated:\r\n\r\n\u00a0\r\n\r\nA hacked version of `miri` (adding in `atomic fetch_max`) has the following complaint\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n```java\n\r\ngreg@gregslaptop ~/.../rust/parquet $ MIRIFLAGS=\"-Zmiri-disable-isolation\" cargo +nightly miri test 'encodings::encoding::tests::test_bool'\r\n   Compiling parquet v3.0.0-SNAPSHOT (/home/greg/projects/arrow/rust/parquet)\r\n    Finished test [unoptimized + debuginfo] target(s) in 1.94s\r\n     Running /home/greg/projects/arrow/rust/target/x86_64-unknown-linux-gnu/debug/deps/parquet-9bca74cf6a2c2a95running 1 test\r\ntest encodings::encoding::tests::test_bool ... error: Undefined Behavior: accessing memory with alignment 2, but alignment 4 is required\r\n    --> parquet/src/util/bit_packing.rs:84:13\r\n     |\r\n84   |     *out = ((*in_buf) >> 1) & 1;\r\n     |             ^^^^^^^^^ accessing memory with alignment 2, but alignment 4 is required\r\n     |\r\n     = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\r\n     = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information     = note: inside `util::bit_packing::unpack1_32` at parquet/src/util/bit_packing.rs:84:13\r\nnote: inside `util::bit_packing::unpack32` at parquet/src/util/bit_packing.rs:36:14\r\n    --> parquet/src/util/bit_packing.rs:36:14\r\n     |\r\n36   |         1 => unpack1_32(in_ptr, out_ptr),\r\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside `util::bit_util::BitReader::get_batch::<bool>` at parquet/src/util/bit_util.rs:554:30\r\n    --> parquet/src/util/bit_util.rs:554:30\r\n     |\r\n554  |                     in_ptr = unpack32(in_ptr, out_ptr, num_bits);\r\n     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside `<bool as data_type::private::ParquetValueType>::decode` at parquet/src/data_type.rs:684:31\r\n    --> parquet/src/data_type.rs:684:31\r\n     |\r\n684  |             let values_read = bit_reader.get_batch(&mut buffer[..num_values], 1);\r\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside `<encodings::decoding::PlainDecoder<data_type::BoolType> as encodings::decoding::Decoder<data_type::BoolType>>::get` at parquet/src/encodings/decoding.rs:197:9\r\n    --> parquet/src/encodings/decoding.rs:197:9\r\n     |\r\n197  |         T::T::decode(buffer, &mut self.inner)\r\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside `encodings::encoding::tests::put_and_get::<data_type::BoolType>` at parquet/src/encodings/encoding.rs:1271:9\r\n    --> parquet/src/encodings/encoding.rs:1271:9\r\n     |\r\n1271 |         decoder.get(output)\r\n     |         ^^^^^^^^^^^^^^^^^^^\r\nnote: inside `<data_type::BoolType as encodings::encoding::tests::EncodingTester<data_type::BoolType>>::test_internal` at parquet/src/encodings/encoding.rs:1214:28\r\n    --> parquet/src/encodings/encoding.rs:1214:28\r\n     |\r\n1214 |               actual_total = put_and_get(\r\n     |  ____________________________^\r\n1215 | |                 &mut encoder,\r\n1216 | |                 &mut decoder,\r\n1217 | |                 &values[..],\r\n1218 | |                 &mut result_data[..],\r\n1219 | |             )?;\r\n     | |_____________^\r\nnote: inside `<data_type::BoolType as encodings::encoding::tests::EncodingTester<data_type::BoolType>>::test` at parquet/src/encodings/encoding.rs:1159:24\r\n    --> parquet/src/encodings/encoding.rs:1159:24\r\n     |\r\n1159 |                 enc => Self::test_internal(enc, total, type_length),\r\n     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside `encodings::encoding::tests::test_bool` at parquet/src/encodings/encoding.rs:967:9\r\n    --> parquet/src/encodings/encoding.rs:967:9\r\n     |\r\n967  |         BoolType::test(Encoding::PLAIN, TEST_SET_SIZE, -1);\r\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside closure at parquet/src/encodings/encoding.rs:966:5\r\n    --> parquet/src/encodings/encoding.rs:966:5\r\n     |\r\n966  | /     fn test_bool() {\r\n967  | |         BoolType::test(Encoding::PLAIN, TEST_SET_SIZE, -1);\r\n968  | |         BoolType::test(Encoding::PLAIN_DICTIONARY, TEST_SET_SIZE, -1);\r\n969  | |         BoolType::test(Encoding::RLE, TEST_SET_SIZE, -1);\r\n970  | |     }\r\n     | |_____^\r\n     = note: inside <[closure@parquet/src/encodings/encoding.rs:966:5: 970:6] as std::ops::FnOnce<()>>::call_once - shim` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\r\n     = note: inside `<fn() as std::ops::FnOnce<()>>::call_once - shim(fn())` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\r\n     = note: inside `test::__rust_begin_short_backtrace::<fn()>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:516:5\r\n     = note: inside closure at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:507:30\r\n     = note: inside `<[closure@test::run_test::{closure#2}] as std::ops::FnOnce<()>>::call_once - shim(vtable)` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\r\n     = note: inside `<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send> as std::ops::FnOnce<()>>::call_once` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:1328:9\r\n     = note: inside `<std::panic::AssertUnwindSafe<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send>> as std::ops::FnOnce<()>>::call_once` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:322:9\r\n     = note: inside `std::panicking::r#try::do_call::<std::panic::AssertUnwindSafe<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send>>, ()>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:379:40\r\n     = note: inside `std::panicking::r#try::<(), std::panic::AssertUnwindSafe<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send>>>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:343:19\r\n     = note: inside `std::panic::catch_unwind::<std::panic::AssertUnwindSafe<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send>>, ()>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:396:14\r\n     = note: inside `test::run_test_in_process` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:538:18\r\n     = note: inside closure at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:449:39\r\n     = note: inside `test::run_test::run_test_inner` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:474:13\r\n     = note: inside `test::run_test` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:504:28\r\n     = note: inside `test::run_tests::<[closure@test::run_tests_console::{closure#2}]>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:283:13\r\n     = note: inside `test::run_tests_console` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/console.rs:289:5\r\n     = note: inside `test::test_main` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:121:15\r\n     = note: inside `test::test_main_static` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/test/src/lib.rs:140:5\r\n     = note: inside `main`\r\n     = note: inside `<fn() as std::ops::FnOnce<()>>::call_once - shim(fn())` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\r\n     = note: inside `std::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys_common/backtrace.rs:125:18\r\n     = note: inside closure at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:66:18\r\n     = note: inside `std::ops::function::impls::<impl std::ops::FnOnce<()> for &dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe>::call_once` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:259:13\r\n     = note: inside `std::panicking::r#try::do_call::<&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, i32>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:379:40\r\n     = note: inside `std::panicking::r#try::<i32, &dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:343:19\r\n     = note: inside `std::panic::catch_unwind::<&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, i32>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:396:14\r\n     = note: inside `std::rt::lang_start_internal` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:51:25\r\n     = note: inside `std::rt::lang_start::<()>` at /home/greg/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:65:5\r\n     = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)error: aborting due to previous errorerror: test failed, to rerun pass '--lib'`\r\n```\r\n\u00a0"
        },
        {
            "created_at": "2020-12-17T01:24:20.281Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17250715) by Greg Bowyer (gbowyer@fastmail.co.uk):*\nA terrible PR <https://github.com/apache/arrow/pull/8948> might solve this? It would be good to solve with a reproducible test suite.\r\n\r\nI might try to see if ubsan can find similar issues to miri"
        },
        {
            "created_at": "2020-12-17T21:17:16.203Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17251345) by Greg Bowyer (gbowyer@fastmail.co.uk):*\nThe miri hack is here <https://github.com/rust-lang/miri/pull/1653>"
        },
        {
            "created_at": "2020-12-19T21:26:46.852Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17252273) by Andrew Lamb (alamb):*\nSome data: \r\n\r\nI can reproduce this error regularly, though non deterministically, by running the tests in a loop with a shell script such as:\r\n\r\n```Java\n\r\n#!/bin/bash\r\n# run a command in a loop\r\n\r\ncd /Users/alamb/Software/arrow2/rust\r\nexport PARQUET_TEST_DATA=`pwd`/../cpp/submodules/parquet-testing/data\r\nexport ARROW_TEST_DATA=`pwd`/../testing/data\r\n\r\ni=0\r\nwhile true; do\r\n    echo \"iteration $i\"\r\n    cargo test -p parquet  -- test_bool\r\n    i=$((i+1))\r\ndone\r\n```\r\n\r\nI am going to try this approach with [~gbowyer@fastmail.co.uk]'s PR 8948\r\n\r\ncc `[~andygrove]`"
        },
        {
            "created_at": "2020-12-22T00:22:29.317Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17253175) by Greg Bowyer (gbowyer@fastmail.co.uk):*\n\u00a0I managed to nail down a deterministic test, looks to be RLE encoding related.\r\n\r\n\u00a0\r\n```java\n\r\n    #[test]\r\n    fn test_bool_bug() {\r\n        const total: usize = TEST_SET_SIZE;\r\n        const type_length: i32 = -1;\r\n        let mut encoder = create_test_encoder::<BoolType>(type_length, Encoding::RLE);\r\n        let mut decoder = create_test_decoder::<BoolType>(type_length, Encoding::RLE);\r\n        //let mut values = <T as RandGen<T>>::gen_vec(type_length, total);        \r\n        let values: Vec<bool> = vec![\r\n            true, true, true, true, true, true, true, true, true, false,\r\n            true, false, true, false, true, true, true, false, false, true, true, true, true, true,\r\n            false, true, true, false, false, true, false, false, false, true, false, false, false,\r\n            false, true, false, true, false, false, true, false, false, false, true, true, true, false,\r\n            true, true, true, true, false, true, false, true, false, false, true, true, false, true,\r\n            false, false, true, true, true, true, true, true, true, false, false, true, true, false,\r\n            true, false, true, true, true, false, true, false, true, false, false, false, true, true,\r\n            false, true, true, true, true, false, true, true, false, false, false, false, true, false,\r\n            true, true, true, false, true, false, false, false, false, true, false, true, true, false,\r\n            true, false, true, false, false, true, false, true, true, true, true, true, true, true,\r\n            true, true, true, false, false, true, false, false, false, true, true, false, false, false,\r\n            false, false, true, true, false, false, false, true, false, true, true, true, true, true,\r\n            true, false, false, false, false, true, false, false, false, false, true, false, false,\r\n            false, false, false, false, true, true, true, true, false, true, false, false, true, true,\r\n            true, false, true, false, true, false, false, false, false, false, true, false, false,\r\n            false, true, true, true, true, false, false, false, false, true, true, true, true, false,\r\n            true, true, true, false, true, false, true, true, false, false, true, false, true, false,\r\n            false, true, false, true, true, false, false, false, true, false, true, true, true, false,\r\n            true, true, false, false, false, true, true, false, false, false, false, false, false,\r\n            true, true, false, false, false, true, true, false, false, true, false, false, true, true,\r\n            false, true, true, false, true, true, false, true, false, false, false, false, false,\r\n            false, true, false, true, true, false, false, false, false, false, false, false, false,\r\n            false, true, false, false, false, false, false, true, false, false, true, true, false,\r\n            false, true, true, false, true, true, false, false, true, false, true, false, true, true,\r\n            true, false, false, false, true, true, true, false, true, false, false, true, false, false,\r\n            false, true, false, false, true, false, true, true, true, false, true, true, true, true,\r\n            false, false, true, false, true, false, true, false, false, true, true, false, false, true,\r\n            false, true, false, false, true, false, true, false, false, false, true, true, true, false,\r\n            false, false, true, false, true, false, false, false, true, false, true, false, false,\r\n            false, false, true, true, false, true, false, false, true, true, true, false, true, false,\r\n            false, true, false, true, false, false, true, false, true, true, true, true, true, true,\r\n            true, true, false, false, false, false, false, false, false, true, false, true, true,\r\n            false, true, false, true, false, true, true, true, true, false, true, true, true, true,\r\n            true, false, false, false, false, true, false, true, true, true, true, true, false, true,\r\n            true, false, true, true, false, false, false, true, false, true, false, true, true, false,\r\n            true, true, false, true, true, true, false, true, false, false, false, false, false, false,\r\n            false, true, false, true, false, true, false, true, true, true, true, true, false, true,\r\n            false, false, true, true, true, true, false, true, false, false, false, true, false, true,\r\n            true, false, true, true, false, false, false, false, true, false, true, true, false, false,\r\n            false, true, true, false, false, true, true, true, true, false, false, false, true, true,\r\n            true, true, true, true, false, false, false, false, false, false, false, false, true, true,\r\n            false, true, true, true, false, true, true, false, true, true, false, false, true, false,\r\n            false, true, true, false, false, true, false, true, true, true, true, true, true, false,\r\n            true, false, true, false, true, true, true, true, true, true, true, false, false, true,\r\n            false, false, true, true, false, true, false, true, false, true, false, false, true, true,\r\n            false, true, false, true, true, true, true, true, true, false, false, false, true, true,\r\n            false, true, false, false, true, true, false, false, true, false, true, true, false, true,\r\n            false, true, false, true, false, true, true, false, false, false, false, true, true, true,\r\n            false, true, true, true, false, true, false, false, false, true, false, false, true, false,\r\n            false, true, false, true, true, false, true, false, false, true, false, true, true, false,\r\n            false, false, false, false, true, true, true, true, false, false, false, true, false,\r\n            false, false, true, false, true, true, true, true, false, false, false, true, true, true,\r\n            false, false, true, false, false, false, false, true, false, true, false, true, false,\r\n            false, false, true, false, false, false, false, true, true, true, true, false, false, true,\r\n            false, true, false, true, true, true, false, false, true, true, true, false, true, true,\r\n            false, true, true, false, true, false, false, false, false, false, true, true, false, true,\r\n            false, true, false, true, false, true, true, true, true, true, true, true, false, false,\r\n            false, true, true, true, false, false, true, false, true, false, true, false, false, false,\r\n            true, true, false, true, true, false, false, false, false, false, true, true, true, false,\r\n            true, true, true, true, true, false, false, true, true, true, false, true, true, false,\r\n            true, false, false, false, false, false, true, false, true, true, true, true, true, true,\r\n            true, true, true, true, true, false, true, true, true, false, false, false, true, true,\r\n            true, true, true, true, false, false, true, false, false, false, false, false, true, false,\r\n            false, false, false, true, true, false, true, true, true, true, true, true, true, true,\r\n            false, true, true, false, true, false, false, true, false, true, false, true, true, true,\r\n            true, false, true, false, false, true, true, false, false, true, false, true, true, false,\r\n            false, true, false, true, true, true, true, false, false, false, true, true, true, true,\r\n            true, false, false, true, false, true, false, false, false, true, true, true, true, false,\r\n            false, true, false, false, true, true, false, true, true, false, false, false, false,\r\n            false, true, false, false, true, false, true, false, true, false, true, false, true, true,\r\n            true, true, false, true, false, true, false, true, false, true, false, false, true, false,\r\n            true, false, true, false, false, true, true, true, false, true, true, false, true, false,\r\n            false, false, false, true, false, true, false, true, false, false, false, true, false,\r\n            true, false, false, true, false, false, true, false, false, false, true, true, false, true,\r\n            true, true, true, false, false\r\n        ];\r\n\r\n        let mut result_data = vec![bool::default(); total];\r\n\r\n        // Test put/get spaced.\r\n        let num_bytes = bit_util::ceil(total as i64, 8);\r\n        let valid_bits = random_bytes(num_bytes as usize);\r\n        let values_written = encoder.put_spaced(&values[..], &valid_bits[..]).unwrap();\r\n        let data = encoder.flush_buffer().unwrap();\r\n        decoder.set_data(data, values_written).unwrap();\r\n\r\n        let _ = decoder.get_spaced(\r\n            &mut result_data[..],\r\n            values.len() - values_written,\r\n            &valid_bits[..],\r\n        ).unwrap();\r\n\r\n        // Check equality\r\n        for i in 0..total {\r\n            if bit_util::get_bit(&valid_bits[..], i) {\r\n                assert_eq!(result_data[i], values[i]);\r\n            } else {\r\n                assert_eq!(result_data[i], bool::default());\r\n            }\r\n        }\r\n\r\n        let mut actual_total = put_and_get(\r\n            &mut encoder,\r\n            &mut decoder,\r\n            &values[..],\r\n            &mut result_data[..],\r\n        ).unwrap();\r\n\r\n\r\n        assert_eq!(actual_total, total);\r\n        assert_eq!(result_data, values);\r\n    }\r\n\r\n```"
        },
        {
            "created_at": "2020-12-23T02:54:21.918Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17253855) by Greg Bowyer (gbowyer@fastmail.co.uk):*\nRunning the shell loop and above test, I think <https://github.com/apache/arrow/pull/8993> fixes this issue"
        },
        {
            "created_at": "2020-12-24T03:24:12.170Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17254385) by Jorge Leit\u00e3o (jorgecarleitao):*\nIssue resolved by pull request 8993\n<https://github.com/apache/arrow/pull/8993>"
        },
        {
            "created_at": "2021-02-24T01:51:57.589Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10943?focusedCommentId=17289517) by Andy Grove (andygrove):*\nNo, not specific to Windows. I see it on Ubuntu.\n\n\n"
        }
    ]
}