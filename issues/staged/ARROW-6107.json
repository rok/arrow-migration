{
    "issue": {
        "title": "[Go] ipc.Writer Option to skip appending data buffers",
        "body": "***Note**: This issue was originally created as [ARROW-6107](https://issues.apache.org/jira/browse/ARROW-6107). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor cases where we have a known shared memory region, it would be great if the ipc.Writer (and by extension ipc.Reader?) had the ability to write out everything but the actual buffers holding the data. That way we can still utilize the ipc mechanisms to communicate without having to serialize all the underlying data across the wire.\r\n\r\n\u00a0\r\n\r\nThis seems like it should be possible since the `RecordBatch` flatbuffers only contain the metadata and the underlying data buffers are appended later. We just need to skip appending the underlying data buffers.\r\n\r\n\u00a0\r\n\r\n`[~sbinet]` thoughts?",
        "created_at": "2019-08-02T01:06:57.000Z",
        "updated_at": "2019-08-06T12:17:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Go",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-08-02T13:18:34.560Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6107?focusedCommentId=16898880) by Sebastien Binet (sbinet):*\nnot saying it wouldn't be advisable nor doable, but: if it's already in a shmem region, why not just use that already?\r\n\r\n(and I guess it's kind of implementing:\u00a0https://issues.apache.org/jira/browse/ARROW-4852)"
        },
        {
            "created_at": "2019-08-02T13:43:02.897Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6107?focusedCommentId=16898898) by Nick Poorman (nickpoorman):*\nhttps://issues.apache.org/jira/browse/ARROW-4852\u00a0Is the same use case I'm thinking of.\r\n\r\n\u00a0\r\n\r\nIf you have an Arrow Table in C (or Python) and you want to access the data in Go, you can pass a pointer back from C to the underlying data buffers. However, you still have to collect all the metadata to\u00a0utilize the buffers. Making CGO calls is slow, so being able to pass a pointer to the data buffers and a pointer to the serialized metadata would ensure a more constant time when crossing the language boundary.\r\n\r\n\u00a0\r\n\r\nI did a simple POC to demonstrate what it would take to collect all the information from Python and re-materialize it in Go.\u00a0<https://github.com/nickpoorman/go-py-arrow-bridge>\u00a0The bottleneck is the number of CGO calls required to fetch all the metadata."
        },
        {
            "created_at": "2019-08-06T12:17:00.856Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6107?focusedCommentId=16900964) by Sebastien Binet (sbinet):*\nok.\r\n\r\n(just nit-picking but to really assess the CGo overhead, one should directly call C, not C++-via-python :P. that said, it's a nice PoC.)\r\n\r\nSGTM.\r\n\r\n\u00a0"
        }
    ]
}