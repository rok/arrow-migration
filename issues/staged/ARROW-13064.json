{
    "issue": {
        "title": "[C++] Add a general \"if, ifelse, ..., else\" kernel (\"CASE WHEN\")",
        "body": "***Note**: This issue was originally created as [ARROW-13064](https://issues.apache.org/jira/browse/ARROW-13064). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nARROW-10640 added a ternary `if_else` kernel. Add another kernel that extends this concept to an arbitrary number of conditions and associated results, like a vectorized `if-ifelse-...-else` with an arbitrary number of `ifelse` and with the `else` optional. This is like a SQL `CASE` statement.\r\n\r\nHow best to achieve this is not obvious. To enable SQL-style uses, it would be most efficient to implement this as a variadic kernel where the even-number arguments (0, 2, ...) are the arrays of boolean conditions, the odd-number arguments (1, 3, ...) are the corresponding arrays of results, and the final argument is the `else` result. But I'm not sure if this is practical. Maybe instead we should implement this to operate on listarrays, like NumPy's `[np.where|https://numpy.org/doc/stable/reference/generated/numpy.where.html]` or `[np.select|https://numpy.org/doc/stable/reference/generated/numpy.select.html]`.",
        "created_at": "2021-06-11T21:28:15.000Z",
        "updated_at": "2021-07-16T05:46:01.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-07-15T19:06:10.000Z"
    },
    "comments": [
        {
            "created_at": "2021-06-14T14:15:07.765Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13064?focusedCommentId=17362987) by David Li (lidavidm):*\nIf it operated on list arrays, it would no longer be a scalar kernel, I think? Since each output item would depend on all the values of the input list arrays. (And you'd also have to check that all input lists are the same length.)"
        },
        {
            "created_at": "2021-06-14T14:16:06.156Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13064?focusedCommentId=17362989) by David Li (lidavidm):*\nThere's also the question of how to handle null condition values (presumably, treat them the same as a False? or we may need options)"
        },
        {
            "created_at": "2021-06-15T14:18:49.545Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13064?focusedCommentId=17363669) by Joris Van den Bossche (jorisvandenbossche):*\n> Maybe instead we should implement this to operate on listarrays, like NumPy's np.where or np.select.\r\nLooking back at the discussion in ARROW-10640, there is also the mention of `np.choose`. Basically, `select` uses (multiple) boolean conditions to choose between the arrays (so more like the SQL CASE), while `choose` uses a single array of indices into the choice arrays (so you get something like `choose(array[int], a0, a1, ... an)` where the first argument should be indices referring to array aX. And our current \"if_else\" kernel is then basically a special case of this if you cast the boolean to an int)\r\n\r\nAlso, I don't think think `np.select` works on \"list arrays\". It works on a \"list of arrays\", but so that's something different as our ListArray (the separate arrays in the list are still separate memory-contiguous arrays). So in C++ terms it's more like `select(vector<Array[bool]> conditions, vector<Array[type]> values) -> Array[type]`"
        },
        {
            "created_at": "2021-06-16T15:58:06.644Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13064?focusedCommentId=17364358) by David Li (lidavidm):*\nThere's also one complication in that it looks like variadic functions don't currently allow mixed types. So we'll have to extend the kernel infra to allow this, or pack arguments in struct types. (And actually: packing arguments in structs doesn't work here either, because then you can't have an 'else' branch.)"
        },
        {
            "created_at": "2021-07-15T19:06:10.068Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13064?focusedCommentId=17381552) by Ben Kietzman (bkietz):*\nIssue resolved by pull request 10557\n<https://github.com/apache/arrow/pull/10557>"
        }
    ]
}