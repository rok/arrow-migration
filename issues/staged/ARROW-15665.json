{
    "issue": {
        "title": "[C++] Add error handling option to StrptimeOptions",
        "body": "***Note**: This issue was originally created as [ARROW-15665](https://issues.apache.org/jira/browse/ARROW-15665). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe want to have an option to either raise, ignore or return NA in case of format mismatch.\r\n\r\nSee [pandas.to_datetime](https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html) and lubridate [parse_date_time](https://lubridate.tidyverse.org/reference/parse_date_time.html) for examples.",
        "created_at": "2022-02-11T15:06:05.000Z",
        "updated_at": "2022-03-30T03:32:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-03-24T15:26:08.000Z"
    },
    "comments": [
        {
            "created_at": "2022-02-15T18:17:43.351Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17492773) by Joris Van den Bossche (jorisvandenbossche):*\nAn option to have it return Null (for the failing string(s)) instead of raising an error sounds good!\r\n\r\nI am not sure about an \"ignore\" option. I know that pandas has it, but I find it a bit a strange option especially in context of an arrow kernel. In that case, it doesn't return a timestamp typed array, but the original string array (so which means that the kernel has no predictable output type).  \r\nSuch logic to \"try the conversion and if it errors keep the original array\" could also be handled on a higher level than the C++ kernel? "
        },
        {
            "created_at": "2022-02-15T19:30:25.457Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17492846) by Rok Mihevc (rokm):*\nThanks for the feedback Joris! Yeah, ignore would not play well with Arrow and should be solved elsewhere. Removing from description."
        },
        {
            "created_at": "2022-03-10T16:08:51.156Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17504388) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\n`[~rokm]` \u00a0how far do you think we are from solving this ticket? It would be a massive help for us since it would enable the `coalesce()` route into solving many of the date-time parsing bindings tickets."
        },
        {
            "created_at": "2022-03-10T16:50:09.857Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17504414) by Rok Mihevc (rokm):*\n`[~dragosmg]` I am not sure what the issue I'm seeing is so don't want to estimate. But I will prioritise it over other tickets."
        },
        {
            "created_at": "2022-03-10T16:59:55.602Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17504429) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nMany thanks."
        },
        {
            "created_at": "2022-03-15T15:01:39.160Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17506955) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\n`[~rokm]`, `[~jorisvandenbossche]` & `[~jonkeane]`\r\nI will ask the question here and move it if it is the wrong place / follow-up Jira required. In R `strptime` returns NA / NULL in the following circumstances:\r\n1. `format` doesn't match `string` - e.g. `\"1999-12-31\" and \"%Y-%d-%M\"` \n1. `string` doesn't make sense, given the format - e.g. `string` is `\"this is a string that doesn't make sense\"`\n1. the `string` can be parsed with the given `format`, but implicitly relies on rollover - `string` is `\"1999-02-30\"` and is parsed as the `\"1999-03-02\"` Date.\n   \n   \n   not sure 1 and 2 are actually distinct, but the 3rd part is different from the current Arrow behaviour\n   \n   {code:r}\n   library(arrow, warn.conflicts = FALSE)\n   library(lubridate, warn.conflicts = FALSE)\n   library(dplyr, warn.conflicts = FALSE)\n   \n   df <- tibble::tibble(string_date = \"1999-02-30\")\n   \n   df %>% \n     mutate(date = strptime(string_date, format = \"%Y-%m-%d\"))\n#> # A tibble: 1 \u00d7 2\r\n#>   string_date date  \r\n#>   <chr>       <dttm>\r\n#> 1 1999-02-30  NA\r\n\r\ndf %>% \r\n  arrow_table() %>% \r\n  mutate(date = strptime(string_date, format = \"%Y-%m-%d\")) %>% \r\n  collect()\r\n#> # A tibble: 1 \u00d7 2\r\n#>   string_date date               \r\n#>   <chr>       <dttm>             \r\n#> 1 1999-02-30  1999-03-02 00:00:00\r\n{code} \r\n\r\nHow are things done in Python? Does the R behaviour align with your expectations / Is it breaking any ISO Standard?"
        },
        {
            "created_at": "2022-03-15T19:07:06.650Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507175) by Rok Mihevc (rokm):*\nI think 1. and 2. would both cause parsing error. 3. is getting into inference territory (see ARROW-15666).\r\n\r\nPython stdlib strptime just throws errors AFAIK and pandas has it's own [pd.to_datetime](https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html) that has tons of options and you can play with this [example here](https://trinket.io/python3/05e3976295).\r\n\r\nStrptime format is notoriously non-standardized so we probably just want to adopt c++ stdlib behaviour."
        },
        {
            "created_at": "2022-03-15T19:16:58.991Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507179) by Jonathan Keane (jonkeane):*\n(3) sounds wrong, but like I said before: you ( `[~dragosmg]`) should look at what happens in python or if there is some standard where that is the indeed the right thing.\r\n\r\n(1) + (2) both sound like they could be implemented as \"if strptime fails to parse, (optionally) return null\". No reason for us to go to far into why it didn't parse."
        },
        {
            "created_at": "2022-03-15T19:31:49.357Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507187) by Rok Mihevc (rokm):*\nI think in Python we'll probably try to get as close as possible to to_datetime so you can just focus on that."
        },
        {
            "created_at": "2022-03-16T10:42:56.517Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507479) by Joris Van den Bossche (jorisvandenbossche):*\nFor case 3, in pandas we don't \"rollover\" for a day that is too large for the given month, but rather raise an error:\r\n\r\n```Java\n\r\n>>> pd.to_datetime(\"1999-02-30\", format=\"%Y-%m-%d\")\r\n...\r\nValueError: time data 1999-02-30 doesn't match format specified\r\n```\r\n\r\nAnd Python's stdlib seems to do that:\r\n\r\n```Java\n\r\n>>> datetime.datetime.strptime(\"1999-02-30\", \"%Y-%m-%d\")\r\n...\r\nValueError: day is out of range for month\r\n```\r\n\r\nArrow indeed does roll-over:\r\n\r\n```Java\n\r\n>>> import pyarrow.compute as pc\r\n>>> print(pc.strptime(\"1999-02-30\", format=\"%Y-%m-%d\", unit=\"s\"))\r\n1999-03-02 00:00:00\r\n```\r\n\r\nPersonally, I don't like that behaviour, but I suppose we get this from the system `strptime`? (so that might even depend on your OS?) \r\nIt might be interesting to check what date.h's version of strptime does."
        },
        {
            "created_at": "2022-03-16T10:46:05.639Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507483) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nThanks all. I was about to comment with a pandas example (so thanks Joris for providing one and Rok for pointing me to Trinket). In conclusion, it's fair to say the rolling over is unexpected for Python too. "
        },
        {
            "created_at": "2022-03-16T10:49:42.462Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507488) by Joris Van den Bossche (jorisvandenbossche):*\nFor cases 1 and 2, I agree that both are cases that should error (which already is what Arrow does now)\r\n\r\n\u2014\r\n\r\nOnly, for case 1, you might have a typo in your example (\"M\" vs \"m\"), because we are parsing minutes (and the missing month gets filled with 1):\r\n\r\n```Java\n\r\n>>> print(datetime.datetime.strptime(\"1999-12-31\", \"%Y-%d-%M\"))\r\n1999-01-12 00:31:00\r\n```\r\n\r\n(pandas does the same, and Arrow as well)\r\n\r\nIf I change that to use `\"%Y-%d-%m\"` (lower case m), Python and pandas give an error for this:\r\n\r\n```Java\n\r\n>>> print(datetime.datetime.strptime(\"1999-12-31\", \"%Y-%d-%m\"))\r\n...\r\nValueError: unconverted data remains: 1\r\n```\r\n\r\nand so does Arrow (\"Failed to parse string: '1999-12-31' ..\")\r\n"
        },
        {
            "created_at": "2022-03-16T10:51:47.408Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507491) by Joris Van den Bossche (jorisvandenbossche):*\nIt's maybe worth opening a separate JIRA for the undesired \"roll-over\" behaviour, in case we end up closing this issue for the general \"return null if it errors\" feature"
        },
        {
            "created_at": "2022-03-16T11:06:48.116Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507502) by Rok Mihevc (rokm):*\nI didn't realise 3. was actual arrow behaviour (I see it on mac). Very much agreed with removing it."
        },
        {
            "created_at": "2022-03-16T11:15:50.169Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17507511) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nI created [ARROW-15948](https://issues.apache.org/jira/browse/ARROW-15948)"
        },
        {
            "created_at": "2022-03-24T15:26:08.517Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15665?focusedCommentId=17511913) by David Li (lidavidm):*\nIssue resolved by pull request 12464\n<https://github.com/apache/arrow/pull/12464>"
        }
    ]
}