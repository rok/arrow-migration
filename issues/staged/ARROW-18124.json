{
    "issue": {
        "title": "[Python] Support converting to non-nano datetime64 for pandas >= 2.0",
        "body": "***Note**: This issue was originally created as [ARROW-18124](https://issues.apache.org/jira/browse/ARROW-18124). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nPandas is adding capabilities to store non-nanosecond datetime64 data. At the moment, we however always do convert to nanosecond, regardless of the timestamp resolution of the arrow table (and regardless of the pandas metadata).\r\n\r\nUsing the development version of pandas:\r\n\r\n```Java\n\r\nIn [1]: df = pd.DataFrame({\"col\": np.arange(\"2012-01-01\", 10, dtype=\"datetime64[s]\")})\r\n\r\nIn [2]: df.dtypes\r\nOut[2]: \r\ncol    datetime64[s]\r\ndtype: object\r\n\r\nIn [3]: table = pa.table(df)\r\n\r\nIn [4]: table.schema\r\nOut[4]: \r\ncol: timestamp[s]\r\n-- schema metadata --\r\npandas: '{\"index_columns\": [{\"kind\": \"range\", \"name\": null, \"start\": 0, \"' + 423\r\n\r\nIn [6]: table.to_pandas().dtypes\r\nOut[6]: \r\ncol    datetime64[ns]\r\ndtype: object\r\n```\r\n\r\nThis is because we have a `coerce_temporal_nanoseconds` conversion option which we hardcode to True (for top-level columns, we hardcode it to False for nested data). \r\n\r\nWhen users have pandas >= 2, we should support converting with preserving the resolution. We should certainly do so if the pandas metadata indicates which resolution was originally used (to ensure correct roundtrip). \r\nWe _could_ (and at some point also _should_) also do that by default if there is no pandas metadata (but maybe only later depending on how stable this new feature is in pandas, as it is potentially a breaking change for our users if you use eg pyarrow to read a parquet file).",
        "created_at": "2022-10-21T11:26:48.000Z",
        "updated_at": "2022-10-21T11:27:07.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}