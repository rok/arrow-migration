{
    "issue": {
        "title": "[C++]\u00a0Provide a variant of AppendValues that takes bytemaps for the nullability",
        "body": "***Note**: This issue was originally created as [ARROW-2487](https://issues.apache.org/jira/browse/ARROW-2487). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nInstead of only accepting bitmaps, we should provide users with a variant of `AppendValues` that can work on bytemaps.",
        "created_at": "2018-04-21T13:48:19.000Z",
        "updated_at": "2019-03-08T00:39:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-03-08T00:39:39.000Z"
    },
    "comments": [
        {
            "created_at": "2018-04-23T00:42:01.836Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2487?focusedCommentId=16447439) by Kouhei Sutou (kou):*\nThere is already one use case.\r\n\r\nC GLib bindings use `gboolean` for boolean value. `bool` in C99 is 1byte. So we can use `bool` value for the current `valid_bytes`. But `gboolean` isn't 1byte. It uses `int` (\\*1) as the real type.\r\n\r\n(\\*1) https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean\r\n\r\nIf `AppendValues` accepts `const int*` for `valid_bytes`, we can remove type conversion (`gboolean` -> `uint8_t`) from C GLib bindings."
        },
        {
            "created_at": "2018-11-19T19:43:07.864Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2487?focusedCommentId=16692162) by Wes McKinney (wesm):*\nIs this still an issue? We have AppendValues methods that accepts a byte vector argument for the validity markers"
        },
        {
            "created_at": "2018-11-24T12:46:15.643Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2487?focusedCommentId=16697788) by Kouhei Sutou (kou):*\nI think that we can close this.\r\nWe need `AppendValues(const value_type* values, int64_t length, const int32_t* valid_bytes = NULLPTR)` for my use case. But it's not suitable to handle in this issue. Because existing `AppendValues()` variants already accept bytemap. They just don't accept 4bytemap."
        }
    ]
}