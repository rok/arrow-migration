{
    "issue": {
        "title": "[C++/Doc] The IsIn kernel ignores the skip_nulls option of SetLookupOptions",
        "body": "***Note**: This issue was originally created as [ARROW-10663](https://issues.apache.org/jira/browse/ARROW-10663). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe C++ docs of `SetLookupOptions` has this explanation of the `skip_nulls` option:\r\n\r\n```Java\n\r\n  /// Whether nulls in `value_set` count for lookup.\r\n  ///\r\n  /// If true, any null in `value_set` is ignored and nulls in the input\r\n  /// produce null (IndexIn) or false (IsIn) values in the output.\r\n  /// If false, any null in `value_set` is successfully matched in\r\n  /// the input.\r\n  bool skip_nulls;\r\n```\r\n\r\n(from https://github.com/apache/arrow/blob/8b9f6b9d28b4524724e60fac589fb1a3552a32b4/cpp/src/arrow/compute/api_scalar.h#L78-L84)\r\n\r\nHowever, for `IsIn` this explanation doesn't seem to hold in practice:\r\n\r\n```Java\n\r\nIn [16]: arr = pa.array([1, 2, None])\r\n\r\nIn [17]: pc.is_in(arr, value_set=pa.array([1, None]), skip_null=True)\r\nOut[17]: \r\n<pyarrow.lib.BooleanArray object at 0x7fcf666f9408>\r\n[\r\n  true,\r\n  false,\r\n  true\r\n]\r\n\r\nIn [18]: pc.is_in(arr, value_set=pa.array([1, None]), skip_null=False)\r\nOut[18]: \r\n<pyarrow.lib.BooleanArray object at 0x7fcf666b13a8>\r\n[\r\n  true,\r\n  false,\r\n  true\r\n]\r\n```\r\n\r\nThis documentation was added in https://github.com/apache/arrow/pull/7695 (ARROW-8989)/\r\n.\r\n\r\nBTW, for \"index_in\", it works as documented:\r\n\r\n```Java\n\r\nIn [19]: pc.index_in(arr, value_set=pa.array([1, None]), skip_null=True)\r\nOut[19]: \r\n<pyarrow.lib.Int32Array object at 0x7fcf666f04c8>\r\n[\r\n  0,\r\n  null,\r\n  null\r\n]\r\n\r\nIn [20]: pc.index_in(arr, value_set=pa.array([1, None]), skip_null=False)\r\nOut[20]: \r\n<pyarrow.lib.Int32Array object at 0x7fcf666f0ee8>\r\n[\r\n  0,\r\n  null,\r\n  1\r\n]\r\n```",
        "created_at": "2020-11-20T10:44:21.000Z",
        "updated_at": "2021-01-12T17:50:26.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-01-12T17:50:15.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-20T10:57:15.053Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10663?focusedCommentId=17236064) by Joris Van den Bossche (jorisvandenbossche):*\nThe original PR adding it seems to have documented a different behaviour at the time (https://github.com/apache/arrow/pull/4235/files#diff-fc156499f9e4a75e0ef2d7e83b390f68e833cfa46c164cd0b4542af10a0337e2R35-R36) (\"If null occurs in left, if null count in right is not 0, it returns true, else returns null.\").\r\n\r\n~~But what I don't understand is that this still seems to be tested that way for the `IsIn` function:~~ https://github.com/apache/arrow/blob/8b9f6b9d28b4524724e60fac589fb1a3552a32b4/cpp/src/arrow/compute/kernels/scalar_set_lookup_test.cc#L107-L111 \r\nCorrection: the test I linked to was for only nulls in the left array, and so that's also how it works in Python (my example above is about nulls in both left and right array).\r\n\r\nSo in summary:\r\n\r\n- The _default_ behaviour is to return True for nulls if a null is also present in the right array, and otherwise to return null. So the doc comment in `api_scalar.h` is wrong about returning False when nulls in the right are not considered (skipped or not present).\n- In addition, the keyword itself is still ignored (I suppose it was only implemented for IndexIn, not IsIn)"
        },
        {
            "created_at": "2021-01-12T17:50:15.371Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10663?focusedCommentId=17263559) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 9164\n<https://github.com/apache/arrow/pull/9164>"
        }
    ]
}