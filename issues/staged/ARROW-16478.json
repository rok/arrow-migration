{
    "issue": {
        "title": "[C++] cpu_info.cc fails clang-12 debug build on Arm",
        "body": "***Note**: This issue was originally created as [ARROW-16478](https://issues.apache.org/jira/browse/ARROW-16478). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```bash\n\r\n../src/arrow/util/cpu_info.cc:124:13: error: implicit conversion loses integer precision: '__ssize_t' (aka 'long') to 'int' [-Werror,-Wshorten-64-to-32]\r\n  int res = getline(&content, &file_len, cache_file);\r\n      ~~~   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\n\r\nNot a blocking issue IMO.\r\nLooks there are more code needs refine in cpu_info.cc.",
        "created_at": "2022-05-05T07:22:33.000Z",
        "updated_at": "2022-05-18T09:41:55.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-05-18T02:10:45.000Z"
    },
    "comments": [
        {
            "created_at": "2022-05-05T07:30:24.348Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16478?focusedCommentId=17532112) by Yibo Cai (yibocai):*\nThe code only runs on Arm.\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/util/cpu_info.cc#L124"
        },
        {
            "created_at": "2022-05-05T07:32:30.317Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16478?focusedCommentId=17532113) by Antoine Pitrou (apitrou):*\nLong term, `cpu_info.cc` would benefit from a cleanup. We could perhaps even base ourselves on a vendored library for CPU detection, assuming we find a lightweight one."
        },
        {
            "created_at": "2022-05-09T09:38:07.814Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16478?focusedCommentId=17533721) by Yibo Cai (yibocai):*\ncpuinfo from pytoch looks a good implementation, https://github.com/pytorch/cpuinfo.\r\n\r\nThe code is non-trivial. It's indeed very hard to write a robust cpu info detection library due to the complexity of `OS x Arch x Compiler`.\r\n\r\n**cpuinfo output on x86_64, Linux**\r\n```bash\n\r\n$ ./cpu-info\r\nPackages:\r\n        0: Intel Xeon Gold 5218\r\nMicroarchitectures:\r\n        32x Sky Lake\r\nCores:\r\n        0: 1 processor (0), Intel Sky Lake\r\n        ......\r\n\r\n$ ./cache-info\r\nMax cache size (upper bound): 23068672 bytes\r\nL1 instruction cache: 32 x 32 KB, 8-way set associative (64 sets), 64 byte lines, shared by 1 processors\r\nL1 data cache: 32 x 32 KB, 8-way set associative (64 sets), 64 byte lines, shared by 1 processors\r\nL2 unified cache: 32 x 1 MB (exclusive), 16-way set associative (1024 sets), 64 byte lines, shared by 1 processors\r\nL3 unified cache: 2 x 22 MB (exclusive), 11-way set associative (32768 sets, complex indexing), 64 byte lines, shared by 16 processors\r\n\r\n$ ./isa-info\r\nScalar instructions:\r\n        LAHF/SAHF: yes\r\n        LZCNT: yes\r\n        POPCNT: yes\r\n        TBM: no\r\n        BMI: yes\r\n        BMI2: yes\r\n        ADCX/ADOX: yes\r\nMemory instructions:\r\n        MOVBE: yes\r\n        PREFETCH: no\r\n        PREFETCHW: yes\r\n        PREFETCHWT1: no\r\n        CLZERO: no\r\nSIMD extensions:\r\n        MMX: yes\r\n        MMX+: yes\r\n        3dnow!: no\r\n        3dnow!+: no\r\n        3dnow! Geode: no\r\n        DAZ: yes\r\n        SSE: yes\r\n        SSE2: yes\r\n        SSE3: yes\r\n        SSSE3: yes\r\n        SSE4.1: yes\r\n        SSE4.2: yes\r\n        SSE4a: no\r\n        Misaligned SSE: no\r\n        AVX: yes\r\n        FMA3: yes\r\n        FMA4: no\r\n        XOP: no\r\n        F16C: yes\r\n        AVX2: yes\r\n        AVX512F: yes\r\n        AVX512PF: no\r\n        AVX512ER: no\r\n        AVX512CD: yes\r\n        AVX512DQ: yes\r\n        AVX512BW: yes\r\n        AVX512VL: yes\r\n        AVX512IFMA: no\r\n        AVX512VBMI: no\r\n        AVX512VBMI2: no\r\n        AVX512BITALG: no\r\n        AVX512VPOPCNTDQ: no\r\n        AVX512VNNI: yes\r\n        AVX512BF16: no\r\n        AVX512VP2INTERSECT: no\r\n        AVX512_4VNNIW: no\r\n        AVX512_4FMAPS: no\r\nMulti-threading extensions:\r\n        MONITOR/MWAIT: yes\r\n        MONITORX/MWAITX: no\r\n        CMPXCHG16B: yes\r\n        HLE: no\r\n        RTM: no\r\n        XTEST: no\r\n        RDPID: no\r\nCryptography extensions:\r\n        AES: yes\r\n        VAES: no\r\n        PCLMULQDQ: yes\r\n        VPCLMULQDQ: no\r\n        GFNI: no\r\n        RDRAND: yes\r\n        RDSEED: yes\r\n        SHA: no\r\nProfiling instructions:\r\n        RDTSCP: yes\r\n        MPX: yes\r\nSystem instructions:\r\n        CLWB: yes\r\n        FXSAVE/FXSTOR: yes\r\n        XSAVE/XSTOR: yes\r\n```"
        },
        {
            "created_at": "2022-05-09T09:39:26.621Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16478?focusedCommentId=17533722) by Yibo Cai (yibocai):*\n**cpuinfo ouput on Apple M1, macOS**\r\n```bash\n\r\n$ ./cpu-info\r\nPackages:\r\n\t0:\r\nMicroarchitectures:\r\n\t4x Firestorm\r\n\t4x Icestorm\r\nCores:\r\n\t0: 1 processor (0), Apple Firestorm\r\n\t1: 1 processor (1), Apple Firestorm\r\n\t2: 1 processor (2), Apple Firestorm\r\n\t3: 1 processor (3), Apple Firestorm\r\n\t4: 1 processor (4), Apple Icestorm\r\n\t5: 1 processor (5), Apple Icestorm\r\n\t6: 1 processor (6), Apple Icestorm\r\n\t7: 1 processor (7), Apple Icestorm\r\n\r\n$ ./cache-info\r\nMax cache size (upper bound): 4194304 bytes\r\nL1 instruction cache: 8 x 128 KB, 4-way set associative (256 sets), 128 byte lines, shared by 1 processors\r\nL1 data cache: 8 x 64 KB, 4-way set associative (128 sets), 128 byte lines, shared by 1 processors\r\nL2 data cache: 4 MB (exclusive), 8-way set associative (4096 sets), 128 byte lines, shared by 8 processors\r\n\r\n$ ./isa-info\r\nInstruction sets:\r\n\tARM v8.1 atomics: yes\r\n\tARM v8.1 SQRDMLxH: no\r\n\tARM v8.2 FP16 arithmetics: yes\r\n\tARM v8.2 BF16: no\r\n\tARM v8.3 dot product: yes\r\n\tARM v8.3 JS conversion: no\r\n\tARM v8.3 complex: no\r\nSIMD extensions:\r\n\tARM SVE: no\r\n\tARM SVE BF16: no\r\n\tARM SVE 2: no\r\nCryptography extensions:\r\n\tAES: yes\r\n\tSHA1: yes\r\n\tSHA2: yes\r\n\tPMULL: yes\r\n\tCRC32: yes\r\n```\r\n"
        },
        {
            "created_at": "2022-05-09T09:42:54.480Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16478?focusedCommentId=17533724) by Yibo Cai (yibocai):*\n**cpuinfo output on Arm64, Linux**\r\n```bash\n\r\n$ ./cpu-info\r\nPackages:\r\n        0: Unknown\r\nMicroarchitectures:\r\n        80x Neoverse-N1\r\nCores:\r\n        0: 1 processor (0), ARM Neoverse-N1\r\n        ......\r\n\r\n$ ./cache-info\r\nMax cache size (upper bound): 4194304 bytes\r\nL1 instruction cache: 80 x 64 KB, 4-way set associative (256 sets), 64 byte lines, shared by 1 processors\r\nL1 data cache: 80 x 64 KB, 4-way set associative (256 sets), 64 byte lines, shared by 1 processors\r\nL2 data cache: 256 KB (inclusive), 8-way set associative (512 sets), 64 byte lines, shared by 80 processors\r\n\r\n$ ./isa-info\r\nInstruction sets:\r\n        ARM v8.1 atomics: yes\r\n        ARM v8.1 SQRDMLxH: yes\r\n        ARM v8.2 FP16 arithmetics: yes\r\n        ARM v8.2 BF16: no\r\n        ARM v8.3 dot product: yes\r\n        ARM v8.3 JS conversion: no\r\n        ARM v8.3 complex: no\r\nSIMD extensions:\r\n        ARM SVE: no\r\n        ARM SVE BF16: no\r\n        ARM SVE 2: no\r\nCryptography extensions:\r\n        AES: yes\r\n        SHA1: yes\r\n        SHA2: yes\r\n        PMULL: yes\r\n        CRC32: yes\r\n```"
        },
        {
            "created_at": "2022-05-18T02:10:45.746Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16478?focusedCommentId=17538543) by Yibo Cai (yibocai):*\nIssue resolved by pull request 13112\n<https://github.com/apache/arrow/pull/13112>"
        }
    ]
}