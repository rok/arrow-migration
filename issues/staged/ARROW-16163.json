{
    "issue": {
        "title": "[Go] IPC FileReader leaks memory when used with ZSTD compression",
        "body": "***Note**: This issue was originally created as [ARROW-16163](https://issues.apache.org/jira/browse/ARROW-16163). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'll submit a PR :)\r\n\r\n\u00a0\r\n\r\nWhen using the IPC Reader to read data compressed in zstd, we observed what looked like a memory leak.\r\n\r\nAfter further debugging, we observed that calling the IPC Reader created goroutines that were never stopped, and consumed memory.\r\n\r\n\u00a0\r\n\r\nAfter deeper investigation, we found the following root cause:\r\n\r\n\u00a0\r\n\r\nIn arrow/ipc/file_reader.go, the newRecord function calls getDecompressor, that returns a zstd.Decoder object.\r\n\r\n\u00a0\r\n\r\nWhen used in its stream version (calling .Read()), this decoder makes use of a Goroutine with a channel to receive input. This channel is closed by the decoder's .Close() function, which ends the Goroutine and therefore the collection of its memory by the GC.\r\n\r\n\u00a0\r\n\r\nAfter using the zstd Decoder, the IPC FileReader should close it to prevent the leak.",
        "created_at": "2022-04-11T14:05:03.000Z",
        "updated_at": "2022-04-19T12:59:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Go",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-04-13T17:15:50.000Z"
    },
    "comments": [
        {
            "created_at": "2022-04-13T17:15:50.814Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16163?focusedCommentId=17521837) by Matthew Topol (zeroshade):*\nIssue resolved by pull request 12857\n<https://github.com/apache/arrow/pull/12857>"
        }
    ]
}