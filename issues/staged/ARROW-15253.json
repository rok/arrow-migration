{
    "issue": {
        "title": "[Python] Error in to_pandas for empty dataframe with pd.interval_range index",
        "body": "***Note**: This issue was originally created as [ARROW-15253](https://issues.apache.org/jira/browse/ARROW-15253). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn __table_to_blocks_ ([pandas_compat.py](https://github.com/apache/arrow/blob/08096d4125fcbfe43ecf48614a15f1205cd4e8f3/python/pyarrow/pandas_compat.py#L1130-L1138)) the input _extension_columns_ is equal to {None: interval[int64, right]} for _pd.interval_range_ and so an error is triggered as None can not be encoded. Same happens for _pd.PeriodIndex_.\r\n\r\nExample:\r\n\r\n```python\n\r\nimport pandas as pd\r\nimport pyarrow as pa\r\n\r\ndf = pd.DataFrame(index=pd.interval_range(start=0, end=5))\r\ntable = pa.table(df)\r\ntable.to_pandas()\r\n```\r\n\r\nError:\r\n\r\n\r\n```java\n\r\nTypeError                                 Traceback (most recent call last)\r\n/var/folders/gw/q7wqd4tx18n_9t4kbkd0bj1m0000gn/T/ipykernel_13963/1439451337.py in <module>\r\n      1 df5 = pd.DataFrame(index=pd.PeriodIndex(year=[2000, 2002], quarter=[1, 3]))\r\n      2 table5 = pa.table(df5)\r\n----> 3 table5.to_pandas().shape\r\n\r\n~/repos/arrow/python/pyarrow/array.pxi in pyarrow.lib._PandasConvertible.to_pandas()\r\n    764             self_destruct=self_destruct\r\n    765         )\r\n--> 766         return self._to_pandas(options, categories=categories,\r\n    767                                ignore_metadata=ignore_metadata,\r\n    768                                types_mapper=types_mapper)\r\n\r\n~/repos/arrow/python/pyarrow/table.pxi in pyarrow.lib.Table._to_pandas()\r\n   1819                    types_mapper=None):\r\n   1820         from pyarrow.pandas_compat import table_to_blockmanager\r\n-> 1821         mgr = table_to_blockmanager(\r\n   1822             options, self, categories,\r\n   1823             ignore_metadata=ignore_metadata,\r\n\r\n~/repos/arrow/python/pyarrow/pandas_compat.py in table_to_blockmanager(options, table, categories, ignore_metadata, types_mapper)\r\n    787     _check_data_column_metadata_consistency(all_columns)\r\n    788     columns = _deserialize_column_index(table, all_columns, column_indexes)\r\n--> 789     blocks = _table_to_blocks(options, table, categories, ext_columns_dtypes)\r\n    790 \r\n    791     axes = [columns, index]\r\n\r\n~/repos/arrow/python/pyarrow/pandas_compat.py in _table_to_blocks(options, block_table, categories, extension_columns)\r\n   1133     # Convert an arrow table to Block from the internal pandas API\r\n   1134     columns = block_table.column_names\r\n-> 1135     result = pa.lib.table_to_blocks(options, block_table, categories,\r\n   1136                                     list(extension_columns.keys()))\r\n   1137     return [_reconstruct_block(item, columns, extension_columns)\r\n\r\n~/repos/arrow/python/pyarrow/table.pxi in pyarrow.lib.table_to_blocks()\r\n   1215         c_options.categorical_columns = {tobytes(cat) for cat in categories}\r\n   1216     if extension_columns is not None:\r\n-> 1217         c_options.extension_columns = {tobytes(col)\r\n   1218                                        for col in extension_columns}\r\n   1219 \r\n\r\n~/repos/arrow/python/pyarrow/lib.cpython-39-darwin.so in set.from_py.__pyx_convert_unordered_set_from_py_std_3a__3a_string()\r\n\r\n~/repos/arrow/python/pyarrow/lib.cpython-39-darwin.so in string.from_py.__pyx_convert_string_from_py_std__in_string()\r\n\r\nTypeError: expected bytes, NoneType found\r\n```\r\n",
        "created_at": "2022-01-05T10:41:43.000Z",
        "updated_at": "2022-02-10T16:10:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-02-03T10:56:34.000Z"
    },
    "comments": [
        {
            "created_at": "2022-01-05T11:32:20.670Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15253?focusedCommentId=17469223) by Alenka Frim (alenka):*\nPandas metadata for the\u00a0_pd.interval_range_\u00a0differs from, for example, metadata for the {_}pd.RangeIndex{_}. From this metadata\u00a0_extension_columns_ is constructed.\r\n\r\nExample:\r\n```python\n\r\n>>> df = pd.DataFrame(index=pd.interval_range(start=0, end=5))\r\n>>> table = pa.table(df)\r\n>>> table.schema.pandas_metadata[\"columns\"]\r\n[{'name': None, 'field_name': '__index_level_0__', 'pandas_type': 'object', 'numpy_type': 'interval[int64, right]', 'metadata': None}]\r\n```\r\n```python\n\r\n>>> df = pd.DataFrame(index=pd.RangeIndex(0, 10, 1))\r\n>>> table = pa.table(df)\r\n>>> table.schema.pandas_metadata[\"columns\"]\r\n[]\r\n```\r\nThe solution could be to add a check for empty tables (None for 'name' key) and then _all_columns_ could be set to [] (empty) and _extension_columns_ would be of value {} thus the error would not be triggered."
        },
        {
            "created_at": "2022-01-14T18:34:39.602Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15253?focusedCommentId=17476338) by Alenka Frim (alenka):*\nQuestion: how could I check for `ArrowIntervalType` of an Array as it is a Pandas extension?\r\n\r\nI get this type when I make a correction for the interval index if the dataframe is empty and the result is not nice:\r\n```python\n\r\n>>> df = pd.DataFrame(index=pd.interval_range(start=0, end=5))\r\n>>> table = pa.table(df)\r\n>>> table.to_pandas()\r\nEmpty DataFrame\r\nColumns: []\r\nIndex: [{'left': 0, 'right': 1}, {'left': 1, 'right': 2}, {'left': 2, 'right': 3}, {'left': 3, 'right': 4}, {'left': 4, 'right': 5}]\r\n>>> df\r\nEmpty DataFrame\r\nColumns: []\r\nIndex: [(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]]\r\n>>> table\r\n```\r\nBecause the table for the index (inside of `_reconstruct_index` in the `table_to_blockmanager`) becomes:\r\n```python\n\r\n<pyarrow.lib.ChunkedArray object at 0x119da0ae0>\r\n[\r\n  -- is_valid: all not null\r\n  -- child 0 type: int64\r\n    [\r\n      0,\r\n      1,\r\n      2,\r\n      3,\r\n      4\r\n    ]\r\n  -- child 1 type: int64\r\n    [\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      5\r\n    ]\r\n]\r\n```\r\nof type:\r\n```python\n\r\nArrowIntervalType(StructType(struct<left: int64, right: int64>))\r\n```\r\nWhen it gets converted to Pandas it is not what I would want and I would like to catch it to be able to change it:\r\n```python\n\r\n0    {'left': 0, 'right': 1}\r\n1    {'left': 1, 'right': 2}\r\n2    {'left': 2, 'right': 3}\r\n3    {'left': 3, 'right': 4}\r\n4    {'left': 4, 'right': 5}\r\n```\r\nIt's hard to explain, hope it makes sense."
        },
        {
            "created_at": "2022-02-03T10:56:34.104Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15253?focusedCommentId=17486374) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 12300\n<https://github.com/apache/arrow/pull/12300>"
        }
    ]
}