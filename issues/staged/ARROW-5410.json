{
    "issue": {
        "title": "[C++] Crash at arrow::internal::FileWrite",
        "body": "***Note**: This issue was originally created as [ARROW-5410](https://issues.apache.org/jira/browse/ARROW-5410). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nMy application\u00a0is writing a bunch of parquet files and it often crashes. Most of the time it crashes when writing the first file, sometimes it can write the first file and crashing at the 2nd file. The file can always be opened. It only crashes at writeTable.\r\n\r\nAs I tested, my application crashes when build with release mode, but don't crash with debug mode. It crashed only on one Windows machine, not others.\r\n\r\nHere is stack trace from dump file:\r\n```java\n\r\nSTACK_TEXT:  \r\n0000001e`10efd840 00007ffc`0333d53f : 00000000`00000000 0000001e`10efe230 00000000`00000033 00007ffc`032dbe21 : CortexSync!google_breakpad::ExceptionHandler::HandleInvalidParameter+0x1a0\r\n0000001e`10efe170 00007ffc`0333d559 : 00000000`ffffff02 00007ffc`032da63d 00000000`00000033 00000000`00000033 : ucrtbase!invalid_parameter+0x13f\r\n0000001e`10efe1b0 00007ffc`03318664 : 00007ff7`7f7c8489 00000000`ffffff02 0000001e`10efe230 00000000`00000033 : ucrtbase!invalid_parameter_noinfo+0x9\r\n0000001e`10efe1f0 00007ffc`032d926d : 00000000`ffffffff 00000000`00000140 00000000`00000005 00000122`bbe61e30 : ucrtbase!_acrt_uninitialize_command_line+0x6fd4\r\n0000001e`10efe250 00007ff7`7f66585e : 00000010`00000005 00000000`00000000 0000001e`10efe560 00000122`b2337b88 : ucrtbase!write+0x8d\r\n0000001e`10efe2a0 00007ff7`7f632785 : 00007ff7`00000000 00007ff7`7f7bb153 00000122`bbe890e0 0000001e`10efe634 : CortexSync!arrow::internal::FileWrite+0x5e\r\n0000001e`10efe360 00007ff7`7f632442 : 00000000`0000348a 00000000`00000004 0000733f`5e86f38c 00000122`bbe14c40 : CortexSync!arrow::io::OSFile::Write+0x1d5\r\n0000001e`10efe510 00007ff7`7f71c1b9 : 0000001e`10efe738 00007ff7`7f665522 00000122`bbffe6e0 00000000`ffffffff : CortexSync!arrow::io::FileOutputStream::Write+0x12\r\n0000001e`10efe540 00007ff7`7f79cb2f : 00000122`bbe61e30 00000122`bbffe6e0 00000000`00000013 0000001e`10efe730 : CortexSync!parquet::ArrowOutputStream::Write+0x39\r\n0000001e`10efe6e0 00007ff7`7f7abbaf : 00007ff7`7fd75b78 00007ff7`7fd75b78 0000001e`10efe9c0 00000000`00000000 : CortexSync!parquet::ThriftSerializer::Serialize<parquet::format::PageHeader>+0x11f\r\n0000001e`10efe8c0 00007ff7`7f7aaf93 : 00000000`00000000 00000122`bbe3f450 00000000`00000002 00000122`bc0218d0 : CortexSync!parquet::SerializedPageWriter::WriteDictionaryPage+0x44f\r\n0000001e`10efee20 00007ff7`7f7a3707 : 00000122`bbe3f450 0000001e`10eff250 00000000`00000000 00000122`b1680000 : CortexSync!parquet::TypedColumnWriterImpl<parquet::DataType<5> >::WriteDictionaryPage+0x143\r\n0000001e`10efeed0 00007ff7`7f710480 : 0000001e`10eff1c0 00000000`00000000 00000122`bbe3f540 00000122`b2439998 : CortexSync!parquet::ColumnWriterImpl::Close+0x47\r\n0000001e`10efef60 00007ff7`7f7154da : 00000122`bbec3cd0 0000001e`10eff1c0 00000122`bbec4bb0 00000122`b2439998 : CortexSync!parquet::arrow::FileWriter::Impl::`vector deleting destructor'+0x100\r\n0000001e`10efefa0 00007ff7`7f71619c : 00000000`00000000 0000001e`10eff1c0 00000122`bbe89390 00000000`00000000 : CortexSync!parquet::arrow::FileWriter::Impl::WriteColumnChunk+0x6fa\r\n0000001e`10eff150 00007ff7`7f202de9 : 00000000`00000001 0000001e`10eff430 00000000`0000000f 00000000`00000000 : CortexSync!parquet::arrow::FileWriter::WriteTable+0x6cc\r\n0000001e`10eff410 00007ff7`7f18baf3 : 00000122`bbec39b0 00000122`b24c53f8 00000000`3f800000 00000000`00000000 : CortexSync!Cortex::Storage::ParquetStreamWriter::writeRowGroup+0x49\n```\r\nI tried a lot of ways to find out the root cause, but failed. Can anyone here give me some information/advice please, so that I can investigate more? Thanks!",
        "created_at": "2019-05-24T04:25:30.000Z",
        "updated_at": "2019-07-25T07:48:44.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-07-02T10:29:24.000Z"
    },
    "comments": [
        {
            "created_at": "2019-05-24T09:08:18.655Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847375) by Uwe Korn (uwe):*\nCan you share code to reproduce this crash?"
        },
        {
            "created_at": "2019-05-24T09:09:21.818Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847376) by Antoine Pitrou (apitrou):*\nAlso, do you compile Arrow from source? I would suggest printing out the parameters and local variables inside FileWrite() as a means to diagnose the crash."
        },
        {
            "created_at": "2019-05-24T09:29:29.377Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847394) by Tham (thamha):*\nMy application running as Windows service, I cannot output to console to see. I see arrow use glog but I still don't have time to figure out how to use it in arrow :(\u00a0I will try to log it and see. Any suggestion?"
        },
        {
            "created_at": "2019-05-24T09:34:49.261Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847399) by Antoine Pitrou (apitrou):*\nAlso, how is the file object created? Do you instantiate a `FileOutputStream` yourself? Something else? Do you close it at some point?"
        },
        {
            "created_at": "2019-05-24T09:49:15.327Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847416) by Tham (thamha):*\nUhm, I try to run my application as normal app. here is the result:\r\n```java\n\r\nbefore while: nbytes: 51\r\nin while: nbytes: 51 chunksize: 51 bytes_written: 0\r\nInvalid parameter detected in function (null). File: (null) Line: 0\r\nExpression: (null)\r\n```\r\nI also added DCHECK(buffer != nullptr) and it passes."
        },
        {
            "created_at": "2019-05-24T09:52:09.446Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847418) by Antoine Pitrou (apitrou):*\nDCHECK is optimized away in release (optimized) builds. You can print out the pointer value easily (use the \"%p\" specifier with printf(), for example).\r\n\r\n\u00a0"
        },
        {
            "created_at": "2019-05-24T09:52:50.330Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847419) by Tham (thamha):*\nSorry I cannot share all the code. Here is the code I used to create file object:\r\n```java\n\r\nstd::shared_ptr<arrow::io::OutputStream> outStream;\r\narrow::Status err = arrow::io::FileOutputStream::Open(filePath, false, &outStream); // returns OK\n```"
        },
        {
            "created_at": "2019-05-24T09:59:12.200Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847427) by Tham (thamha):*\nUpdated:\r\n```java\n\r\nbuffer: 0000017770FAA7A0\r\nbefore while: nbytes: 51\r\nin while: nbytes: 51 chunksize: 51 bytes_written: 0\r\nInvalid parameter detected in function (null). File: (null) Line: 0\r\nExpression: (null)\n```"
        },
        {
            "created_at": "2019-05-24T09:59:16.052Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847428) by Antoine Pitrou (apitrou):*\nThanks. Please make sure you don't close the OutputStream before you have finished writing to it. Arrow doesn't check for it (though we will add checks in the next version)."
        },
        {
            "created_at": "2019-05-24T10:21:43.605Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847446) by Tham (thamha):*\nI can assure. I run open() -> write data -> close() in one function synchronously. So we can eliminate that case."
        },
        {
            "created_at": "2019-05-24T10:26:58.759Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847451) by Tham (thamha):*\nI just get a crash from customer machine (same windows version as mine), but the stack trace is a little bit different:\r\n```java\n\r\nSTACK_TEXT:  \r\n00000048`978fd660 00007ffe`6f35d5df : 00000000`00000000 00000048`978fe050 00000000`00000033 00007ffe`6f2fa971 : CortexSync!google_breakpad::ExceptionHandler::HandleInvalidParameter+0x1a0\r\n00000048`978fdf90 00007ffe`6f35d5f9 : 00000000`ffffff02 00007ffe`6f2f874d 00000000`00000033 00000000`00000033 : ucrtbase!invalid_parameter+0x13f\r\n00000048`978fdfd0 00007ffe`6f3378fc : 00007ff7`1838ca59 00000000`ffffff02 00000048`978fe050 00000000`00000033 : ucrtbase!invalid_parameter_noinfo+0x9\r\n00000048`978fe010 00007ffe`6f2f78dd : 00000000`ffffffff 00000000`00000100 00000000`00000004 00000206`853e8310 : ucrtbase!_write_nolock+0x3ffd8\r\n00000048`978fe070 00007ff7`18261b7e : 00000010`00000004 00000000`00000000 00000048`978fe380 00000206`85110558 : ucrtbase!_write+0x8d\r\n00000048`978fe0c0 00007ff7`181bd695 : 00007ff7`00000000 00007ff7`1837f723 00000206`885d2870 00000048`978fe454 : CortexSync!arrow::internal::FileWrite+0x5e\r\n00000048`978fe180 00007ff7`181bd352 : 00000000`0000a536 00000000`00000004 00001a6e`d8f76f44 00000206`84ef7fc0 : CortexSync!arrow::io::OSFile::Write+0x1d5\r\n00000048`978fe330 00007ff7`180eec09 : 00000048`978fe558 00007ff7`18261842 00000206`85164850 00000000`ffffffff : CortexSync!arrow::io::FileOutputStream::Write+0x12\r\n00000048`978fe360 00007ff7`1816f58f : 00000206`853e8310 00000206`85164850 00000000`00000013 00000048`978fe550 : CortexSync!parquet::ArrowOutputStream::Write+0x39\r\n00000048`978fe500 00007ff7`1817e60f : 00007ff7`18831388 00007ff7`18831388 00000048`978fe7e0 00000000`00000000 : CortexSync!parquet::ThriftSerializer::Serialize<parquet::format::PageHeader>+0x11f\r\n00000048`978fe6e0 00007ff7`1817d9f3 : 00000000`00000000 00000206`850e6410 00000000`00000002 00000206`8864c380 : CortexSync!parquet::SerializedPageWriter::WriteDictionaryPage+0x44f\r\n00000048`978fec40 00007ff7`18176167 : 00000206`850e6410 00000048`978ff070 00000000`00000000 00000000`00000008 : CortexSync!parquet::TypedColumnWriterImpl<parquet::DataType<5> >::WriteDictionaryPage+0x143\r\n00000048`978fecf0 00007ff7`180e2e10 : 00000048`978fefe0 00000000`00000000 00000206`850e6500 00000206`850fad48 : CortexSync!parquet::ColumnWriterImpl::Close+0x47\r\n00000048`978fed80 00007ff7`180e7e6a : 00000206`8516ad50 00000048`978fefe0 00000206`885caf00 00000206`850fad48 : CortexSync!arrow::Schema::`vector deleting destructor'+0xd0\r\n00000048`978fedc0 00007ff7`180e8b2c : 00000000`00000000 00000048`978fefe0 00000206`885d2fa0 00000000`00000000 : CortexSync!parquet::arrow::FileWriter::Impl::WriteColumnChunk+0x6fa\r\n00000048`978fef70 00007ff7`17cc2689 : 00000000`00000001 00000048`978ff250 00000000`0000000f 00000000`00000000 : CortexSync!parquet::arrow::FileWriter::WriteTable+0x6cc\r\n00000048`978ff230 00007ff7`17c4b523 : 00000206`8510b670 00000000`ffffffff 00000206`3f800000 00000000`00000000 : CortexSync!Cortex::Storage::ParquetStreamWriter::writeRowGroup+0x49\r\n```"
        },
        {
            "created_at": "2019-05-24T11:05:40.722Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847470) by Antoine Pitrou (apitrou):*\nCan you try to write a standalone reproducer?"
        },
        {
            "created_at": "2019-05-24T11:35:57.559Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847480) by Tham (thamha):*\nI have tried just before your comment, but unfortunately the standalone reproducer doesn't crash :("
        },
        {
            "created_at": "2019-05-24T11:49:43.116Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16847488) by Antoine Pitrou (apitrou):*\nWhat I would do in that case is try to progressively reduce the crashing example by removing code piecewise, and see at what point removing a piece of code stops the crashes from occurring."
        },
        {
            "created_at": "2019-07-01T10:26:57.326Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876085) by Tham (thamha):*\n`[~pitrou]` \u00a0Maybe the problem come earlier when opening file, not when writing table data into file. As I add a log before _wsopen_s:\r\n\r\n\u00a0\r\n```java\n\r\nstd::cout << \"before _wsopen_s() --> oflag:\" << oflag << std::endl;\r\nerrno_actual = _wsopen_s(fd, file_name.ToNative().c_str(), oflag, _SH_DENYNO, pmode);\n```\r\nThe output of oflag is not the same (I'm sure that I have the same config on my code):\r\n\r\n\u00a0\r\n```java\n\r\nbefore _wsopen_s() --> oflag:99209\r\nbefore _wsopen_s() --> oflag:103305\r\nbefore _wsopen_s() --> oflag:107401\r\nbefore _wsopen_s() --> oflag:111497\r\nbefore _wsopen_s() --> oflag:115593\r\nbefore _wsopen_s() --> oflag:119689\r\n...\r\nbefore _wsopen_s() --> oflag:131977\u00a0 --> write into file will crash after that\r\n```\r\n\u00a0\r\n\r\nThere numbers have step of 4096???\r\n\r\nI wanted to know which steps make oflag is like this, then I added more logs, then oflag is always the same and is exactly below:\r\n\r\n\u00a0\r\n```java\n\r\nafter truncate --> oflag:33664\r\nafter append --> oflag:33672\r\nafter write_only --> oflag:33673\r\nbefore _wsopen_s() --> oflag:33673\r\n```\r\n\u00a0\r\n\r\nIt seems add more logs affects to results. I has still been investigating, but do you have any idea why?"
        },
        {
            "created_at": "2019-07-01T11:12:05.572Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876113) by Antoine Pitrou (apitrou):*\n> It seems add more logs affects to results. I has still been investigating, but do you have any idea why?\r\n\r\nThere's no reason why. The oflag computation is very simple and depends only on local variables...\r\n\r\nDo you use a \"normal\" toolchain for compiling? i.e. Visual Studio? Or do you use custom proprietary tools or libraries?\r\n\r\nYou could try to disassemble the `FileOpenWritable` function."
        },
        {
            "created_at": "2019-07-02T03:05:15.396Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876625) by Tham (thamha):*\n> Do you use a \"normal\" toolchain for compiling? i.e. Visual Studio? Or do you use custom proprietary tools or libraries?\r\n\r\nI use visual studio 2017 c++ build tools to build arrow, parquet libraries. Then I link these static libraries from my qt project.\r\n\r\n>\u00a0You could try to disassemble the\u00a0`FileOpenWritable`\u00a0function.\r\n\r\nLet me try, I didn't disassemble a function before.\u00a0"
        },
        {
            "created_at": "2019-07-02T06:14:43.935Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876696) by Tham (thamha):*\n`[~pitrou]` I uploaded 2 assembly files:\r\n\r\n[io-util.asm](io-util.asm)\u00a0is the one I get the issue with oflag.\r\n\r\nI don't understand why \"shl\" is here:\r\n```java\n\r\nmov eax, ebx\r\nshl eax, 9\r\nadd eax, 33152 ; 00008180H\r\nmov ebx, eax\r\n```\r\n[io-util-add-more-log.asm](io-util-add-more-log.asm)is the one I added more logs, which I didn't get issue with oflag.\r\n\r\nSince I'm not familiar with assembly language, can you help?"
        },
        {
            "created_at": "2019-07-02T08:32:45.927Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876777) by Antoine Pitrou (apitrou):*\nAh, sorry. Can you remove the printf calls and post the disassembly again?"
        },
        {
            "created_at": "2019-07-02T08:44:01.054Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876783) by Tham (thamha):*\nSure.\u00a0[io-util-no-printf.asm](io-util-no-printf.asm)\u00a0here it is."
        },
        {
            "created_at": "2019-07-02T08:48:10.494Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876785) by Antoine Pitrou (apitrou):*\nAlso:\r\n\r\n> I use visual studio 2017 c++ build tools to build arrow, parquet libraries. Then I link these static libraries from my qt project.\r\n\r\nIs it easy for you to try using Arrow shared libraries and see what happens?\r\n"
        },
        {
            "created_at": "2019-07-02T08:53:08.178Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876787) by Antoine Pitrou (apitrou):*\nExplanation for the asm:\r\n- 33152 is probably the value of _O_CREAT | _O_BINARY | _O_NOINHERIT\n- \"shl\teax, 9\" takes the value of \"bool truncate\" and multiplies it by 512 (left-shift by 9); 512 is the value of O_TRUNC\n- \"or\tr8d, 8\" adds O_APPEND (value 8)\n  \n  I cannot say for sure, but the code does look correct..."
        },
        {
            "created_at": "2019-07-02T08:57:32.025Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876791) by Tham (thamha):*\n>\u00a0Is it easy for you to try using Arrow shared libraries and see what happens?\r\n\r\nOk, let me try."
        },
        {
            "created_at": "2019-07-02T09:33:46.109Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876818) by Tham (thamha):*\n>\u00a0Is it easy for you to try using Arrow shared libraries and see what happens?\r\n\r\nI've still got the same error. Any idea?"
        },
        {
            "created_at": "2019-07-02T09:37:08.061Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876819) by Antoine Pitrou (apitrou):*\nThat's weird. Are you using the same compiler version for Arrow and your Qt project?"
        },
        {
            "created_at": "2019-07-02T10:08:05.496Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876837) by Tham (thamha):*\n>\u00a0That's weird. Are you using the same compiler version for Arrow and your Qt project?\r\n\r\nYes, they are the same.\u00a0I've checked compiling log, the same cl.exe at path:\r\n\r\nC:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.13.26128/bin/HostX64/x64/cl.exe."
        },
        {
            "created_at": "2019-07-02T10:11:29.226Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876840) by Antoine Pitrou (apitrou):*\nLast idea: can you try passing `-DARROW_USE_STATIC_CRT=on` when building the Arrow and Parquet static libraries?"
        },
        {
            "created_at": "2019-07-02T10:13:48.720Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876841) by Tham (thamha):*\n>\u00a0can you try passing\u00a0`-DARROW_USE_STATIC_CRT=on`\u00a0when building the Arrow and Parquet static libraries?\r\n\r\nI've tried this.\r\n\r\n-DARROW_USE_STATIC_CRT=on, it always crash.\u00a0\r\n\r\n-DARROW_USE_STATIC_CRT=off, it crashes on some Windows version."
        },
        {
            "created_at": "2019-07-02T10:22:32.898Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876845) by Antoine Pitrou (apitrou):*\nSo it seems to have something to do with the Windows CRT, or (perhaps more likely) the way it is used in your project... Last try: are you using the same version of the CRT (debug/release, static/dynamic) from both projects? See e.g. https://docs.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=vs-2019\r\n\r\n(I think a compiler bug is extremely unlikely on such a simple function, and by extremely I mean something like 0.0001% probability; also the ASM looks sound)\r\n\r\nAfter that, I don't think I'm able to help anymore. You'll probably have to find a Windows expert in-house..."
        },
        {
            "created_at": "2019-07-02T10:27:24.537Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876847) by Tham (thamha):*\nYes, I think it's highly something with our project build.\u00a0Thanks so much for your support."
        },
        {
            "created_at": "2019-07-02T10:28:54.074Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876849) by Antoine Pitrou (apitrou):*\nOk, I'm gonna close this issue. Out of curiosity though, it would be nice to post here when you finally diagnose the underlying cause."
        },
        {
            "created_at": "2019-07-02T10:31:00.818Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16876852) by Tham (thamha):*\nOk. I will."
        },
        {
            "created_at": "2019-07-05T07:59:59.222Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5410?focusedCommentId=16879051) by Tham (thamha):*\n`[~pitrou]` after disable optimization on arrow build, I don't meet this issue anymore. It seems there is something wrong with optimizer. I'll tell you if I can sure about that."
        }
    ]
}