{
    "issue": {
        "title": "[Java] Arrow Java can't  read union vector from ArrowStreamReader written by its own bugs",
        "body": "***Note**: This issue was originally created as [ARROW-5231](https://issues.apache.org/jira/browse/ARROW-5231). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen writing union data using\u00a0 ArrowStreamWriter in java, I can't read it back using ArrowStreamReader in java. The exception is:\r\n> Exception in thread \"main\" java.lang.IllegalArgumentException: not all nodes and buffers were consumed. nodes: [ArrowFieldNode [length=100, nullCount=0]] buffers: [ArrowBuf[14], udle: [7 104..117], ArrowBuf[15], udle: [7 120..520]]\n> at org.apache.arrow.vector.VectorLoader.load(VectorLoader.java:64)\n> at org.apache.arrow.vector.ipc.ArrowReader.loadRecordBatch(ArrowReader.java:219)\n> at org.apache.arrow.vector.ipc.ArrowStreamReader.loadNextBatch(ArrowStreamReader.java:121)\r\nThe code to reproduce this exception is:\r\n\r\n\u00a0\r\n```java\n\r\nimport org.apache.arrow.memory.RootAllocator;\r\nimport org.apache.arrow.vector.FieldVector;\r\nimport org.apache.arrow.vector.VectorSchemaRoot;\r\nimport org.apache.arrow.vector.complex.UnionVector;\r\nimport org.apache.arrow.vector.dictionary.DictionaryProvider;\r\nimport org.apache.arrow.vector.holders.NullableIntHolder;\r\nimport org.apache.arrow.vector.ipc.ArrowStreamReader;\r\nimport org.apache.arrow.vector.ipc.ArrowStreamWriter;\r\nimport org.apache.arrow.vector.types.UnionMode;\r\nimport org.apache.arrow.vector.types.pojo.ArrowType;\r\nimport org.apache.arrow.vector.types.pojo.Field;\r\nimport org.apache.arrow.vector.types.pojo.FieldType;\r\nimport org.apache.arrow.vector.types.pojo.Schema;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class UnionTest {\r\n\r\n    public static void writeUnionBatch(OutputStream os) throws IOException {\r\n        int[] typeIds = new int[]{ArrowType.ArrowTypeID.Int.ordinal()};\r\n        ArrowType.Union union = new ArrowType.Union(UnionMode.Sparse, typeIds);\r\n        List<Field> childList = Collections.singletonList(\r\n        new Field(\"s1\", FieldType.nullable(new ArrowType.Int(32, true)), null)\r\n);\r\n        Field field = new Field(\"f1\", FieldType.nullable(union), childList);\r\n        List<Field> fields = Collections.singletonList(field);\r\n        Schema schema = new Schema(fields);\r\n        VectorSchemaRoot root = VectorSchemaRoot.create(schema, new RootAllocator(Integer.MAX_VALUE));\r\n        DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\r\n        ArrowStreamWriter writer = new ArrowStreamWriter(root, provider, os);\r\n        writer.start();\r\n        for (int i = 0; i < 2; i++) {\r\n            root.setRowCount(100);\r\n            List<FieldVector> vectors = root.getFieldVectors();\r\n            UnionVector vector = (UnionVector) vectors.get(0);\r\n            fillVector(vector, 100);\r\n            for (int j = 0; j < 100; j++) {\r\n                if (!vector.isNull(j)) {\r\n                    System.out.println(vector.getObject(j));\r\n                }\r\n            }\r\n            writer.writeBatch();\r\n        }\r\n        writer.end();\r\n        writer.close();\r\n    }\r\n\r\n    private static void fillVector(UnionVector vector, int batchSize) {\r\n        vector.setInitialCapacity(batchSize);\r\n        vector.allocateNew();\r\n        for (int i = 0; i < batchSize; i++) {\r\n            NullableIntHolder intHolder = new NullableIntHolder();\r\n            intHolder.isSet = 1;\r\n            intHolder.value = i;\r\n            vector.setSafe(i, intHolder);\r\n        }\r\n        vector.setValueCount(batchSize);\r\n    }\r\n\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        try(FileOutputStream fos = new FileOutputStream(\"result/union.arrow\")) {\r\n            writeUnionBatch(fos);\r\n            System.out.println(\"write succeed\");\r\n            fos.flush();\r\n        }\r\n\r\n        RootAllocator allocator = new RootAllocator(1000000000);\r\n        ByteArrayInputStream in = new ByteArrayInputStream(Files.readAllBytes(Paths.get(\"result/union.arrow\")));\r\n        ArrowStreamReader reader = new ArrowStreamReader(in, allocator);\r\n        reader.loadNextBatch();\r\n    }\r\n}\r\n\r\n```\r\nAnd it can't read union data\u00a0generated by python, as is reported in\u00a0https://issues.apache.org/jira/browse/ARROW-1692.\u00a0\r\n\r\nIt seems strange arrow java can't read\u00a0union data generated by its own. Is there any format gap between\u00a0arrow java\u00a0UnionVector\u00a0write and read?\r\n\r\n\u00a0",
        "created_at": "2019-04-29T06:14:15.000Z",
        "updated_at": "2019-04-29T08:22:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": []
}