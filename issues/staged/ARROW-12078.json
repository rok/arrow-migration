{
    "issue": {
        "title": "The first table schema becomes a common schema for the full Dataset",
        "body": "***Note**: This issue was originally created as [ARROW-12078](https://issues.apache.org/jira/browse/ARROW-12078). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe first table schema becomes a common schema for the full Dataset. It could cause problems with sparse data.\r\n\r\nConsider example below, when first chunks is full of NA, pyarrow ignores dtypes from pandas for a whole dataset:\r\n```java\n\r\n# get dataset\r\n!wget https://physionet.org/files/mimiciii-demo/1.4/D_ITEMS.csv\r\n\r\n\r\nimport pandas as pd \r\nimport pyarrow.parquet as pq\r\nimport pyarrow as pa\r\nimport pyarrow.dataset as ds\r\nimport shutil\r\nfrom pathlib import Path\r\n\r\n\r\ndef foo(input_csv='D_ITEMS.csv', output='tmp.parquet', chunksize=1000):\r\n    if Path(output).exists():\r\n        shutil.rmtree(output)    # write dataset\r\n    d_items = pd.read_csv(input_csv, index_col='row_id',\r\n                      usecols=['row_id', 'itemid', 'label', 'dbsource', 'category', 'param_type'],\r\n                      dtype={'row_id': int, 'itemid': int, 'label': str, 'dbsource': str,\r\n                             'category': str, 'param_type': str}, chunksize=chunksize)    for i, chunk in enumerate(d_items):\r\n        table = pa.Table.from_pandas(chunk)\r\n        if i == 0:\r\n            schema1 = pa.Schema.from_pandas(chunk)\r\n            schema2 = table.schema\r\n#         print(table.field('param_type'))\r\n        pq.write_to_dataset(table, root_path=output)\r\n    \r\n# read dataset\r\n    dataset = ds.dataset(output)\r\n    \r\n# compare schemas\r\n    print('Schemas are equal: ', dataset.schema == schema1 == schema2)\r\n    print(dataset.schema.types)\r\n    print('Should be string', dataset.schema.field('param_type'))    \r\n    return dataset\r\n```\r\n```java\n\r\ndataset = foo()\r\ndataset.to_table()\r\n\r\n>>>Schemas are equal:  False\r\n[DataType(int64), DataType(string), DataType(string), DataType(null), DataType(null), DataType(int64)]\r\nShould be string pyarrow.Field<param_type: null>\r\n---------------------------------------------------------------------------\r\nArrowTypeError: fields had matching names but differing types. From: category: string To: category: null\n```\r\nIf you do schemas listing, you'll see that almost all parquet files ignored pandas dtypes:\r\n\r\n\u00a0\r\n```java\n\r\nimport os\r\n\r\nfor i in os.listdir('tmp.parquet/'):\r\n    print(ds.dataset(os.path.join('tmp.parquet/', i)).schema.field('param_type'))\r\n\r\n>>>pyarrow.Field<param_type: null>\r\npyarrow.Field<param_type: string>\r\npyarrow.Field<param_type: null>\r\npyarrow.Field<param_type: null>\r\npyarrow.Field<param_type: null>\r\npyarrow.Field<param_type: null>\r\npyarrow.Field<param_type: null>\r\npyarrow.Field<param_type: string>\r\npyarrow.Field<param_type: null>\r\npyarrow.Field<param_type: string>\r\npyarrow.Field<param_type: string>\r\npyarrow.Field<param_type: null>\r\npyarrow.Field<param_type: null>\r\n```\r\nBut if we will get bigger chunk of data, that contains non NA values, everything is OK:\r\n```java\n\r\ndataset = foo(chunksize=10000)\r\ndataset.to_table()\r\n\r\n>>>Schemas are equal:  True\r\n[DataType(int64), DataType(string), DataType(string), DataType(string), DataType(string), DataType(int64)]\r\nShould be string pyarrow.Field<param_type: string>\r\npyarrow.Table\r\nitemid: int64\r\nlabel: string\r\ndbsource: string\r\ncategory: string\r\nparam_type: string\r\nrow_id: int64\r\n```\r\nCheck NA in data:\r\n```java\n\r\npd.read_csv('D_ITEMS.csv', nrows=1000)['param_type'].unique()\r\n>>>array([nan])\r\n\r\npd.read_csv('D_ITEMS.csv', nrows=10000)['param_type'].unique()\r\n>>>array([nan, 'Numeric', 'Text', 'Date time', 'Solution', 'Process',\r\n       'Checkbox'], dtype=object)\r\n```\r\n\u00a0\r\n\r\n\u00a0PS: switching issues reporting from githab to Jira is outstanding move\r\n\r\n\u00a0",
        "created_at": "2021-03-24T21:28:58.000Z",
        "updated_at": "2021-03-25T11:42:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-03-25T11:42:28.000Z"
    },
    "comments": [
        {
            "created_at": "2021-03-25T11:42:28.217Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12078?focusedCommentId=17308609) by David Li (lidavidm):*\nClosing as duplicate (looks like something glitched and the issue got created multiple times)."
        }
    ]
}