{
    "issue": {
        "title": "[Python] Nested ExtensionArray conversion to/from pandas/numpy",
        "body": "***Note**: This issue was originally created as [ARROW-17813](https://issues.apache.org/jira/browse/ARROW-17813). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nuser@ thread: <https://lists.apache.org/thread/dhnxq0g4kgdysjowftfv3z5ngj780xpb>\r\nrepro gist: <https://gist.github.com/changhiskhan/4163f8cec675a2418a69ec9168d5fdd9>\r\n\r\n**Arrow => numpy/pandas**\r\n\r\nFor a non-nested array, pa.ExtensionArray.to_numpy automatically \"lowers\" to the storage type (as expected). However this is not done for nested arrays:\r\n\r\n```python\n\r\nimport pyarrow as pa\r\n\r\nclass LabelType(pa.ExtensionType):\r\n\r\n    def __init__(self):\r\n        super(LabelType, self).__init__(pa.string(), \"label\")\r\n\r\n    def __arrow_ext_serialize__(self):\r\n        return b\"\"\r\n\r\n    @classmethod\r\n    def __arrow_ext_deserialize__(cls, storage_type, serialized):\r\n        return LabelType()\r\n    \r\nstorage = pa.array([\"dog\", \"cat\", \"horse\"])\r\next_arr = pa.ExtensionArray.from_storage(LabelType(), storage)\r\noffsets = pa.array([0, 1])\r\nlist_arr = pa.ListArray.from_arrays(offsets, ext_arr)\r\nlist_arr.to_numpy()\r\n```\r\n```java\n\r\n---------------------------------------------------------------------------\r\nArrowNotImplementedError                  Traceback (most recent call last)\r\nCell In [15], line 1\r\n----> 1 list_arr.to_numpy()\r\n\r\nFile /mnt/lance/.venv/lance/lib/python3.10/site-packages/pyarrow/array.pxi:1445, in pyarrow.lib.Array.to_numpy()\r\n\r\nFile /mnt/lance/.venv/lance/lib/python3.10/site-packages/pyarrow/error.pxi:121, in pyarrow.lib.check_status()\r\n\r\nArrowNotImplementedError: Not implemented type for Arrow list to pandas: extension<label<LabelType>>\r\n```\r\n\r\nAs mentioned on the user thread linked from the top, a fairly generic solution would just have the conversion default to the storage array's to_numpy.\r\n\r\n\u00a0\r\n**pandas/numpy => Arrow**\r\n\r\nEquivalently, conversion to Arrow is also difficult for nested extension types: \r\n\r\nif I have say a pandas DataFrame that has a column of list-of-string and I want to convert that to list-of-label Array. Currently I have to:\r\n1. Convert to list-of-string (storage) numpy array to pa.list_(pa.string())\r\n2. Convert the string values array to ExtensionArray, then reconstitue a list<extension> array using the ExtensionArray combined with the offsets from the result of step 1\r\n\r\n```python\n\r\nimport pyarrow as pa\r\nimport pandas as pd\r\ndf = pd.DataFrame({'labels': [[\"dog\", \"horse\", \"cat\"], [\"person\", \"person\", \"car\", \"car\"]]})\r\nlist_of_storage = pa.array(df.labels)\r\next_values = pa.ExtensionArray.from_storage(LabelType(), list_of_storage.values)\r\nlist_of_ext = pa.ListArray.from_arrays(offsets=list_of_storage.offsets, values=ext_values)\r\n```\r\n\r\n\r\nFor non-nested columns, one can achieve easier conversion by defining a pandas extension dtype, but i don't think that works for a nested column. You would instead have to fallback to something like `pa.ExtensionArray.from_storage` (or `from_pandas`?) to do the trick. Even that doesn't necessarily work for something like a dictionary column because you'd have to pass in the dictionary somehow. Off the cuff, one could provide a custom lambda to `pa.Table.from_pandas` that is used for either specified column names / data types?\r\n\r\n\r\nThanks in advance for the consideration!",
        "created_at": "2022-09-22T02:48:50.000Z",
        "updated_at": "2022-10-15T18:29:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-10-12T13:27:30.000Z"
    },
    "comments": [
        {
            "created_at": "2022-09-23T16:40:08.459Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17813?focusedCommentId=17608842) by Joris Van den Bossche (jorisvandenbossche):*\n**Arrow => numpy/pandas**\r\n\r\nFor numpy, we can indeed fall back to converting the storage array. That's also what happens for the `ExtensionArray.to_numpy()` at the moment. Although this is implemented in python right now (https://github.com/apache/arrow/blob/356e7f836c145966ebbeb65c3b65d82348e4234e/python/pyarrow/array.pxi#L2795), while the ListArray conversion is done in C+. So we would need to move that logic of using the storage type into the pyarrow C+ code (which should be doable, I think)\r\n\r\nFor conversion to pandas, for plain ExtensionArrays, this is controlled by whether there is an equivalent pandas extension type to convert to. So the question is whether this should be done for ExtensionArrays within a nested type as well. That would get a bit more complicated, as then we need to call back into python from C++ (this is basically covered by ARROW-17535)\r\n\r\n**pandas/numpy => Arrow**\r\n\r\nOne way this will be a bit easier is to cast to the final type, something like: `list_of_storage.cast(pa.list_(LabelType()))`.  \r\nThis is currently not yet possible, but there is some work being done on that at the moment (ARROW-14500 about casting storage type to extension type, ARROW-15545 is a different issue related to casting of extension types, but this might actually also solve the former, and there is an open PR for this: https://github.com/apache/arrow/pull/14106. We should verify if that PR also enables this cast)\r\n\r\n> For non-nested columns, one can achieve easier conversion by defining a pandas extension dtype, but i don't think that works for a nested column. \r\n\r\nIndeed, that won't work without specifying a separate extension type for this nested type (until pandas supports nested types properly)\r\n\r\n> Off the cuff, one could provide a custom lambda to `pa.Table.from_pandas` that is used for either specified column names / data types?\r\n\r\nThat could be one option. But maybe we should start with enabling basic conversion (through the storage type) for extension types in the array conversion, which currently fails:\r\n\r\n```python\n\r\n# this could be the equivalent of `pa.ExtensionArray.from_storage(LabelType(), pa.array([\"dog\", \"cat\", \"horse\"]))` ?\r\n>>> pa.array([\"dog\", \"cat\", \"horse\"], type=LabelType())\r\nArrowNotImplementedError: extension\r\n```\r\n\r\nI opened ARROW-17834 for this.\r\n\r\nIf the above works, I think it should also work to specify a schema with the extension type in the Table.from_pandas conversion. \r\n(we could still make it easier to allow to specify the type for one specific column, instead of having to specify the full schema)"
        },
        {
            "created_at": "2022-09-26T17:30:32.723Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17813?focusedCommentId=17609608) by Chang She (changhiskhan):*\n`[~jorisvandenbossche]` thank you for the details above!\r\n\r\n**ExtensionArray => pandas**\r\n\r\nJust for discussion, I was curious whether you had any thoughts around using the extension scalar as a fallback mechanism. It's a lot simpler to define an ExtensionScalar with `as_py` than a pandas extension dtype. So if an ExtensionArray doesn't have an equivalent pandas dtype, would it make sense to convert it to just an object series whose elements are the result of `as_py`? I added it as a comment to ARROW-17353 for further discussion as well if it makes sense.\r\n\r\n**pandas/numpy => Arrow**\r\n\r\n> One way this will be a bit easier is to cast to the final type, something like: list_of_storage.cast(pa.list_(LabelType())).\r\n\r\nYeah, that would certainly make it a lot more convenient! I don't see any tests relating to nested types in https://github.com/apache/arrow/pull/14106 but hopefully it's not much additional effort on top of what's already there?\r\n \r\n> this could be the equivalent of `pa.ExtensionArray.from_storage(LabelType(), pa.array([\"dog\", \"cat\", \"horse\"]))` ?\n> >>> pa.array([\"dog\", \"cat\", \"horse\"], type=LabelType())\n> ArrowNotImplementedError: extension\n> I opened ARROW-17834 for this.\r\n\r\nAgreed. Thanks for opening the JIRA. One additional tricky thing here is what if the storage array also need additional arguments. e.g., in CV, most canonical datasets has a predetermined dictionary, so for the above example, often-times you'd want read in a CSV data dictionary and pass in the class names in the right order to construct the storage DictionaryArray (cross-posted on ARROW-17834).\r\n\r\n\r\n> If the above works, I think it should also work to specify a schema with the extension type in the Table.from_pandas conversion.\n> (we could still make it easier to allow to specify the type for one specific column, instead of having to specify the full schema)\r\n\r\nyeah that would be amazing. I'd love to toss away my custom type conversion code that's hard to maintain (and not to mention slow)  :)"
        },
        {
            "created_at": "2022-10-04T10:13:02.692Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17813?focusedCommentId=17612550) by Joris Van den Bossche (jorisvandenbossche):*\n> **ExtensionArray => pandas**\n> \n> Just for discussion, I was curious whether you had any thoughts around using the extension scalar as a fallback mechanism\r\n\r\nI just was wondering the same in ARROW-17535, forgetting your brought that up here as well. I opened a dedicated JIRA for this part: ARROW-17925"
        },
        {
            "created_at": "2022-10-12T13:27:30.114Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17813?focusedCommentId=17616422) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 14238\n<https://github.com/apache/arrow/pull/14238>"
        },
        {
            "created_at": "2022-10-12T13:35:23.156Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17813?focusedCommentId=17616426) by Joris Van den Bossche (jorisvandenbossche):*\n`[~changhiskhan]` so this issue is marked as resolved now https://github.com/apache/arrow/pull/14238 is merged. Not all the issues you raised have been fixed, though, but I think remaining issues are covered by other JIRAs (but it would be good if you could verify this). \r\nFor example, after https://github.com/apache/arrow/pull/14238, we still fall back on basic storage type conversion in case of list<extension>, but we have ARROW-17535 to see if we can further improve this by actually using the proper to_pandas conversion."
        },
        {
            "created_at": "2022-10-12T17:29:30.510Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17813?focusedCommentId=17616605) by Chang She (changhiskhan):*\n`[~jorisvandenbossche]` this is great. I will try it out on master. thanks!\r\n\r\nI agree with your comments in ARROW-17535 that the design can be further improved to take into account overridden to_numpy/to_pandas, \r\nbut just having this fallback would open up a lot more paths\r\n\r\n\r\n\r\n"
        }
    ]
}