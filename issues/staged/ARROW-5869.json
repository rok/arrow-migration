{
    "issue": {
        "title": "[Python] Need a way to access UnionArray's children as Arrays in pyarrow",
        "body": "***Note**: This issue was originally created as [ARROW-5869](https://issues.apache.org/jira/browse/ARROW-5869). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n\u00a0\r\n\r\nThere doesn't seem to be a way to get to the children of sparse or dense UnionArrays. For other types, there's\r\n \\* ListType: array.flatten()\r\n \\* StructType: array.field(\"fieldname\")\r\n \\* DictionaryType: array.indices and now array.dictionary (in 0.14.0)\r\n \\* (other types have no children, I think...)\r\n\r\nThe reason this comes up now is that I have a downstream library that\u00a0does a zero-copy view of Arrow by recursively walking over its types and interpreting the list of buffers for each type. In the past, I didn't need the _array_ children of each array\u2014I popped the right number of buffers off the list depending on the type\u2014but now the dictionary for DictionaryType has been moved from the type object to the array object (in 0.14.0). Since it's neither in the buffers list, nor in the type tree, I need to walk the tree of arrays\u00a0in tandem with the tree of types.\r\n\r\nThat would be okay, except that I don't see how to descend from a UnionArray to its children.\r\n\r\nThis is the function where I do the walk down types (tpe), and now arrays (array), while interpreting the right number of buffers at each step.\r\n\r\n<https://github.com/scikit-hep/awkward-array/blob/7c5961405cc39bbf2b489fad171652019c8de41b/awkward/arrow.py#L228-L364>\r\n\r\nSimply exposing the std::vector named \"children\" as a Python sequence or a child(int i) method would provide a way to descend UnionTypes and make this kind of access uniform across all types.\r\n\r\nAlternatively, putting the array.dictionary in the list of buffers would also do it (and make it unnecessary for me to walk over the arrays), but in general it seems like a good idea to make arrays accessible. It seems like it belongs in the buffers, but that would probably be a big change, not to be undertaken for minor reasons.\r\n\r\nThanks!",
        "created_at": "2019-07-06T23:01:08.000Z",
        "updated_at": "2021-04-20T14:32:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-04-20T14:32:30.000Z"
    },
    "comments": [
        {
            "created_at": "2019-07-07T22:10:52.232Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5869?focusedCommentId=16879962) by Wes McKinney (wesm):*\nWould you like to propose a pull request?"
        },
        {
            "created_at": "2019-07-07T22:24:23.780Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5869?focusedCommentId=16879965) by Jim Pivarski (jpivarski):*\nI'm not currently in a position to do that, never having built pyarrow before. I could look for instructions and try it out, but\u00a0not immediately."
        },
        {
            "created_at": "2021-04-20T14:04:46.655Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5869?focusedCommentId=17325817) by Alessandro Molina (amol-):*\nThis seems to have been already addressed. It seems it's now possible to access `UnionArray` children using `UnionArray.field`\r\n\r\n\r\n```python\n\r\n>>> first = pa.array([1, 2, 3])\r\n>>> second = pa.array([\"A\", \"B\", \"C\"])\r\n>>> ua = pa.UnionArray.from_sparse(pa.array([0, 0, 1]), [first, second])\r\n>>> ua.field(0)\r\n<pyarrow.lib.Int64Array object at 0x126d84520>\r\n[\r\n  1,\r\n  2,\r\n  3\r\n]\r\n>>> ua.field(1)\r\n<pyarrow.lib.StringArray object at 0x126d844c0>\r\n[\r\n  \"A\",\r\n  \"B\",\r\n  \"C\"\r\n]\r\n```\r\n\r\n"
        },
        {
            "created_at": "2021-04-20T14:31:52.259Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5869?focusedCommentId=17325836) by Joris Van den Bossche (jorisvandenbossche):*\nAh, indeed, it seems this was covered by ARROW-8572"
        },
        {
            "created_at": "2021-04-20T14:32:06.073Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5869?focusedCommentId=17325837) by Joris Van den Bossche (jorisvandenbossche):*\nThanks for checking `[~amol-]`!"
        }
    ]
}