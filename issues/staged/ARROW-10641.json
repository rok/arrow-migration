{
    "issue": {
        "title": "[C++] A \"replace\" or \"map\" kernel to replace values in array based on mapping",
        "body": "***Note**: This issue was originally created as [ARROW-10641](https://issues.apache.org/jira/browse/ARROW-10641). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA \"replace\" or \"map\" kernel to replace values in array based on mapping. This would be similar as the pandas `Series.replace` (or `Series.map`) kernel, and as a small illustration of what is meant:\r\n\r\n```Java\n\r\nIn [41]: s = pd.Series([\"Yes\", \"Y\", \"No\", \"N\"])\r\n\r\nIn [42]: s\r\nOut[42]: \r\n0    Yes\r\n1      Y\r\n2     No\r\n3      N\r\ndtype: object\r\n\r\nIn [43]: s.replace({\"Y\": \"Yes\", \"N\": \"No\"})\r\nOut[43]: \r\n0    Yes\r\n1    Yes\r\n2     No\r\n3     No\r\ndtype: object\r\n\r\n```\r\n\r\nNote: in pandas the difference between \"replace\" and \"map\" is that replace will only replace a value if it is present in the mapping, while map will replace every value in the input array with the corresponding value in the mapping and return null if not present in the mapping. This different behaviour could maybe be triggered with a keyword.\r\n\r\nNote, this is different from ARROW-10306 which is about string replacement _within_ array elements (replacing a substring in each string element in the array), while here it is about replacing full elements of the array)\r\n\r\ncc `[~maartenbreddels]`",
        "created_at": "2020-11-18T13:12:24.000Z",
        "updated_at": "2021-11-17T08:42:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-11-18T13:19:54.294Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10641?focusedCommentId=17234609) by Joris Van den Bossche (jorisvandenbossche):*\nIn the R world, something equivalent might be `recode` (https://dplyr.tidyverse.org/reference/recode.html, although the function is \"questioned\") or the older `mapvalues` (https://www.rdocumentation.org/packages/plyr/versions/1.8.6/topics/mapvalues, but that is from a retired package)"
        },
        {
            "created_at": "2020-11-18T16:10:43.859Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10641?focusedCommentId=17234767) by Neal Richardson (npr):*\nThere are other \"recode\" functions out there, such as https://www.rdocumentation.org/packages/car/versions/3.0-10/topics/recode. That one has the nice feature of being able to map multiple values."
        }
    ]
}