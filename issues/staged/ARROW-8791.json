{
    "issue": {
        "title": "[Rust] Creating StringDictionaryBuilder with existing dictionary values",
        "body": "***Note**: This issue was originally created as [ARROW-8791](https://issues.apache.org/jira/browse/ARROW-8791). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt might be useful to create a DictionaryArray that uses the same dictionary keys as another array. One usecase would be more efficient comparison between arrays if it is known that they use the same dictionary. Another could be more efficient grouping operations, across multiple chunks (ie a `Vec<DictionaryArray>`).\r\n\r\n\u00a0\r\n\r\nA possible implementation could look like this:\r\n\r\n\u00a0\r\n```java\n\r\nimpl<K> StringDictionaryBuilder<K>\r\nwhere\r\n    K: ArrowDictionaryKeyType,\r\n{\r\n    pub fn new_with_dictionary(\r\n        keys_builder: PrimitiveBuilder<K>,\r\n        dictionary_values: &StringArray,\r\n    ) -> Result<Self> {\r\n        let mut values_builder = StringBuilder::with_capacity(\r\n            dictionary_values.len(),\r\n            dictionary_values.value_data().len(),\r\n        );\r\n        let mut map: HashMap<Box<[u8]>, K::Native> = HashMap::new();\r\n        for i in 0..dictionary_values.len() {\r\n            if dictionary_values.is_valid(i) {\r\n                let value = dictionary_values.value(i);\r\n                map.insert(\r\n                    value.as_bytes().into(),\r\n                    K::Native::from_usize(i)\r\n                        .ok_or(ArrowError::DictionaryKeyOverflowError)?,\r\n                );\r\n                values_builder.append_value(value);\r\n            } else {\r\n                values_builder.append_null();\r\n            }\r\n        }\r\n        Ok(Self {\r\n            keys_builder,\r\n            values_builder,\r\n            map,\r\n        })\r\n    }\r\n}\n```\r\nI don't really like here that the map has to be reconstructed, maybe there is a more efficient way by passing in the HashMap directly, but it's probably not a good idea to expose the `Box<[u8]>` encoding of its keys.",
        "created_at": "2020-05-13T18:25:18.000Z",
        "updated_at": "2020-05-27T04:10:59.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-05-26T13:15:51.000Z"
    },
    "comments": [
        {
            "created_at": "2020-05-26T13:15:51.787Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8791?focusedCommentId=17116734) by Neville Dipale (nevi_me):*\nIssue resolved by pull request 7226\n<https://github.com/apache/arrow/pull/7226>"
        }
    ]
}