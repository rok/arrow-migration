{
    "issue": {
        "title": "[Java] ListVector.loadFieldBuffers ignores the ArrowFieldNode length metadata",
        "body": "***Note**: This issue was originally created as [ARROW-399](https://issues.apache.org/jira/browse/ARROW-399). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nDiscovered this during integration testing. Because Arrow-C++ writes buffers padded to 64 bytes, they may appear larger to the Java library than they need to be. In ListVector.loadFieldBuffers, the ArrowFieldNode is never used:\n\n```Java\n  @Override\n  public void loadFieldBuffers(ArrowFieldNode fieldNode, List<ArrowBuf> ownBuffers) {\n    BaseDataValueVector.load(getFieldInnerVectors(), ownBuffers);\n  }\n```\n\nThe value count of the resulting ListVector is thus inferred from the size of the offsets buffer. In the case of a length-7 vector in C++, the size of the offsets buffer is exactly 64 bytes (padding for SIMD) \u2013 Java infers from 64 bytes that the value count is 15 (64 / 4 - 1), and the integration test fails.",
        "created_at": "2016-12-01T19:53:13.000Z",
        "updated_at": "2017-02-13T16:34:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2016-12-09T16:41:33.000Z"
    },
    "comments": [
        {
            "created_at": "2016-12-05T18:55:08.002Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-399?focusedCommentId=15723023) by Julien Le Dem (julienledem):*\nWe can change the behavior on the java side and at a minimum not infer sizes that don't match the metadata.\n\nAlthough as a separate discussion we can pad buffers without changing their size. The Metadata can still reflect the size of the buffer that we actually use and we leave unused space in between buffers or make sure the buffers start on the appropriately aligned address."
        },
        {
            "created_at": "2016-12-05T23:06:15.249Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-399?focusedCommentId=15723667) by Wes McKinney (wesm):*\nInteresting point. I'm not sure what's the best thing to do there \u2013 the idea of the padding was to ensure that AVX512 instructions are always safe on the whole buffer, so the padding can go in the metadata is simply be a part of the in-memory and IPC format (something like \"all buffers are padded to 64-bytes, but the metadata reports only the used portion of the buffer\"). Should discuss in a separate JIRA"
        },
        {
            "created_at": "2016-12-05T23:19:11.137Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-399?focusedCommentId=15723704) by Julien Le Dem (julienledem):*\nagreed"
        },
        {
            "created_at": "2016-12-08T22:06:02.257Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-399?focusedCommentId=15733532) by Wes McKinney (wesm):*\nsee ARROW-412"
        },
        {
            "created_at": "2016-12-09T04:02:26.152Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-399?focusedCommentId=15734212) by Julien Le Dem (julienledem):*\nPR: https://github.com/apache/arrow/pull/227"
        },
        {
            "created_at": "2016-12-09T16:41:35.191Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-399?focusedCommentId=15735740) by Wes McKinney (wesm):*\nIssue resolved by pull request 227\n<https://github.com/apache/arrow/pull/227>"
        }
    ]
}