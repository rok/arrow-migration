{
    "issue": {
        "title": "[C++] Implement in-memory conversions between non-nested primitive types and DictionaryArray equivalent",
        "body": "***Note**: This issue was originally created as [ARROW-462](https://issues.apache.org/jira/browse/ARROW-462). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe use a hash table to extract unique values and dictionary indices. There may be an opportunity to consolidate common code from the dictionary encoding implementation implemented in parquet-cpp (but the dictionary indices will not be run-length encoded in Arrow):\n\nhttps://github.com/apache/parquet-cpp/blob/master/src/parquet/encodings/dictionary-encoding.h\n\nThis functionality also needs to permit encoding split across multiple record batches \u2013 so the hash table would be a stateful entity, and we can continue to hash more chunks of data to dictionary-encode multiple arrays with a shared dictionary at the end. ",
        "created_at": "2017-01-06T16:20:45.000Z",
        "updated_at": "2017-07-09T16:40:07.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-07-07T00:18:48.000Z"
    },
    "comments": [
        {
            "created_at": "2017-01-06T16:26:13.389Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-462?focusedCommentId=15804914) by Uwe Korn (uwe):*\nMight be also a point to reconsider if it's worth to have a custom hash-table implementation or if using `std:unordered_map`\u00a0is leaving us with the same performance."
        },
        {
            "created_at": "2017-01-06T16:30:17.578Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-462?focusedCommentId=15804922) by Wes McKinney (wesm):*\nOne issue is the handling of the hash keys (e.g. strings). After performing the hash table pass, you would like to minimize time to create the final dictionary and indices arrays. We can run various performance experiments and choose whatever yields best performance for simplicity. "
        },
        {
            "created_at": "2017-01-06T16:35:32.350Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-462?focusedCommentId=15804932) by Uwe Korn (uwe):*\nAh, that makes sense. This may be possible to provide with `std::unordered_map`\u00a0but maybe not in a simple way."
        },
        {
            "created_at": "2017-07-04T17:45:23.515Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-462?focusedCommentId=16073959) by Uwe Korn (uwe):*\nPR: https://github.com/apache/arrow/pull/812"
        },
        {
            "created_at": "2017-07-07T00:18:48.244Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-462?focusedCommentId=16077384) by Wes McKinney (wesm):*\nIssue resolved by pull request 812\n<https://github.com/apache/arrow/pull/812>"
        }
    ]
}