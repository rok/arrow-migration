{
    "issue": {
        "title": "[Rust] Offset is mishandled in arithmetic and boolean compute kernels",
        "body": "***Note**: This issue was originally created as [ARROW-9583](https://issues.apache.org/jira/browse/ARROW-9583). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSeveral compute kernels create the resulting ArrayData with the same offset of one of the operands. Instead this offset should be 0 since the buffer is freshly constructed with the correct len.\r\n\r\nExample of one failing test:\r\n\r\n\u00a0\r\n```java\n\r\n    #[test]\r\n    fn test_primitive_array_add_sliced() {\r\n        let a = Int32Array::from(vec![0, 0, 0, 5, 6, 7, 8, 9, 0]);\r\n        let b = Int32Array::from(vec![0, 0, 0, 6, 7, 8, 9, 8, 0]);\r\n        let a = a.slice(3, 5);\r\n        let b = b.slice(3, 5);\r\n        let a = a.as_any().downcast_ref::<Int32Array>().unwrap();\r\n        let b = b.as_any().downcast_ref::<Int32Array>().unwrap();\r\n\r\n        assert_eq!(5, a.value(0));\r\n        assert_eq!(6, b.value(0));\r\n\r\n        let c = add(&a, &b).unwrap();\r\n        assert_eq!(5, c.len());\r\n\r\n        assert_eq!(11, c.value(0));\r\n        assert_eq!(13, c.value(1));\r\n        assert_eq!(15, c.value(2));\r\n        assert_eq!(17, c.value(3));\r\n        assert_eq!(17, c.value(4));\r\n    }\r\n \n```\r\nAdditionally, the boolean kernels seem to require that both operands have the same offset. This shouldn't be needed, but it seems that the simd implementation requires that the offset is a multiple of 8 (bits) so that the operation works correctly on whole bytes. The scalar implementation should be fine with any offset.",
        "created_at": "2020-07-28T13:28:56.000Z",
        "updated_at": "2020-09-02T23:36:16.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-09-02T23:36:05.000Z"
    },
    "comments": [
        {
            "created_at": "2020-07-29T01:05:06.993Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9583?focusedCommentId=17166784) by Paddy Horan (paddyhoran):*\nThanks `[~jhorstmann]`, I submitted a PR for the offset issue in the compute kernels.\r\n\r\nThe offset requirement on the boolean kernels shouldn't be needed but I was defensive when implementing this as it's complicated by the fact that boolean arrays are bit packed.\r\n\r\nI'll take a look at the SIMD issue when I get a chance too.\r\n\r\nI'll open separate JIRA's for these issues."
        },
        {
            "created_at": "2020-07-29T01:10:04.716Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9583?focusedCommentId=17166792) by Paddy Horan (paddyhoran):*\nSorry, I didn't see that you posted a draft PR.\u00a0 I'll close mine and take a look at yours."
        },
        {
            "created_at": "2020-07-29T09:27:01.479Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9583?focusedCommentId=17167084) by J\u00f6rn Horstmann (jhorstmann):*\n`[~paddyhoran]` Thanks for looking into this, I'll try solving the boolean problem today. Actually the same issue with odd offsets also exists for the null bitmaps for all operations. I see two possible solutions:\r\n \\* Implement a slow path that works bit by bit if the offset is not a multiple of 8. Performance would be pretty bad and it's another code path that needs to be tested.\r\n \\* Work on whole bytes (or simd registers) and bit shift the result afterwards. Implementation would be a bit more tricky but performance should be ok.\r\n\r\nAnother option would be to disallow array slices that are not multiples of 8 (or even more to keep alignment guarantees), but that would probably break several users of the library."
        },
        {
            "created_at": "2020-09-02T23:36:05.558Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9583?focusedCommentId=17189761) by Andy Grove (andygrove):*\nIssue resolved by pull request 7854\n<https://github.com/apache/arrow/pull/7854>"
        }
    ]
}