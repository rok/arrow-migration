{
    "issue": {
        "title": "[Rust] [DataFusion] TableProvider trait should support predicate push-down",
        "body": "***Note**: This issue was originally created as [ARROW-9828](https://issues.apache.org/jira/browse/ARROW-9828). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nTableProvider trait should support predicate push-down, so that predicates can applied to custom storage implementations.\r\n\r\nI suggest looking at Apache Spark's org.apache.spark.sql.connector.read.SupportsPushDownFilters trait for inspiration.",
        "created_at": "2020-08-22T15:58:41.000Z",
        "updated_at": "2020-12-28T01:04:11.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-12-19T21:38:33.000Z"
    },
    "comments": [
        {
            "created_at": "2020-12-13T16:45:21.265Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9828?focusedCommentId=17248615) by Ruan Pearce-Authers (ruan):*\nI'm currently taking a look at a workable implementation of this. So far, my design is:\r\n \\* TableProvider gets a new method to test whether a given filter expr can be pushed down to the provider implementation. Possible results are:\r\n \\*\\* No - the filter is not pushed down.\r\n \\*\\* Yes, exact - the filter is added to the provider scan, and the provider can guarantee that no result rows fail the filter predicate, so the original Filter node is removed\r\n \\*\\* Yes, inexact - the filter is added to the provider scan, but the provider has only used this as a guideline to minimise retrieved data (i.e. some tuples in the result set may still not meet the filter criteria), so the original Filter node is preserved\r\n \\* LogicalPlan::TableScan gets an optional vec of filter expressions\r\n \\* The filter pushdown pass is updated to use this new TableProvider method when processing TableScan nodes, removing filters with exact support from the plan entirely and rewriting the TableScan nodes to include both exact and inexact filters for later creation of execution plans\r\n\r\nIf anyone stumbles across this and has any massive concerns with this implementation, or suggestions for improvements, let me know! Otherwise, I'll put up a PR once I have something functional.\r\n\r\nEdit: One major outstanding issue with this design is that currently, it would only handle TableSource::FromProvider."
        },
        {
            "created_at": "2020-12-19T21:38:33.257Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9828?focusedCommentId=17252276) by Andrew Lamb (alamb):*\nIssue resolved by pull request 8917\n<https://github.com/apache/arrow/pull/8917>"
        }
    ]
}