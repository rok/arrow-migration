{
    "issue": {
        "title": "[C++][Python] Unregister compute functions",
        "body": "***Note**: This issue was originally created as [ARROW-16211](https://issues.apache.org/jira/browse/ARROW-16211). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn general, when using UDFs, the user defines a function expecting a particular outcome. When building the program, there needs to be a way to update existing function kernels if it expands beyond what is planned before. In such situations, there should be a way to remove the existing definition and add a new definition. To enable this, the unregister functionality has to be included.\u00a0",
        "created_at": "2022-04-18T00:54:39.000Z",
        "updated_at": "2022-11-07T09:11:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-04-21T07:42:56.827Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17525485) by Weston Pace (westonpace):*\nAnother task we should tackle as part of this PR that came up during the discussion of ARROW-15639: https://github.com/apache/arrow/pull/12590#discussion_r854069757\r\n\r\nIf python is finalized then any python UDFs that have been registered will be invalid.  We should consider adding an atexit hook to pyarrow which unregisters all python UDFs.\r\n\r\nThis is something of a corner case, as finalization usually happens at process exit, but in some cases users may have multiple python interpreters or be restarting the python interpreter."
        },
        {
            "created_at": "2022-04-21T09:22:09.688Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17525584) by Antoine Pitrou (apitrou):*\nYes, an atexit hook is probably the way to go. It should be easy to do in Cython code."
        },
        {
            "created_at": "2022-05-18T19:49:22.311Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17539044) by Yaron Gvili (rtpsw):*\nAnother alternative to consider is registering Python UDFs to an extension registry instance that (1) is specific to the Python interpreter and (2) is linked to the default global one (so it can find both UDF and normal functions). This Python-specific registry would then be passed to be used by the execution engine. I think this way (only) the Python-specific registry would naturally get cleaned up on finalization of the Python interpreter."
        },
        {
            "created_at": "2022-05-18T20:05:55.941Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17539052) by Yaron Gvili (rtpsw):*\nThis second-layer-registry approach is good for another use case in which the user runs multiple execution engine invocations, either in sequence or in parallel, from the same Python interpreter and wants to keep separate the UDFs registered in each invocation."
        },
        {
            "created_at": "2022-05-22T11:03:47.157Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17540571) by Yaron Gvili (rtpsw):*\nI created a [PR for a nested extension-id-registry](https://github.com/apache/arrow/pull/13214) using the approach I proposed. Please let me know what you think, as I have my own use cases for this nested extension-registry-id."
        },
        {
            "created_at": "2022-06-02T18:38:13.180Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17545600) by Yaron Gvili (rtpsw):*\nSee [this PR](https://github.com/apache/arrow/pull/13232) as a solution for [this comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17539044&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17539044)."
        },
        {
            "created_at": "2022-09-14T16:50:20.003Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17604851) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy](https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment). Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        },
        {
            "created_at": "2022-09-17T14:18:40.548Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17606126) by Yaron Gvili (rtpsw):*\nI believe this issue is superseded by ARROW-16677 which allows creating a nested registry that can later be dropped lock-free along with all functions registered on it."
        },
        {
            "created_at": "2022-09-18T06:06:16.568Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17606243) by Vibhatha Lakmal Abeykoon (vibhatha):*\n`[~rtpsw]` I still need to look into this and verify. Thanks for the note."
        },
        {
            "created_at": "2022-09-22T05:13:23.503Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17608082) by Vibhatha Lakmal Abeykoon (vibhatha):*\n`[~rtpsw]` \u00a0definitely this would be helpful in cleaning up things per interpreter. I am curious about this case.\u00a0\r\n\r\nImagine there is a UDF created in Python which does a particular job, but next in the middle of the program we need that function to have a different behavior (meaning another function needs to replace this function). So we expect the same function name, but a different functionality. In such a case we still have to remove an existing function with the same name and function signature. We cannot check the logic of the already registered function and the new function (in my understanding).\u00a0\r\n\r\nOn top of my head what I imagine is an active interpreter, where we do a demo of UDFs. I create a function called \"func\" and write some functionality. Then I want to write another example in the same interpreter instance with the same function name but a different functionality itself. Would this encourage deleting the function explicitly?\r\n\r\nPlease correct me if I am wrong.\r\n\r\ncc `[~westonpace]` \u00a0"
        },
        {
            "created_at": "2022-09-22T08:09:11.810Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17608132) by Yaron Gvili (rtpsw):*\nI think many PyArrow function execution code paths lead to Arrow C++ APIs with a configurable function registry. For example, the [`CallFunction` API](https://github.com/apache/arrow/blob/43e66a928e29a811b0e14f2a2d7ffa9f8290ccbe/cpp/src/arrow/compute/exec.h) accepts a function registry via its `ExecContext` argument. So, one could create a first nested function registry holding a first implementation of a UDF, use this first registry for several function execution invocations, then create a second nested function registry holding a second implementation of the UDF, and switch over to using this second registry. The Python interpreter remains the same, and there's no need to remove the UDF - the first registry can just be dropped."
        },
        {
            "created_at": "2022-09-29T10:45:46.510Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17610943) by Vibhatha Lakmal Abeykoon (vibhatha):*\nWhat if subset of functions registered in that particular registry is needed and we just need another subset of functions. Then we have to re-register them. What about that situation?"
        },
        {
            "created_at": "2022-09-29T10:46:01.503Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17610944) by Vibhatha Lakmal Abeykoon (vibhatha):*\ncc `[~rtpsw]` `[~westonpace]` \u00a0"
        },
        {
            "created_at": "2022-09-29T11:18:44.675Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17610963) by Yaron Gvili (rtpsw):*\nConsider a case where X, Y, and Z are disjoint sets of functions. One can register (the functions of) X in registry 1, then register Y in registry 2 whose parent is registry 1, and finally register Z in registry 3 whose parent is registry 2. With respect to the case described by Vibhata, I believe the default registry corresponds to registry 1, the first subset of functions corresponds to Y, and the second to Z. This works nicely when X, Y, and Z are known upfront; otherwise, one may need to register again. For example, suppose Y1 and Y2 are disjoint sets of functions whose union is Y, and one wants to register functions on top of those of X and Y1, then one would need to create a fresh registry whose parent is registry 1, and register Y1 again on this fresh registry. I think this is a reasonable result when not knowing upfront. In general, considering registries have extended scopes, I think it is better to create a fresh nested registry and keep it fixed while in use than to edit an existing one using removals while in use."
        },
        {
            "created_at": "2022-09-29T11:32:46.094Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17610969) by Vibhatha Lakmal Abeykoon (vibhatha):*\nYes this is a good point. I think if we go on this route, we must make sure we properly define these things in docs or provide examples of using the UDFs with a few diverse examples covering these angles. Eitherway, I personally like the nested registry idea, it gives the flexibility decide these things prior to writing the programme. In general, we could assume one would put required effort to clarify these and then write the programme. I think this is fair enough to proceed with this approach.\u00a0\r\n\r\nAlso, we may need to include a few test cases on behalf of this and test the idea and make sure if things are not exposed to Python to create the nested registries as well. I am still browsing through the said change (nested registries). Please correct me if I am wrong.\r\n\r\ncc `[~westonpace]` \u00a0this approach sounds fair enough for to proceed. Appreciate your thoughts."
        },
        {
            "created_at": "2022-09-29T11:54:36.114Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17610986) by Yaron Gvili (rtpsw):*\nSide note: I have developed PyArrow wrappers for the nested registries as part of a prototype for UDFs that I should be able to contribute when the time comes.\r\n\r\nI agree documentation of nested registries can be improved, both inside the code and in doc pages. We do have a [couple](https://github.com/apache/arrow/blob/902781d1f3a41563a23d6755433a8e40ce82de7b/cpp/src/arrow/compute/registry_test.cc#L119) of [test cases](https://github.com/apache/arrow/blob/902781d1f3a41563a23d6755433a8e40ce82de7b/cpp/src/arrow/compute/registry_test.cc#L213). Please create jiras for what you think is missing."
        },
        {
            "created_at": "2022-09-29T11:58:41.724Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17610991) by Vibhatha Lakmal Abeykoon (vibhatha):*\nYeah I went through these cases before. I am also trying to allocate some time on adding a few more cases while testing UDF for nested registries. Thanks for working on this. I will keep you in the loop if there are new Jiras coming up with this work."
        },
        {
            "created_at": "2022-10-05T06:55:37.009Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17612864) by Joris Van den Bossche (jorisvandenbossche):*\n`[~rtpsw]` the test cases you link to are only about registering functions in nested registries, I think? But how would you use this in practice? You mentioned that in the CallFunction API, one can specify the registry to use through ExecContext. \r\nBut that seems not very practical that you need to remember for each function in which registry it lives to ensure you pass the correct one when calling it. Also, that's only when you call it manually with CallFunction. But what if the UDF is part of a larger expression with multiple kernels that thus come from different registries. How do such things work? Does C++ automatically search the parent registry as well (that part is not really clear to me)?\r\n\r\nIn general having to keep track of registries and passing those, just to mimic the ability to re-register a UDF, seems quite complex. But I am wondering, for this specific case, wouldn't it be possible to allow to override an existing name when registering a kernel? It seems in C++ there is already a `allow_overwrite` option when adding functions, this could be exposed to the Python register function?"
        },
        {
            "created_at": "2022-10-05T19:50:47.064Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17613130) by Weston Pace (westonpace):*\nI think both use cases are probably useful and don't think either one precludes the other.  For reference, when referring to UDFs, `[~rtpsw]` is (I'm pretty sure) referring to \"embedded UDFs\".  In other words, UDFs whose code is embedded in a query plan (e.g. pickled python code).  In these cases the UDF only really makes sense in the context of a single plan execution.\r\n\r\nThere is another case, where some set of UDFs are predefined and then referenced (e.g. by name) in incoming plans.  In that scenario I think a nested registry is considerably less useful and the ability to unregister or override would be helpful.\r\n\r\n> How do such things work? Does C++ automatically search the parent registry as well (that part is not really clear to me)?\r\n\r\nYes, that is the current implementation."
        },
        {
            "created_at": "2022-10-05T20:13:13.033Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17613211) by Joris Van den Bossche (jorisvandenbossche):*\n> There is another case, where some set of UDFs are predefined and then referenced (e.g. by name) in incoming plans. In that scenario I think a nested registry is considerably less useful and the ability to unregister or override would be helpful.\r\n\r\nYes, and that is the use case that I was talking about (since that is what the pyarrow register_scalar_function enabled you to do)\r\n\r\n"
        },
        {
            "created_at": "2022-10-06T07:05:34.044Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17613332) by Yaron Gvili (rtpsw):*\nWeston is correct that the main use case I designed nested registries for is embedded UDFs, or at least UDFs that are used in the context of a particular scope, such as a single plan's execution. However, see also [the case I noted here](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17539044&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17539044).\r\n\r\n> But that seems not very practical that you need to remember for each function in which registry it lives to ensure you pass the correct one when calling it.\r\n\r\nI believe you are referring to a burden on the user, but I don't think the user would actually need to do this. A normal case is when a first piece of code gets passed in a registry and wants to pass along a registry to a second piece of code. So, the first piece of code has two basic things it can do:\r\n1. Pass the registry unmodified; this keeps working in the same scope.\n1. Pass a nested registry wrapping it with some modifications; this creates a nested scope.\n   \n   In these cases, the registry being used at each piece of code is managed on stack, so when the second piece of code returns the first piece of code continues with its original registry, and the user need not manage registries manually. It is straightforward to extend this to other cases, like passing from a main thread to working threads.\n   \n   > > There is another case, where some set of UDFs are predefined and then referenced (e.g. by name) in incoming plans. In that scenario I think a nested registry is considerably less useful and the ability to unregister or override would be helpful.\n   > Yes, and that is the use case that I was talking about (since that is what the pyarrow register_scalar_function enabled you to do)\n   \n   Even in such a case where one must remove functions, I'd recommend creating a new registry instance with the desired functions removed (perhaps by initializing a builder from an existing registry instance) then to edit an existing registry instance that may be in use elsewhere, in order to make it much harder to (inadvertently) create side-effect or race conditions. Still, note that it is very easy for a nested registry to effectively support function removal, basically by registering a null function on a name, that overrides the same-named function of the parent registry; as usual, the nested registry can stay fixed once set up."
        },
        {
            "created_at": "2022-10-06T08:18:30.177Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17613360) by Vibhatha Lakmal Abeykoon (vibhatha):*\n`[~rtpsw]` \u00a0I think what `[~jorisvandenbossche]` \u00a0referring to is the following process being a management for the user.\r\n\r\n>\u00a0I believe you are referring to a burden on the user, but I don't think the user would actually need to do this. A normal case \u00a0is when a first piece of code gets passed in a registry and wants to pass along a registry to a second piece of code. So, the first piece of code has two basic things it can do:\r\n1. Pass the registry unmodified; this keeps working in the same scope.\n1. Pass a nested registry wrapping it with some modifications; this creates a nested scope.\n   \n   In the regular case it is just always `pc.call_function(..)`, in this case we have to always make sure we do `registry_x.call_function`, isn't it?\u00a0\n   \n   While with an approach of the ability to just drop what you don't need is way easier. I think just a usability piece considering one use case.\u00a0\n   \n   May be we should also allow the ability to unregister/override functions. That would provide flexibility for the users to use the UDFs for the said scenarios."
        },
        {
            "created_at": "2022-10-07T15:50:42.528Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17614131) by Yaron Gvili (rtpsw):*\nI'm not against a specific and simple solution for a simple use case, and you're welcome to pursue it. In this discussion, my main aim was to explain how all use cases discussed here are supported in a straightforward way using nested registries and without the need to modify a registry instance while in use.\r\n\r\n> In the regular case it is just always `pc.call_function(..)`, in this case we have to always make sure we do `registry_x.call_function`, isn't it?\r\n\r\nWith this question, the discussion shifts from whether registry function removal is necessary (I argued it isn't) to how best to design a user API for calling registry functions in the context of at least this use case.\r\n\r\nI argue we can design a user API that encapsulates the active registry, so that the function caller need not remember it, as follows. The execution context could manage a stack of nested registries, so that a call-function invocation would automatically lookup the registry at the top of the stack. When a piece of code wants to set up a nested registry for a second piece of code it intends to invoke, it does so by adding the nested registry to this stack, invoking the second piece of code, and popping the stack. This context stack management ensures the correct registry instance is always in scope.\r\n\r\nOf course, that we can doesn't mean that we must. My aim in this point is to show that there is a well-designed alternative for registry function removal.\r\n\r\n> While with an approach of the ability to just drop what you don't need is way easier.\r\n\r\nIMHO, it's a bit easier (e.g., removing a function from an existing registry instance vs creating a nested registry instance and removing from it) but less safe (potential side-effects and race conditions). A design tension between usability and safety is common, and calls for prioritization. My vote is to prioritize safety.\r\n\r\n> May be we should also allow the ability to unregister/override functions. That would provide flexibility for the users to use the UDFs for the said scenarios.\r\n\r\nIf I'm forced to accept this way of registry editing, I'd say that then the docs would need to be very clear about the safety issues this practice raises and to describe a safer alternative as discussed here. I think if the safer alternative is not implemented via an easy API (like the one I described) then users will surely practice the less-safe alternative. This is why I view that adding these docs is a bit better but still insufficient for safety."
        },
        {
            "created_at": "2022-10-07T17:38:06.198Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17614178) by Weston Pace (westonpace):*\nI'm +1 on Yaron's points regarding safety.\r\n\r\nUse cases:\r\n\r\n \\* Adding extra functions for unit tests (the original motivation for this particular JIRA I think)\r\n\r\nSolution: Create a nested registry for the unit tests\r\n\r\n \\* User wants to predefine a bunch of UDFs that will last for the duration of the process\r\n\r\nSolution: Replace the default registry with a nested registry based on the old default registry\r\n\r\n- User wants plan-specific UDFs\n  \n  Solution: Nested registry for the plan based on the default registry\n"
        },
        {
            "created_at": "2022-10-08T03:18:57.368Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17614337) by Vibhatha Lakmal Abeykoon (vibhatha):*\nI am also not against the safety features discussed. +1 on that.\u00a0\r\n\r\nOnly concern is about the usability. Not sure if that can be handled in this Jira.\u00a0\r\n\r\nI like the idea about an API to make use the nested registries as a stack and make a caller which scans through the registries and finding the function being called. Should we create a separate ticket for this?\u00a0\r\n\r\nRegarding the usecases,\u00a0\r\n\r\nProbably the second use case can be added to this JIRA. But the third case seems to be a separate ticket.\r\n\r\ncc `[~westonpace]` \u00a0"
        },
        {
            "created_at": "2022-10-08T07:34:32.713Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17614394) by Yaron Gvili (rtpsw):*\n> Only concern is about the usability. Not sure if that can be handled in this Jira.\u00a0\r\n\r\nMakes sense to tackle usability of the nested registry approach in a separate jira, perhaps in the context of one of the use cases Weston listed.\r\n\r\n> I like the idea about an API to make use the nested registries as a stack and make a caller which scans through the registries and finding the function being called. Should we create a separate ticket for this?\u00a0\r\n\r\nThe caller would only need to pick up and query the nested registry instance at the top of the stack. This is because each nested registry instance except the bottom one is linked to a registry instance one step lower on the stack via a parent link and will refer to its parent automatically.\r\n\r\nYes, I think it is clearer to handle the implementation of a nested-registry-stack in one issue and any use of it (like in `CallFunction` or `pc.call_function`) in another issue."
        },
        {
            "created_at": "2022-10-08T08:25:27.516Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17614418) by Vibhatha Lakmal Abeykoon (vibhatha):*\n+1 , I agree. `[~jorisvandenbossche]` \u00a0any thoughts?\u00a0"
        },
        {
            "created_at": "2022-10-08T08:33:02.002Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17614429) by Antoine Pitrou (apitrou):*\nI agree with the general idea of nested compute registries. For now we should keep those explicit."
        },
        {
            "created_at": "2022-10-08T08:35:24.555Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17614430) by Vibhatha Lakmal Abeykoon (vibhatha):*\nGreat, I will update this PR accordingly."
        },
        {
            "created_at": "2022-11-07T09:01:53.611Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17629698) by Yaron Gvili (rtpsw):*\nWhich PR would this be?"
        },
        {
            "created_at": "2022-11-07T09:05:00.020Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16211?focusedCommentId=17629700) by Vibhatha Lakmal Abeykoon (vibhatha):*\nThis is the PR\n\nhttps://github.com/apache/arrow/pull/14308\n\n\n\n\u2013 \nVibhatha Abeykoon\n"
        }
    ]
}