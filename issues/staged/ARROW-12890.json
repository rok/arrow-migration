{
    "issue": {
        "title": "[C++] Implement arrow::Table::clone() -> std::shared_ptr<arrow::Table>",
        "body": "***Note**: This issue was originally created as [ARROW-12890](https://issues.apache.org/jira/browse/ARROW-12890). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nImplement arrow::Table::clone() -> std::shared_ptr<arrow::Table>\r\n\r\nIt should return a new instance (deep copy) of the arrow table data",
        "created_at": "2021-05-27T01:13:33.000Z",
        "updated_at": "2021-11-23T17:58:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-11-23T17:58:57.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-27T09:00:21.469Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12890?focusedCommentId=17352344) by Antoine Pitrou (apitrou):*\nCan you explain why this is needed?"
        },
        {
            "created_at": "2021-05-27T12:50:26.745Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12890?focusedCommentId=17352447) by Ben Kietzman (bkietz):*\nI'm guessing the motivation here is to create an instance of the table whose buffers etc can be safely mutated. Throughout the arrow library, we prefer to consider structures like Arrays and Tables sealed and immutable. So instead of cloning a Table and mutating the clone stylistically it'd be preferable to construct new tables. For example, if you wanted to mutate column \"a\" of a table by adding a constant to every element the arrow pattern would be to produce the new column, then construct a new Table with the new column \"a\" (shallow) copies of the previous table's columns \"b\", \"c\" "
        },
        {
            "created_at": "2021-05-27T13:20:18.805Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12890?focusedCommentId=17352469) by Antoine Pitrou (apitrou):*\nSo this would deep-copy all buffers even though only some of them may need mutating? Or I am misunderstanding?"
        },
        {
            "created_at": "2021-05-27T15:09:42.501Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12890?focusedCommentId=17352550) by Ben Kietzman (bkietz):*\nTo be clear, my statements were conjecture. `[~aucahuasi]` could you confirm or tell us your use case for clone()?\r\n\r\nSide note: I think the subtlety of communicating how deeply we copy/clone an object is an excellent recommendation to eschew copying and use construction instead"
        },
        {
            "created_at": "2021-05-27T16:08:58.588Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12890?focusedCommentId=17352596) by Wes McKinney (wesm):*\nI think it would be better for an application to implements its own copy-on-write conventions if it needs to mutate memory. It's unclear that `arrow::Table` is the right data structure to base this on (as opposed to a lower-level data structure that deals mostly with the `ArrayData` containers)"
        },
        {
            "created_at": "2021-05-27T19:39:08.783Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12890?focusedCommentId=17352718) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nIs mainly because I need to\u00a0 send a copy of the table over the wire.\r\n\r\nPerhaps what I need here is just send the table as is"
        },
        {
            "created_at": "2021-11-23T17:58:57.668Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12890?focusedCommentId=17448167) by Antoine Pitrou (apitrou):*\nI will close this for now."
        }
    ]
}