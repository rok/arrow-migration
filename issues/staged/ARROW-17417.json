{
    "issue": {
        "title": "[R] Implement typeof() in Arrow dplyr queries",
        "body": "***Note**: This issue was originally created as [ARROW-17417](https://issues.apache.org/jira/browse/ARROW-17417). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently this is useless because it always returns the string `environment`, but in dbplyr, duckdb and others have the typeof function, so it works as is.\r\n\r\n\r\n```r\n\r\ndplyr::starwars |>\r\n  dplyr::transmute(x = typeof(films))\r\n#> # A tibble: 87 \u00d7 1\r\n#>    x\r\n#>    <chr>\r\n#>  1 list\r\n#>  2 list\r\n#>  3 list\r\n#>  4 list\r\n#>  5 list\r\n#>  6 list\r\n#>  7 list\r\n#>  8 list\r\n#>  9 list\r\n#> 10 list\r\n#> # \u2026 with 77 more rows\r\n#> # \u2139 Use `print(n = ...)` to see more rows\r\n\r\ndplyr::starwars |>\r\n  arrow::to_duckdb() |>\r\n  dplyr::transmute(x = typeof(films)) |>\r\n  dplyr::collect()\r\n#> # A tibble: 87 \u00d7 1\r\n#>    x\r\n#>    <chr>\r\n#>  1 VARCHAR[]\r\n#>  2 VARCHAR[]\r\n#>  3 VARCHAR[]\r\n#>  4 VARCHAR[]\r\n#>  5 VARCHAR[]\r\n#>  6 VARCHAR[]\r\n#>  7 VARCHAR[]\r\n#>  8 VARCHAR[]\r\n#>  9 VARCHAR[]\r\n#> 10 VARCHAR[]\r\n#> # \u2026 with 77 more rows\r\n#> # \u2139 Use `print(n = ...)` to see more rows\r\n\r\ndplyr::starwars |>\r\n  arrow::arrow_table() |>\r\n  dplyr::transmute(x = typeof(films)) |>\r\n  dplyr::collect()\r\n#> # A tibble: 87 \u00d7 1\r\n#>    x\r\n#>    <chr>\r\n#>  1 environment\r\n#>  2 environment\r\n#>  3 environment\r\n#>  4 environment\r\n#>  5 environment\r\n#>  6 environment\r\n#>  7 environment\r\n#>  8 environment\r\n#>  9 environment\r\n#> 10 environment\r\n#> # \u2026 with 77 more rows\r\n#> # \u2139 Use `print(n = ...)` to see more rows\r\n```\r\n\r\nI would expect it to work as follows.\r\n\r\n```r\n\r\ndplyr::starwars |>\r\n  arrow::arrow_table() |>\r\n  dplyr::transmute(x = arrow::infer_type(films)$ToString()) |>\r\n  dplyr::collect()\r\n#> # A tibble: 87 \u00d7 1\r\n#>    x\r\n#>    <chr>\r\n#>  1 list<item: string>\r\n#>  2 list<item: string>\r\n#>  3 list<item: string>\r\n#>  4 list<item: string>\r\n#>  5 list<item: string>\r\n#>  6 list<item: string>\r\n#>  7 list<item: string>\r\n#>  8 list<item: string>\r\n#>  9 list<item: string>\r\n#> 10 list<item: string>\r\n#> # \u2026 with 77 more rows\r\n#> # \u2139 Use `print(n = ...)` to see more rows\r\n```",
        "created_at": "2022-08-15T14:26:10.000Z",
        "updated_at": "2022-08-15T14:26:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}