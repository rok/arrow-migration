{
    "issue": {
        "title": "[C++] Implement is_distinct_from and is_not_distinct_from kernels",
        "body": "***Note**: This issue was originally created as [ARROW-16718](https://issues.apache.org/jira/browse/ARROW-16718). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSome SQL engines have the comparison operators `IS DISTINCT FROM` and `IS NOT DISTINCT FROM`. These are so-called {_}null-safe comparison operators{_}.\r\n\r\nAs explained in the Impala docs:\r\n> The IS DISTINCT FROM operator, and its converse the IS NOT DISTINCT FROM operator, test whether or not values are identical. IS NOT DISTINCT FROM is similar to the = operator, and IS DISTINCT FROM is similar to the != operator, except that NULL values are treated as identical. Therefore, IS NOT DISTINCT FROM returns true rather than NULL, and IS DISTINCT FROM returns false rather than NULL, when comparing two NULL values. If one of the values being compared is NULL and the other is not, IS DISTINCT FROM returns true and IS NOT DISTINCT FROM returns false, again instead of returning NULL in both cases.\r\nIt would be a nice convenience to have these implemented as kernels in Arrow.\r\n\r\nN.B. some SQL engines use the comparison operator `<=>` as shorthand for `IS NOT DISTINCT FROM`.",
        "created_at": "2022-06-02T03:41:53.000Z",
        "updated_at": "2022-06-30T15:16:13.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-06-02T07:58:33.931Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16718?focusedCommentId=17545326) by Antoine Pitrou (apitrou):*\nThis could be an option to the comparison kernels. cc `[~westonpace]`"
        },
        {
            "created_at": "2022-06-23T10:42:44.882Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16718?focusedCommentId=17557995) by Alessandro Molina (amol-):*\nIn general I noticed that the user experience with null values is not very easy to wrap your head around.\r\n\r\nFor example, it might not be immediately obvious that to check is something is `NULL` comparing it to `pyarrow.NA` is not going to work\r\n\r\n```Java\n\r\n>>> null_string = pa.scalar(None, pa.string())\r\n>>> null_string.is_valid\r\nFalse\r\n>>> null_string == pa.NA\r\nFalse\r\n```\r\n\r\nbut comparing it to a Null value of same type will work\r\n\r\n```Java\n\r\n>>> null_string == pa.scalar(None, pa.string())\r\nTrue\r\n```\r\n\r\nSo in this case we are behaving partially null-safe (a string null is different than a null but is equal to another string null)\r\nOn the counterpart using `pyarrow.compute.equal` does behave differently\r\n\r\n```Java\n\r\n>>> pc.equal(null_string, pa.scalar(None, pa.string()))\r\n<pyarrow.BooleanScalar: None>\r\n```\r\n\r\nWhich can be considered not null safe."
        },
        {
            "created_at": "2022-06-30T15:13:38.771Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16718?focusedCommentId=17561086) by Ian Cook (icook):*\nFYI, Substrait has an `is_not_distinct_from` comparison function: https://github.com/substrait-io/substrait/blob/1080f06298d8e50abcd6acfaa6c425326a7e0579/extensions/functions_comparison.yaml#L21"
        }
    ]
}