{
    "issue": {
        "title": "Support pandas nullable integer type Int64",
        "body": "***Note**: This issue was originally created as [ARROW-7002](https://issues.apache.org/jira/browse/ARROW-7002). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nPandas has a nullable integer type Int64 which does not seem to be supported by feather yet.\r\n```python\n\r\nfrom pyarrow import feather\r\nimport pandas as pd\r\n\r\ncol1 = pd.Series([0, None, 1, 23]).astype('Int64')\r\ncol2 = pd.Series([1, 3, 2, 1]).astype('Int64')\r\n\r\ndf = pd.DataFrame({'a': col1, 'b': col2})\r\n\r\nfeather.write_feather(df, '/tmp/foo')\r\n```\r\nGives following error message:\r\n```java\n\r\n---------------------------------------------------------------------------\r\nArrowTypeError                            Traceback (most recent call last)\r\n<ipython-input-107-8cc611a30355> in <module>\r\n----> 1 feather.write_feather(df, '/tmp/foo')\r\n\r\n~/miniconda3/envs/sci36/lib/python3.6/site-packages/pyarrow/feather.py in write_feather(df, dest)\r\n    181     writer = FeatherWriter(dest)\r\n    182     try:\r\n--> 183         writer.write(df)\r\n    184     except Exception:\r\n    185         # Try to make sure the resource is closed\r\n\r\n~/miniconda3/envs/sci36/lib/python3.6/site-packages/pyarrow/feather.py in write(self, df)\r\n     92         # TODO(wesm): Remove this length check, see ARROW-1732\r\n     93         if len(df.columns) > 0:\r\n---> 94             table = Table.from_pandas(df, preserve_index=False)\r\n     95             for i, name in enumerate(table.schema.names):\r\n     96                 col = table[i]\r\n\r\n~/miniconda3/envs/sci36/lib/python3.6/site-packages/pyarrow/table.pxi in pyarrow.lib.Table.from_pandas()\r\n\r\n~/miniconda3/envs/sci36/lib/python3.6/site-packages/pyarrow/pandas_compat.py in dataframe_to_arrays(df, schema, preserve_index, nthreads, columns, safe)\r\n    551     if nthreads == 1:\r\n    552         arrays = [convert_column(c, f)\r\n--> 553                   for c, f in zip(columns_to_convert, convert_fields)]\r\n    554     else:\r\n    555         from concurrent import futures\r\n\r\n~/miniconda3/envs/sci36/lib/python3.6/site-packages/pyarrow/pandas_compat.py in <listcomp>(.0)\r\n    551     if nthreads == 1:\r\n    552         arrays = [convert_column(c, f)\r\n--> 553                   for c, f in zip(columns_to_convert, convert_fields)]\r\n    554     else:\r\n    555         from concurrent import futures\r\n\r\n~/miniconda3/envs/sci36/lib/python3.6/site-packages/pyarrow/pandas_compat.py in convert_column(col, field)\r\n    542             e.args += (\"Conversion failed for column {0!s} with type {1!s}\"\r\n    543                        .format(col.name, col.dtype),)\r\n--> 544             raise e\r\n    545         if not field_nullable and result.null_count > 0:\r\n    546             raise ValueError(\"Field {} was non-nullable but pandas column \"\r\n\r\n~/miniconda3/envs/sci36/lib/python3.6/site-packages/pyarrow/pandas_compat.py in convert_column(col, field)\r\n    536 \r\n    537         try:\r\n--> 538             result = pa.array(col, type=type_, from_pandas=True, safe=safe)\r\n    539         except (pa.ArrowInvalid,\r\n    540                 pa.ArrowNotImplementedError,\r\n\r\nArrowTypeError: ('Did not pass numpy.dtype object', 'Conversion failed for column a with type Int64')\r\n```\r\nxref:\u00a0<https://stackoverflow.com/questions/58571419/exporting-dataframe-with-null-able-int64-from-pandas-to-r>\r\n \u00a0",
        "created_at": "2019-10-27T07:52:04.000Z",
        "updated_at": "2019-10-28T10:19:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-10-28T10:19:23.000Z"
    },
    "comments": [
        {
            "created_at": "2019-10-28T10:17:10.126Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7002?focusedCommentId=16960902) by Joris Van den Bossche (jorisvandenbossche):*\nWriting is already supported with pandas master and latest arrow (v0.15), so it is waiting on the next pandas release to have it in a stable version.\r\n\r\n```Java\n\r\nIn [1]: from pyarrow import feather \r\n   ...: import pandas as pd \r\n   ...:  \r\n   ...: col1 = pd.Series([0, None, 1, 23]).astype('Int64') \r\n   ...: col2 = pd.Series([1, 3, 2, 1]).astype('Int64') \r\n   ...:  \r\n   ...: df = pd.DataFrame({'a': col1, 'b': col2}) \r\n   ...:  \r\n   ...: feather.write_feather(df, '/tmp/foo') \r\n   ...:                                                                                                                                                                                                            \r\n\r\nIn [2]: pd.read_feather('/tmp/foo')                                                                                                                                                                                \r\nOut[2]: \r\n      a  b\r\n0   0.0  1\r\n1   NaN  3\r\n2   1.0  2\r\n3  23.0  1\r\n```\r\n\r\nSo converting to R should work properly. Reading it back in with Python will still give you a float array (if there were NaNs), as that is the default conversion of arrow integer to pandas. There is work going on to also preserve those specific pandas types in that case (see ARROW-2428)."
        },
        {
            "created_at": "2019-10-28T10:19:23.904Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7002?focusedCommentId=16960903) by Joris Van den Bossche (jorisvandenbossche):*\nClosing as a duplicate of ARROW-5379"
        }
    ]
}