{
    "issue": {
        "title": "[R][C++] Installation issues on Fedora 33 with hardening flags",
        "body": "***Note**: This issue was originally created as [ARROW-11963](https://issues.apache.org/jira/browse/ARROW-11963). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI have been trying to install \"arrow\" package, using R 4.0.4 on Linux (Fedora 33).\u00a0 I have built and installed the C++ arrow libraries (using release version 3.0.0) following the instructions at [https://arrow.apache.org/docs/r/.](https://arrow.apache.org/docs/r/)\r\n\r\nThen, from R, I tried to install \"arrow\":\r\n```java\n\r\n install.packages(\"arrow\")\n```\r\nThis fails during the verification stage:\r\n```java\n\r\n** testing if installed package can be loaded from temporary location \r\n sh: line 1: \u00a08386 Segmentation fault \u00a0\u00a0\u00a0\u00a0\u00a0(core dumped) R_TESTS= '/usr/lib64/R/bin/R' --no-save --no-restore --no-echo 2>&1 < '/tmp/RtmpWtq6vV/file1f4b570a7335'\r\ncaught segfault ***\r\n address (nil), cause 'memory not mapped'\r\n\r\nTraceback:\r\n 1: dyn.load(file, DLLpath = DLLpath, ...)\r\n 2: library.dynam(lib, package, package.lib)\r\n 3: loadNamespace(package, lib.loc)\r\n 4: doTryCatch(return(expr), name, parentenv, handler)\r\n 5: tryCatchOne(expr, names, parentenv, handlers[[1L]])\r\n 6: tryCatchList(expr, classes, parentenv, handlers)\r\n 7: tryCatch({ \u00a0\u00a0\u00a0attr(package, \"LibPath\") <- which.lib.loc \u00a0\u00a0\u00a0ns <- loadNamespace(package, lib.loc) \u00a0\u00a0\u00a0env <- attachNamespace(ns, pos = pos, deps, exclude, include.only)}, error = function(e) { \u00a0\u00a0\u00a0P <- if (!is.null(cc <- conditionCall(\r\ne))) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0paste(\" in\", deparse(cc)[1L]) \u00a0\u00a0\u00a0else \"\" \u00a0\u00a0\u00a0msg <- gettextf(\"package or namespace load failed for %s%s:\\n %s\", \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sQuote(package), P, conditionMessage(e)) \u00a0\u00a0\u00a0if (logical.return) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message(paste(\"Error:\", msg), do\r\nmain = NA) \u00a0\u00a0\u00a0else stop(msg, call. = FALSE, domain = NA)})\r\n 8: library(pkg_name, lib.loc = lib, character.only = TRUE, logical.return = TRUE)\r\n 9: withCallingHandlers(expr, packageStartupMessage = function(c) tryInvokeRestart(\"muffleMessage\"))\r\n10: suppressPackageStartupMessages(library(pkg_name, lib.loc = lib, \u00a0\u00a0\u00a0\u00a0character.only = TRUE, logical.return = TRUE))\r\n11: doTryCatch(return(expr), name, parentenv, handler)\r\n12: tryCatchOne(expr, names, parentenv, handlers[[1L]])\r\n13: tryCatchList(expr, classes, parentenv, handlers)\r\n14: tryCatch(expr, error = function(e) { \u00a0\u00a0\u00a0call <- conditionCall(e) \u00a0\u00a0\u00a0if (!is.null(call)) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (identical(call[[1L]], quote(doTryCatch))) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0call <- sys.call(-4L) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dcall <- deparse(call)[1L] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prefix <- past\r\ne(\"Error in\", dcall, \": \") \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LONG <- 75L \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sm <- strsplit(conditionMessage(e), \"\\n\")[[1L]] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w <- 14L + nchar(dcall, type = \"w\") + nchar(sm[1L], type = \"w\") \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (is.na(w)) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w <- 14L + nchar(dcall, type = \r\n\"b\") + nchar(sm[1L], \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type = \"b\") \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (w > LONG) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prefix <- paste0(prefix, \"\\n \u00a0\") \u00a0\u00a0\u00a0} \u00a0\u00a0\u00a0else prefix <- \"Error : \" \u00a0\u00a0\u00a0msg <- paste0(prefix, conditionMessage(e), \"\\n\") \u00a0\u00a0\u00a0.Internal(seterrmessage(msg[1L])\r\n) \u00a0\u00a0\u00a0if (!silent && isTRUE(getOption(\"show.error.messages\"))) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cat(msg, file = outFile) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Internal(printDeferredWarnings()) \u00a0\u00a0\u00a0} \u00a0\u00a0\u00a0invisible(structure(msg, class = \"try-error\", condition = e))})\r\n15: try(suppressPackageStartupMessages(library(pkg_name, lib.loc = lib, \u00a0\u00a0\u00a0\u00a0character.only = TRUE, logical.return = TRUE)))\r\n16: tools:::.test_load_package(\"arrow\", \"/work/R/x86_64-redhat-linux-gnu-library/4.0/00LOCK-arrow/00new\")\r\n\r\nAn irrecoverable exception occurred. R is aborting now ...\r\n\r\nERROR: loading failed\r\n```\r\nR version info:\r\n```java\n\r\nR version 4.0.4 (2021-02-15) -- \"Lost Library Book\"\r\nCopyright (C) 2021 The R Foundation for Statistical Computing\r\nPlatform: x86_64-redhat-linux-gnu (64-bit)\r\n```\r\nAny thoughts on where to look? (I can only get arrow to work with the latest development version of R and not the release version of 4.0.4).\u00a0 Thanks.",
        "created_at": "2021-03-14T16:32:42.000Z",
        "updated_at": "2022-10-24T18:23:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-10-24T18:23:25.000Z"
    },
    "comments": [
        {
            "created_at": "2021-03-15T15:27:06.814Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17301705) by Neal Richardson (npr):*\nCould you be more specific about what instructions you followed for installing the C++ libraries? And can you provide the compilation logs/output from that and from installing the R package?\r\n\r\nTo be clear, you shouldn't need to build the C++ libraries separately (unless you want to); `install.packages(\"arrow\")` will handle that safely for you if they're not found on your system."
        },
        {
            "created_at": "2021-03-16T23:28:29.209Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17302971) by Ahmed Riza (dr.riza@gmail.com):*\n`[~npr]`, here's how I built the C++ libraries after downloading the release tar ball from <https://www.mirrorservice.org/sites/ftp.apache.org/arrow/arrow-3.0.0/apache-arrow-3.0.0.tar.gz,> and extracting it:\r\n```java\n\r\ncd /work/apache-arrow-3.0.0/cpp\r\nmkdir build\r\ncd build\r\n\r\ncmake -DARROW_COMPUTE=ON -DARROW_CSV=ON -DARROW_DATASET=ON -DARROW_FILESYSTEM=ON -DARROW_JEMALLOC=ON -DARROW_JSON=ON -DARROW_PARQUET=ON -DCMAKE_BUILD_TYPE=release -DARROW_INSTALL_NAME_RPATH=OFF -DARROW_HDFS=ON -DARROW_S3=ON -DARROW_PYTHON=OFF -DARROW_WITH_SNAPPY=ON -DARROW_WITH_ZLIB=ON -DARROW_EXTRA_ERROR_CONTEXT=ON \u00a0\u00a0..\r\n\r\nsudo make install\n```\r\nThis installs the headers and libraries to \"/usr/local/include/arrow\" and \"/usr/local/lib64\".\r\n\r\nI've done some basic sanity checks with the compiled C++ libraries by running some test C++ code with them, e.g. reading a parquet file etc and that works fine.\r\n\r\nThe reason I compiled the C++ libraries myself is because the attempt to install \"arrow\" did not succeed entirely.\u00a0 The `install.package(\"arrow\")` seemed to do the right thing, but then when I try to use any of the \"arrow\" functions from R I ran into the error shown below:\r\n```java\n\r\n> library(arrow)\r\n\r\nAttaching package: \u2018arrow\u2019\r\n\r\nThe following object is masked from \u2018package:utils\u2019:\r\n\r\n \u00a0\u00a0\u00a0timestamp\r\n\r\n> df <- read_parquet(\"/tmp/small.parquet\") \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\nError in io___MemoryMappedFile__Open(path, mode) : \u00a0\r\n \u00a0Cannot call io___MemoryMappedFile__Open(). See https://arrow.apache.org/docs/r/articles/install.html for help installing Arrow C++ libraries. \u00a0\r\n> \r\n```\r\nI have set LD_LIBRARY_PATH to the location of the C++ libs:\r\n```java\n\r\n$ echo $LD_LIBRARY_PATH \u00a0\r\n/usr/local/lib64\r\n\r\n$ ls -latr /usr/local/lib64/\r\n\r\ntotal 108992\r\ndrwxr-xr-x. \u00a03 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a027 Sep 21 \u00a02019 python3.7\r\ndrwxr-xr-x \u00a0\u00a02 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06 Jul 27 \u00a02020 bpf\r\ndrwxr-xr-x. 16 root root \u00a0\u00a0\u00a0\u00a0\u00a0265 Jul 27 \u00a02020 ..\r\n-rw-r--r-- \u00a0\u00a01 root root \u00a0\u00a0529554 Aug 28 \u00a02020 libavro.a\r\n-rwxr-xr-x \u00a0\u00a01 root root \u00a0\u00a0385984 Aug 28 \u00a02020 libavro.so.23.0.0\r\nlrwxrwxrwx \u00a0\u00a01 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a017 Aug 28 \u00a02020 libavro.so.23 -> libavro.so.23.0.0\r\nlrwxrwxrwx \u00a0\u00a01 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a013 Aug 28 \u00a02020 libavro.so -> libavro.so.23\r\ndrwxr-xr-x \u00a0\u00a03 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a027 Jan 30 22:17 python3.9\r\ndrwxr-xr-x \u00a0\u00a03 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a019 Mar 11 16:33 cmake\r\n-rwxr-xr-x \u00a0\u00a01 root root 26147944 Mar 16 23:37 libarrow.so.300.0.0\r\n-rw-r--r-- \u00a0\u00a01 root root 38207524 Mar 16 23:37 libarrow_bundled_dependencies.a\r\n-rw-r--r-- \u00a0\u00a01 root root 30107900 Mar 16 23:37 libarrow.a\r\n-rw-r--r-- \u00a0\u00a01 root root \u00a08223390 Mar 16 23:38 libparquet.a\r\n-rwxr-xr-x \u00a0\u00a01 root root \u00a04243704 Mar 16 23:39 libparquet.so.300.0.0\r\n-rwxr-xr-x \u00a0\u00a01 root root \u00a01273496 Mar 16 23:39 libarrow_dataset.so.300.0.0\r\n-rw-r--r-- \u00a0\u00a01 root root \u00a02465090 Mar 16 23:39 libarrow_dataset.a\r\nlrwxrwxrwx \u00a0\u00a01 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a019 Mar 16 23:51 libarrow.so.300 -> libarrow.so.300.0.0\r\nlrwxrwxrwx \u00a0\u00a01 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a015 Mar 16 23:51 libarrow.so -> libarrow.so.300\r\nlrwxrwxrwx \u00a0\u00a01 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a027 Mar 16 23:51 libarrow_dataset.so.300 -> libarrow_dataset.so.300.0.0\r\nlrwxrwxrwx \u00a0\u00a01 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a023 Mar 16 23:51 libarrow_dataset.so -> libarrow_dataset.so.300\r\nlrwxrwxrwx \u00a0\u00a01 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a021 Mar 16 23:51 libparquet.so.300 -> libparquet.so.300.0.0\r\nlrwxrwxrwx \u00a0\u00a01 root root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a017 Mar 16 23:51 libparquet.so -> libparquet.so.300\r\ndrwxr-xr-x. \u00a07 root root \u00a0\u00a0\u00a0\u00a04096 Mar 16 23:51 .\r\ndrwxr-xr-x \u00a0\u00a02 root root \u00a0\u00a0\u00a0\u00a0\u00a0173 Mar 16 23:51 pkgconfig\r\n```\r\n\u00a0\r\n\r\nAttached the output from `cmake`,\u00a0 `make` and the install of the \"arrow\" package from R.\r\n\r\nI also removed my locally built C++ arrow libraries and tried the installation of \"arrow\" package from R again from afresh.\u00a0 The logs are attached <font color=\"#ff5454\">R_arrow_install_clean.log.gz.</font>\r\n\r\nAs can be seen from the latter log, the \"arrow\" package install from R looks OK, but then run into the same library issue as before with the same error from R as above.\r\n\r\nPlease let me know, if there's anything else I can provide."
        },
        {
            "created_at": "2021-03-17T00:25:43.558Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17302991) by Neal Richardson (npr):*\nThanks. This kind of failure often means that the compiler that built the Arrow C++ library is not the same as the one that R used to compile the package. When you just do `install.packages(\"arrow\")` without installing the C++ library separately, it will build with the matching compiler and flags. I'm not sure why that installation failed for you, but if you look at the docs link that the error message suggested (https://arrow.apache.org/docs/r/articles/install.html#troubleshooting), there are a few possibilities. \r\n\r\nAmong the options now:\r\n\r\n1. Check out what `R CMD config CXX11` says, and check that it matches the compiler from your cmake output (gcc 10 I believe I saw, it's at the top). If that doesn't match, you can set CC and CXX to match what R has set and retry the C++ library build. (See https://github.com/apache/arrow/blob/master/r/tools/linuxlibs.R#L317-L318 for reference.)\r\n2. Uninstall the Arrow C++ library you built, set the env var `ARROW_R_DEV=true` for more verbosity on the build, retry the bundled build with install.packages(\"arrow\"), and let's see why that failed. Even if #1 works for you, I would be interested to see this if you don't mind--we work hard so that this doesn't happen, and I'd like to know more so we can fix it."
        },
        {
            "created_at": "2021-03-17T00:35:18.062Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17302995) by Neal Richardson (npr):*\nSorry, I started writing that before I saw that you had added more logs. I think those two recommendations are still what we need to do: check compiler versions, and retry with ARROW_R_DEV=true for more output. (We should make the build failure suggest that more directly.)"
        },
        {
            "created_at": "2021-03-17T18:16:10.318Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17303632) by Ahmed Riza (dr.riza@gmail.com):*\nFollowed (2), i.e. set `ARROW_R_DEV=true`, and tried installing \"arrow\" from R.\u00a0 Can see the problem now, but no idea why this is happening or what the solution might be.\u00a0 Please see <font color=\"#000000\">R_install_with_debug.log.gz</font>.\u00a0\r\n\r\nIt appears that `je_malloc` configure fails and as a result, the R \"arrow\" installer just carries on without actually building the C++ libraries and reports success at the end.\u00a0 Hence (unless we build with `ARROW_R_DEV=true`), we don't know that the C++ library build actually failed (the clue may be that it built rather too quickly, since the arrow C++ libraries should take a while to build).\r\n\r\nI've captured the output from the `je_malloc` config step in <font color=\"#000000\">jemalloc_ep_config.log</font>.\u00a0 We can see the error here:\r\n```java\n\r\nconfigure:3209: checking whether we are cross compiling\r\nconfigure:3217: /usr/bin/gcc -o conftest \u00a0\u00a0-Wl,-z,relro -Wl,--as-needed -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld conftest.c \u00a0>&5\r\n/usr/bin/ld: /tmp/ccSIfPEI.o: relocation R_X86_64_32 against `.rodata' can not be used when making a PIE object; recompile with -fPIE\r\ncollect2: error: ld returned 1 exit status\r\n```\r\nThis is rather odd, as I can compile an empty C program with the same exact compiler flags without a problem from an interactive shell.\u00a0 i.e. the following works fine for me from a shell. I did not need to specify the `-fPIE` flag.\r\n```java\n\r\n$ echo \"int main() { return 0; }\" > t.c\r\n$ /usr/bin/gcc -o t -Wl,-z,relro -Wl,--as-needed -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld t.c\r\n$ ldd t\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linux-vdso.so.1 (0x00007ffe8096c000)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0libc.so.6 => /lib64/libc.so.6 (0x00007f1213c5d000)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/lib64/ld-linux-x86-64.so.2 (0x00007f1213e5d000)\r\n\r\n$ file t\r\n\r\nt: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=60128f23b0248b3b868d2f08f7108501db4c131c, for GNU/Linux 3.2.0, not stripped\r\n\r\n```\r\nSo, not sure why it is failing during configure when triggered from the R \"arrow\" package install.\u00a0 A bit of a mystery to me at this stage.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-03-17T18:58:48.179Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17303664) by Neal Richardson (npr):*\nThanks a lot for the details. Googling the error message, I see a few similar-sounding issues out there in other projects, and there's some debate about whether to set a -`no-pie` flag somewhere or if that's a bad idea. I don't know enough about this to say if there's something we can add to our build config to solve this. `[~kou]` `[~apitrou]`?\r\n\r\nTo work around this for now, you can set the environment variable `ARROW_JEMALLOC=OFF` and it will build without jemalloc.\r\n\r\nRegarding \"we don't know that the C++ library build actually failed,\" I agree that's a problem. It seems we went a little too far in suppressing output in the build to avoid confusion, and we should make this failure mode very clear."
        },
        {
            "created_at": "2021-03-17T20:05:30.892Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17303694) by Neal Richardson (npr):*\nHmm, it looks like a build failure is supposed to print a useful message already, will have to explore why it isn't https://github.com/apache/arrow/blob/master/r/tools/nixlibs.R#L340-L343"
        },
        {
            "created_at": "2021-03-17T20:52:41.295Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17303715) by Ahmed Riza (dr.riza@gmail.com):*\nThanks for the pointers.\u00a0 With `jemalloc` turned off, the build now succeeds.\u00a0 Unfortunately, still get a segfault at the end when R verifies the package.\u00a0 Attached the logs from the R package install build as <font color=\"#000000\">R_install_20210317204844.log</font>.gz\r\n\r\nI'm wondering whether this is to do with the `hardened` compiler flags that are being used with the package installer,\r\n```java\n\r\n-specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 \n```\r\nI don't currently have a non-Fedora system to verify this.\u00a0 I suspect that the arrow C++ libraries are being built with different flags - need to see what `cmake` is doing.\r\n\r\nI'm going to try build everything by hand again, including R, so I can control the compiler flags and not use the `hardening` flags, which I think are turned on by default when building RPMs and so on.\u00a0 Since my default R installation was installed using the Fedora package manager `dnf`, the package compilations started from that version of R are also using the same `hardened` compiler flags."
        },
        {
            "created_at": "2021-03-17T21:13:04.674Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17303727) by Ahmed Riza (dr.riza@gmail.com):*\nIndeed, it does appear that the `hardening` flags on RHEL systems is the issue.\u00a0 Just compiled R 4.0.4 from source, and the \"arrow\" package installation from R works fine.\u00a0 \r\n\r\nAfter enabling `snappy` and `s3`, got a fully working arrow package in R.\u00a0 Nice :)\r\n```java\n\r\ng++ -std=gnu++11 -shared -L/opt/R-4.0.4/lib64/R/lib -L/usr/local/lib64 -o arrow.so array.o array_from_vector.o array_to_vector.o arraydata.o arrowExports.o buffer.o chunkedarray.o compression.o compute.o csv.o dataset.o datatype.o expre\r\nssion.o feather.o field.o filesystem.o imports.o io.o json.o memorypool.o message.o parquet.o py-to-r.o recordbatch.o recordbatchreader.o recordbatchwriter.o scalar.o schema.o symbols.o table.o threadpool.o -L/tmp/RtmpxaRDF7/R.INSTALL27\r\nf2ec9c341c/arrow/libarrow/arrow-3.0.0/lib -larrow_dataset -lparquet -larrow -larrow -larrow_bundled_dependencies -larrow_dataset -lparquet -L/opt/R-4.0.4/lib64/R/lib -lR\r\n\r\ninstalling to /home/ahmed/R/x86_64-pc-linux-gnu-library/4.0/00LOCK-arrow/00new/arrow/libs\r\n** R\r\n** inst\r\n** byte-compile and prepare package for lazy loading\r\n** help\r\n*** installing help indices\r\n** building package indices\r\n** installing vignettes\r\n** testing if installed package can be loaded from temporary location\r\n** checking absolute paths in shared objects and dynamic libraries\r\n** testing if installed package can be loaded from final location\r\n** testing if installed package keeps a record of temporary installation path\r\n* DONE (arrow)\r\n\r\nThe downloaded source packages are in\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2018/tmp/RtmpEkkgkI/downloaded_packages\u2019\r\n\r\n> library(arrow)\r\nAttaching package: \u2018arrow\u2019\r\n\r\nThe following object is masked from \u2018package:utils\u2019:\r\n\r\n \u00a0\u00a0\u00a0timestamp\r\n\r\n> df <- read_parquet(\"/tmp/small.parquet\")\r\n\r\n> length(df)\r\n\r\n[1] 2\r\n\r\n> arrow_with_s3()\r\n\r\n[1] TRUE\r\n```\r\nNow I can play with arrow from R. :)\r\n\r\nThanks a lot with the help and this wonderful addition to R.\u00a0 Much appreciated\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-03-18T10:23:15.997Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304021) by Antoine Pitrou (apitrou):*\n[~dr.riza@gmail.com] Can you get a gdb backtrace for the segfault?"
        },
        {
            "created_at": "2021-03-18T10:23:37.274Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304022) by Antoine Pitrou (apitrou):*\n(note the backtrace will be more useful if you can compile in debug mode)"
        },
        {
            "created_at": "2021-03-18T11:10:03.161Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304050) by Ahmed Riza (dr.riza@gmail.com):*\n`[~apitrou]`, is there any environment variable or flag that can be set so that the R package installer compiles the C++ code with debug mode instead of release mode (since we only observe the segfault when installing the package from within R)."
        },
        {
            "created_at": "2021-03-18T11:58:55.510Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304097) by Antoine Pitrou (apitrou):*\nI have no idea. Perhaps `[~jonkeane]` can help."
        },
        {
            "created_at": "2021-03-18T13:23:24.406Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304141) by Ahmed Riza (dr.riza@gmail.com):*\nWe can see the compiler flags, that R will use, by inspecting the \"R CMD config\" from the \"R\" package that's installed via the Fedora package manager.\u00a0 Some sample output (we can see the explicit hardening flags that will be used for any compilation of packages):\r\n```java\n\r\n$ /usr/bin/R CMD config --all\r\n\r\nCC = gcc -m64\r\n\r\nCFLAGS = -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-stron\r\ng -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection\r\n\r\nCPICFLAGS = -fpic\r\n\r\nCPPFLAGS = -I/usr/local/include\r\n\r\nCXX = g++ -m64 -std=gnu++11\r\n\r\nCXXFLAGS = -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-str\r\nong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection\r\n \n```\r\nI believe that when the R arrow package installer compiles the arrow C++ libraries (when they are missing on the system), the \"hardening\" flags are not being used.\u00a0 I believe it is this mismatch that's causing the segfaults.\r\n\r\nAt this point, I have no idea as to how to build the arrow C++ libraries themselves with the hardening flags.\u00a0 This is obviously something specific to each Linux distro.\u00a0 I think other distros, e.g. Debian based ones have similar hardening features.\u00a0"
        },
        {
            "created_at": "2021-03-18T13:27:10.948Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304144) by Antoine Pitrou (apitrou):*\nAgain, the backtrace would give a clearer idea."
        },
        {
            "created_at": "2021-03-18T14:02:14.439Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304170) by Jonathan Keane (jonkeane):*\nOne thing you could try is setting the environment variable `EXTRA_CMAKE_FLAGS` to include additional / override the default cmake flags that are being built. I would do this with `ARROW_R_DEV=TRUE` as well so you can see the output + confirm it's doing what we expect. So for a debug build I believe `EXTRA_CMAKE_FLAGS=\"-DCMAKE_BUILD_TYPE=Debug\"` would be sufficient before building / installing from R. "
        },
        {
            "created_at": "2021-03-18T22:51:21.993Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304513) by Ahmed Riza (dr.riza@gmail.com):*\n`[~apitrou]`, even though I've got a debug build of arrow C++ libraries, the issue is that the core dump is not meaningful since R itself needs to be compiled with debug symbols.\u00a0 I can do this, but then I won't be able to reproduce the segfault, since my local builds do not crash and work fine as mentioned earlier in this thread.\r\n\r\n`[~jonkeane]`, I tried setting the `EXTRA_CMAKE_FLAGS` but dd not get used during the C++ arrow library build. I set all the following flags:\r\n```java\n\r\n$ echo $EXTRA_CMAKE_FLAGS \u00a0\r\n-O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=\r\n/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection \n```\r\nHowever, I can't see any used. Here's the compilation of a file showing all the flags that are being used\r\n```java\n\r\ncd /work/apache-arrow-3.0.0/cpp/build/src/arrow/dataset && /usr/bin/c++ -DARROW_DS_EXPORTING -DARROW_EXTRA_ERROR_CONTEXT -DARROW_HAVE_RUNTIME_AVX2 -DARROW_HAVE_RUNTIME_AVX512 -DARROW_HAVE_RUNTIME_BMI2 -DARROW_HAVE_RUNTIME_SSE4_2 -DARROW\r\n_HAVE_SSE4_2 -DARROW_HDFS -DARROW_JEMALLOC -DARROW_JEMALLOC_INCLUDE_DIR=\"\" -DARROW_WITH_RE2 -DARROW_WITH_SNAPPY -DARROW_WITH_TIMING_TESTS -DARROW_WITH_UTF8PROC -DARROW_WITH_ZLIB -DURI_STATIC_BUILD -DUTF8PROC_STATIC -I/work/apache-arrow-\r\n3.0.0/cpp/build/src -I/work/apache-arrow-3.0.0/cpp/src -I/work/apache-arrow-3.0.0/cpp/src/generated -I/work/apache-arrow-3.0.0/cpp/src/parquet -isystem /work/apache-arrow-3.0.0/cpp/thirdparty/flatbuffers/include -isystem /work/apache-ar\r\nrow-3.0.0/cpp/build/jemalloc_ep-prefix/src -isystem /work/apache-arrow-3.0.0/cpp/build/src/rapidjson_ep/include -isystem /work/apache-arrow-3.0.0/cpp/build/re2_ep-install/include -isystem /work/apache-arrow-3.0.0/cpp/build/utf8proc_ep-i\r\nnstall/include -isystem /home/ahmed/software/hadoop-3.3.0/include -isystem /work/apache-arrow-3.0.0/cpp/build/awssdk_ep-install/include -Wno-noexcept-type \u00a0-fdiagnostics-color=always -O3 -DNDEBUG \u00a0-Wall -fno-semantic-interposition -msse\r\n4.2 \u00a0-O2 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/arrow_dataset_objlib.dir/file_parquet.cc.o -c /work/apache-arrow-3.0.0/cpp/src/arrow/dataset/file_parquet.cc\r\n \n```"
        },
        {
            "created_at": "2021-03-19T15:35:24.858Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17304972) by Neal Richardson (npr):*\n`EXTRA_CMAKE_FLAGS` passes extra args to `cmake`, but it looks like you tried to pass extra compiler flags. I believe the cmake variable for that is called `CMAKE_CXX_FLAGS`, but in any case, to get a debug Arrow C++ build from the bundled build inside the R package, you'd want to do what Jonathan said. Or if you have a local git checkout of arrow, you could edit this line of the build script:\u00a0https://github.com/apache/arrow/blob/master/r/inst/build_arrow_static.sh#L67"
        },
        {
            "created_at": "2021-03-19T16:24:55.157Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17305006) by Antoine Pitrou (apitrou):*\n[~dr.riza@gmail.com] I'm not sure what you mean with \"not meaningful\". You may not be able to get all symbols, but hopefully the backtrace can be better than nothing. Can you try to get a backtrace?"
        },
        {
            "created_at": "2022-10-24T18:23:25.781Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11963?focusedCommentId=17623333) by Neal Richardson (npr):*\nA lot has changed in the package build system since this issue was reported. If you still have trouble, please open a new issue."
        }
    ]
}