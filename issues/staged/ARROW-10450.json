{
    "issue": {
        "title": "[JS] Table.fromStruct() silently truncates vectors to the first chunk",
        "body": "***Note**: This issue was originally created as [ARROW-10450](https://issues.apache.org/jira/browse/ARROW-10450). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nTable.fromStruct() only uses the first chunk from the input vector.\r\n```javascript\n\r\nimport { Bool, Field, Int32, Struct, Table, Vector } from \"apache-arrow\";\r\n\r\nconst myStruct = new Struct([\r\n  Field.new({ name: \"over\", type: new Int32() }),\r\n  Field.new({ name: \"out\", type: new Bool() })\r\n]);\r\n\r\nconst data = [];\r\nfor(let i=0;i<1500;i++) {\r\n  data.push({ over:i, out:i%2 === 0 });\r\n\r\n// create a vector with two chunks\r\nconst victor = Vector.from({\r\n  type: myStruct,\r\n  /*highWaterMark: Infinity,*/\r\n  values: data\r\n});\r\nconsole.log(victor.length);  // 1500 \r\n\r\nconst table = Table.fromStruct(victor);\r\nconsole.log(table.length);   // 1000\r\n\r\n```\r\n\u00a0The workaround is to set\u00a0highWaterMark to Infinity\r\n\r\n\u00a0\r\n\r\nTable.new() works as expected\r\n```javascript\n\r\nconst int32Array = new Int32Array(1500);for(let i=0;i<1500;i++)  int32Array[i] = i;\r\nconst intVector = Vector.from({  type: new Int32(),  values: int32Array});\r\nconsole.log(intVector.length);  // 1500\r\n\r\n\u00a0const intTable = Table.new({ intColumn:intVector });\r\nconsole.log(intTable.length);   // 1500\r\n\r\n```\r\n\u00a0\r\n\r\nThe origin seems to be in Chunked.data() but I don't understand the code enough to propose a fix.",
        "created_at": "2020-10-31T09:24:04.000Z",
        "updated_at": "2022-01-16T22:49:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-02-05T06:07:39.738Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10450?focusedCommentId=17279371) by Paul Taylor (paul.e.taylor):*\nYeah, this is unfortunately a tricky spot with the current Chunked vectors. The `.data` getter on Chunked only returns the data field of the first chunk. Table.fromStruct() doesn't expect to get a ChunkedVector as input, it expects a single-chunk StructVector.\r\n\r\nYour `Vector.from({data: <JS objects>}) ` call runs those JS objects through the Arrow Struct Builder and serializes them into Arrow vectors of binary data.\r\n\r\nThe `highWaterMark` defaults to 1000 to avoid the case where someone tries to serialize lots of data, and the builder has to grow allocations past the 2GB limit. Builder internal buffers grow geometrically, so this is relatively easy to do with strings.\r\n\r\nAs you noted, you don't run into this issue when you do `Table.new()` because that method expects its input is likely split up across multiple chunks. The only downside is now you have a Table of struct of fields, rather than a Table of fields."
        },
        {
            "created_at": "2022-01-16T22:49:41.474Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10450?focusedCommentId=17476895) by Dominik Moritz (domoritz):*\nSince Vectors now are always chunked, I suspect this issue has gone away. Can you confirm?"
        }
    ]
}