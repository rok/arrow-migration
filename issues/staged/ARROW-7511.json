{
    "issue": {
        "title": "[C#] - Batch / Data Size Can't Exceed 2 gigs",
        "body": "***Note**: This issue was originally created as [ARROW-7511](https://issues.apache.org/jira/browse/ARROW-7511). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhile the Arrow spec does not forbid batches larger than 2 gigs, the C# library can not support this in its current form due to limits on managed memory as it tries to put the whole batch into a single Span<byte>/Memory<byte>\r\n\r\nIt is possible to fix this by not trying to use Memory/Span/byte[] for the entire Batch.. and instead move the memory mapping to the ArrowBuffers.\u00a0 This only move the problem 'lower' as it would then still set the limit of a Column Data in a single batch to be 2 Gigs.\u00a0\u00a0\r\n\r\nThis seems like plenty of memory... but if you think of strings columns, the data is just one giant string appended to together with offsets and it can get very large quickly.\r\n\r\nI think the unfortunate problem is that memory management in the C# managed world is always going to hit the 2 gig limit somewhere. (please correct me if I am wrong on this statement, but I thought i read some where that Memory<T> / Span<T> are limited to int and changing to long would require major framework rewrites - but i may be conflating that with array)\r\n\r\nThat ultimately means the C# library either has to reject files of certain characteristics (ie validation checks on opening) , or the spec needs put upper limits on certain internal arrow constructs (ie arrow buffer) to eliminate the need for more than a 2 gigs of contiguous memory for the smallest arrow object.\r\n\r\nHowever, If the spec was indeed designed for the smallest buffer object to be larger than 2 gigs, or for the entire memory buffer of arrow to be contiguous, one has to wonder if at some point, it might just make sense for the C# library to use the C++ library as its memory manager as replicating a very large blocks of memory more work than its wroth.\r\n\r\nIn any case,\u00a0 this issue is more about 'deferring' the 2 gig size problem by moving it down to the buffer objects... This might require some re-write of the batch data structures\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2020-01-07T20:14:59.000Z",
        "updated_at": "2020-01-08T02:51:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C#",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-01-08T02:51:18.118Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7511?focusedCommentId=17010293) by Anthony Abate (abbot):*\nNow i remember why I thought Memory and Span can't support more than 2 gigs:\r\n\r\nThe **.Slice()** function only takes int32\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.memory-1.slice?view=netcore-3.1#System_Memory_1_Slice_System_Int32_System_Int32_\r\n\r\n\u00a0"
        }
    ]
}