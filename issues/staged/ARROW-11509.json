{
    "issue": {
        "title": "[C++][Compute] Overhaul CanCast() helper function",
        "body": "***Note**: This issue was originally created as [ARROW-11509](https://issues.apache.org/jira/browse/ARROW-11509). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n{\\{CanCast(const DataType& from, const DataType& to)}} is intended to return true iff a cast can be made between the provided types. Since it currently only consults the type_id of the types and the kernels implementing the casts, it will return true for some unsupported casts. For example: `CanCast(*list(null()), *list(list(int32())))` currently returns true, even though that cast is not supported. It would also be useful to provide an overloads to specify\u00a0 restrictions on a cast; for example \\`CanCast(int32(), int8(), guaranteed_safe)` would return false since int32 may overflow when cast to int8",
        "created_at": "2021-02-05T19:17:18.000Z",
        "updated_at": "2021-02-05T19:17:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": []
}