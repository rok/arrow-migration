{
    "issue": {
        "title": "[Python] Refactor the Scalar classes",
        "body": "***Note**: This issue was originally created as [ARROW-9017](https://issues.apache.org/jira/browse/ARROW-9017). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe situation regarding scalars in Python is currently not optimal.\r\n\r\nWe have two different \"types\" of scalars:\r\n\r\n- `ArrayValue(Scalar)` (and subclasses of that for all types):  this is used when you access a single element of an array (eg `arr[0]`)\n- `ScalarValue(Scalar)` (and subclasses of that for _some_ types): this is used when wrapping a C++ scalar into a python scalar, eg when you get back a scalar from a reduction like `arr.sum()`.\n  \n  And while we have two versions of scalars, neither of them can actually easily be used as scalar as they both can't be constructed from a python scalar (there is no `scalar(1)` function to use when calling a kernel, for example).\n  \n  I think we should try to unify those scalar classes? (which probably means getting rid of the ArrayValue scalar)\n  \n  In addition, there is an issue of trying to re-use python scalar <-> arrow conversion code, as this is also logic for this in the `python_to_arrow.cc` code. But this is probably a bigger change. cc `[~kszucs]` \n  \n",
        "created_at": "2020-06-02T15:44:26.000Z",
        "updated_at": "2020-07-06T22:16:07.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-07-06T22:15:57.000Z"
    },
    "comments": [
        {
            "created_at": "2020-06-02T15:45:13.680Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9017?focusedCommentId=17123950) by Joris Van den Bossche (jorisvandenbossche):*\nAnd comment from Ben: relevant recent addition:\r\n\r\n```Java\n\r\n Result<std::shared_ptr<Scalar>> Array::GetScalar(int64_t i) const;\r\n```"
        },
        {
            "created_at": "2020-06-02T15:50:59.076Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9017?focusedCommentId=17123957) by Antoine Pitrou (apitrou):*\nWe should definitely unify those around a Cython wrapper to C++ `arrow::Scalar`, IMHO."
        },
        {
            "created_at": "2020-06-02T16:51:54.815Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9017?focusedCommentId=17124048) by Krisztian Szucs (kszucs):*\nI started to factor out the elementwise conversion code required to convert single python objects to intermediate C representation. I hit a couple of roadblocks and there were also missing utilities like the GetScalar Ben has implemented recently. \r\n\r\nWe also have an outstanding issue with the auto chunking during conversion: in case of nested types a binary/string field gets chunked if the size limited is reached but the rest of the fields have a single chunk resulting a corrupted nested array."
        },
        {
            "created_at": "2020-07-06T22:15:58.007Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9017?focusedCommentId=17152353) by Wes McKinney (wesm):*\nIssue resolved by pull request 7519\n<https://github.com/apache/arrow/pull/7519>"
        }
    ]
}