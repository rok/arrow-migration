{
    "issue": {
        "title": "[Python] Support inferring nested ndarray with ndim > 1",
        "body": "***Note**: This issue was originally created as [ARROW-5645](https://issues.apache.org/jira/browse/ARROW-5645). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFollow up work to ARROW-4350",
        "created_at": "2019-06-18T20:25:44.000Z",
        "updated_at": "2022-01-24T14:47:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-08-28T14:31:01.939Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5645?focusedCommentId=16917827) by Simeon H.K. Fitch (metasim):*\nThis GitHub issue describes the desired end state:\r\n\r\nhttps://github.com/apache/arrow/issues/4802\r\n\r\nThis feature is important for users of PySpark who want to construct tensors to feed them to ML libraries such as Keras via `pandas_udf`s."
        },
        {
            "created_at": "2021-04-15T17:11:32.436Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5645?focusedCommentId=17322332) by Antoine Pitrou (apitrou):*\nNested Python lists are now inferred correctly, but we still lack inference but nested ndarrays with \"object\" dtype."
        },
        {
            "created_at": "2022-01-24T13:32:17.684Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5645?focusedCommentId=17481087) by Joris Van den Bossche (jorisvandenbossche):*\nWhile we also don't yet support converting a nd array to fixed sized list array in `pa.array(..)`, you can actually convert it manually:\r\n\r\n```Java\n\r\nIn [39]: arr = np.arange(30).reshape(10, 3)\r\n\r\nIn [40]: arr\r\nOut[40]: \r\narray([[ 0,  1,  2],\r\n       [ 3,  4,  5],\r\n       [ 6,  7,  8],\r\n...\r\n\r\nIn [41]: pa.array(arr)\r\n...\r\nArrowInvalid: only handle 1-dimensional arrays\r\n\r\nIn [42]: pa.FixedSizeListArray.from_arrays(arr.ravel(order=\"C\"), arr.shape[1])\r\nOut[42]: \r\n<pyarrow.lib.FixedSizeListArray object at 0x7f4025471040>\r\n[\r\n  [\r\n    0,\r\n    1,\r\n    2\r\n  ],\r\n  [\r\n    3,\r\n    4,\r\n    5\r\n  ],\r\n  [\r\n    6,\r\n    7,\r\n    8\r\n  ],\r\n...\r\n```"
        },
        {
            "created_at": "2022-01-24T13:34:29.189Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5645?focusedCommentId=17481091) by Joris Van den Bossche (jorisvandenbossche):*\n> Nested Python lists are now inferred correctly, but we still lack inference but nested ndarrays with \"object\" dtype.\r\n\r\n`[~apitrou]` that actually seems to work ?\r\n\r\n```Java\n\r\nIn [56]: arr = np.arange(30).reshape(10, 3)\r\n\r\nIn [57]: arr = np.array(pd.Series(list(arr), dtype=object))\r\n\r\nIn [58]: arr\r\nOut[58]: \r\narray([array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8]),\r\n       array([ 9, 10, 11]), array([12, 13, 14]), array([15, 16, 17]),\r\n       array([18, 19, 20]), array([21, 22, 23]), array([24, 25, 26]),\r\n       array([27, 28, 29])], dtype=object)\r\n\r\nIn [59]: pa.array(arr)\r\nOut[59]: \r\n<pyarrow.lib.ListArray object at 0x7f406db85b20>\r\n[\r\n  [\r\n    0,\r\n    1,\r\n    2\r\n  ],\r\n  [\r\n    3,\r\n    4,\r\n    5\r\n  ],\r\n  [\r\n    6,\r\n    7,\r\n    8\r\n  ],\r\n...\r\n```"
        },
        {
            "created_at": "2022-01-24T14:47:22.590Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5645?focusedCommentId=17481144) by Antoine Pitrou (apitrou):*\nYes, it's quite possible that it would work now."
        }
    ]
}