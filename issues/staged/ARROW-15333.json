{
    "issue": {
        "title": "[C++] Specifying all fields as included_fields is slower on an mmap file than omitting included_fields",
        "body": "***Note**: This issue was originally created as [ARROW-15333](https://issues.apache.org/jira/browse/ARROW-15333). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis turned up when I was working on the IPC read/write benchmarks.\r\n\r\nGiven an mmap'd IPC file with 1 column these two operations should be identical:\r\n\r\n```Java\n\r\nipc::IpcReadOptions options;\r\noptions.included_fields = {0}\r\nauto reader = *ipc::RecordBatchFileReader::Open(input.get(), options);\r\n```\r\n\r\n```Java\n\r\nipc::IpcReadOptions options;\r\noptions.included_fields = {}\r\nauto reader = *ipc::RecordBatchFileReader::Open(input.get(), options);\r\n```\r\n\r\nHowever, the latter is ~10 times faster than the former.  We should detect when we are specifying all the fields and fallback to a \"load all fields\" behavior.\r\n\r\nBenchmark results:\r\n\r\n```\n\r\nReadMmapCachedFile/num_cols:1/is_partial:0/real_time               125726 ns       125677 ns         4359 bytes_per_second=124.278G/s\r\nReadMmapCachedFile/num_cols:1/is_partial:1/real_time              1404416 ns      1403848 ns          429 bytes_per_second=11.1256G/s\r\n```",
        "created_at": "2022-01-14T01:57:24.000Z",
        "updated_at": "2022-01-14T01:57:24.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}