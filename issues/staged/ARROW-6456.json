{
    "issue": {
        "title": "[C++] Possible to reduce object code generated in compute/kernels/take.cc?",
        "body": "***Note**: This issue was originally created as [ARROW-6456](https://issues.apache.org/jira/browse/ARROW-6456). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAccording to \r\n\r\nhttps://gist.github.com/wesm/90f73d050a81cbff6772aea2203cdf93\r\n\r\ntake.cc is our largest piece of object code in the codebase. This is a pretty important function but I wonder if it's possible to make the implementation \"leaner\" than it is currently to reduce generated code, without sacrificing performance. ",
        "created_at": "2019-09-04T23:06:09.000Z",
        "updated_at": "2020-06-15T17:06:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-06-15T17:06:43.000Z"
    },
    "comments": [
        {
            "created_at": "2019-09-05T12:55:51.437Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6456?focusedCommentId=16923407) by Uwe Korn (uwe):*\nWe should investigate building with link time optimization. While improving performance, another great benefit of it is that it reduces binary size, especially in such cases where there is a lot of similar code like in this case.\n\nDrawback will be that link times will increase thus we should only add it to a single CI job but use it in release builds."
        },
        {
            "created_at": "2019-09-17T16:50:46.173Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6456?focusedCommentId=16931650) by Antoine Pitrou (apitrou):*\nUh, take.cc is already very slow to compile so piling more compile / build time with LTO is not the best way to look at it IMHO."
        },
        {
            "created_at": "2020-01-13T17:55:11.565Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6456?focusedCommentId=17014526) by Antoine Pitrou (apitrou):*\nThe cause is quite simple: there's cartesian product of 8 index types \\* 31 data types \\* 8 combinations of (indices can be null, values can be null, indices can be out of bounds) which generates a lot of different specializations."
        },
        {
            "created_at": "2020-05-25T19:39:42.960Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6456?focusedCommentId=17116202) by Wes McKinney (wesm):*\nI will take care of this. "
        },
        {
            "created_at": "2020-06-15T17:06:43.186Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6456?focusedCommentId=17136025) by Wes McKinney (wesm):*\nThis was done in ARROW-5760"
        }
    ]
}