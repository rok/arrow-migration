{
    "issue": {
        "title": "[C++] Make Decimal representations consistent",
        "body": "***Note**: This issue was originally created as [ARROW-13617](https://issues.apache.org/jira/browse/ARROW-13617). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nRight now Decimal128 is represented as two 64-bit integers (in native endian order) and Decimal256 is represented as a std::array (in native endian order). We could make these consistent (presumably there should be no performance impact). It may also make it easier to extract a common base class or other niceties.",
        "created_at": "2021-08-12T17:07:18.000Z",
        "updated_at": "2022-01-14T06:01:27.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-01-13T10:59:45.000Z"
    },
    "comments": [
        {
            "created_at": "2021-08-13T14:14:54.487Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13617?focusedCommentId=17398686) by Yibo Cai (yibocai):*\nJust FYI. I did a superficial investigation of unifying decimal128/256 (ARROW-13439). I abandoned the task as my approach is not very satisfying.\r\nBut I do think it's beneficial to combined decimal128/256."
        },
        {
            "created_at": "2021-08-13T14:16:27.784Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13617?focusedCommentId=17398689) by David Li (lidavidm):*\nAha, I thought I had seen someone try this before. Thanks for providing the reference."
        },
        {
            "created_at": "2021-09-15T13:14:59.934Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13617?focusedCommentId=17415501) by David Li (lidavidm):*\nAnother reason why this would be good: nominally Decimal is the same as FixedSizeBinary, however, in compute kernels, currently they need separate handling because their scalar representations are different (Decimal vs Buffer). You could imagine trying to work with all these types via util::string_view or const uint8_t\\*, however, the representation for BasicDecimal128 makes this hard; there is no native-endian representation that we can just create a pointer to. (Well, the fields in BasicDecimal128 are in native-endian order so you can reinterpret_cast a pointer to the right field, but it would be a little cleaner to have both implementations of native_endian_array() return a std::array& instead of a std::array)."
        },
        {
            "created_at": "2022-01-13T10:59:45.461Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13617?focusedCommentId=17475264) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 12134\n<https://github.com/apache/arrow/pull/12134>"
        }
    ]
}