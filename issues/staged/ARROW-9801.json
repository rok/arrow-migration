{
    "issue": {
        "title": "DictionaryArray with non-unique values are silently corrupted when written to a Parquet file",
        "body": "***Note**: This issue was originally created as [ARROW-9801](https://issues.apache.org/jira/browse/ARROW-9801). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSuppose that you have a DictionaryArray with repeated values in the dictionary:\r\n\r\n`>>> import pyarrow as pa`\r\n`>>> pa_array = pa.DictionaryArray.from_arrays(`\r\n`...\u00a0 \u00a0 \u00a0pa.array([0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]),`\r\n`...\u00a0 \u00a0 \u00a0pa.array([\"one\", \"two\", \"three\", \"one\", \"two\", \"three\"])`\r\n`... )`\r\n`>>> pa_array`\r\n`<pyarrow.lib.DictionaryArray object at 0x7f271befa4a0>``-- dictionary:`\r\n` [`\r\n`\u00a0 \u00a0 \"one\",`\r\n`\u00a0 \u00a0 ``\"two\",`\r\n`\u00a0 \u00a0 ``\"three\",`\r\n`\u00a0 \u00a0 ``\"one\",`\r\n`\u00a0 \u00a0 ``\"two\",`\r\n`\u00a0 \u00a0 ``\"three\"`\r\n` ]`\r\n`-- indices:`\r\n` [`\r\n`\u00a0 \u00a0 ``0,`\r\n`\u00a0 \u00a0 ``1,`\r\n`\u00a0 \u00a0 ``2,`\r\n`\u00a0 \u00a0 ``3,`\r\n`\u00a0 \u00a0 ``4,`\r\n`\u00a0 \u00a0 ``5,`\r\n`\u00a0 \u00a0 ``0,`\r\n`\u00a0 \u00a0 ``1,`\r\n`\u00a0 \u00a0 ``2,`\r\n`\u00a0 \u00a0 ``3,`\r\n`\u00a0 \u00a0 ``4,`\r\n`\u00a0 \u00a0 ``5`\r\n` ]`\r\n\r\nAccording to [the documentation\\|[https://arrow.apache.org/docs/format/Columnar.html#dictionary-encoded-layout]],\r\n> Dictionary encoding is a data representation technique to represent values by integers referencing a\u00a0**dictionary**\u00a0usually consisting of unique values.\r\nso a DictionaryArray like the one above is arguably invalid, but if so, then I'd expect some error messages, rather than corrupt data, when I try to write it to a Parquet file.\r\n\r\n`>>> pa_table = pa.Table.from_batches(`\r\n`...\u00a0 \u00a0 \u00a0[pa.RecordBatch.from_arrays([pa_array], [\"column\"])]`\r\n`... )`\r\n`>>> pa_table`\r\n`pyarrow.Table`\r\n`column: dictionary<values=string, indices=int64, ordered=0>`\r\n`>>> import pyarrow.parquet`\r\n`>>> pyarrow.parquet.write_table(pa_table, \"tmp2.parquet\")`\r\n\r\nNo errors so far. So we try to read it back and view it:\r\n\r\n`\u200b>>> pa_loaded = pyarrow.parquet.read_table(\"tmp2.parquet\")`\r\n`>>> pa_loaded`\r\n`pyarrow.Table`\r\n`column: dictionary<values=string, indices=int32, ordered=0>`\r\n`>>> pa_loaded.to_pydict()`\r\n`Traceback (most recent call last):`\r\n` File \"<stdin>\", line 1, in <module>`\r\n` File \"pyarrow/table.pxi\", line 1587, in pyarrow.lib.Table.to_pydict`\r\n` File \"pyarrow/table.pxi\", line 405, in pyarrow.lib.ChunkedArray.to_pylist`\r\n` File \"pyarrow/array.pxi\", line 1144, in pyarrow.lib.Array.to_pylist`\r\n` File \"pyarrow/scalar.pxi\", line 712, in pyarrow.lib.DictionaryScalar.as_py`\r\n` File \"pyarrow/scalar.pxi\", line 701, in pyarrow.lib.DictionaryScalar.value.__get__`\r\n` File \"pyarrow/error.pxi\", line 122, in pyarrow.lib.pyarrow_internal_check_status`\r\n` File \"pyarrow/error.pxi\", line 111, in pyarrow.lib.check_status`\r\n`pyarrow.lib.ArrowIndexError: tried to refer to element 3 but array is only 3 long`\r\n\r\nLooking more closely at this, we see that the dictionary has been minimized to include only unique values, but the indices haven't been correctly translated:\r\n\r\n`>>> pa_loaded[\"column\"]`\r\n`<pyarrow.lib.ChunkedArray object at 0x7f0a8fb16a90>`\r\n`[`\r\n`\u00a0 \u00a0 ````-- dictionary:`\r\n`\u00a0 \u00a0 ``[`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``\"one\",`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``\"two\",`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``\"three\"`\r\n`\u00a0 \u00a0 ``]`\r\n`\u00a0 \u00a0 ``-- indices:`\r\n`\u00a0 \u00a0 ``[`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``0,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``1,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``2,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``3,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``0,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``1,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``1,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``1,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``2,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``3,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``0,`\r\n`\u00a0 \u00a0 ``\u00a0 \u00a0 ``1`\r\n`\u00a0 \u00a0 ``]`\r\n`]`\r\n\r\nIt looks like an attempt was made to minimize it, but the indices ought to be\r\n\r\n[0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]\r\n\r\nI don't know what your preferred course of action is\u2014adding an error message or fixing the attempted conversion\u2014but this is wrong. On my side, I'm adding code to prevent the creation of non-unique values in DictionaryArrays.",
        "created_at": "2020-08-19T15:54:11.000Z",
        "updated_at": "2020-10-22T09:23:07.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-10-22T09:23:07.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-19T15:56:38.843Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9801?focusedCommentId=17180638) by Jim Pivarski (jpivarski):*\nWhy does JIRA garble markdown from its own visual editor? I hope my code examples are still legible. If not, I put a lot of the same examples on <https://github.com/scikit-hep/awkward-1.0/issues/400#issuecomment-676500573>\u00a0, where I found this as a result of an error reported on Awkward Array."
        },
        {
            "created_at": "2020-10-22T09:22:35.490Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9801?focusedCommentId=17218893) by Joris Van den Bossche (jorisvandenbossche):*\n`[~jpivarski]` sorry for the late reply here (and yes, the JIRA editor is not great ...)\r\n\r\nNow, in the mean time, this is actually fixed (it was also reported on the mailing list, and fixed in ARROW-10237), and the fix should be included in pyarrow 2.0 that is just released. \r\n\r\nRepeating your example with latest pyarrow, I get now:\r\n\r\n```Java\n\r\nIn [32]: pa_loaded = pyarrow.parquet.read_table(\"tmp2.parquet\")\r\n\r\nIn [33]: pa_loaded\r\nOut[33]: \r\npyarrow.Table\r\ncolumn: dictionary<values=string, indices=int32, ordered=0>\r\n\r\nIn [35]: pa_loaded.to_pydict()\r\nOut[35]: \r\n{'column': ['one',\r\n  'two',\r\n  'three',\r\n  'one',\r\n  'two',\r\n  'three',\r\n  'one',\r\n  'two',\r\n  'three',\r\n  'one',\r\n  'two',\r\n  'three']}\r\n\r\nIn [36]: pa_loaded[\"column\"]\r\nOut[36]: \r\n<pyarrow.lib.ChunkedArray object at 0x7fdbdb37e938>\r\n[\r\n\r\n  -- dictionary:\r\n    [\r\n      \"one\",\r\n      \"two\",\r\n      \"three\"\r\n    ]\r\n  -- indices:\r\n    [\r\n      0,\r\n      1,\r\n      2,\r\n      0,\r\n      1,\r\n      2,\r\n      0,\r\n      1,\r\n      2,\r\n      0,\r\n      1,\r\n      2\r\n    ]\r\n]\r\n```\r\n\r\nSo you can see that the dictionary values are still \"minimized\" (only the unique values are preserved), but the indices are now correctly translated for this new dictionary."
        }
    ]
}