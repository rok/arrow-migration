{
    "issue": {
        "title": "[C++] Add element-wise power() compute function",
        "body": "***Note**: This issue was originally created as [ARROW-11871](https://issues.apache.org/jira/browse/ARROW-11871). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be nice to have an element-wise `power()` compute function.\r\n\r\nI.e. in analogy to [numpy.power()](https://numpy.org/doc/stable/reference/generated/numpy.power.html).",
        "created_at": "2021-03-05T11:16:33.000Z",
        "updated_at": "2021-05-12T13:56:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-03-08T17:32:40.000Z"
    },
    "comments": [
        {
            "created_at": "2021-03-08T13:39:36.672Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11871?focusedCommentId=17297355) by Joris Van den Bossche (jorisvandenbossche):*\nAdding a power kernel would indeed be nice. \r\n\r\nOne behavioural aspect that has come up in pandas is the question about what to do with nulls in case of `power(null, 0)` or `power(1, null`: propagate the null value (as is otherwise always done for element-wise arithmetic operations), or in this case return an actual result (1 in both cases). Reference to the pandas issue: https://github.com/pandas-dev/pandas/issues/29997"
        },
        {
            "created_at": "2021-03-08T15:19:40.074Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11871?focusedCommentId=17297453) by ARF (ARF1):*\n`[~jorisvandenbossche]` For what it's worth, in my book `null != 0`. To me `null` has absolutely nothing to do with the value `0`. To me `null` indicates an invalid or non-existent value and the name `null` is merely a (maybe unfortunate) historical artifact.\r\n\r\nAs a consequence in my opinion, the following should hold: `power(null, 0) == null` as well as `power(1, null) == null`.\r\n I read this as: (either) one of two operands of a binary operator is invalid or missing, hence the result is invalid or missing as well.\r\n\r\nWith this convention, if a user wants a different behaviour they can always use `fill_null(0)` to ensure that `power(fill_null(null, 0), 0) == 1` and `power(1, fill_null(null, 0)) == 1`. The converse is not true.\r\n\r\nAlso, I believe explicit is better than implicit..."
        },
        {
            "created_at": "2021-03-08T16:57:34.610Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11871?focusedCommentId=17297526) by Joris Van den Bossche (jorisvandenbossche):*\nTo clarify, my comment above was not about `null` being regarded as `0`. But rather the interpretation that `null` is seen as \"some unknown value\". And then you _can_ argue that the result is is not unknown for `power(null, 0)`, because `power(<any value>, 0)` is always 1, whatever value is passed as the first argument."
        },
        {
            "created_at": "2021-03-08T17:27:12.325Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11871?focusedCommentId=17297563) by Neal Richardson (npr):*\nThis is a duplicate of ARROW-11070 right?"
        },
        {
            "created_at": "2021-03-08T17:32:11.383Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11871?focusedCommentId=17297566) by Joris Van den Bossche (jorisvandenbossche):*\nIndeed!"
        },
        {
            "created_at": "2021-03-08T19:30:20.940Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11871?focusedCommentId=17297668) by ARF (ARF1):*\n`[~jorisvandenbossche]` Thanks for your explanations. I accept that in end this depends on the semantics of `null`. Two different programmers can legitimately understand `null` to mean different things. How a programmer understands `null` dictates the correct behaviour of `power()`.\r\n\r\nA programmer that understands `null` in an array to mean \"this is a value of the defined datatype, I just don't know what it is\" will expect `power(<any value including any unknown value>, 0) == 1`.\r\n\r\nA programmer that understands `null` in an array to mean \"this value does not exist, it is fundamentally invalid\" will expect `power(null, 0) == null`.\r\n\r\nIt would seem to me the solution is to leave the choice to the user and allow her/him to specify the desired behaviour as an option to `power`. Then the debate becomes only \"what should the default behaviour be?\" ;-) In this case, I would reverse my opinion and would argue at least for `pyarrow` to default to the python behaviour of `float('NaN')**0.0 == 1`.\r\n\r\nIf arrow has to specify a unique semantic interpretation of `null` and cannot allow user choice, I believe however `power(null, 0) == null` is the better choice due to greater versatility: As I tried to explain in my previous comment, this interpretation allows to user to obtain the alternative behaviour by using `power(fill_null(null, 0), 0) == 1`.\r\n\r\nConversely if arrow standardized on `power(null, 0) == 1` there is nothing the user can do to get the alternative behaviour. Once a value becomes non-`null`, there is no way to recover its original `null`-ness.\r\n\r\nPlease feel free to close this issue as a duplicate. I searched for issues relating to `power` and did not find ARROW-11070."
        },
        {
            "created_at": "2021-03-10T16:25:01.346Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11871?focusedCommentId=17298942) by Joris Van den Bossche (jorisvandenbossche):*\nYes, I already closed it.\r\n\r\n> It would seem to me the solution is to leave the choice to the user and allow her/him to specify the desired behaviour as an option to power.\r\n\r\nIndeed, if there are different downstream applications that might need either behaviour, an option might be best. But so that's the main reason I brought up the issue."
        }
    ]
}