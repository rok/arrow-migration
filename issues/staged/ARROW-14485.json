{
    "issue": {
        "title": "ParquetFile.read_row_group looses struct nullability when selecting one column from a struct",
        "body": "***Note**: This issue was originally created as [ARROW-14485](https://issues.apache.org/jira/browse/ARROW-14485). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis appeared minutes ago because we have a test suite that saw Arrow 6.0.0 land in PyPI. (Congrats, by the way! I've been looking forward to this one!)\r\n\r\nBelow, you'll see one thing that version 6 fixed (asking for one column in a nested struct returns only that one column) and a new error (it does not preserve nullability of the surrounding struct). Here, I'll write down the steps to reproduce and then explain.\r\n```python\n\r\nPython 3.9.7 | packaged by conda-forge | (default, Sep 29 2021, 19:20:46) \r\n[GCC 9.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyarrow.parquet\r\n>>> pyarrow.__version__\r\n'5.0.0'\r\n>>> file = pyarrow.parquet.ParquetFile(\"test8.parquet\")\r\n>>> file.schema\r\n<pyarrow._parquet.ParquetSchema object at 0x7fcf39be7c80>\r\nrequired group field_id=-1 schema {\r\n  required group field_id=-1 x (List) {\r\n    repeated group field_id=-1 list {\r\n      required group field_id=-1 item {\r\n        required int64 field_id=-1 y;\r\n        required double field_id=-1 z;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n>>> file.schema_arrow\r\nx: large_list<item: struct<y: int64 not null, z: double not null> not null> not null\r\n  child 0, item: struct<y: int64 not null, z: double not null> not null\r\n      child 0, y: int64 not null\r\n      child 1, z: double not null\r\n>>> file.read_row_group(0, [\"x.list.item.y\"]).schema\r\nx: large_list<item: struct<y: int64 not null, z: double not null> not null> not null\r\n  child 0, item: struct<y: int64 not null, z: double not null> not null\r\n      child 0, y: int64 not null\r\n      child 1, z: double not null\r\n>>> file.read_row_group(0, [\"x.list.item.y\", \"x.list.item.z\"]).schema\r\nx: large_list<item: struct<y: int64 not null, z: double not null> not null> not null\r\n  child 0, item: struct<y: int64 not null, z: double not null> not null\r\n      child 0, y: int64 not null\r\n      child 1, z: double not null\r\n>>> file.read_row_group(0).schema\r\nx: large_list<item: struct<y: int64 not null, z: double not null> not null> not null\r\n  child 0, item: struct<y: int64 not null, z: double not null> not null\r\n      child 0, y: int64 not null\r\n      child 1, z: double not null\r\n\r\nPython 3.9.7 | packaged by conda-forge | (default, Sep 29 2021, 19:20:46) \r\n[GCC 9.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyarrow.parquet\r\n>>> pyarrow.__version__\r\n'6.0.0'\r\n>>> file = pyarrow.parquet.ParquetFile(\"test8.parquet\")\r\n>>> file.schema\r\n<pyarrow._parquet.ParquetSchema object at 0x7f61e71321c0>\r\nrequired group field_id=-1 schema {\r\n  required group field_id=-1 x (List) {\r\n    repeated group field_id=-1 list {\r\n      required group field_id=-1 item {\r\n        required int64 field_id=-1 y;\r\n        required double field_id=-1 z;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n>>> file.schema_arrow\r\nx: large_list<item: struct<y: int64 not null, z: double not null> not null> not null\r\n  child 0, item: struct<y: int64 not null, z: double not null> not null\r\n      child 0, y: int64 not null\r\n      child 1, z: double not null\r\n>>> file.read_row_group(0, [\"x.list.item.y\"]).schema\r\nx: large_list<item: struct<y: int64 not null>> not null\r\n  child 0, item: struct<y: int64 not null>\r\n      child 0, y: int64 not null\r\n>>> file.read_row_group(0, [\"x.list.item.y\", \"x.list.item.z\"]).schema\r\nx: large_list<item: struct<y: int64 not null, z: double not null> not null> not null\r\n  child 0, item: struct<y: int64 not null, z: double not null> not null\r\n      child 0, y: int64 not null\r\n      child 1, z: double not null\r\n>>> file.read_row_group(0).schema\r\nx: large_list<item: struct<y: int64 not null, z: double not null> not null> not null\r\n  child 0, item: struct<y: int64 not null, z: double not null> not null\r\n      child 0, y: int64 not null\r\n      child 1, z: double not null\r\n```\r\n\u00a0In Arrow 5, asking for only column `\"x.list.item.y\"` returns a struct of type\u00a0`x: large_list<item: struct<y: int64 not null, z: double not null> not null> not null`, which was undesirable because it has unnecessarily read the `\"z\"` column, but it got all of the `\"not null\"` types right. In test8.parquet, the data are non-nullable at each level.\r\n\r\n\u00a0In Arrow 6, asking for only column `\"x.list.item.y\"` returns a struct of type\u00a0`x: large_list<item: struct<y: int64 not null>> not null`, which is great because it's not reading the `\"z\"` column, but the struct's nullability is wrong: we should see three `\"not nulls\"` here, one for the data in `y`, one for the `struct`, and one for the `list`. It's just missing the middle one.\r\n\r\nWhen I ask for two columns specifically or don't specify the columns, the nullability is correct. I think that can help to narrow it down.\r\n\r\nI've attached the file (test8.parquet). It was the same in both of the above tests (generated by Arrow 5).\r\n\r\nI labeled this as \"Python\" because I've only seen the symptom in Python, but I suspect that the actual error is in C++.",
        "created_at": "2021-10-27T01:28:14.000Z",
        "updated_at": "2021-10-27T01:28:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": []
}