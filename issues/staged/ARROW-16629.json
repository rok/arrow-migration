{
    "issue": {
        "title": "Apache Arrow Flight transport speed improvement for list structures",
        "body": "***Note**: This issue was originally created as [ARROW-16629](https://issues.apache.org/jira/browse/ARROW-16629). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI just started testing using Arrow Flight to send results from a GraphQL server with FlightServer() running on i.\r\n\r\nGraphQL defines a schema for your data output which can be mapped to an Arrow schema so I thought it would make sense to try using Arrow Flight to transport results instead of using REST style JSON records.\r\n\r\nArrow Flight was 66% faster in all case, but it didn't scale as the number of child records increased. I suspect that serializing structs or lists needs some improvement..\r\n\r\nHere is the discussion I opened including links to test scripts.\r\n\r\n<https://github.com/davlee1972/ariadne_arrow/blob/arrow_flight/benchmark/test_asgi_server.py>\r\nStandard ASGI server. Start it up with uvicorn --host=0.0.0.0 test_asgi_server:app\r\n\r\n<https://github.com/davlee1972/ariadne_arrow/blob/arrow_flight/benchmark/test_arrow_flight_server.py>\r\nNew Arrow Flight server. Start it up with python test_arrow_flight_server.py\r\n\r\n<https://github.com/davlee1972/ariadne_arrow/blob/arrow_flight/benchmark/test_asgi_arrow_client.py>\r\nBenchmarking script. Pass in length of lists to test and server host.\r\n\r\n\u00a0\r\n\r\nDiscussion from Ariadne GraphQL package.\r\n\r\n<https://github.com/mirumee/ariadne/discussions/867>\r\n\r\n10 records it was 0.049 seconds faster or 80% faster\r\n10000 records it was 0.109 seconds faster or 66% faster\r\n10 million records it was 54 seconds faster or 66% faster.\r\n\r\nAlso here is the data structure that is sent across the wire..\r\n\r\npyarrow.Table\r\ndata: struct<test_lists: struct<float_list: list<item: double>, int_list: list<item: int64>, length: int64, string_list: list<item: string>, time_spent: double>>\r\nchild 0, test_lists: struct<float_list: list<item: double>, int_list: list<item: int64>, length: int64, string_list: list<item: string>, time_spent: double>\r\nchild 0, float_list: list<item: double>\r\nchild 0, item: double\r\nchild 1, int_list: list<item: int64>\r\nchild 0, item: int64\r\nchild 2, length: int64\r\nchild 3, string_list: list<item: string>\r\nchild 0, item: string\r\nchild 4, time_spent: double\r\n\r\ndata: [\r\n\u2013 is_valid: all not null\r\n\u2013 child 0 type: struct<float_list: list<item: double>, int_list: list<item: int64>, length: int64, string_list: list<item: string>, time_spent: double>\r\n\u2013 is_valid: all not null\r\n\u2013 child 0 type: list<item: double>\r\n[[13.500371672273381,17.747395152140353,28.973205439157457,1.361443415643098,19.029191125636135,14.62284718057391,18.44333922481529,7.906278860251386,14.402464768126993,5.826040531772251]]\r\n\u2013 child 1 type: list<item: int64>\r\n[[23,3,21,15,20,4,10,16,23,25]]\r\n\u2013 child 2 type: int64\r\n[10]\r\n\u2013 child 3 type: list<item: string>\r\n[[\"qypsupwtxy\",\"vrxptpspyt\",\"qpvruwsuqq\",\"ywwpyxrvrt\",\"wswutpxxqv\",\"tsyypstxvv\",\"ytprpqsxsx\",\"wtwsxvprvu\",\"suwtrvqvwp\",\"wtsrwywwty\"]]\r\n\u2013 child 4 type: double\r\n[0]]",
        "created_at": "2022-05-23T14:55:39.000Z",
        "updated_at": "2022-05-29T17:30:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: FlightRPC",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-05-23T15:01:47.168Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16629?focusedCommentId=17540991) by David Li (lidavidm):*\nThanks, this is cool! I'll take a closer look when I get a chance, but note that Flight mostly just reuses the existing IPC code so I would actually expect that your findings probably apply to just plain old Arrow files as well, and we can optimize both at once."
        },
        {
            "created_at": "2022-05-29T17:30:54.861Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16629?focusedCommentId=17543685) by Antoine Pitrou (apitrou):*\nIf I understand the benchmark correctly, most likely the Python-Arrow back and forth conversion is the main cost factor. Could you profile to get a bit more insight?"
        }
    ]
}