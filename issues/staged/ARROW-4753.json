{
    "issue": {
        "title": "[C++] Extension types and layouts for text-optimized data structures",
        "body": "***Note**: This issue was originally created as [ARROW-4753](https://issues.apache.org/jira/browse/ARROW-4753). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nNarrative (text), by default, is notoriously inefficient to store on the disk or in memory. It is, in the most basic form, a long sequence of bytes with no indexing or other optimized layout structure.\u00a0\r\n \u00a0\r\n There are data structures such as [tries](https://en.wikipedia.org/wiki/Trie), [DAFSAs](https://en.wikipedia.org/wiki/Deterministic_acyclic_finite_state_automaton), or [b-tries](https://dl.acm.org/citation.cfm?id=1541552)\u00a0that support more efficient storage and lookup of phrases.\u00a0\r\n \u00a0\r\n We would like to\u00a0enable arrow to serialize from/to these efficient structures as the format/carrier between high performance text processing steps which like to operate on binary data structures (lookups, spellers, or more advance NLP routines).\r\n \u00a0\r\n so, it could be something like:\r\n \u00a0\r\n **<font color=\"#707070\">_text.to_arrow(infer=true|dafsa|trie|b-trie) : arrow_</font>** <font color=\"#14892c\">// writes arrow as format for the specified encoding. This could be implicit if we could store encoding in some kind of manifest</font>\r\n \u00a0\r\n **<font color=\"#707070\">_arrow.to_text(infer=true|dafsa|trie|b-trie) : string_</font>** <font color=\"#14892c\">// restores text from the arrow format, and from a specified encoding, same as above.\u00a0</font>\r\n \u00a0\r\n <font color=\"#333333\">On the dev mailing list we are discussion creation of the contrib folder where such features could be optionally included for Arrow.</font>",
        "created_at": "2019-03-04T04:41:29.000Z",
        "updated_at": "2021-08-04T09:56:16.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-08-04T09:56:15.000Z"
    },
    "comments": [
        {
            "created_at": "2019-04-17T15:25:35.002Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4753?focusedCommentId=16820195) by Antoine Pitrou (apitrou):*\nHonestly I think this might be better as a separate project or library, where domain experts can freely devise and iterate on the best algorithms and data structures. I'm skeptical about standardizing layouts for Tries or other specialized structures at the Arrow project level, especially since it's likely there are many variants to choose from.\r\n\r\n`[~wesmckinn]`"
        },
        {
            "created_at": "2019-04-22T14:54:32.608Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4753?focusedCommentId=16823155) by Wes McKinney (wesm):*\nUsers could experiment with such data types embedded in other Arrow types using the ExtensionType facility. That might help validate whether or not the functionality is useful. It's unclear to be whether we would want a full-fledged logical type"
        },
        {
            "created_at": "2021-08-04T09:56:16.031Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4753?focusedCommentId=17392953) by Antoine Pitrou (apitrou):*\nClosing for now. I think this should either be tackled as a separate project, or discussed on the mailing-list together with a concrete design proposal."
        }
    ]
}