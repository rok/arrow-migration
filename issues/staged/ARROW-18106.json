{
    "issue": {
        "title": "[C++] JSON reader ignores explicit schema with default unexpected_field_behavior=\"infer\"",
        "body": "***Note**: This issue was originally created as [ARROW-18106](https://issues.apache.org/jira/browse/ARROW-18106). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nNot 100% sure this is a \"bug\", but at least I find it an unexpected interplay between two options.\r\n\r\nBy default, when reading json, we _infer_ the data type of columns, and when specifying an explicit schema, we _also_ by default infer the type of columns that are not specified in the explicit schema. The docs for `unexpected_field_behavior`:\r\n\r\n> How JSON fields outside of explicit_schema (if given) are treated\r\n\r\nBut it seems that if you specify a schema, and the parsing of one of the columns fails according to that schema, we still fall back to this default of inferring the data type (while I would have expected an error, since we should only infer for columns _not_ in the schema.\r\n\r\nExample code using pyarrow:\r\n\r\n```python\n\r\nimport io\r\nimport pyarrow as pa\r\nfrom pyarrow import json\r\n\r\ns_json = \"\"\"{\"column\":\"2022-09-05T08:08:46.000\"}\"\"\"\r\n\r\nopts = json.ParseOptions(explicit_schema=pa.schema([(\"column\", pa.timestamp(\"s\"))]))\r\njson.read_json(io.BytesIO(s_json.encode()), parse_options=opts)\r\n```\r\n\r\nThe parsing fails here because there are milliseconds and the type is \"s\", but the explicit schema is ignored, and we get a result with a string column as result:\r\n\r\n```Java\n\r\npyarrow.Table\r\ncolumn: string\r\n----\r\ncolumn: [[\"2022-09-05T08:08:46.000\"]]\r\n```\r\n\r\nBut when adding `unexpected_field_behaviour=\"ignore\"`, we actually get the expected parse error:\r\n\r\n```python\n\r\nopts = json.ParseOptions(explicit_schema=pa.schema([(\"column\", pa.timestamp(\"s\"))]), unexpected_field_behavior=\"ignore\")\r\njson.read_json(io.BytesIO(s_json.encode()), parse_options=opts)\r\n```\r\n\r\ngives\r\n\r\n```Java\n\r\nArrowInvalid: Failed of conversion of JSON to timestamp[s], couldn't parse:2022-09-05T08:08:46.000\r\n```\r\n\r\n\r\nIt might be this is specific to timestamps, I don't directly see a similar issue with eg `\"column\": \"A\"` and setting the schema to \"column\" being int64.\r\n",
        "created_at": "2022-10-20T12:48:49.000Z",
        "updated_at": "2022-10-20T17:30:08.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-20T14:25:37.350Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18106?focusedCommentId=17621158) by Joris Van den Bossche (jorisvandenbossche):*\ncc `[~benpharkins]`"
        },
        {
            "created_at": "2022-10-20T17:30:08.636Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18106?focusedCommentId=17621277) by Ben Harkins (benpharkins):*\nThat is indeed unexpected... especially since it comes back as a plain string in the first case. I suspect it's an issue with timestamps specifically (or potentially any non-string type with a json string representation). Test coverage seems to be lacking in this area.\r\n\r\nI'll take a look at it."
        }
    ]
}