{
    "issue": {
        "title": "[Rust] Add collect to Table API",
        "body": "***Note**: This issue was originally created as [ARROW-7787](https://issues.apache.org/jira/browse/ARROW-7787). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, executing using the table API requires some effort: given a table `t`:\r\n```java\n\r\nplan = t.to_logical_plan()\r\nplan = ctx.optimize(plan)\r\nplan = ctx.create_physical_plan(plan, batch_size)\r\nresult = ctx.collect(plan)\r\n```\r\nThis issue proposes 2 new public methods, one for Table,\r\n```java\n\r\nfn collect(&self, ctx: &mut ExecutionContext, batch_size: usize) -> Result<Vec<RecordBatch>>;\r\n```\r\nand one for ExecutionContext,\r\n```java\n\r\npub fn collect_plan(&mut self, plan: &LogicalPlan, batch_size: usize) -> Result<Vec<RecordBatch>>\r\n```\r\nthat optimize, execute and collect the results of the Table/LogicalPlan respectively, in the same spirit of `ExecutionContext.sql`.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2020-02-06T20:27:55.000Z",
        "updated_at": "2020-04-10T20:00:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-02-11T01:21:38.000Z"
    },
    "comments": [
        {
            "created_at": "2020-02-11T01:21:38.382Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7787?focusedCommentId=17034064) by Andy Grove (andygrove):*\nIssue resolved by pull request 6375\n<https://github.com/apache/arrow/pull/6375>"
        }
    ]
}