{
    "issue": {
        "title": "[Python] Arrow plasma can only use a small part of specified shared memory",
        "body": "***Note**: This issue was originally created as [ARROW-2879](https://issues.apache.org/jira/browse/ARROW-2879). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHi, thanks for the great job of arrow, it helps us a lot.\r\n\r\nHowever, we encounter a problem when we were using plasma.\r\n\r\nThe sample code:\r\n```python\n\r\nimport numpy as np\r\nimport pyarrow as pa\r\nimport pyarrow.plasma as plasma\r\n\r\nclient = plasma.connect(\"/tmp/plasma\", \"\", 0)\r\n\r\nputs = []\r\nnbytes = 0\r\nwhile True:\r\n    a = np.ones((1000, 1000))\r\n    try:\r\n        oid = client.put(a)\r\n        puts.append(client.get(oid))\r\n        nbytes += a.nbytes\r\n    except pa.lib.PlasmaStoreFull:\r\n        print('use nbytes', nbytes)\r\n        break\r\n```\r\n\r\nWe start a plasma store with 1G memory, but the nbytes output above is only 496000000, which cannot even reach half of the memory we specified.\r\n\r\nI cannot figure out why plasma can only use such a small part of shared memory. Could anybody help me? Thanks a lot.",
        "created_at": "2018-07-19T03:34:54.000Z",
        "updated_at": "2021-02-19T21:00:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-02-19T21:00:39.000Z"
    },
    "comments": [
        {
            "created_at": "2018-07-19T03:50:34.831Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2879?focusedCommentId=16548761) by Philipp Moritz (pcmoritz):*\nThanks for your message!\r\n\r\nCan you try if you can use the whole memory if you use the '-f' flag when starting the plasma_store (see https://github.com/apache/arrow/blob/5063b333cf130d51a79f229d6b987c192773ab07/cpp/src/plasma/store.cc#L894)?\r\n\r\nThe reason why I think this is happening is because we allocate memory using a number of memory-mapped files, and double the size of the file each time we allocate a new one. So it could be that the next one to be allocated would put the memory requirements above the 1GB you allocated and therefore you can only use half of the specified memory.\r\n\r\nThe -f flag allocates\u00a0the whole memory upfront into a single memory mapped file an should thus allow you to use the full memory.\r\n\r\nIf this is indeed the problem, we can try to fix it in the future by using <https://github.com/apache/arrow/pull/2205>\u00a0once that's ready."
        },
        {
            "created_at": "2018-07-19T05:35:23.498Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2879?focusedCommentId=16548811) by chineking (chineking):*\nOption -f seems solve our problem, we will treat it as a workaround, and wait for the pull request.\r\n\r\nThanks a lot!"
        },
        {
            "created_at": "2018-07-19T13:00:01.459Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2879?focusedCommentId=16549235) by Wes McKinney (wesm):*\nHope to get ARROW-2701 merged today or tomorrow"
        },
        {
            "created_at": "2018-09-15T14:55:32.069Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2879?focusedCommentId=16616342) by Wes McKinney (wesm):*\nWhat is the status here?"
        },
        {
            "created_at": "2018-11-19T20:00:11.383Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2879?focusedCommentId=16692184) by Wes McKinney (wesm):*\nAny update on this?"
        },
        {
            "created_at": "2019-03-12T03:32:28.900Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2879?focusedCommentId=16790190) by Wenjun Si (wjsi):*\nExcuse me for the delay, but we tested the issue with pyarrow 0.12.1 installed with anaconda\r\n```Java\n\r\nconda create -n pyarrow12 python=3.7 numpy\r\nconda activate pyarrow12\r\nconda install -c conda-forge pyarrow=0.12.1\r\n```\r\nand test the issue with the code below\r\n```Java\n\r\nimport pyarrow.lib\r\nimport pyarrow.plasma as plasma\r\n\r\nfor m_size in range(1, 30):\r\n    alloc_total = m_size * 1024 ** 3\r\n    with plasma.start_plasma_store(alloc_total) as (sckt, _):\r\n        client = plasma.connect(sckt, '', 0)\r\n        usable_size = 0\r\n        objs = []\r\n        alloc_unit = 4 * 1024 ** 2\r\n        while True:\r\n            obj_id = plasma.ObjectID.from_random()\r\n            try:\r\n                buf = client.create(obj_id, alloc_unit)\r\n            except pyarrow.lib.PlasmaStoreFull:\r\n                break\r\n            client.seal(obj_id)\r\n            \r\n            usable_size += alloc_unit\r\n            [buf] = client.get_buffers([obj_id])\r\n            objs.append(buf)\r\n        objs = []\r\n        print((alloc_total, usable_size))\r\n```\r\nThe stdout before an memory-insufficient error raises is shown below:\r\n```java\n\r\n(1073741824, 528482304)\r\n(2147483648, 1061158912)\r\n(3221225472, 2130706432)\r\n(4294967296, 2130706432)\r\n(5368709120, 4273995776)\r\n(6442450944, 4273995776)\r\n(7516192768, 4273995776)\r\n(8589934592, 4273995776)\r\n(9663676416, 8564768768)\r\n(10737418240, 8564768768)\r\n```\r\nIt seems that the memory size actually allocated is aligned into 2 \\*\\* k.\r\n\r\nThe reason why we stops using **use_one_memory_mapped_file** is that it fails to work when we allocate huge memory sizes, for instance, 1GB."
        },
        {
            "created_at": "2019-03-12T06:39:25.639Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2879?focusedCommentId=16790278) by Wenjun Si (wjsi):*\nAfter changing https://github.com/apache/arrow/blob/7ddad36e0fd3707f0a893bbfda3e2f9149909708/cpp/src/plasma/malloc.cc#L79:15 into\r\n\r\n```Java\n\r\nconstexpr int GRANULARITY_MULTIPLIER = 1;\r\n```\r\n\r\nwe got the desired memory sizes\r\n\r\n```Java\n\r\n(1073741824, 1040187392)\r\n(2147483648, 2080374784)\r\n(3221225472, 3120562176)\r\n(4294967296, 4160749568)\r\n(5368709120, 5205131264)\r\n(6442450944, 6245318656)\r\n(7516192768, 7285506048)\r\n(8589934592, 8325693440)\r\n(9663676416, 9370075136)\r\n(10737418240, 10410262528)\r\n(11811160064, 11450449920)\r\n```\r\n\r\nHowever, when we call plasma.connect after releasing the references of buffers, it got stuck."
        },
        {
            "created_at": "2019-05-31T00:49:10.748Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2879?focusedCommentId=16852513) by Wes McKinney (wesm):*\nWant to submit a pull request?"
        }
    ]
}