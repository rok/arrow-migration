{
    "issue": {
        "title": "[Python] Expose IpcReadOptions to ipc facility",
        "body": "***Note**: This issue was originally created as [ARROW-12681](https://issues.apache.org/jira/browse/ARROW-12681). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI would like to be able to read only a subset of columns from a given IPC file. To do this, we need to expose the EXPERIMENTAL (is it still?) IpcReaderOptions.include_fields option. The reason is that the file is on a remote storage and can't mmap thus I want to minimize network transfer.\r\n\r\nI do not know the best way to \"pythonize\" IpcReaderOptions and would need help on this.\r\n",
        "created_at": "2021-05-07T12:27:51.000Z",
        "updated_at": "2021-10-26T19:02:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-05-14T19:50:25.603Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12681?focusedCommentId=17344847) by David Li (lidavidm):*\nFWIW, maybe the better way would be to expose a `columns` option or similar instead of wholesale exposing the IpcReadOptions struct? At least, I'm thinking of Parquet where we don't expose (Arrow)ReaderProperties but rather various keyword arguments.\r\n\r\n(Though of course, as discussed in ARROW-12683, this won't reduce network transfer either way; we always read the entire record batch.)"
        },
        {
            "created_at": "2021-10-26T12:28:24.345Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12681?focusedCommentId=17434325) by Joris Van den Bossche (jorisvandenbossche):*\nIn the context of ARROW-14470 for the Feather reader, we have been looking a bit into the IpcReadOptions.\r\n\r\nSome observations / questions:\r\n\r\n- For writing, we already expose the IpcWriteOptions in Python (so also exposing IpcReadOptions would be consistent with that), although I agree adding a `columns` keyword would be more user friendly. \n- Typically (for other readers we have), such a `columns` keyword for only reading a subset is exposed in the \"read\" function. But for RecordBatchFileReader, the options are passed when opening the reader. So in the Python API it would rather be `RecordBatchFileReader(source, columns=...).read_all()` instead of `RecordBatchFileReader(source).read_all(columns=...)`. Are we OK with that discrepancy on the Python side? \n  \n  In addition to the ability to select fields, the IpcReadOptions also have options for `use_threads`, `memory_pool`, `max_recursion_depth` and `ensure_native_endian`"
        },
        {
            "created_at": "2021-10-26T14:04:01.225Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12681?focusedCommentId=17434383) by David Li (lidavidm):*\nIt does seem a little odd that the columns are on the file reader and not on the read itself - but I think we could rectify that easily enough on the C++ side later on."
        },
        {
            "created_at": "2021-10-26T19:02:31.281Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12681?focusedCommentId=17434531) by Weston Pace (westonpace):*\nI agree it is odd and it makes it more difficult to duck type generic collections of readers.  It would be nice if users could avoid things like:\r\n\r\n```python\n\r\nfor reader in readers:\r\n  if reader instance of ...\r\n  else:\r\n```\r\n"
        }
    ]
}