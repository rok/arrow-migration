{
    "issue": {
        "title": "[C++] Enable CSV Writer to append / overwrite existing file",
        "body": "***Note**: This issue was originally created as [ARROW-14904](https://issues.apache.org/jira/browse/ARROW-14904). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis would be a match for the `readr::write_csv()` `append` argument: boolean. If `FALSE` will overwrite existing file. If `TRUE` will append to existing file. In both cases, if the file doesn't exist, a new file is created.\u00a0",
        "created_at": "2021-11-29T15:49:18.000Z",
        "updated_at": "2021-12-02T18:49:11.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-11-30T21:24:57.519Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14904?focusedCommentId=17451362) by Weston Pace (westonpace):*\nOpening an append stream is on the path to be deprecated.  It isn't supported on all filesystems (e.g. S3) or all formats (e.g. parquet).  Overwrite behavior should exist today.\r\n\r\nThat being said I can see the potential advantages when it comes to CSV.  CC `[~apitrou]`"
        },
        {
            "created_at": "2021-11-30T21:26:14.339Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14904?focusedCommentId=17451364) by Antoine Pitrou (apitrou):*\nDo we have to emulate everything that's provided by another R library? Or is there a real-world use case for this?"
        },
        {
            "created_at": "2021-12-02T10:33:12.430Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14904?focusedCommentId=17452297) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\n`[~apitrou]` \u00a0I don't think we do. There is functionality we're not emulating - for example, the `num_threads` argument in `readr::write_csv()` - mostly because multithreading is implemented differently in `{}arrow{`}. On the real-world use - I've definitely used the `readr::write_csv(..., append = TRUE)`\u00a0functionality in the past.\u00a0\r\n\r\nAny thoughts `[~npr]`, `[~ianmcook]` `[~jonkeane]`?"
        },
        {
            "created_at": "2021-12-02T13:35:37.659Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14904?focusedCommentId=17452411) by Neal Richardson (npr):*\nApologies if I'm reopening a debate that's been settled, but just because appending isn't supported on all filesystems, why does that mean we can't allow it on filesystems where it is supported?\r\n\r\n\u00a0> Do we have to emulate everything that's provided by another R library?\r\n\r\nAbsolutely not, and likewise with pandas or any other package. But for every feature they have, there's a reason it exists, and we should evaluate whether it seems like a good reason--or, at least decide to wait until someone asks for it. "
        },
        {
            "created_at": "2021-12-02T13:42:51.909Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14904?focusedCommentId=17452417) by Antoine Pitrou (apitrou):*\n> Apologies if I'm reopening a debate that's been settled, but just because appending isn't supported on all filesystems, why does that mean we can't allow it on filesystems where it is supported?\r\n\r\nWe can, it's just that it's less useful :-) Nobody opposed when we started deprecating it, but we can un-deprecate if desired."
        },
        {
            "created_at": "2021-12-02T13:54:55.721Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14904?focusedCommentId=17452419) by Neal Richardson (npr):*\nI think we just identified a use :)"
        },
        {
            "created_at": "2021-12-02T18:49:11.669Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14904?focusedCommentId=17452558) by Weston Pace (westonpace):*\nI'm a little bit torn here.  Append is definitely something that users want.  It is asked for a lot[1][2][3] (this is just a sample, there are at least 5 variations of \"how do I append to parquet\", and some on the ML too).\r\n\r\nBut the answer is very confusing to users.  The parquet format page has confused many people with this line:\r\n\r\n> The format is explicitly designed to separate the metadata from the data. This allows splitting columns into multiple files, as well as having a single metadata file reference multiple parquet files.\r\n\r\nSpark further confuses the picture with \"SaveMode.Append\" which is documented as:\r\n\r\n> Append mode means that when saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.\r\n\r\nBut...what is actually happening is it is either reading in the file and rewriting it or creating a new file in the same \"dataset\" (I don't recall off the top of my head which of these two it is).\r\n\r\nSo it has been useful for me to be able to parrot a simple line \"No.  You cannot append to an existing file.  The preferred operation is to create a new file in the same dataset.  If you are doing many small writes then you can concatenate them in memory or you can periodically merge files after they are written\".\r\n\r\nSo I guess I worry about the slippery slope.  \"Users might sometimes want to append data so lets add that to the filesystem\" leads to \"Users want to be able to append to CSV files\" leads to \"We should add an append mode to write_dataset since there is at least one format that supports it\" which leads to further confusing users.\r\n\r\nI won't stand in the way of adding append to CSV if wanted but I would be pretty stubborn about adding append to write_dataset.\r\n\r\n[1] https://stackoverflow.com/questions/44608076/can-you-append-to-a-feather-format\r\n[2] https://stackoverflow.com/questions/47113813/using-pyarrow-how-do-you-append-to-parquet-file\r\n[3] https://stackoverflow.com/questions/38793170/appending-to-orc-file"
        }
    ]
}