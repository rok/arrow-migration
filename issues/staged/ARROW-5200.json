{
    "issue": {
        "title": "[Java] Provide light-weight arrow APIs",
        "body": "***Note**: This issue was originally created as [ARROW-5200](https://issues.apache.org/jira/browse/ARROW-5200). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe are trying to incorporate Apache Arrow to Apache Flink runtime. We find Arrow an amazing library, which greatly simplifies the support of columnar data format.\r\n\r\nHowever, for many scenarios, we find the performance unacceptable. Our investigation shows the reason is that, there are too many redundant checks and computations in Arrow API.\r\n\r\nFor example, the following figures shows that in a single call to Float8Vector.get(int) method (this is one of the most frequently used APIs in Flink computation),\u00a0 there are 20+ method invocations.\r\n\r\n![image-2019-04-23-15-19-34-187.png](https://issues.apache.org/jira/secure/attachment/12966697/image-2019-04-23-15-19-34-187.png)\r\n\r\n\u00a0\r\n\r\nThere are many other APIs with similar problems. We believe that these checks will make\u00a0sure of the integrity of the program. However, it also impacts performance severely. For our evaluation, the performance may degrade by two or three orders of magnitude slower, compared to access data on heap memory.\u00a0\r\n\r\nWe think at least for some scenarios,\u00a0we can give the responsibility of integrity check to application owners. If they can be sure all the checks have been passed, we can provide some light-weight APIs and the inherent high performance, to them.\r\n\r\nIn the light-weight APIs, we only provide minimum checks, or avoid checks at all. The application owner can still develop and debug their code using the original heavy-weight APIs. Once all bugs have been fixed, they can switch to light-weight APIs in their products and enjoy the consequent high performance.\r\n\r\n\u00a0",
        "created_at": "2019-04-23T07:31:40.000Z",
        "updated_at": "2019-05-13T04:16:56.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-05-13T04:13:28.000Z"
    },
    "comments": [
        {
            "created_at": "2019-04-23T12:58:21.424Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5200?focusedCommentId=16824099) by Wes McKinney (wesm):*\nThis is related to at least a few other JIRAs. It would be great to start to set up some microbenchmarks so that it is possible to quantify the improvements in various use cases, otherwise we're shooting in the dark. I think having additional \"unsafe\" methods that skip checks that prevent Java off-heap memory-related segfaults is a good idea"
        },
        {
            "created_at": "2019-04-24T08:15:08.699Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5200?focusedCommentId=16824900) by Liya Fan (fan_li_ya):*\nSounds reasonable. Thanks a lot for your comments.\u00a0\r\n\r\nWe have opened a new Jira (ARROW-5209) to setup some performance benchmarks from our SQL engine, which is going to be made open source. The benchmarks are extracted by running an open SQL benchmark TPC-H.\u00a0"
        },
        {
            "created_at": "2019-05-08T04:56:50.281Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5200?focusedCommentId=16835303) by Liya Fan (fan_li_ya):*\nThis is the (source/byte code/assembly) code generated by the original Arrow API for Float8Vector. ![safe_nocheck.jpg](https://issues.apache.org/jira/secure/attachment/12968146/safe_nocheck.jpg) \r\n\r\nAnd this is the code generated by the unsafe API for Float8Vector.  ![unsafe.jpg](https://issues.apache.org/jira/secure/attachment/12968147/unsafe.jpg) \r\n\r\nIt can be observed that the amount of (source/byte code/assembly) code generated by unsafe API is smaller."
        },
        {
            "created_at": "2019-05-13T04:06:30.414Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5200?focusedCommentId=16838250) by Micah Kornfield (emkornfield@gmail.com):*\n[~fan_li_ya] I think this can be closed as won't fix and so can the corresponding pull request?"
        },
        {
            "created_at": "2019-05-13T04:16:56.342Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5200?focusedCommentId=16838253) by Liya Fan (fan_li_ya):*\n[~emkornfield@gmail.com] Closed. Thanks for your kind reminder."
        }
    ]
}