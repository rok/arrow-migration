{
    "issue": {
        "title": "[R] Implement nrow on some collapsed queries",
        "body": "***Note**: This issue was originally created as [ARROW-14288](https://issues.apache.org/jira/browse/ARROW-14288). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\ncollapse() doesn't always mean we can't determine the number of rows. We can try to solve some cases:\r\n\r\n- head/tail: compute number of rows, take the smaller of that and the head/tail number\n- if filter == TRUE, take the number of rows of .data (which may contain a query)",
        "created_at": "2021-10-11T17:33:02.000Z",
        "updated_at": "2022-06-30T16:38:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-12-17T15:12:42.067Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14288?focusedCommentId=17461508) by Dewey Dunnington (paleolimbot):*\nI'd be happy to take a look at this with a reprex of the example queries where `nrow()` returns `NA` but shouldn't? Or perhaps I'm misinterpreting the intent of the ticket?"
        },
        {
            "created_at": "2022-05-23T15:03:28.306Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14288?focusedCommentId=17540992) by Nicola Crane (thisisnic):*\nHere's an example of `nrow()` returning NA when it shouldn't:\r\n```java\n\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\n\r\nmtcars %>%\r\n\u00a0 distinct() %>%\r\n\u00a0 \u00a0 nrow()\r\n#> [1] 32mtcars %>%\r\n\u00a0 arrow_table() %>%\r\n\u00a0 distinct() %>%\r\n\u00a0 \u00a0 nrow()\r\n#> [1] NA \r\n\r\nmtcars %>%\r\n\u00a0 arrow_table() %>%\r\n\u00a0 distinct() %>%\r\n\u00a0 collect()\r\n#> # A tibble: 32 \u00d7 11\r\n#> \u00a0 \u00a0 \u00a0mpg \u00a0 cyl \u00a0disp \u00a0 \u00a0hp \u00a0drat \u00a0 \u00a0wt \u00a0qsec \u00a0 \u00a0vs \u00a0 \u00a0am \u00a0gear \u00a0carb\r\n#> \u00a0 \u00a0<dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n#> \u00a01 \u00a021 \u00a0 \u00a0 \u00a0 6 \u00a0160 \u00a0 \u00a0110 \u00a03.9 \u00a0 2.62 \u00a016.5 \u00a0 \u00a0 0 \u00a0 \u00a0 1 \u00a0 \u00a0 4 \u00a0 \u00a0 4\r\n#> \u00a02 \u00a021 \u00a0 \u00a0 \u00a0 6 \u00a0160 \u00a0 \u00a0110 \u00a03.9 \u00a0 2.88 \u00a017.0 \u00a0 \u00a0 0 \u00a0 \u00a0 1 \u00a0 \u00a0 4 \u00a0 \u00a0 4\r\n#> \u00a03 \u00a022.8 \u00a0 \u00a0 4 \u00a0108 \u00a0 \u00a0 93 \u00a03.85 \u00a02.32 \u00a018.6 \u00a0 \u00a0 1 \u00a0 \u00a0 1 \u00a0 \u00a0 4 \u00a0 \u00a0 1\r\n#> \u00a04 \u00a021.4 \u00a0 \u00a0 6 \u00a0258 \u00a0 \u00a0110 \u00a03.08 \u00a03.22 \u00a019.4 \u00a0 \u00a0 1 \u00a0 \u00a0 0 \u00a0 \u00a0 3 \u00a0 \u00a0 1\r\n#> \u00a05 \u00a018.7 \u00a0 \u00a0 8 \u00a0360 \u00a0 \u00a0175 \u00a03.15 \u00a03.44 \u00a017.0 \u00a0 \u00a0 0 \u00a0 \u00a0 0 \u00a0 \u00a0 3 \u00a0 \u00a0 2\r\n#> \u00a06 \u00a018.1 \u00a0 \u00a0 6 \u00a0225 \u00a0 \u00a0105 \u00a02.76 \u00a03.46 \u00a020.2 \u00a0 \u00a0 1 \u00a0 \u00a0 0 \u00a0 \u00a0 3 \u00a0 \u00a0 1\r\n#> \u00a07 \u00a014.3 \u00a0 \u00a0 8 \u00a0360 \u00a0 \u00a0245 \u00a03.21 \u00a03.57 \u00a015.8 \u00a0 \u00a0 0 \u00a0 \u00a0 0 \u00a0 \u00a0 3 \u00a0 \u00a0 4\r\n#> \u00a08 \u00a024.4 \u00a0 \u00a0 4 \u00a0147. \u00a0 \u00a062 \u00a03.69 \u00a03.19 \u00a020 \u00a0 \u00a0 \u00a0 1 \u00a0 \u00a0 0 \u00a0 \u00a0 4 \u00a0 \u00a0 2\r\n#> \u00a09 \u00a022.8 \u00a0 \u00a0 4 \u00a0141. \u00a0 \u00a095 \u00a03.92 \u00a03.15 \u00a022.9 \u00a0 \u00a0 1 \u00a0 \u00a0 0 \u00a0 \u00a0 4 \u00a0 \u00a0 2\r\n#> 10 \u00a019.2 \u00a0 \u00a0 6 \u00a0168. \u00a0 123 \u00a03.92 \u00a03.44 \u00a018.3 \u00a0 \u00a0 1 \u00a0 \u00a0 0 \u00a0 \u00a0 4 \u00a0 \u00a0 4\r\n#> # \u2026 with 22 more rows\n```\r\n\u00a0"
        }
    ]
}