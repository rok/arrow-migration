{
    "issue": {
        "title": "[Python] 0.14.1 to 0.15.0 upgrade produces AttributeError",
        "body": "***Note**: This issue was originally created as [ARROW-6968](https://issues.apache.org/jira/browse/ARROW-6968). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe code in question:\r\n```java\n\r\n\"\"\"\r\nReproduce AttributeError with PyArrow == 0.15.0\r\n\"\"\"\r\nimport io\r\nimport logging\r\nimport pandas\r\nimport pyarrow\r\nimport sys\r\nimport textwrap\r\n\r\nlogging.basicConfig(level=logging.DEBUG)\r\nlogging.debug(f'Python v{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')\r\nlogging.debug(f'PyArrow v{pyarrow.__version__}' + '\\n')\r\n\r\nCSV_TEXT = textwrap.dedent(\"\"\"\\\r\n              id,gender,some_date,age\r\n              001,M,01/01/2019,75\r\n              002,F,02/02/2018,32\r\n              003,M,03/03/2017,27\r\n              004,F,04/04/2016,19\r\n              005,M,05/05/2015,55\r\n              006,F,06/06/2014,42\r\n              \"\"\")\r\n\r\n# Initialize pyarrow table via pandas\r\nmock_file = io.StringIO(CSV_TEXT)\r\ndf = pandas.read_csv(mock_file).sort_values(['age', 'gender'])\r\ntable = pyarrow.Table.from_pandas(df=df)\r\n\r\n# This comprehension generates a map between the name of the column and its index\r\nmap_col_names_to_incides = {item.name: table.columns.index(item) for item in table.columns}\r\nlogging.debug('The column indices are:')\r\nfor name, index in map_col_names_to_incides.items():\r\n    logging.debug(f'Col {name} -> #{index}')\r\n```\r\n\u00a0\r\n\r\nExpected result (generated with 0.14.0):\r\n```java\n\r\nDEBUG:root:Python v3.7.4\r\nDEBUG:root:PyArrow v0.14.1\r\n\r\nDEBUG:root:The column indices are:\r\nDEBUG:root:Col id -> #0\r\nDEBUG:root:Col gender -> #1\r\nDEBUG:root:Col some_date -> #2\r\nDEBUG:root:Col age -> #3\r\nDEBUG:root:Col __index_level_0__ -> #4\r\n```\r\nActual result (generated with 0.15.0):\r\n```java\n\r\nDEBUG:root:Python v3.7.4\r\nDEBUG:root:PyArrow v0.15.0\r\n\r\nTraceback (most recent call last):\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py\", line 1758, in <module>\r\n    main()\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py\", line 1752, in main\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py\", line 1147, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\r\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\r\n  File \"/Users/mwheeler/Library/Preferences/PyCharm2019.1/scratches/scratch.py\", line 31, in <module>\r\n    map_col_names_to_incides = {item.name: table.columns.index(item) for item in table.columns}\r\n  File \"/Users/mwheeler/Library/Preferences/PyCharm2019.1/scratches/scratch.py\", line 31, in <dictcomp>\r\n    map_col_names_to_incides = {item.name: table.columns.index(item) for item in table.columns}\r\nAttributeError: 'pyarrow.lib.ChunkedArray' object has no attribute 'name'\r\n```\r\n\u00a0\r\n\r\nThis error occurs in both of the environments specified above.",
        "created_at": "2019-10-22T17:16:31.000Z",
        "updated_at": "2019-10-23T22:30:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-10-23T22:30:51.000Z"
    },
    "comments": [
        {
            "created_at": "2019-10-23T10:33:50.382Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6968?focusedCommentId=16957733) by Joris Van den Bossche (jorisvandenbossche):*\nHi `[~mwheeler-hdai]`, this was a backwards incompatible change in pyarrow 0.15.0. The `Column` class (as small wrapper around ChunkedArray) is removed, and a column of a Table is now returned as a `ChunkedArray`. In most cases a `ChunkedArray` behaves similarly and has similar functionality as a the removed `Column`, but one of the differences is that `ChunkedArray` has no 'name' attribute.\r\n\r\nYou could replace the\r\n\r\n```Java\n\r\nmap_col_names_to_incides = {item.name: table.columns.index(item) for item in table.columns}\r\n```\r\n\r\nwith eg\r\n\r\n```Java\n\r\nmap_col_names_to_incides = {name: i for i, name in enumerate(table.column_names)} \r\n```\r\n\r\nas the column_names are guaranteed to be in the correct order (or another option: `dict(zip(table.column_names, range(table.num_columns)))`).\r\n\r\n\r\n"
        }
    ]
}