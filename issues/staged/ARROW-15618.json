{
    "issue": {
        "title": "[C++] Correctly handle Substrait nullability of types",
        "body": "***Note**: This issue was originally created as [ARROW-15618](https://issues.apache.org/jira/browse/ARROW-15618). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn Substrait, nullability is associated with a type, whereas in Arrow it is associated with a field. Currently, `DeserializeType` ignores nullability for this reason, and `SerializeType` uses the (AFAICT) illegal `NULLABILITY_UNSPECIFIED` enum variant to do round-trip testing, and therefore this illegal variant is not rejected as it should.\r\n\r\nThe correct solution IMO is to (de)serialize types to and from `std::pair<std::shared_ptr<DataType>, bool>` to explicitly expose this difference to the outside world. The internal `FromProto` and `ToProto` are functions already doing this.",
        "created_at": "2022-02-08T18:53:05.000Z",
        "updated_at": "2022-02-08T18:53:05.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}