{
    "issue": {
        "title": "[R] Error: 'install_arrow' is not an exported object from 'namespace:arrow'",
        "body": "***Note**: This issue was originally created as [ARROW-5614](https://issues.apache.org/jira/browse/ARROW-5614). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm trying to get the R package installed in a Debian docker image that already contains R and RStudio (via rocker/rstudio from dockerhub), as well as arrow-cpp, parquet-cpp and pyarrow installed via conda. I.e. I should have all required arrow dependencies in my conda environment's /lib and /include folders.\r\n\r\nI then tried to install the R package in two ways (as stated in the README, having devtools, and after\u00a0managing to get git2r installed)\r\n\r\n1/ via remotes\r\n```java\n\r\nremotes::install_github(\"apache/arrow/r\", ref=\"76e1bc5dfb9d08e31eddd5cbcc0b1bab934da2c7\")\n```\r\n2/ from source\r\n```java\n\r\ngit clone https://github.com/apache/arrow.git\r\ncd arrow/r\r\nR -e 'remotes::install_deps()'\r\nR CMD INSTALL --configure-vars='INCLUDE_DIR=/root/miniconda/envs/my_env/include    LIB_DIR=/root/miniconda/envs/my_env/lib' .\n```\r\nIn both cases the install seems to work fine:\r\n```java\n\r\n** building package indices\r\n** testing if installed package can be loaded from temporary location\r\n** checking absolute paths in shared objects and dynamic libraries\r\n** testing if installed package can be loaded from final location\r\n** testing if installed package keeps a record of temporary installation path\r\n* DONE (arrow)\r\n```\r\n\u00a0But when I then do the following as prompted:\r\n```java\n\r\nlibrary(arrow)\r\narrow::install_arrow()\r\n```\r\nThe result is\r\n```java\n\r\nError: 'install_arrow' is not an exported object from 'namespace:arrow'\r\n```\r\nAnd running the example without calling that non-existing function I get the error\r\n```java\n\r\nError in Table__from_dots(dots, schema) : \r\n  Cannot call Table__from_dots(). Please use arrow::install_arrow() to install required runtime libraries. \r\n```\r\nSo I don't know if I'm doing something wrong or if the documentation isn't up to date? Specifically, what is the arrow::install_arrow() function supposed to install, given that I already have the arrow and parquet libs and headers installed, and supposedly they've been used (linked to) when I installed the R package?\r\n\r\nIn general, is there any way to get this package installed in the above context (arrow-cpp etc. installed via conda)?",
        "created_at": "2019-06-14T18:03:17.000Z",
        "updated_at": "2022-08-27T14:41:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-06-14T18:25:39.000Z"
    },
    "comments": [
        {
            "created_at": "2019-06-14T18:23:06.076Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5614?focusedCommentId=16864333) by Neal Richardson (npr):*\nSee\u00a0https://issues.apache.org/jira/browse/ARROW-5555, this is very much a WIP.\u00a0\r\n\r\nIf the package installed but you're being told to call arrow::install_arrow(), that means that at install time, it did not find or link correctly to the C++ library. Check the\u00a0R package installation output, especially the output from `configure` before compilation, for notes of what it tried and what wasn't found.\r\n\r\nIf you're installing `ref=\"76e1bc5dfb9d08e31eddd5cbcc0b1bab934da2c7\"`, that's the 0.13 (unofficial) release point, so that would work if you've installed the C++ library at the 0.13 release point. It won't work with the latest C++ code from apache/arrow master. Likewise, installing the R package from the head of master won't work with the 0.13 C++ library."
        },
        {
            "created_at": "2019-06-14T18:25:16.386Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5614?focusedCommentId=16864335) by Neal Richardson (npr):*\nAs for getting the R package working with arrow-cpp installed from conda more generally, `[~xhochy]` may be able to speak to that."
        },
        {
            "created_at": "2019-06-14T21:40:59.851Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5614?focusedCommentId=16864463) by Uwe Korn (uwe):*\nBuilding the R package using conda-forge based packages is quite straightforward. All packages that are also on CRAN are on conda-forge with an `r-`\u00a0prefix. Installing them, you can then use the same `R`\u00a0commands as you would use with all other tools."
        },
        {
            "created_at": "2019-06-14T22:05:34.406Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5614?focusedCommentId=16864479) by Neal Richardson (npr):*\n`[~xhochy]` we should add that to the R package readme."
        },
        {
            "created_at": "2019-06-18T16:59:08.544Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5614?focusedCommentId=16866840) by Thomas Buhrmann (buhrmann):*\nYes, using conda (on the conda-forge channel) works like a charm! I was initially reluctant to manage R packages via conda, because of some negative comments\u00a0related to inadvertently mixing conda-managed package libraries and other (default) R library locations. But in practice, for me at least, that problem hasn't cropped up, and in any case should be easily solved with appropriate PATH or .libPaths configuration.\u00a0So yes, I think it's simply a matter of documentation: making clear how to correctly link against arrow-cpp (conda install being the easiest), and updating\u00a0or removing reference to arrow::install_arrow().\r\n\r\nAnd thanks for the nudge to re-consider conda installs! Makes the creation of docker images with arrow installed much easier..."
        },
        {
            "created_at": "2022-08-27T14:41:40.436Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5614?focusedCommentId=17585777) by @toddfarmer:*\nTransitioning issue from Resolved to Closed to based on resolution field value."
        }
    ]
}