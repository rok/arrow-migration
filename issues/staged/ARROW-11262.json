{
    "issue": {
        "title": "[C++] Move decompression off background reader thread into thread pool",
        "body": "***Note**: This issue was originally created as [ARROW-11262](https://issues.apache.org/jira/browse/ARROW-11262). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen reading a decompressed stream there is a fairly decent amount of CPU time spent decompressing that stream.\u00a0 While we are doing this we could be fetching the next block.\u00a0 However, the current implementation has the reading and decompressing on the same background reader thread so the next block will not be fetched until the prior block is finished decompressing.\r\n\r\nThere is still \"some\" ordering here, it isn't a fan-out, decompression of the blocks has to happen in sequence, but there is some gain to be had.\r\n\r\nI created a simple example with gzip here (<https://github.com/westonpace/arrow/tree/feature/async-compressed-csv)> and you could test it with the attached example program.\r\n\r\nOn my system, when reading a 250MB gzipped CSV file there is roughly a 5% speedup if the file is cached in the OS (6.3s -> 6.0s) and a 10% to 15% speedup if the file is not cached in the OS. (~6.8s -> 6.0s)\r\n\r\nThe example requires changing the table reader implementation to receive an async generator.\u00a0 I think, in practice, we will want to change it to take an async input stream instead.\u00a0 So this may need to wait until/if we decide to expand the async paradigm into the I/O interfaces.",
        "created_at": "2021-01-15T19:42:04.000Z",
        "updated_at": "2021-12-16T17:10:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-01-15T23:41:43.945Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11262?focusedCommentId=17266415) by Wes McKinney (wesm):*\nThis same phenomenon is found many other places in the codebase (notably in IPC write-with-compression and read-with-compression). Rearchitecting everything around async where possible seems like the right path (I think there are various issues around Jira citing specific issues like these)."
        }
    ]
}