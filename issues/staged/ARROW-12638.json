{
    "issue": {
        "title": "[R] Valgrind errors with binary array creation errors. ",
        "body": "***Note**: This issue was originally created as [ARROW-12638](https://issues.apache.org/jira/browse/ARROW-12638). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen we submitted 4.0.0 to cran, we received a few new valgrind errors. Most looked like they were unrelated to arrow, but these look like they might be fixable in the package:\r\n\r\nin test-Array.R\r\n(binary errors, skipped)\r\n```Java\n\r\n==273== 888 (96 direct, 792 indirect) bytes in 1 blocks are definitely lost in loss record 240 of 3,224\r\n==273==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==273==    by 0xD94D5DB: arrow::Status arrow::internal::MakeConverterImpl<arrow::r::RConverter, arrow::r::RConverterTrait>::Visit<arrow::BinaryType, arrow::r::RPrimitiveConverter<arrow::BinaryType, void> >(arrow::BinaryType const&) (converter.h:212)\r\n==273==    by 0xD948125: arrow::Status arrow::VisitTypeInline<arrow::internal::MakeConverterImpl<arrow::r::RConverter, arrow::r::RConverterTrait> >(arrow::DataType const&, arrow::internal::MakeConverterImpl<arrow::r::RConverter, arrow::r::RConverterTrait>*) (visitor_inline.h:89)\r\n==273==    by 0xD93CFB5: arrow::Result<std::unique_ptr<arrow::r::RConverter, std::default_delete<arrow::r::RConverter> > > arrow::internal::MakeConverter<arrow::r::RConverter, arrow::r::RConverterTrait>(std::shared_ptr<arrow::DataType>, arrow::r::RConverter::OptionsType, arrow::MemoryPool*) (converter.h:259)\r\n==273==    by 0xD93CB1A: arrow::r::vec_to_arrow(SEXPREC*, std::shared_ptr<arrow::DataType> const&, bool) (r_to_arrow.cpp:1015)\r\n==273==    by 0xD93CDAA: vec_to_arrow(SEXPREC*, SEXPREC*) (r_to_arrow.cpp:1035)\r\n==273==    by 0xD891C1A: _arrow_vec_to_arrow (arrowExports.cpp:5128)\r\n==273==    by 0x4941DCF: R_doDotCall (dotcode.c:601)\r\n==273==    by 0x49B100F: bcEval (eval.c:7671)\r\n==273==    by 0x498BF52: Rf_eval (eval.c:727)\r\n==273==    by 0x498ECC1: R_execClosure (eval.c:1897)\r\n==273==    by 0x498E974: Rf_applyClosure (eval.c:1823)\r\n```\r\n\r\nThe tests that cause these were skipped.",
        "created_at": "2021-05-03T19:33:01.000Z",
        "updated_at": "2021-10-12T19:09:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-10-12T19:09:23.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-04T11:00:16.657Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12638?focusedCommentId=17338911) by Antoine Pitrou (apitrou):*\nI took a look and I have no idea what could be causing this. It could be that `ValueOrStop` doesn't properly clean up because of how R error handling works (though that should be taken care of by cpp11). I could try to take a deeper look if this was easily reproducible."
        }
    ]
}