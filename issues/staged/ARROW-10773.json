{
    "issue": {
        "title": "[R] parallel as.data.frame.Table hangs indefinitely on Windows",
        "body": "***Note**: This issue was originally created as [ARROW-10773](https://issues.apache.org/jira/browse/ARROW-10773). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nOn Windows only\r\n\r\nTested on 2 machines, mingw.\u00a0\r\n\r\nReprex\r\n```java\n\r\ninstall.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\r\nremotes::install_github(\"meztez/bigrquerystorage\", INSTALL_opts = \"--no-multiarch\")\r\n\r\nlibrary(bigrquerystorage)\r\nSys.info()\r\nsessionInfo()\r\nSys.setenv(\"BIGQUERY_TEST_PROJECT\"=\"labo-brunotremblay-253317\")\r\ncon <- bigrquery::dbConnect(\r\n  bigrquery::bigquery(),\r\n  project = \"bigquery-public-data\",\r\n  dataset = \"usa_names\",\r\n  billing = bigrquery:::bq_test_project(),\r\n  quiet = FALSE)\r\n\r\n# Does not hang\r\noptions(arrow.use_threads = FALSE)\r\ndt <- bigrquerystorage::dbReadTable(con, \"bigquery-public-data.usa_names.usa_1910_current\")\r\n\r\n# Hangs\r\noptions(arrow.use_threads = TRUE)\r\ndt <- bigrquerystorage::dbReadTable(con, \"bigquery-public-data.usa_names.usa_1910_current\")\r\n```\r\n\u00a0\r\n\r\nSession details\r\n\r\n\u00a0\r\n```java\n\r\n> Sys.info()\r\n       sysname        release        version       nodename        machine          login           user effective_user \r\n     \"Windows\"       \"10 x64\"  \"build 19042\"   \"C000055787\"       \"x86-64\"     \"gen01914\"     \"gen01914\"     \"gen01914\" \r\n> sessionInfo()\r\nR version 4.0.3 (2020-10-10)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19042)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252\r\n[4] LC_NUMERIC=C                           LC_TIME=English_United States.1252    \r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods   base     other attached packages:\r\n[1] bigrquery_1.3.2.9001\r\n\r\nloaded via a namespace (and not attached):\r\n [1] Rcpp_1.0.5           rstudioapi_0.13      magrittr_1.5         tidyselect_1.1.0     bit_4.0.4            R6_2.5.0            \r\n [7] rlang_0.4.8          dplyr_1.0.2          httr_1.4.2           tools_4.0.3          arrow_2.0.0.20201130 DBI_1.1.0           \r\n[13] dbplyr_2.0.0         ellipsis_0.3.1       remotes_2.2.0        bit64_4.0.5          assertthat_0.2.1     gargle_0.5.0        \r\n[19] tibble_3.0.4         lifecycle_0.2.0      crayon_1.3.4         purrr_0.3.4          fs_1.5.0             vctrs_0.3.4         \r\n[25] glue_1.4.2           compiler_4.0.3       pillar_1.4.6         generics_0.1.0       jsonlite_1.7.1       pkgconfig_2.0.3  \r\n```\r\n\u00a0\r\n\r\n```",
        "created_at": "2020-11-30T08:03:48.000Z",
        "updated_at": "2021-09-29T20:15:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-09-29T18:45:20.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-30T16:02:43.060Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17240839) by Neal Richardson (npr):*\n`[~meztez]` could you install arrow from our nightly repository and retry? This sounds similar to ARROW-10080."
        },
        {
            "created_at": "2020-12-01T18:34:50.960Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17241770) by Bruno Tremblay (meztez):*\nSame results.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-12-01T18:48:02.634Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17241782) by Neal Richardson (npr):*\nI see, so this sounds instead like ARROW-8379. Is it possible to keep the result from bigquery as an arrow Table and share that? Or even better since I presume that data is quite big, get the Table and then try to slice it down to a more minimal reproducer (that hangs when you call `as.data.frame()` on it) that you can share?"
        },
        {
            "created_at": "2020-12-01T23:44:17.031Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17241950) by Bruno Tremblay (meztez):*\nHere is the fun part.\r\n\r\nThe Table is built from a single vector of RAWSXP reprensenting an IPC stream.\r\n\r\nWhen this raw vector is saved to disk using saveRDS then reread using readRDS, the resulting Table has no problem behind converted to a data.frame even with multithreading.\r\n\r\nIt is only in the case where the vector stays in memory that the problem occurs on multi-threading.\r\n\r\nMind you building the Table itself is not an issue and querying the table for everyrow also yield the expected results.\r\n\r\nIt's pretty hard for me to nail the problem down as I do not have any notion yet of how threads are handled in Cpp.\r\n\r\n\u00a0\r\n\r\nBut I'm pretty sure it has to do with either memory management or the length/capacity of the in memory vector.\u00a0\r\n\r\n\u00a0\r\n\r\nNext up is doing a memory dump to compare between in-memory only and memory-disk-memory method."
        },
        {
            "created_at": "2020-12-02T16:04:54.723Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17242467) by Neal Richardson (npr):*\nYeah, that is interesting. If the raw vector itself is fine if you readRDS and convert to Table, then I wonder if there's something in your C++ code that makes the query that receives the raw vector that's the issue, something about how it owns the memory. Comparing the bits also sounds like a good idea, let me know what you find."
        },
        {
            "created_at": "2020-12-30T17:35:14.030Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17256627) by Neal Richardson (npr):*\n`[~meztez]` is this still an issue for you?"
        },
        {
            "created_at": "2020-12-30T20:49:37.433Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17256716) by Bruno Tremblay (meztez):*\nI've disabled threading on windows for the moment. I do not think I will revisit this issue soon as I could not find any difference in the bytes themselves and could not get rid of the issue after several hours.\r\n\r\n\u00a0\r\n\r\nTested with the latest R and it still hangs just now. It made me thinks about comparing pointer ownerships.\r\n\r\n\u00a0\r\n\r\nShould I reinstall arrow too?"
        },
        {
            "created_at": "2021-01-31T05:23:48.366Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17275784) by Bruno Tremblay (meztez):*\nSo I've done further testing. I still encounter the same issue.\r\n\r\nComparing memory dump did not yield satisfactory results.\r\n\r\nI will try to get my hands on a different windows install maybe, a different CPU.\r\n\r\n\u00a0\r\n\r\nI'll update if I find something.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-09-29T18:45:20.188Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17422330) by Neal Richardson (npr):*\nWe believe that this has been resolved in ARROW-8379. If you still experience this with version 6.0.0 or greater (after it is released in mid-October), please open a new issue."
        },
        {
            "created_at": "2021-09-29T20:15:22.191Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10773?focusedCommentId=17422372) by Neal Richardson (npr):*\nCorrect, that's what we're going for in the 6.0.0 release, just to make the feature stable on Windows. After the release we're planning to experiment with some approaches to re-enable multithreading on Windows, but we wanted to eliminate the hanging behavior first, even if that meant a tradeoff in performance in the cases where it didn't deadlock."
        }
    ]
}