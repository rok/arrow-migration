{
    "issue": {
        "title": "Compatibility with xgboost",
        "body": "***Note**: This issue was originally created as [ARROW-1374](https://issues.apache.org/jira/browse/ARROW-1374). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nTraditionally I work with CSV's and really suffer with slow read/write times. Parquet and the Arrow project obviously give us huge speedups.\n\nOne thing I've noticed, however, is that there is a serious bottleneck when converting a DataFrame read in through pyarrow to a DMatrix used by xgboost. For example, I'm building a model with about 180k rows and 6k float64 columns. Reading into a pandas DataFrame takes about 20 seconds on my machine. However, converting that DataFrame to a DMatrix takes well over 10 minutes.\n\nInterestingly, it takes about 10 minutes to read that same data from a CSV into a pandas DataFrame. Then, it takes less than a minute to convert to a DMatrix.\n\nI'm sure there's a good technical explanation for why this happens (e.g. row vs column storage). Still, I imagine this use case may occur to many and it would be great to improve these times, if possible.\n\n\n```none\nimport pandas as pd\nimport pyarrow as pa\nimport pyarrow.parquet as pq\nimport xgboost as xgb\n\n# Reading from parquet:\ntable = pq.read_table('/path/to/parquet/files')  # 20 seconds\nvariables = table.to_pandas()  # 1 second\ndtrain = xgb.DMatrix(variables.drop(['tag'], axis=1), label=variables['tag'])  # takes 10-15 minutes\n\n# Reading from CSV:\nvariables = pd.read_csv('/path/to/file.csv', ...)  # takes about 10 minutes\ndtrain = xgb.DMatrix(variables.drop(['tag'], axis=1), label=variables['tag'])  # less than 1 minute\n```\n",
        "created_at": "2017-08-19T00:38:19.000Z",
        "updated_at": "2017-08-23T05:12:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-08-19T13:10:05.000Z"
    },
    "comments": [
        {
            "created_at": "2017-08-19T00:44:06.869Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1374?focusedCommentId=16133842) by Wes McKinney (wesm):*\nCan you provide any profile output from cProfile to give some insight? I note that you are using the `drop` method \u2013 this is very inefficient because it produces a copy of the data. You could make this much faster by dropping the column from the Arrow table before calling `to_pandas`. The API for this is not very convenient at the moment but it could be made so cc `[~jreback]` `[~cpcloud]`"
        },
        {
            "created_at": "2017-08-19T01:31:41.232Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1374?focusedCommentId=16133860) by Steven Anton (santon):*\nThanks! Ok, I got the conversion time down to 52 seconds by following your suggestions. It sounds like there aren't really any changes needed. I had just misunderstood what was going on under the hood. Maybe some documentation or a \"gotchas\" section?\n\nHere's what I did differently:\n\n```none\nschema = pq.read_schema('/path/to/file.parq')\ncolumns = [x for x in schema.names if x not in ['tag', ...]]\nvariables = pq.read_table(str(parquet_path), columns=columns).to_pandas()\n# It looks like I could have used the .remove_column method instead of the above\ntag = pq.read_table(str(parquet_path), columns=['is_fraud']).to_pandas()\ncProfile.run('xgb.DMatrix(variables, label=tag)')\n```\n\nAnd the output of cProfile is below, just for reference.\n\n```\n         145353 function calls (145344 primitive calls) in 51.970 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        7    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:996(_handle_fromlist)\n        1    0.030    0.030   51.970   51.970 <string>:1(<module>)\n        4    0.000    0.000    0.002    0.000 __init__.py:357(__getattr__)\n        4    0.002    0.000    0.002    0.000 __init__.py:364(__getitem__)\n        1    0.000    0.000    0.000    0.000 __init__.py:483(cast)\n        1    0.000    0.000    0.000    0.000 _internal.py:225(__init__)\n        1    0.000    0.000    0.000    0.000 _internal.py:237(data_as)\n        1    0.000    0.000    0.000    0.000 _methods.py:37(_any)\n        2    0.000    0.000    0.000    0.000 algorithms.py:1342(_get_take_nd_function)\n        2    0.000    0.000    0.001    0.000 algorithms.py:1375(take_nd)\n        2    0.000    0.000    0.000    0.000 base.py:1578(is_all_dates)\n        1    0.000    0.000    0.114    0.114 base.py:1884(format)\n        1    0.000    0.000    0.114    0.114 base.py:1899(_format_with_header)\n        1    0.010    0.010    0.113    0.113 base.py:1910(<listcomp>)\n        2    0.000    0.000    0.000    0.000 base.py:3999(_ensure_index)\n        7    0.000    0.000    0.000    0.000 base.py:528(__len__)\n        3    0.000    0.000    0.000    0.000 base.py:559(values)\n        2    0.000    0.000    0.000    0.000 cast.py:759(maybe_castable)\n        2    0.000    0.000    0.000    0.000 cast.py:868(maybe_cast_to_datetime)\n        2    0.000    0.000    0.000    0.000 common.py:117(is_sparse)\n        1    0.000    0.000    0.000    0.000 common.py:1419(is_string_like_dtype)\n        2    0.000    0.000    0.000    0.000 common.py:1456(is_float_dtype)\n        2    0.000    0.000    0.000    0.000 common.py:1549(is_extension_type)\n        2    0.000    0.000    0.000    0.000 common.py:1673(_get_dtype)\n       16    0.000    0.000    0.000    0.000 common.py:1722(_get_dtype_type)\n        4    0.000    0.000    0.000    0.000 common.py:1852(pandas_dtype)\n        6    0.000    0.000    0.000    0.000 common.py:190(is_categorical)\n        9    0.000    0.000    0.000    0.000 common.py:222(is_datetimetz)\n        7    0.000    0.000    0.000    0.000 common.py:296(is_datetime64_dtype)\n       14    0.000    0.000    0.000    0.000 common.py:333(is_datetime64tz_dtype)\n        5    0.000    0.000    0.000    0.000 common.py:371(is_timedelta64_dtype)\n        1    0.000    0.000    0.000    0.000 common.py:406(is_period_dtype)\n        3    0.000    0.000    0.000    0.000 common.py:439(is_interval_dtype)\n        8    0.000    0.000    0.000    0.000 common.py:475(is_categorical_dtype)\n        1    0.000    0.000    0.000    0.000 common.py:508(is_string_dtype)\n        3    0.000    0.000    0.000    0.000 common.py:609(is_datetimelike)\n        4    0.000    0.000    0.000    0.000 common.py:84(is_object_dtype)\n        5    0.000    0.000    0.000    0.000 core.py:115(_check_call)\n        1    0.000    0.000    0.000    0.000 core.py:152(c_str)\n        1    0.150    0.150    0.150    0.150 core.py:157(c_array)\n        1    0.000    0.000    6.442    6.442 core.py:168(_maybe_pandas_data)\n     6026    0.008    0.000    0.008    0.000 core.py:175(<genexpr>)\n        1    0.003    0.003    0.003    0.003 core.py:187(<listcomp>)\n        1    0.000    0.000    0.001    0.001 core.py:194(_maybe_pandas_label)\n        2    0.000    0.000    0.000    0.000 core.py:202(<genexpr>)\n        1    0.000    0.000   51.890   51.890 core.py:222(__init__)\n        1   27.752   27.752   45.272   45.272 core.py:309(_init_from_npy2d)\n        1    0.049    0.049    0.050    0.050 core.py:323(__del__)\n        1    0.001    0.001    0.152    0.152 core.py:368(set_float_info)\n        1    0.000    0.000    0.152    0.152 core.py:414(set_label)\n        2    0.000    0.000    0.001    0.000 core.py:501(num_col)\n        1    0.004    0.004    0.021    0.021 core.py:557(feature_names)\n     6026    0.007    0.000    0.015    0.000 core.py:576(<genexpr>)\n    24100    0.004    0.000    0.004    0.000 core.py:577(<genexpr>)\n        1    0.000    0.000    0.003    0.003 core.py:585(feature_types)\n     6026    0.002    0.000    0.002    0.000 core.py:614(<genexpr>)\n        1    0.000    0.000    0.000    0.000 dtypes.py:367(is_dtype)\n        3    0.000    0.000    0.000    0.000 dtypes.py:489(is_dtype)\n       26    0.000    0.000    0.000    0.000 dtypes.py:84(is_dtype)\n        2    0.000    0.000    0.000    0.000 generic.py:117(__init__)\n        2    0.000    0.000    0.000    0.000 generic.py:145(_validate_dtype)\n        2    0.000    0.000    0.000    0.000 generic.py:3067(__getattr__)\n        4    0.000    0.000    0.000    0.000 generic.py:3083(__setattr__)\n        2    0.000    0.000    0.000    0.000 generic.py:3122(_protect_consolidate)\n        2    0.000    0.000    0.000    0.000 generic.py:3132(_consolidate_inplace)\n        2    0.000    0.000    0.000    0.000 generic.py:3135(f)\n        2    0.000    0.000    0.000    0.000 generic.py:3214(as_matrix)\n        2    0.000    0.000    0.000    0.000 generic.py:3256(values)\n        2    0.000    0.000    0.002    0.001 generic.py:3298(dtypes)\n        2    0.000    0.000    0.000    0.000 generic.py:416(_info_axis)\n       25    0.000    0.000    0.000    0.000 generic.py:7(_check)\n     6025    0.009    0.000    0.014    0.000 inference.py:396(is_sequence)\n        2    0.000    0.000    0.000    0.000 internals.py:102(__init__)\n        3    0.000    0.000    0.000    0.000 internals.py:154(internal_values)\n        2    0.000    0.000    0.000    0.000 internals.py:160(get_values)\n        2    0.000    0.000    0.000    0.000 internals.py:1838(__init__)\n        6    0.000    0.000    0.000    0.000 internals.py:185(mgr_locs)\n        2    0.000    0.000    0.000    0.000 internals.py:222(mgr_locs)\n        2    0.000    0.000    0.000    0.000 internals.py:2683(make_block)\n        2    0.000    0.000    0.000    0.000 internals.py:2824(ndim)\n        2    0.000    0.000    0.000    0.000 internals.py:2864(_is_single_block)\n        2    0.000    0.000    0.000    0.000 internals.py:2897(_get_items)\n        2    0.000    0.000    0.001    0.000 internals.py:2917(get_dtypes)\n        2    0.000    0.000    0.000    0.000 internals.py:2918(<listcomp>)\n        2    0.000    0.000    0.000    0.000 internals.py:2986(__len__)\n       20    0.000    0.000    0.000    0.000 internals.py:303(dtype)\n        2    0.000    0.000    0.000    0.000 internals.py:3296(is_consolidated)\n        2    0.000    0.000    0.000    0.000 internals.py:3438(as_matrix)\n        2    0.000    0.000    0.000    0.000 internals.py:3560(consolidate)\n        2    0.000    0.000    0.000    0.000 internals.py:4078(__init__)\n       21    0.000    0.000    0.000    0.000 internals.py:4124(_block)\n       18    0.000    0.000    0.000    0.000 internals.py:4194(dtype)\n        3    0.000    0.000    0.000    0.000 internals.py:4221(internal_values)\n        1    0.000    0.000    0.000    0.000 missing.py:119(_isnull_ndarraylike)\n        1    0.000    0.000    0.000    0.000 missing.py:26(isnull)\n        1    0.000    0.000    0.000    0.000 missing.py:47(_isnull_new)\n     6025    0.029    0.000    0.104    0.000 printing.py:157(pprint_thing)\n     6025    0.027    0.000    0.038    0.000 printing.py:186(as_escaped_unicode)\n        3    0.000    0.000    0.000    0.000 series.py:1049(__iter__)\n        2    0.000    0.000    0.001    0.000 series.py:139(__init__)\n        2    0.000    0.000    0.000    0.000 series.py:284(_set_axis)\n        2    0.000    0.000    0.000    0.000 series.py:2894(_sanitize_array)\n        2    0.000    0.000    0.000    0.000 series.py:2911(_try_cast)\n        2    0.000    0.000    0.000    0.000 series.py:310(_set_subtyp)\n        2    0.000    0.000    0.000    0.000 series.py:320(name)\n        2    0.000    0.000    0.000    0.000 series.py:324(name)\n       18    0.000    0.000    0.000    0.000 series.py:331(dtype)\n        3    0.000    0.000    0.000    0.000 series.py:384(_values)\n        1    0.000    0.000    0.000    0.000 {built-in method _ctypes.POINTER}\n        3    0.000    0.000    0.000    0.000 {built-in method _ctypes.byref}\n        4    0.003    0.001    0.028    0.007 {built-in method builtins.all}\n     6025    0.003    0.000    0.008    0.000 {built-in method builtins.any}\n        1    0.000    0.000   51.970   51.970 {built-in method builtins.exec}\n       30    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\n    12085    0.018    0.000    0.018    0.000 {built-in method builtins.hasattr}\n    36332    0.010    0.000    0.010    0.000 {built-in method builtins.isinstance}\n       30    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\n     6028    0.002    0.000    0.002    0.000 {built-in method builtins.iter}\n6066/6057    0.001    0.000    0.001    0.000 {built-in method builtins.len}\n        4    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}\n        7    2.229    0.318    2.229    0.318 {built-in method numpy.core.multiarray.array}\n        3    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.empty}\n        2    0.000    0.000    0.000    0.000 {built-in method pandas._libs.algos.ensure_int64}\n        2    0.000    0.000    0.000    0.000 {built-in method pandas._libs.algos.ensure_object}\n        2    0.000    0.000    0.000    0.000 {built-in method pandas._libs.lib.is_datetime_array}\n        1    0.000    0.000    0.000    0.000 {built-in method pandas._libs.lib.isscalar}\n        1    0.000    0.000    0.000    0.000 {method 'any' of 'numpy.ndarray' objects}\n        2    6.314    3.157    6.314    3.157 {method 'astype' of 'numpy.ndarray' objects}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n        1    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}\n        2    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\n        1    0.000    0.000    0.000    0.000 {method 'ravel' of 'numpy.ndarray' objects}\n        1    0.000    0.000    0.000    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n    18075    0.009    0.000    0.009    0.000 {method 'replace' of 'str' objects}\n        2   15.291    7.645   15.291    7.645 {method 'reshape' of 'numpy.ndarray' objects}\n        4    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\n        3    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.ndarray' objects}\n        2    0.000    0.000    0.000    0.000 {pandas._libs.algos.take_1d_object_object}\n        1    0.000    0.000    0.000    0.000 {pandas._libs.lib.isnullobj}\n        1    0.000    0.000    0.000    0.000 {pandas._libs.lib.maybe_convert_objects}\n```\n\n"
        },
        {
            "created_at": "2017-08-21T00:23:21.395Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1374?focusedCommentId=16134612) by Wes McKinney (wesm):*\nI opened ARROW-1388 about adding a drop convenience method so you don't have to call read_table twice. Documentation about this kind of stuff would be helpful for new users because Arrow's semantics re: copying (as in, you have to be quite explicit about when you copy data or allocate memory)"
        },
        {
            "created_at": "2017-08-21T21:43:00.747Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1374?focusedCommentId=16135890) by Steven Anton (santon):*\nThanks Wes \u2013 really appreciate your support on this awesome project.\n\nRegarding the latter, I wonder if a quick feature to add could be a log message whenever a copy is made (kind of like how pandas warns when trying to assign values to a slice)."
        },
        {
            "created_at": "2017-08-23T05:12:43.407Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1374?focusedCommentId=16137905) by Wes McKinney (wesm):*\nMaybe the closest thing we've discussed to this would be logging output when memory is allocated to give better transparency, I opened ARROW-1405. I recall discussing this in the past but I couldn't find an older JIRA about it so I opened a new one"
        }
    ]
}