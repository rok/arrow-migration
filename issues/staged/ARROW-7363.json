{
    "issue": {
        "title": "[Python] Add combine_chunks method to ChunkedArray",
        "body": "***Note**: This issue was originally created as [ARROW-7363](https://issues.apache.org/jira/browse/ARROW-7363). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFlatten() doesn't work on ChunkedArray. It returns only the ChunkedArray in a list without flattening anything.\r\n```java\n\r\n// code placeholder\r\naa = pa.array([[1],[2]])\r\nbb = pa.chunked_array([aa,aa])\r\n\u00a0\r\nbb.flatten()\r\n\r\nOut[15]:\r\n[<pyarrow.lib.ChunkedArray object> [ [ [ 1 ], [ 2 ] ], [ [ 1 ], [ 2 ] ] ]]\r\n\r\nExpected:\r\n[ <pyarrow.lib.Array object> [ 1, 2 ], <pyarrow.lib.Array object> [ 1, 2 ] ]\r\n```\r\n\u00a0",
        "created_at": "2019-12-10T09:38:48.000Z",
        "updated_at": "2020-12-09T08:22:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-12-09T08:22:22.000Z"
    },
    "comments": [
        {
            "created_at": "2019-12-10T12:50:52.370Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7363?focusedCommentId=16992519) by Joris Van den Bossche (jorisvandenbossche):*\nFrom looking at the code, I_think_ that the ChunkedArray `flatten()` method maps to the StructArray.flatten() method, and not to the ListArray.flatten() method. \r\n\r\nStructArray and ListArray implement (somewhat unfortunately maybe) a different flatten method: for StructArray it returns a list of arrays (returning one individual array for each field in the struct), while ListArray returns a new Array with one level of nesting reduced (list array -> array, or list of list array -> list array, ..). \r\n\r\nI am not fully sure how to deal with this. Should ChunkedArray.flatten do something different depending on the type? (but it's also not nice that the type of return is then variable) Should be rename the `flatten()` method for ListArrays ?"
        },
        {
            "created_at": "2020-06-12T06:56:56.383Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7363?focusedCommentId=17133993) by Daniel Nugent (nugend):*\nIt seems like there should be **some** way to get to a contiguous buffer of data from a chunkedarray even if it involves copying. I'm looking at something right now where I want to try and produce Parquet RowGroups of identical length to an input dataset and it'd be nice to be able to handle this in Arrow before passing it off to the analysis functions I'm using.\r\n\r\nCould it just be called `unchunk` or something? (Maybe a peanut butter pun would be good: `creamy`)\r\n\r\nedit: D'oh. Just realized this is on Table already as `combine_chunks`. It should probably just be implemented for ChunkedArray, no?"
        },
        {
            "created_at": "2020-06-12T07:21:50.040Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7363?focusedCommentId=17134012) by Joris Van den Bossche (jorisvandenbossche):*\nThere is also already `pa.concat_arrays`, with which you can combine the chunks:\r\n\r\n```Java\n\r\nIn [42]: chunked_array = pa.chunked_array([[1, 2], [3, 4]])                                                                                                                                                        \r\n\r\nIn [43]: chunked_array                                                                                                                                                                                             \r\nOut[43]: \r\n<pyarrow.lib.ChunkedArray object at 0x7fa785879ea8>\r\n[\r\n  [\r\n    1,\r\n    2\r\n  ],\r\n  [\r\n    3,\r\n    4\r\n  ]\r\n]\r\n\r\nIn [44]: pa.concat_arrays(chunked_array.chunks)                                                                                                                                                                    \r\nOut[44]: \r\n<pyarrow.lib.Int64Array object at 0x7fa785824468>\r\n[\r\n  1,\r\n  2,\r\n  3,\r\n  4\r\n]\r\n```\r\n\r\n(which is in the end using the same C++ `Concatenate` functionality as combine_chunks)\r\n\r\nBut so maybe we could indeed expose this as a `combine_chunks` method on ChunkedArray as well."
        },
        {
            "created_at": "2020-12-09T08:22:22.305Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7363?focusedCommentId=17246351) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 8657\n<https://github.com/apache/arrow/pull/8657>"
        }
    ]
}