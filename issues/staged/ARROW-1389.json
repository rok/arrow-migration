{
    "issue": {
        "title": "[Python] Support arbitrary precision integers",
        "body": "***Note**: This issue was originally created as [ARROW-1389](https://issues.apache.org/jira/browse/ARROW-1389). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor Python serialization it would be great if we had Arrow support for arbitrary precision integers, see the comment in\n\nhttps://github.com/apache/arrow/blob/de7c6715ba244e119913bfa31b8de46dbbd450bf/python/pyarrow/tests/test_serialization.py#L183\n\nLong integers are for example used in the uuid python module and having this would increase serialization performance for uuids and also make the code cleaner.\n\nI wonder if this is more generally useful too, any thoughts?",
        "created_at": "2017-08-21T00:40:22.000Z",
        "updated_at": "2022-08-27T14:41:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-09-18T16:18:34.000Z"
    },
    "comments": [
        {
            "created_at": "2017-08-22T20:19:46.525Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1389?focusedCommentId=16137325) by Wes McKinney (wesm):*\nSounds like this is a new logical type for the Arrow format. What memory representation do you suggest for an arbitrary precision integer (which can be stored as Binary values)? There's VLQ integers, but what other options are out there and well supported? "
        },
        {
            "created_at": "2017-08-22T21:42:36.367Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1389?focusedCommentId=16137457) by Philipp Moritz (pcmoritz):*\nFor the use case I described above, almost anything would work I think; I'm not familiar which standard is the best to use. There is also the really simple string based ones that GMP has: https://gmplib.org/manual/I_002fO-of-Integers.html (which are probably less efficient than VLQ)\n\nA stop gap soluntion if we don't want to make decisions right now is to use a StructArray of strings that encodes the integer the as a string with whatever _PyLong_AsByteArray (see http://svn.python.org/projects/python/tags/r23a1/Include/longobject.h) returns."
        },
        {
            "created_at": "2017-08-23T01:44:24.787Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1389?focusedCommentId=16137745) by Wes McKinney (wesm):*\nSince the serializer in libarrow_python is for ephemeral serialization, then if Python exports the internal bytes in an large integer (and provides a constructor to take them back), then that's probably going to be the easiest thing. Implementing a portable implementation that will be also Java friendly may require some work. "
        },
        {
            "created_at": "2019-08-21T16:31:37.725Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1389?focusedCommentId=16912470) by Wes McKinney (wesm):*\n`[~pcmoritz]` this can be implemented using ExtensionType / ExtensionArray now without modifying the Arrow IPC metadata"
        },
        {
            "created_at": "2019-09-18T16:18:34.911Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1389?focusedCommentId=16932611) by Antoine Pitrou (apitrou):*\nOr it can simply rely on pickling. There doesn't seem to be any motivation on this, so closing."
        },
        {
            "created_at": "2022-08-27T14:41:54.643Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1389?focusedCommentId=17585920) by @toddfarmer:*\nTransitioning issue from Resolved to Closed to based on resolution field value."
        }
    ]
}