{
    "issue": {
        "title": "[C++] ScalarAggregateOptions don't make sense (in hash aggregation)",
        "body": "***Note**: This issue was originally created as [ARROW-13627](https://issues.apache.org/jira/browse/ARROW-13627). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nR's aggregation functions have a `na.rm` argument that governs how missing data is handled. Assume `x <- c(1, 2, NA, 3)`. `sum(x, na.rm = TRUE) == 6` and `sum(x, na.rm = FALSE)` is `NA` because there is at least one missing value. \r\n\r\nThe ScalarAggregateOptions have two options: skip_nulls and min_count. From what I can tell reading the source, in the context of sum(), skip_nulls affects whether each element of the Array is added to \"count\", and if count < min_count, you get a null value returned. So to get the expected behavior when calling \"sum\" on an Array, when na.rm = TRUE, we pass skip_nulls = false, min_count = 0. When na.rm = FALSE, we pass skip_nulls = true, min_count = length(x), the reasoning being that you return a null value unless all values are non-null (and count == length). See https://github.com/apache/arrow/blob/master/r/R/compute.R#L125-L130\r\n\r\nThis doesn't really work in the query engine, though. We don't know how many rows are in the data to set an appropriate min_count to get the expected behavior--the dataset being queried may have filtering. And when doing hash aggregation, each group may have a different number of rows. \r\n",
        "created_at": "2021-08-13T19:02:10.000Z",
        "updated_at": "2021-09-07T01:39:15.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-08-23T17:27:39.000Z"
    },
    "comments": [
        {
            "created_at": "2021-08-13T19:13:13.509Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13627?focusedCommentId=17398871) by Keith Kraus (keith.j.kraus):*\nI would have expected the `na.rm` R argument to map directly to the `skip_nulls` Arrow C++ argument. Given that Arrow arithmetic functions return null if any input is null, I would expect `skip_nulls=False` to return `null` if any value in the input array is `null` which would map to R's expected behavior without needing to get the size of the array."
        },
        {
            "created_at": "2021-08-13T19:18:01.640Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13627?focusedCommentId=17398873) by David Li (lidavidm):*\nRight now (hash) sum/mean/etc. ignore skip_nulls altogether. So we should just implement actual support for that, such that na.rm = TRUE maps to skip_nulls = true, na.rm = FALSE maps to skip_nulls = false, and min_count should always be 0 (such that sum([]) == 0 instead of NA)."
        },
        {
            "created_at": "2021-08-23T17:27:39.080Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13627?focusedCommentId=17403314) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 10942\n<https://github.com/apache/arrow/pull/10942>"
        },
        {
            "created_at": "2021-09-07T01:38:57.495Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13627?focusedCommentId=17410867) by Gamel Alomaisi (Walli):*\nHey hey what\u2019s up "
        },
        {
            "created_at": "2021-09-07T01:39:15.937Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13627?focusedCommentId=17410868) by Gamel Alomaisi (Walli):*\nHey what\u2019s up with your "
        }
    ]
}