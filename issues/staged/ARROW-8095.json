{
    "issue": {
        "title": "[CI][Crossbow] Nightly turbodbc job fails",
        "body": "***Note**: This issue was originally created as [ARROW-8095](https://issues.apache.org/jira/browse/ARROW-8095). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nTurbodbc fails to compile (both \"master\" and \"latest\" versions with this error):\r\n\r\n```Java\n\r\nFAILED: cpp/turbodbc_arrow/Library/CMakeFiles/turbodbc_arrow_support.dir/src/arrow_result_set.cpp.o \r\n/opt/conda/envs/arrow/bin/x86_64-conda_cos6-linux-gnu-c++  -Dturbodbc_arrow_support_EXPORTS -I/turbodbc/cpp/turbodbc_arrow/Library -I/turbodbc/cpp/turbodbc_arrow/../cpp_odbc/Library -I/turbodbc/cpp/turbodbc_arrow/../turbodbc/Library -I/turbodbc/pybind11/include -isystem /opt/conda/envs/arrow/include -isystem /opt/conda/envs/arrow/include/python3.7m -isystem /opt/conda/envs/arrow/lib/python3.7/site-packages/numpy/core/include -fvisibility-inlines-hidden -Wall -Wextra -g -O0 -pedantic -fPIC -fvisibility=hidden   -std=c++11 -std=c++14 -MD -MT cpp/turbodbc_arrow/Library/CMakeFiles/turbodbc_arrow_support.dir/src/arrow_result_set.cpp.o -MF cpp/turbodbc_arrow/Library/CMakeFiles/turbodbc_arrow_support.dir/src/arrow_result_set.cpp.o.d -o cpp/turbodbc_arrow/Library/CMakeFiles/turbodbc_arrow_support.dir/src/arrow_result_set.cpp.o -c /turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp: In member function 'arrow::Status turbodbc_arrow::{anonymous}::StringDictionaryBuilderProxy::AppendProxy(const char*, int32_t)':\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp:67:36: error: no matching function for call to 'turbodbc_arrow::{anonymous}::StringDictionaryBuilderProxy::Append(const char*&, int32_t&)'\r\n         return Append(value, length);\r\n                                    ^\r\nIn file included from /opt/conda/envs/arrow/include/arrow/builder.h:26:0,\r\n                 from /opt/conda/envs/arrow/include/arrow/api.h:26,\r\n                 from /turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp:6:\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:143:10: note: candidate: arrow::Status arrow::internal::DictionaryBuilderBase<BuilderType, T>::Append(const Scalar&) [with BuilderType = arrow::AdaptiveIntBuilder; T = arrow::StringType; arrow::internal::DictionaryBuilderBase<BuilderType, T>::Scalar = nonstd::sv_lite::basic_string_view<char>]\r\n   Status Append(const Scalar& value) {\r\n          ^~~~~~\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:143:10: note:   candidate expects 1 argument, 2 provided\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:156:43: note: candidate: template<class T1> arrow::enable_if_fixed_size_binary<T1, arrow::Status> arrow::internal::DictionaryBuilderBase<BuilderType, T>::Append(const uint8_t*) [with T1 = T1; BuilderType = arrow::AdaptiveIntBuilder; T = arrow::StringType]\r\n   enable_if_fixed_size_binary<T1, Status> Append(const uint8_t* value) {\r\n                                           ^~~~~~\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:156:43: note:   template argument deduction/substitution failed:\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp:67:36: note:   candidate expects 1 argument, 2 provided\r\n         return Append(value, length);\r\n                                    ^\r\nIn file included from /opt/conda/envs/arrow/include/arrow/builder.h:26:0,\r\n                 from /opt/conda/envs/arrow/include/arrow/api.h:26,\r\n                 from /turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp:6:\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:162:43: note: candidate: template<class T1> arrow::enable_if_fixed_size_binary<T1, arrow::Status> arrow::internal::DictionaryBuilderBase<BuilderType, T>::Append(const char*) [with T1 = T1; BuilderType = arrow::AdaptiveIntBuilder; T = arrow::StringType]\r\n   enable_if_fixed_size_binary<T1, Status> Append(const char* value) {\r\n                                           ^~~~~~\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:162:43: note:   template argument deduction/substitution failed:\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp:67:36: note:   candidate expects 1 argument, 2 provided\r\n         return Append(value, length);\r\n                                    ^\r\nIn file included from /opt/conda/envs/arrow/include/arrow/builder.h:26:0,\r\n                 from /opt/conda/envs/arrow/include/arrow/api.h:26,\r\n                 from /turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp:6:\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:168:37: note: candidate: template<class T1> arrow::enable_if_binary_like<T1, arrow::Status> arrow::internal::DictionaryBuilderBase<BuilderType, T>::Append(const uint8_t*, int32_t) [with T1 = T1; BuilderType = arrow::AdaptiveIntBuilder; T = arrow::StringType]\r\n   enable_if_binary_like<T1, Status> Append(const uint8_t* value, int32_t length) {\r\n                                     ^~~~~~\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:168:37: note:   template argument deduction/substitution failed:\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp:67:36: note:   cannot convert 'value' (type 'const char*') to type 'const uint8_t* {aka const unsigned char*}'\r\n         return Append(value, length);\r\n                                    ^\r\nIn file included from /opt/conda/envs/arrow/include/arrow/builder.h:26:0,\r\n                 from /opt/conda/envs/arrow/include/arrow/api.h:26,\r\n                 from /turbodbc/cpp/turbodbc_arrow/Library/src/arrow_result_set.cpp:6:\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:174:37: note: candidate: template<class T1> arrow::enable_if_binary_like<T1, arrow::Status> arrow::internal::DictionaryBuilderBase<BuilderType, T>::Append(const char*, int32_t) [with T1 = T1; BuilderType = arrow::AdaptiveIntBuilder; T = arrow::StringType]\r\n   enable_if_binary_like<T1, Status> Append(const char* value, int32_t length) {\r\n                                     ^~~~~~\r\n/opt/conda/envs/arrow/include/arrow/array/builder_dict.h:174:37: note:   template argument deduction/substitution failed:\r\n\r\n[151/156] Building CXX object cpp/turbodbc_arrow/Library/CMakeFiles/turbodbc_arrow_support.dir/src/set_arrow_parameters.cpp.o\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp: In member function 'void turbodbc_arrow::{anonymous}::string_converter::rebind_to_maximum_length(const arrow::BinaryArray&, std::size_t, std::size_t)':\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp:101:33: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n           for (int64_t i = 0; i != elements; ++i) {\r\n                               ~~^~~~~~~~~~~\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp: In member function 'void turbodbc_arrow::{anonymous}::string_converter::set_batch_utf16(std::size_t, std::size_t)':\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp:140:31: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n         for (int64_t i = 0; i != elements; ++i) {\r\n                             ~~^~~~~~~~~~~\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp: In instantiation of 'void turbodbc_arrow::{anonymous}::string_converter::set_batch_of_type(std::size_t, std::size_t) [with String = std::__cxx11::basic_string<char>; std::size_t = long unsigned int]':\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp:173:57:   required from here\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp:121:33: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n           for (int64_t i = 0; i != elements; ++i) {\r\n                               ~~^~~~~~~~~~~\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp: In function 'std::vector<std::unique_ptr<turbodbc_arrow::{anonymous}::parameter_converter> > turbodbc_arrow::{anonymous}::make_converters(const arrow::Table&, turbodbc::bound_parameter_set&)':\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp:363:41: warning: this statement may fall through [-Wimplicit-fallthrough=]\r\n                 converters.emplace_back(new null_converter(data, parameters, i));\r\n                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/turbodbc/cpp/turbodbc_arrow/Library/src/set_arrow_parameters.cpp:364:15: note: here\r\n               case arrow::Type::INT8:\r\n               ^~~~\r\n\r\n[152/156] Building CXX object cpp/turbodbc_arrow/Library/CMakeFiles/turbodbc_arrow_support.dir/src/python_bindings.cpp.o\r\nninja: build stopped: subcommand failed.\r\n\r\nExited with code exit status 1\r\n```\r\n\r\nhttps://circleci.com/gh/ursa-labs/crossbow/9165",
        "created_at": "2020-03-12T17:42:52.000Z",
        "updated_at": "2020-03-18T01:54:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Continuous Integration",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-03-18T01:54:10.000Z"
    },
    "comments": [
        {
            "created_at": "2020-03-16T23:53:57.774Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8095?focusedCommentId=17060538) by Kouhei Sutou (kou):*\n`[~apitrou]` `[~uwe]` The build error can be fixed by the following Apache Arrow C++ change:\r\n\r\n```\n\r\ndiff --git a/cpp/src/arrow/array/builder_dict.h b/cpp/src/arrow/array/builder_dict.h\r\nindex 98829010d..57674a1bb 100644\r\n--- a/cpp/src/arrow/array/builder_dict.h\r\n+++ b/cpp/src/arrow/array/builder_dict.h\r\n@@ -175,6 +175,12 @@ class DictionaryBuilderBase : public ArrayBuilder {\r\n     return Append(util::string_view(value, length));\r\n   }\r\n \r\n+  /// \\brief Append a string (only for string types)\r\n+  template <typename T1 = T>\r\n+  enable_if_string_like<T1, Status> Append(const char* value, int32_t length) {\r\n+    return Append(util::string_view(value, length));\r\n+  }\r\n+\r\n   /// \\brief Append a scalar null value\r\n   Status AppendNull() final {\r\n     length_ += 1;\r\n```\r\n\r\nWhich should we change Apache Arrow C++ or Turbodbc?"
        },
        {
            "created_at": "2020-03-18T01:54:10.478Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8095?focusedCommentId=17061308) by Kouhei Sutou (kou):*\nIssue resolved by pull request 6648\n<https://github.com/apache/arrow/pull/6648>"
        }
    ]
}