{
    "issue": {
        "title": "[Java] ORC JNI bridge should use the C data interface",
        "body": "***Note**: This issue was originally created as [ARROW-15754](https://issues.apache.org/jira/browse/ARROW-15754). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nRight now the ORC JNI bridge uses some custom buffer passing which only seems to handle primitive arrays correctly (child array buffers and dictionaries are not considered):\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/jni/orc/jni_wrapper.cpp#L263-L265\r\n\r\nInstead, it should use the C data interface, which is now implemented in Java.\r\n",
        "created_at": "2022-02-22T16:25:38.000Z",
        "updated_at": "2022-10-03T17:51:24.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-04-26T07:49:55.055Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15754?focusedCommentId=17527979) by Antoine Pitrou (apitrou):*\ncc `[~zhztheplayer]`"
        },
        {
            "created_at": "2022-05-04T21:50:38.910Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15754?focusedCommentId=17531959) by Larry White (ljw1001):*\nHi @apitrou, I have a couple of follow-up questions on this ticket.\u00a0\r\n\u00a0\r\nI would like to better understand how you see the C Data interface based version of this adapter working. From what I've read, that interface is primarily designed as a way to simplify access to Arrow memory. Looking at the orc adaptor, it seems to work like an ArrowReader operating on a file, in that it calls native code that reads an ORC file from disk into memory, and as it proceeds, it hands off each stripe (as a RecordBatch) to the Java code.\u00a0\u00a0\r\n\u00a0\r\nIs it your idea that the adapter should\u00a0separate the loading and the memory access, so that it first does a complete load of the data (into a SimpleTable, perhaps), and then access to the file is performed using C Data? If that is the case, would the API be simplified to something like a function that asks for the file to be loaded and returns to the caller something like a map of ArrowSchema to Arrow Array?\r\n\u00a0\r\nThe second question is on your comment that complex types are not supported. \u00a0Is it the C++ implementation here that lacks the ability to read complex types? From what\u00a0I can see, the current JNI interface is built around the VectorSchemaRoot and ArrowRecordBatch, which I presume support complex types.\u00a0\r\n\u00a0\r\nthanks.\u00a0"
        },
        {
            "created_at": "2022-05-05T08:31:04.002Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15754?focusedCommentId=17532140) by Antoine Pitrou (apitrou):*\nHi `[~ljw1001]`\r\n\r\nThis wouldn't change the fact that the ORC reader interface operates on a record batch at a time.\r\n\r\nThe issue here is that there is ad hoc code to transfer the record batches read by the C++ ORC reader, into Java.\r\nYou can see this code here:\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/jni/orc/jni_wrapper.cpp#L255-L285\r\n\r\nThe reason I'm saying it only handles primitive types is that this code doesn't take into account child arrays (`dataArray->children` isn't visited), so nested types won't work; ditto for dictionary types.\r\n\r\nSimilar ad hoc code existed on the JNI datasets side and it was removed in ARROW-7272, in favour of calling the C data interface. See in particular these changes: https://github.com/apache/arrow/pull/10883/files#diff-ae5c8db6104f5fc42b724e2e3272d093d7c8db128114fb401f1ea7dc3c6c5cb5L474\r\n\r\nIn addition to relying on a shared building block (the C data interface) and removing code duplication, this actually added support for complex types, though apparently no tests were added for that."
        },
        {
            "created_at": "2022-05-05T08:31:34.441Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15754?focusedCommentId=17532142) by Antoine Pitrou (apitrou):*\n`[~zhztheplayer]` can perhaps give you more Java-specific guidance."
        },
        {
            "created_at": "2022-10-03T17:51:24.780Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15754?focusedCommentId=17612398) by Apache Arrow JIRA Bot (arrowjira):*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy](https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment). Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}