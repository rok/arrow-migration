{
    "issue": {
        "title": "[C++] Sketch out design for kernels and \"query\" execution in compute layer",
        "body": "***Note**: This issue was originally created as [ARROW-4333](https://issues.apache.org/jira/browse/ARROW-4333). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be good to formalize the design of kernels and the controlling query execution layer (e.g. volcano batch model?) to understand the following:\r\n\r\nContracts for kernels:\r\n \\* Thread safety of kernels?\r\n \\* When Kernels should allocate memory vs expect preallocated memory?\u00a0 How to communicate requirements for a kernels memory allocaiton?\r\n \\* How to communicate the whether a kernels execution is parallelizable across a ChunkedArray?\u00a0 How to determine if the order to execution across a ChunkedArray is important?\r\n \\* How to communicate when it is safe to re-use the same buffers and input and output to the same kernel?\r\n\r\nWhat does the threading model look like for the higher level of control?\u00a0 Where should synchronization happen?",
        "created_at": "2019-01-23T03:40:37.000Z",
        "updated_at": "2022-08-29T14:15:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-08-29T14:14:04.000Z"
    },
    "comments": [
        {
            "created_at": "2019-02-08T05:16:07.398Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4333?focusedCommentId=16763321) by Wes McKinney (wesm):*\nYes, I agree with coming up with a plan for all these concerns. I think the volcano batch model is the way to go. This is what Impala and many other systems use quite successfully"
        },
        {
            "created_at": "2019-02-13T04:33:20.531Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4333?focusedCommentId=16766766) by Micah Kornfield (emkornfield@gmail.com):*\n<http://www.vldb.org/pvldb/vol4/p539-neumann.pdf>\u00a0might be of interest.\u00a0 \u00a0It seems like this reverses the model to some extent (and then goes ahead and disposes of it entirely to compile code).\u00a0 Caveat (I'm still ramping up on DB systems in general)."
        },
        {
            "created_at": "2019-02-13T14:38:37.549Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4333?focusedCommentId=16767264) by Francois Saint-Jacques (fsaintjacques):*\nReferences I suggest you to check.\r\n - [The Design and Implementation of Modern Column-Oriented Database Systems, 2012](http://db.csail.mit.edu/pubs/abadi-column-stores.pdf): This is a long read, but worth the investment. Will give you a broad overview of what are columnar databases and what makes them fast.\r\n - [MonetDB/X100: Hyper-Pipelining Query Execution, 2005](https://pdfs.semanticscholar.org/2e84/4872e32a4a4e94e229a9a9e70ac47d710252.pdf) foundation paper on how to implement fast query engine for analytics on modern hardware.\r\n - [Everything You Always Wanted to Know About Compiled and Vectorized Queries But Were Afraid to Ask, 2018](http://www.vldb.org/pvldb/vol11/p2209-kersten.pdf): This is an update to the paper you linked, which studies Compilation vs Vectorization.\r\n - [Vectorization vs. Compilation in Query Execution, 2011](https://15721.courses.cs.cmu.edu/spring2019/papers/21-vectorization2/p5-sompolski.pdf)\r\n - [Relaxed Operator Fusion for In-Memory Databases: Making Compilation, Vectorization, and Prefetching Work Together At Last, 2017](https://pdfs.semanticscholar.org/1a21/509b67d3ed06cd7062f2f9b7e5b0b32a32e6.pdf)\r\n - [Make the Most out of Your SIMD Investments: Counter Control Flow Divergence in Compiled Query Pipelines, 2018](http://db.in.tum.de/~lang/papers/simd_divergence.pdf), talks about using AVX-512 masked instructions.\r\n\r\nAnything by:\r\n [Daniel J. Abadi](https://www.semanticscholar.org/author/Daniel-J.-Abadi/2254232) part of the team that wrote CStore which became Vertica. Write less about columnar execution in the last years.\r\n [Peter Boncz](https://www.semanticscholar.org/author/Peter-A.-Boncz/1687211) behind MonetDB/Vectorwize.\r\n [Thomas Neumann](https://www.semanticscholar.org/author/Thomas-Neumann/1706846) behind [Hyper](https://hyper-db.de/) bought by Tableau.\r\n [Andrew Pavlo](https://www.semanticscholar.org/author/Andrew-Pavlo/1774210) teaches database course at CMU\r\n\r\nAmazing video lectures of courses at CMU, you can ignore most of the storage layer, concurrency, transaction context. We're interested in execution engine, vectorization, and compilation.\r\n \\* <https://www.youtube.com/playlist?list=PLSE8ODhjZXjYplQRUlrgQKwIAV3es0U6t>\r\n \\* <https://www.youtube.com/playlist?list=PLSE8ODhjZXjbjOyrcqgE6_lCV6xvzffSN>\r\n \\* <https://www.youtube.com/playlist?list=PLSE8ODhjZXjY2xvwxuKjZT5qFH0sQga8_>\r\n \\* <https://www.youtube.com/playlist?list=PLSE8ODhjZXjY0GMWN4X8FIkYNfiu8_Wl9>\r\n\r\nThe [CMU 15-721 Advanced Database Systems schedule](https://15721.courses.cs.cmu.edu/spring2019/schedule.html) is usually a good source of papers.\r\n\r\nRelevant code base:\r\n - [Impala](https://github.com/apache/impala/tree/master/be/src)\r\n - [ClickHouse](https://github.com/yandex/ClickHouse/tree/master/dbms/src)\u00a0\u00a0\r\n - [MapD](https://github.com/omnisci/mapd-core/tree/master)\r\n - [Supersonic](https://github.com/google/supersonic)\r\n - [Peloton](https://github.com/cmu-db/peloton)"
        },
        {
            "created_at": "2020-05-25T15:02:16.895Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4333?focusedCommentId=17116096) by Wes McKinney (wesm):*\nI partially addressed some of these questions in ARROW-8792, but there are other questions viz-a-viz memory reuse and dealing with ChunkedArrays. Perhaps it would be useful to go through these questions and discuss them in the context of the new generic kernel execution framework in arrow/compute"
        },
        {
            "created_at": "2020-06-02T15:30:47.878Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4333?focusedCommentId=17123933) by Wes McKinney (wesm):*\nI'd suggest we resolve this and pursue answers to some of the unanswered questions as more specific followups. In particular, I plan to be building multi-kernel expression evaluation in the near future so some of the pipelining/memory reuse questions must be addressed as a part of this"
        }
    ]
}