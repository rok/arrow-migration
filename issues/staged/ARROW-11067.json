{
    "issue": {
        "title": "[C++] CSV reader returns nulls for some strings on macOS",
        "body": "***Note**: This issue was originally created as [ARROW-11067](https://issues.apache.org/jira/browse/ARROW-11067). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA sample file is attached, showing 10 rows each of strings with consistent failures (false_na = TRUE) and consistent successes (false_na = FALSE). The strings are in the column `json_string` \u2013 if relevant, they are geojsons with min nchar of 33,229 and max nchar of\u00a0202,515.\r\n\r\nWhen I read this sample file with other R CSV readers (readr and data.table shown), the files are imported correctly and there are no NAs in the json_string column.\r\n\r\nWhen I read with arrow::read_csv_arrow, 50% of the sample json_string column end up as NAs. as_data_frame TRUE or FALSE does not change the behavior, so this might not be limited to the R interface, but I can't help debug much further upstream.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n```java\n\r\naaa1 <- arrow::read_csv_arrow(\"demo_data.csv\", as_data_frame = TRUE)\r\naaa2 <- arrow::read_csv_arrow(\"demo_data.csv\", as_data_frame = FALSE)\r\nbbb <- data.table::fread(\"demo_data.csv\")\r\nccc <- readr::read_csv(\"demo_data.csv\")\r\nmean(is.na(aaa1$json_string)) # 0.5\r\nmean(is.na(aaa2$column(1))) #\u00a0Scalar 0.5\r\nmean(is.na(bbb$json_string)) # 0\r\nmean(is.na(ccc$json_string)) # 0\n```\r\n\u00a0\r\n\r\n\u00a0\r\n \\* arrow 2.0 (latest CRAN)\r\n \\* readr 1.4.0\r\n \\* data.table 1.13.2\r\n \\* R version 4.0.1 (2020-06-06)\r\n \\* MacOS Catalina\u00a010.15.7 /\u00a0x86_64-apple-darwin17.0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2020-12-29T16:25:01.000Z",
        "updated_at": "2021-01-05T21:11:56.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-01-05T21:11:46.000Z"
    },
    "comments": [
        {
            "created_at": "2020-12-29T20:00:02.931Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256149) by Neal Richardson (npr):*\nThanks for the detailed summary. Since as you say, the values are missing in the Arrow Table, it sounds like something in the C++ library. We'll take a look."
        },
        {
            "created_at": "2020-12-29T23:39:25.109Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256207) by John Sheffield (jms):*\nI pulled a few strings over a much larger dataset and came to something useful. There is an extremely definite 'striping' of success/failure patterns beginning at nchar of 32,767 (where failures start); then the failures stop and all cases succeed between 65,685 and 98,832 chars; and then we switch back to failures. The graph below captures it all.\u00a0 \u00a0\r\n\r\n(Unfortunately, can't share the full dataset this came from for confidentiality reasons, but I'm betting that I can recreate the effect on something simulated. I also attached the distribution of character counts by success/failure \u2013 this is the CSV behind the plot, dropping cases below 30k characters which 100%\u00a0succeeded.)\r\n\r\n[arrow_failure_cases.csv](arrow_failure_cases.csv)\r\n\r\n\u00a0\r\n\r\n![arrowbug1.png](https://issues.apache.org/jira/secure/attachment/13017862/arrowbug1.png)"
        },
        {
            "created_at": "2020-12-29T23:40:43.637Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256208) by Neal Richardson (npr):*\nThat's really helpful, thanks for sharing. `[~apitrou]` or `[~westonpace]`, can you take a look at this?"
        },
        {
            "created_at": "2020-12-30T01:18:00.631Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256218) by John Sheffield (jms):*\n(Sorry for the fragmented report here, but figured out a way to really isolate the issue.)\r\n\r\n\u00a0\r\n\r\nThe string read failures are deterministic and predictable, and the content of the strings doesn't seem to matter \u2013 only length. There's a switch between success/failure at every integer multiple of **N \\* (32 \\* 1024) characters**.\r\n \\* For N in [0,1), string length between 0 and\u00a032767 characters, all reads succeed.\r\n \\* For N in [1,2), string length\u00a032768 and 65535, all of the reads fail.\r\n \\* The same pattern repeats until we hit LongString limits: if floor(nchar/(32 \\* 1024) is 0 or even, the read succeeds. If floor(nchar/(32 \\* 1024) is odd, it fails.\r\n\r\nCode:\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n```java\n\r\nlibrary(tidyverse)\r\nlibrary(arrow)\r\n\r\ngenerate_string <- function(n){\r\n  paste0(sample(c(LETTERS, letters), size = n, replace = TRUE), collapse = \"\")\r\n}\r\n\r\nsample_breaks <- (1:60L * 16L * 1024L)\r\nsample_lengths <- sample_breaks - 1\r\nset.seed(1234)\r\n\r\ntest_strings <- purrr::map_chr(sample_lengths, generate_string)\r\n\r\nreadr::write_csv(data.frame(str = test_strings, strlen = sample_lengths),\r\n                 \"arrow_sample_data.csv\")\r\n\r\narrow::read_csv_arrow(\"arrow_sample_data.csv\") %>%\r\n  dplyr::mutate(failed_case = ifelse(is.na(str), \"failed\", \"succeeded\")) %>%\r\n  dplyr::select(-str) %>%\r\n  ggplot(data = ., aes(x = (strlen / (32 * 1024)), y = failed_case)) +\r\n  geom_point(aes(color = ifelse(floor(strlen / (32 * 1024)) %% 2 == 0, \"even\", \"odd\")), size = 3) +\r\n  scale_x_continuous(breaks = seq(0, 30)) +\r\n  labs(x = \"string length / (32 * 1024) : integer multiple of 32kb\",\r\n       y = \"string read success/failure\",\r\n       color = \"even/odd multiple of 32kb\")\r\n```\r\n\u00a0\r\n\r\n![arrow_explanation.png](https://issues.apache.org/jira/secure/attachment/13017863/arrow_explanation.png)\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-12-30T02:26:10.571Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256237) by Weston Pace (westonpace):*\nI'll look into it a bit more tomorrow but at a quick glance it seems to behave correctly in python...\r\n```java\n\r\n>>> import pyarrow.csv\r\n>>> table = pyarrow.csv.read_csv('/home/pace/Downloads/demo_data.csv')\r\n>>> strs = table.column('json_string').to_pylist()\r\n>>> [len(s) for s in strs]\r\n[38660, 37627, 34127, 45107, 127507, 59150, 34426, 41492, 39564, 106966, 880, 7882, 216, 734, 407, 31111, 383, 217, 887, 357]\r\n\r\n```"
        },
        {
            "created_at": "2020-12-30T15:28:10.122Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256566) by Weston Pace (westonpace):*\nHmm...there might be something more at play here.\u00a0 I'm not able to reproduce using the latest R package from CRAN...\r\n```java\n\r\n> x <- arrow::read_csv_arrow(\"/home/pace/Downloads/demo_data.csv\", as_data_frame = TRUE)\r\n> mean(is.na(x$json_string))\r\n[1] 0\r\n> x <- arrow::read_csv_arrow(\"/home/pace/Downloads/demo_data.csv\", as_data_frame = FALSE)\r\n> mean(is.na(x$json_string))\r\nScalar\r\n0\r\n```\r\nI am using an older version of R (3.6.3) so maybe that matters, I'm also on a Linux server and not mac.\r\n```java\n\r\n> sessionInfo()\r\nR version 3.6.3 (2020-02-29)\r\nPlatform: x86_64-pc-linux-gnu (64-bit)\r\nRunning under: Ubuntu 20.04.1 LTSMatrix products: default\r\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\r\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0locale:\r\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \r\n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \r\n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \r\n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \r\n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \r\n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       attached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods   base     loaded via a namespace (and not attached):\r\n [1] tidyselect_1.1.0 bit_4.0.4        compiler_3.6.3   magrittr_2.0.1  \r\n [5] assertthat_0.2.1 R6_2.5.0         tools_3.6.3      glue_1.4.2      \r\n [9] bit64_4.0.5      vctrs_0.3.6      arrow_2.0.0      rlang_0.4.9     \r\n[13] purrr_0.3.4     \r\n\r\n```\r\nI also ran the arrow_sample_data.csv script and got succeeded for all."
        },
        {
            "created_at": "2020-12-30T16:07:12.570Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256576) by John Sheffield (jms):*\nHm, the plot thickens. I just replicated Weston's results for the\u00a0arrow_sample_data.csv script in a few environments that suggest it might be a Mac-running-R4.0 issue.\u00a0\r\n \\* **Success:**\u00a0In a container (`rocker/geospatial:4.0.2`, container itself is Ubuntu 20.04LTS running on GCE instance running Debian 10), I also see Weston's result of all successes, but using R 4.0.2 instead of his 3.6.3.\r\n\r\n\u00a0\r\n```java\n\r\n> sessionInfo()R version 4.0.2 (2020-06-22)\r\n Platform: x86_64-pc-linux-gnu (64-bit)\r\n Running under: Ubuntu 20.04 LTS\r\nMatrix products: default\r\n BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so\r\nlocale:\r\n [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 \r\n [6] LC_MESSAGES=C LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C LC_TELEPHONE=C \r\n [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C\r\nattached base packages:\r\n [1] stats graphics grDevices utils datasets methods base\r\nother attached packages:\r\n [1] arrow_2.0.0 forcats_0.5.0 stringr_1.4.0 dplyr_1.0.2 purrr_0.3.4 readr_1.3.1 tidyr_1.1.2 tibble_3.0.4 ggplot2_3.3.2 tidyverse_1.3.0\r\nloaded via a namespace (and not attached):\r\n [1] Rcpp_1.0.5 cellranger_1.1.0 pillar_1.4.7 compiler_4.0.2 dbplyr_1.4.4 tools_4.0.2 digest_0.6.27 bit_4.0.4 jsonlite_1.7.1 \r\n [10] lubridate_1.7.9 lifecycle_0.2.0 gtable_0.3.0 pkgconfig_2.0.3 rlang_0.4.9 reprex_0.3.0 cli_2.2.0 DBI_1.1.0 rstudioapi_0.13 \r\n [19] haven_2.3.1 withr_2.3.0 xml2_1.3.2 httr_1.4.2 fs_1.5.0 generics_0.0.2 vctrs_0.3.5 hms_0.5.3 bit64_4.0.5 \r\n [28] grid_4.0.2 tidyselect_1.1.0 glue_1.4.2 R6_2.5.0 fansi_0.4.1 readxl_1.3.1 farver_2.0.3 modelr_0.1.8 blob_1.2.1 \r\n [37] magrittr_2.0.1 backports_1.1.10 scales_1.1.1 ellipsis_0.3.1 rvest_0.3.6 assertthat_0.2.1 colorspace_2.0-0 stringi_1.5.3 munsell_0.5.0 \r\n [46] broom_0.7.0 crayon_1.3.4\r\n```\r\n\u00a0\r\n \\* **Failure:**\u00a0In a fresh Mac R environment running the latest MacOS (Big Sur 11.1 20C69) and R 4.0.3, the alternating success/failure pattern still shows up:\r\n\r\n\u00a0\r\n```java\n\r\n> sessionInfo() \r\nR version 4.0.3 (2020-10-10) \r\nPlatform: x86_64-apple-darwin17.0 (64-bit) \r\nRunning under: macOS Big Sur 10.16 \r\nMatrix products: default \r\nLAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib \r\nlocale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 \r\nattached base packages: [1] stats graphics grDevices utils datasets methods base \r\nother attached packages: [1] arrow_2.0.0 forcats_0.5.0 stringr_1.4.0 dplyr_1.0.2 purrr_0.3.4 readr_1.4.0 tidyr_1.1.2 tibble_3.0.4 ggplot2_3.3.2 tidyverse_1.3.0 \r\nloaded via a namespace (and not attached): [1] Rcpp_1.0.5 cellranger_1.1.0 pillar_1.4.7 compiler_4.0.3 dbplyr_2.0.0 tools_4.0.3 digest_0.6.27 bit_4.0.4 jsonlite_1.7.2 [10] lubridate_1.7.9.2 lifecycle_0.2.0 gtable_0.3.0 pkgconfig_2.0.3 rlang_0.4.9 reprex_0.3.0 cli_2.2.0 DBI_1.1.0 rstudioapi_0.13 [19] haven_2.3.1 withr_2.3.0 xml2_1.3.2 httr_1.4.2 fs_1.5.0 generics_0.1.0 vctrs_0.3.5 hms_0.5.3 bit64_4.0.5 [28] grid_4.0.3 tidyselect_1.1.0 glue_1.4.2 R6_2.5.0 fansi_0.4.1 readxl_1.3.1 farver_2.0.3 modelr_0.1.8 magrittr_2.0.1 [37] backports_1.2.1 scales_1.1.1 ellipsis_0.3.1 rvest_0.3.6 assertthat_0.2.1 colorspace_2.0-0 stringi_1.5.3 munsell_0.5.0 broom_0.7.2 [46] crayon_1.3.4\r\n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-12-30T16:57:02.754Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256605) by Neal Richardson (npr):*\nI can reproduce this on macOS 10.14 / R 3.6, as well as on the new M1 mac with 11.0 / R 4.0:\r\n\r\n```Java\n\r\ntab <- read_csv_arrow(\"~/Downloads/demo_data.csv\", as_data_frame=FALSE)\r\nsum(is.na(tab$json_string))\r\n## Scalar\r\n## 10\r\n```\r\n\r\nBut on my macOS 10.14, I also see what Weston found in Python: it works. And--if I call pyarrow through R with reticulate, with or without arrow involved, it also works, no missing values:\r\n\r\n```Java\n\r\nlibrary(reticulate)\r\ncsv <- import(\"pyarrow.csv\")\r\ntab <- csv$read_csv(\"/Users/enpiar/Downloads/demo_data.csv\")\r\nstrs <- tab$column(\"json_string\")$to_pylist()\r\nnchar(strs)\r\n##  [1]  38660  37627  34127  45107 127507  59150  34426  41492  39564 106966\r\n## [11]    880   7882    216    734    407  31111    383    217    887    357\r\n```\r\n\r\n```Java\n\r\nlibrary(arrow)\r\nlibrary(reticulate)\r\ncsv <- import(\"pyarrow.csv\")\r\ntab <- csv$read_csv(\"/Users/enpiar/Downloads/demo_data.csv\")\r\nsum(is.na(tab$json_string))\r\n## Scalar\r\n## 0\r\n```\r\n\r\nPerhaps this is pure coincidence, but I see some commits on r-devel in recent days that mention some kind of odd behavior with strings on macOS, e.g. https://github.com/r-devel/r-svn/commit/1c01b0f8fc817b77a1b6d6091c20168090f2ac15. So maybe there is some locale setting that R uses, which affects the environment that the Arrow C++ library runs in (in process) but doesn't affect a Python subprocess, that causes string parsing errors in Arrow?"
        },
        {
            "created_at": "2020-12-30T20:15:57.305Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256703) by Antoine Pitrou (apitrou):*\nDo you get the same results when you pass the `column_types` explicitly to `read_csv_arrow`?"
        },
        {
            "created_at": "2020-12-30T20:18:51.488Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256707) by Antoine Pitrou (apitrou):*\nAlso, if you display `tab` directly without going through `tab$json_string`, do you see the null values?"
        },
        {
            "created_at": "2020-12-30T20:47:11.418Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256715) by Neal Richardson (npr):*\nThe print method for Table doesn't print the values. `tab$json_string` just extracts the corresponding ChunkedArray, and its print method does print values (which show nulls on my machine)."
        },
        {
            "created_at": "2020-12-30T20:49:55.660Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256717) by Antoine Pitrou (apitrou):*\nTo be clear, printing calls the C++ Arrow pretty-print or it converts the data into R before letting R do the printing?"
        },
        {
            "created_at": "2020-12-30T20:51:44.760Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256719) by Neal Richardson (npr):*\nC++ pretty print. Also `is.na` dispatches to the `is_null` compute kernel, so that is still all C++ confirming that there are nulls in C++."
        },
        {
            "created_at": "2020-12-30T20:54:39.725Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256720) by Antoine Pitrou (apitrou):*\nOk, can you play with the various conversion options (such as `column_types`) as suggested above?"
        },
        {
            "created_at": "2020-12-30T21:03:08.974Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256724) by Antoine Pitrou (apitrou):*\nNevermind, I've found a good candidate for the culprit:\r\n\r\n<https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/trie.h#L128>\r\n\r\nCan you try the following patch:\r\n\r\n```Java\n\r\ndiff --git a/cpp/src/arrow/util/trie.h b/cpp/src/arrow/util/trie.h\r\nindex f4013cbf1..b62d18bd2 100644\r\n--- a/cpp/src/arrow/util/trie.h\r\n+++ b/cpp/src/arrow/util/trie.h\r\n@@ -116,6 +116,7 @@ std::ostream& operator<<(std::ostream& os, const SmallString<N>& str) {\r\n class ARROW_EXPORT Trie {\r\n   using index_type = int16_t;\r\n   using fast_index_type = int_fast16_t;\r\n+  static constexpr auto kMaxIndex = std::numeric_limits<index_type>::max();\r\n \r\n  public:\r\n   Trie() : size_(0) {}\r\n@@ -125,6 +126,9 @@ class ARROW_EXPORT Trie {\r\n   int32_t Find(util::string_view s) const {\r\n     const Node* node = &nodes_[0];\r\n     fast_index_type pos = 0;\r\n+    if (s.length() >= static_cast<size_t>(kMaxIndex)) {\r\n+      return -1;\r\n+    }\r\n     fast_index_type remaining = static_cast<fast_index_type>(s.length());\r\n \r\n     while (remaining > 0) {\r\n\r\n\u00a0\n```\r\n"
        },
        {
            "created_at": "2020-12-30T21:08:47.157Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256727) by Weston Pace (westonpace):*\nYes, I will try that real quick."
        },
        {
            "created_at": "2020-12-30T21:11:53.077Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17256729) by Weston Pace (westonpace):*\nThat appears to have fixed the issue."
        },
        {
            "created_at": "2021-01-04T14:59:28.407Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17258263) by Antoine Pitrou (apitrou):*\n`[~westonpace]` Do you want to submit a PR for this or do you prefer me to do it?"
        },
        {
            "created_at": "2021-01-05T09:32:41.868Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17258777) by Weston Pace (westonpace):*\nSorry, I missed this when I was reviewing activity this morning.\u00a0 I can go ahead and make a PR.\u00a0 I've created a small regression for it (<https://github.com/apache/arrow/pull/9100>).\u00a0 I'm not sure if it's correct.\u00a0 I'm waiting to see if the Github actions can tell me.\u00a0 If not I'll need to setup a quick MacOS environment (as MacOS is the only environment where int_fast16_t is 16 bits).\r\n\r\nIf you're not worried about the regression I can just push the fix and make the PR."
        },
        {
            "created_at": "2021-01-05T16:17:55.482Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17259028) by Neal Richardson (npr):*\nIMO having a test that (in comments or whatever) links back to this issue is worthwhile."
        },
        {
            "created_at": "2021-01-05T21:11:46.207Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11067?focusedCommentId=17259211) by Ben Kietzman (bkietz):*\nIssue resolved by pull request 9100\n<https://github.com/apache/arrow/pull/9100>"
        }
    ]
}