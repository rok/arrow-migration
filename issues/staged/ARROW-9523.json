{
    "issue": {
        "title": "[Rust] improve performance of filter kernel",
        "body": "***Note**: This issue was originally created as [ARROW-9523](https://issues.apache.org/jira/browse/ARROW-9523). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe filter kernel located here\u00a0<https://github.com/apache/arrow/blob/master/rust/arrow/src/compute/kernels/filter.rs>\r\n\r\ncurrently has the following performance:\r\n\r\nfilter old u8 low selectivity time: [1.7782 ms 1.7790 ms 1.7801 ms]\r\nfilter old u8 high selectivity time: [815.58 us 816.58 us 817.57 us]\r\nfilter old u8 w NULLs low selectivity time: [1.8131 ms 1.8231 ms 1.8336 ms]\r\nfilter old u8 w NULLs high selectivity time:\u00a0[817.41 us 820.01 us 823.05 us]\r\n\r\nI have been working on a new implementation which performs\u00a0between approximately 14 and 480 times faster depending mostly on filter selectivity. Here are the benchmark results:\r\n\r\nfilter u8 low selectivity time: [127.30 us 128.06 us 128.88 us]\r\nfilter u8 high selectivity time: [5.4215 us 5.5778 us 5.7335 us]\r\nfilter context u8 low selectivity time: [124.21 us 126.21 us 128.38 us]\r\nfilter context u8 high selectivity time: [1.6707 us 1.7052 us 1.7476 us]\r\nfilter context u8 w NULLs low selectivity time: [142.40 us 142.83 us 143.37 us]\r\nfilter context u8 w NULLs high selectivity time: [2.3338 us 2.3788 us 2.4304 us]\r\nfilter context f32 low selectivity time: [132.59 us 132.91 us 133.29 us]\r\nfilter context f32 high selectivity time: [1.6864 us 1.7026 us 1.7212 us]\r\n\r\nThis new implementation is based on a few key ideas:\r\n\r\n(1) if the data array being filtered doesn't have a null bitmap, no time should be wasted to copy or create a null bitmap in the resulting filtered data array - this is implemented using the\u00a0CopyNullBit trait which has a no-op implementation and an actual implementation\r\n\r\n(2) when the filter is highly selective, e.g. only a small number of values from the data array are selected, the filter implementation should efficiently skip entire batches of 0s in the filter array - this is implemented by transmuting the filter array to u64 which allows to quickly check and skip entire batches of 64 bits\u00a0\r\n\r\n(3) when an entire record batch is filtered, any computation which only depends on the filter array is done once and then shared for filtering all the data arrays in the record batch - this is implemented using the\u00a0FilterContext\u00a0struct\r\n\r\n\u00a0\r\n\r\n`[~paddyhoran]`, `[~andygrove]` \u00a0let me know what you think",
        "created_at": "2020-07-19T11:26:03.000Z",
        "updated_at": "2020-08-07T21:45:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-08-06T14:44:29.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-06T14:44:29.202Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9523?focusedCommentId=17172427) by Andy Grove (andygrove):*\nIssue resolved by pull request 7798\n<https://github.com/apache/arrow/pull/7798>"
        }
    ]
}