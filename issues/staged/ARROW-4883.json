{
    "issue": {
        "title": "[Python] read_csv() returns garbage if given file object in text mode",
        "body": "***Note**: This issue was originally created as [ARROW-4883](https://issues.apache.org/jira/browse/ARROW-4883). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n# Summary:\r\n\r\nPython 3:\r\n\r\n- `read_csv` returns mojibake if given file objects opened in text mode. It behaves as expected in binary mode.\n- Files encoded in anything other than valid UTF-8 will cause a crash.\n  \n  Python 2:\n  \n  `read_csv` only handles ASCII files. If given a file in UTF-8 with characters over U+007F, it crashes.\n  \n  # To reproduce:\n  \n  1) Create a CSV like this\n  \n  ```Java\n  \n  Header\n  123.45\n  ```\n  \n  2) Then run this code on Python 3:\n  \n  ```python\n  \n  >>> import pyarrow.csv as pa_csv\n  >>> pa_csv.read_csv(open('test.csv', 'r'))\n  pyarrow.Table\n  \u49e2: string\n  ```\n  \n  Notice the file descriptor is open in text mode. Changing the encoding doesn't help:\n  \n  ```python\n  \n  >>> pa_csv.read_csv(open('test.csv', 'r', encoding='utf-8'))\n  pyarrow.Table\n  \u49e2: string\n  \n  >>> pa_csv.read_csv(open('test.csv', 'r', encoding='ascii'))\n  pyarrow.Table\n  \u49e2: string\n  \n  >>> pa_csv.read_csv(open('test.csv', 'r', encoding='iso-8859-1'))\n  pyarrow.Table\n  \u49e2: string\n  ```\n  \n  If I open the file in binary mode it works:\n  \n  ```python\n  \n  >>> pa_csv.read_csv(open('test.csv', 'rb'))                                                                                                                             \n  pyarrow.Table\n  Header: double\n  ```\n  \n  I tried this with a file encoded in UTF-16 and it freaked out:\n  \n  ```Java\n                                                                                                                    \n  Traceback (most recent call last):\n    File \"<redacted>/.pyenv/versions/3.7.2/lib/python3.7/site-packages/ptpython/repl.py\", line 84, in _process_text\n      self._execute(line)\n    File \"<redacted>/.pyenv/versions/3.7.2/lib/python3.7/site-packages/ptpython/repl.py\", line 139, in _execute\n      result_str = '%s\\n' % repr(result).decode('utf-8')\n    File \"pyarrow/table.pxi\", line 960, in pyarrow.lib.Table.__repr__\n    File \"pyarrow/types.pxi\", line 903, in pyarrow.lib.Schema.__str__\n    File \"<redacted>/.pyenv/versions/3.7.2/lib/python3.7/site-packages/pyarrow/compat.py\", line 143, in frombytes\n      return o.decode('utf8')\n  UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\n  \n  'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\n  ```\n  \n  Presumably this is because the code always assumes the file is in UTF-8.\n  \n  ## Python 2 behavior\n  \n  Python 2 behaves differently \u2013 it uses the ASCII codec by default, so when handed a file encoded in UTF-8, it will return without an error. Try to access the table...\n  \n  ```Java\n  \n  >>> t = pa_csv.read_csv(open('/Users/diegoargueta/Desktop/test.csv', 'r'))\n  \n  >>> list(t)\n  Traceback (most recent call last):\n    File \"/<redacted>/.pyenv/versions/2.7.15/envs/gds/lib/python2.7/site-packages/ptpython/repl.py\", line 84, in _process_text\n      self._execute(line)\n    File \"<redacted>/.pyenv/versions/2.7.15/envs/gds/lib/python2.7/site-packages/ptpython/repl.py\", line 139, in _execute\n      result_str = '%s\\n' % repr(result).decode('utf-8')\n    File \"pyarrow/table.pxi\", line 387, in pyarrow.lib.Column.__repr__\n      result.write('\\n{}'.format(str(self.data)))\n  UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 11: ordinal not in range(128)\n  \n  'ascii' codec can't decode byte 0xe4 in position 11: ordinal not in range(128)\n  ```\n  \n  \n  # Expectation\n  \n  We should be able to hand read_csv() a file in text mode so that the CSV file can be in any text encoding. ",
        "created_at": "2019-03-15T01:08:15.000Z",
        "updated_at": "2019-09-26T03:02:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-09-18T16:38:16.000Z"
    },
    "comments": [
        {
            "created_at": "2019-09-18T16:37:31.832Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4883?focusedCommentId=16932633) by Antoine Pitrou (apitrou):*\nI cannot reproduce the issue here. I get the expected error:\r\n```python\n\r\n>>> csv.read_csv(open('t.csv', 'r'))                                                                                                                                 \r\nTraceback (most recent call last):\r\n  File \"<ipython-input-4-e38f5b6f298b>\", line 1, in <module>\r\n    csv.read_csv(open('t.csv', 'r'))\r\n  File \"pyarrow/_csv.pyx\", line 532, in pyarrow._csv.read_csv\r\n    _get_reader(input_file, &stream)\r\n  File \"pyarrow/_csv.pyx\", line 471, in pyarrow._csv._get_reader\r\n    get_input_stream(input_file, use_memory_map, out)\r\n  File \"pyarrow/io.pxi\", line 1431, in pyarrow.lib.get_input_stream\r\n    nf = _get_native_file(source, use_memory_map)\r\n  File \"pyarrow/io.pxi\", line 1392, in pyarrow.lib._get_native_file\r\n    source = PythonFile(source, mode='r')\r\n  File \"pyarrow/io.pxi\", line 678, in pyarrow.lib.PythonFile.__cinit__\r\n    raise TypeError(\"binary file expected, got text file\")\r\nTypeError: binary file expected, got text file\r\n```\r\n"
        },
        {
            "created_at": "2019-09-18T16:38:16.424Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4883?focusedCommentId=16932636) by Antoine Pitrou (apitrou):*\nClosing as fixed as this was probably fixed along the way. Feel free to ping if you still encounter the issue with the latest Arrow version."
        }
    ]
}