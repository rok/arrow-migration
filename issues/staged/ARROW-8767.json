{
    "issue": {
        "title": "[C++] Make ThreadPool task ordering configurable",
        "body": "***Note**: This issue was originally created as [ARROW-8767](https://issues.apache.org/jira/browse/ARROW-8767). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe may want to choose a task ordering strategy when constructing a ThreadPool.\r\n\r\nTo make the ordering strategy configurable, we may want to externalize it in a separate JobQueue class.\r\n",
        "created_at": "2020-05-11T15:49:00.000Z",
        "updated_at": "2021-06-09T01:41:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-05-11T15:51:14.948Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8767?focusedCommentId=17104610) by Antoine Pitrou (apitrou):*\ncc `[~fsaintjacques]`\r\n\r\nPossible API:\r\n\r\n```cpp\n\r\nstruct TaskSpec {\r\n  int64_t priority;\r\n};\r\n\r\nclass ThreadPool {\r\n public:\r\n  Status Spawn(TaskSpec, ...);\r\n};\r\n```\r\n"
        },
        {
            "created_at": "2020-05-11T15:58:19.420Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8767?focusedCommentId=17104623) by Wes McKinney (wesm):*\nI linked a couple of related issues. Whatever solution is devised should hopefully be able to accommodate the round-robin strategy and the fair-time-allocation strategy (wherein consumers' total CPU time is tracked and used to allocate CPU capacity to consumers which have not had their fair share)"
        },
        {
            "created_at": "2020-05-12T12:44:34.192Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8767?focusedCommentId=17105391) by David Li (lidavidm):*\nFor I/O, it would also be useful to be able to assign a \"weight\" to a task (representing bandwidth or some other non-CPU resource) so a scheduler could spawn tasks based on that metric. (For instance, you may wish to allow more concurrent tasks when weights are small, or throttle a consumer that is consuming disproportionate resources.)"
        },
        {
            "created_at": "2021-06-07T20:43:45.145Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8767?focusedCommentId=17358865) by Weston Pace (westonpace):*\nRelated (potentially duplicate) ARROW-12878"
        },
        {
            "created_at": "2021-06-09T01:41:47.894Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8767?focusedCommentId=17359689) by Weston Pace (westonpace):*\nI have a PR up (on ARROW-12878) which I think should address this ( <https://github.com/apache/arrow/pull/10401> ).\u00a0 It's not quite at the level of job queue as I found that abstraction to be insufficient when working on the work stealing thread pool (e.g. some pools will have 1 job queue for all workers, others will have a queue per worker)."
        }
    ]
}