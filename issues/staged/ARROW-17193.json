{
    "issue": {
        "title": "[C++] Building GCS and tests on M1 MacOS 12.05 is failing.",
        "body": "***Note**: This issue was originally created as [ARROW-17193](https://issues.apache.org/jira/browse/ARROW-17193). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nBuilding GCS and tests on M1 MacOS 12.05 with dependencies installed with homebrew is failing.\r\n\r\n```bash\n\r\ncmake \\\r\n\t-GNinja \\\r\n\t-DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\r\n\t-DCMAKE_INSTALL_LIBDIR=lib \\\r\n\t-DARROW_PYTHON=ON \\\r\n\t-DARROW_COMPUTE=ON \\\r\n\t-DARROW_FILESYSTEM=ON \\\r\n\t-DARROW_CSV=ON \\\r\n\t-DARROW_GCS=ON \\\r\n\t-DARROW_INSTALL_NAME_RPATH=OFF \\\r\n\t-DARROW_BUILD_TESTS=ON \\\r\n\t-DCMAKE_CXX_STANDARD=17 \\\r\n\t..\r\n```\r\n\r\nEnv:\r\n```bash\n\r\nPYARROW_WITH_PARQUET=1\r\nPYARROW_WITH_DATASET=1\r\nPYARROW_WITH_ORC=1\r\nPYARROW_WITH_PARQUET_ENCRYPTION=1\r\nPYARROW_WITH_PLASMA=1\r\nPYARROW_WITH_GCS=1\r\n```\r\n\r\nBuilding errors with:\r\n\r\n```\n\r\nUndefined symbols for architecture arm64:\r\n  \"absl::lts_20220623::FormatTime(std::__1::basic_string_view<char, std::__1::char_traits<char> >, absl::lts_20220623::Time, absl::lts_20220623::TimeZone)\", referenced from:\r\n      arrow::fs::(anonymous namespace)::GcsIntegrationTest_OpenInputStreamReadMetadata_Test::TestBody() in gcsfs_test.cc.o\r\n  \"absl::lts_20220623::FromChrono(std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000l> > > const&)\", referenced from:\r\n      arrow::fs::(anonymous namespace)::GcsIntegrationTest_OpenInputStreamReadMetadata_Test::TestBody() in gcsfs_test.cc.o\r\n  \"absl::lts_20220623::RFC3339_full\", referenced from:\r\n      arrow::fs::(anonymous namespace)::GcsFileSystem_ObjectMetadataRoundtrip_Test::TestBody() in gcsfs_test.cc.o\r\n      arrow::fs::(anonymous namespace)::GcsIntegrationTest_OpenInputStreamReadMetadata_Test::TestBody() in gcsfs_test.cc.o\r\n  \"absl::lts_20220623::time_internal::cctz::utc_time_zone()\", referenced from:\r\n      arrow::fs::(anonymous namespace)::GcsIntegrationTest_OpenInputStreamReadMetadata_Test::TestBody() in gcsfs_test.cc.o\r\n  \"absl::lts_20220623::ToDoubleSeconds(absl::lts_20220623::Duration)\", referenced from:\r\n      arrow::fs::(anonymous namespace)::GcsFileSystem_ObjectMetadataRoundtrip_Test::TestBody() in gcsfs_test.cc.o\r\n  \"absl::lts_20220623::Duration::operator-=(absl::lts_20220623::Duration)\", referenced from:\r\n      arrow::fs::(anonymous namespace)::GcsFileSystem_ObjectMetadataRoundtrip_Test::TestBody() in gcsfs_test.cc.o\r\n  \"absl::lts_20220623::ParseTime(std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::basic_string_view<char, std::__1::char_traits<char> >, absl::lts_20220623::Time*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)\", referenced from:\r\n      arrow::fs::(anonymous namespace)::GcsFileSystem_ObjectMetadataRoundtrip_Test::TestBody() in gcsfs_test.cc.o\r\n```\r\n\r\n\r\nDependencies  installed with:\r\n```\n\r\nbrew update && brew bundle --file=cpp/Brewfile\r\n```\r\n\r\nSee https://github.com/apache/arrow/pull/13681#issuecomment-1193241547 and  https://github.com/apache/arrow/pull/13407",
        "created_at": "2022-07-24T04:07:42.000Z",
        "updated_at": "2022-08-05T07:32:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-08-05T04:53:22.000Z"
    },
    "comments": [
        {
            "created_at": "2022-07-25T02:44:41.903Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570589) by Kouhei Sutou (kou):*\nIt seems that Abseil is built without `std::string_view` but GCS uses `std::string_view`.\r\n\r\nCould you show `$(brew --prefix abseil)/include/absl/base/options.h`?"
        },
        {
            "created_at": "2022-07-25T03:09:27.640Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570605) by Rok Mihevc (rokm):*\n```\n\r\n/opt/homebrew/opt/abseil/include/absl/base/options.h\r\n```\r\n\r\n\r\n```cpp\n\r\n// Copyright 2019 The Abseil Authors.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n// -----------------------------------------------------------------------------\r\n// File: options.h\r\n// -----------------------------------------------------------------------------\r\n//\r\n// This file contains Abseil configuration options for setting specific\r\n// implementations instead of letting Abseil determine which implementation to\r\n// use at compile-time. Setting these options may be useful for package or build\r\n// managers who wish to guarantee ABI stability within binary builds (which are\r\n// otherwise difficult to enforce).\r\n//\r\n// *** IMPORTANT NOTICE FOR PACKAGE MANAGERS:  It is important that\r\n// maintainers of package managers who wish to package Abseil read and\r\n// understand this file! ***\r\n//\r\n// Abseil contains a number of possible configuration endpoints, based on\r\n// parameters such as the detected platform, language version, or command-line\r\n// flags used to invoke the underlying binary. As is the case with all\r\n// libraries, binaries which contain Abseil code must ensure that separate\r\n// packages use the same compiled copy of Abseil to avoid a diamond dependency\r\n// problem, which can occur if two packages built with different Abseil\r\n// configuration settings are linked together. Diamond dependency problems in\r\n// C++ may manifest as violations to the One Definition Rule (ODR) (resulting in\r\n// linker errors), or undefined behavior (resulting in crashes).\r\n//\r\n// Diamond dependency problems can be avoided if all packages utilize the same\r\n// exact version of Abseil. Building from source code with the same compilation\r\n// parameters is the easiest way to avoid such dependency problems. However, for\r\n// package managers who cannot control such compilation parameters, we are\r\n// providing the file to allow you to inject ABI (Application Binary Interface)\r\n// stability across builds. Settings options in this file will neither change\r\n// API nor ABI, providing a stable copy of Abseil between packages.\r\n//\r\n// Care must be taken to keep options within these configurations isolated\r\n// from any other dynamic settings, such as command-line flags which could alter\r\n// these options. This file is provided specifically to help build and package\r\n// managers provide a stable copy of Abseil within their libraries and binaries;\r\n// other developers should not have need to alter the contents of this file.\r\n//\r\n// -----------------------------------------------------------------------------\r\n// Usage\r\n// -----------------------------------------------------------------------------\r\n//\r\n// For any particular package release, set the appropriate definitions within\r\n// this file to whatever value makes the most sense for your package(s). Note\r\n// that, by default, most of these options, at the moment, affect the\r\n// implementation of types; future options may affect other implementation\r\n// details.\r\n//\r\n// NOTE: the defaults within this file all assume that Abseil can select the\r\n// proper Abseil implementation at compile-time, which will not be sufficient\r\n// to guarantee ABI stability to package managers.\r\n\r\n#ifndef ABSL_BASE_OPTIONS_H_\r\n#define ABSL_BASE_OPTIONS_H_\r\n\r\n// Include a standard library header to allow configuration based on the\r\n// standard library in use.\r\n#ifdef __cplusplus\r\n#include <ciso646>\r\n#endif\r\n\r\n// -----------------------------------------------------------------------------\r\n// Type Compatibility Options\r\n// -----------------------------------------------------------------------------\r\n//\r\n// ABSL_OPTION_USE_STD_ANY\r\n//\r\n// This option controls whether absl::any is implemented as an alias to\r\n// std::any, or as an independent implementation.\r\n//\r\n// A value of 0 means to use Abseil's implementation.  This requires only C++11\r\n// support, and is expected to work on every toolchain we support.\r\n//\r\n// A value of 1 means to use an alias to std::any.  This requires that all code\r\n// using Abseil is built in C++17 mode or later.\r\n//\r\n// A value of 2 means to detect the C++ version being used to compile Abseil,\r\n// and use an alias only if a working std::any is available.  This option is\r\n// useful when you are building your entire program, including all of its\r\n// dependencies, from source.  It should not be used otherwise -- for example,\r\n// if you are distributing Abseil in a binary package manager -- since in\r\n// mode 2, absl::any will name a different type, with a different mangled name\r\n// and binary layout, depending on the compiler flags passed by the end user.\r\n// For more info, see https://abseil.io/about/design/dropin-types.\r\n//\r\n// User code should not inspect this macro.  To check in the preprocessor if\r\n// absl::any is a typedef of std::any, use the feature macro ABSL_USES_STD_ANY.\r\n\r\n#define ABSL_OPTION_USE_STD_ANY 2\r\n\r\n\r\n// ABSL_OPTION_USE_STD_OPTIONAL\r\n//\r\n// This option controls whether absl::optional is implemented as an alias to\r\n// std::optional, or as an independent implementation.\r\n//\r\n// A value of 0 means to use Abseil's implementation.  This requires only C++11\r\n// support, and is expected to work on every toolchain we support.\r\n//\r\n// A value of 1 means to use an alias to std::optional.  This requires that all\r\n// code using Abseil is built in C++17 mode or later.\r\n//\r\n// A value of 2 means to detect the C++ version being used to compile Abseil,\r\n// and use an alias only if a working std::optional is available.  This option\r\n// is useful when you are building your program from source.  It should not be\r\n// used otherwise -- for example, if you are distributing Abseil in a binary\r\n// package manager -- since in mode 2, absl::optional will name a different\r\n// type, with a different mangled name and binary layout, depending on the\r\n// compiler flags passed by the end user.  For more info, see\r\n// https://abseil.io/about/design/dropin-types.\r\n\r\n// User code should not inspect this macro.  To check in the preprocessor if\r\n// absl::optional is a typedef of std::optional, use the feature macro\r\n// ABSL_USES_STD_OPTIONAL.\r\n\r\n#define ABSL_OPTION_USE_STD_OPTIONAL 2\r\n\r\n\r\n// ABSL_OPTION_USE_STD_STRING_VIEW\r\n//\r\n// This option controls whether absl::string_view is implemented as an alias to\r\n// std::string_view, or as an independent implementation.\r\n//\r\n// A value of 0 means to use Abseil's implementation.  This requires only C++11\r\n// support, and is expected to work on every toolchain we support.\r\n//\r\n// A value of 1 means to use an alias to std::string_view.  This requires that\r\n// all code using Abseil is built in C++17 mode or later.\r\n//\r\n// A value of 2 means to detect the C++ version being used to compile Abseil,\r\n// and use an alias only if a working std::string_view is available.  This\r\n// option is useful when you are building your program from source.  It should\r\n// not be used otherwise -- for example, if you are distributing Abseil in a\r\n// binary package manager -- since in mode 2, absl::string_view will name a\r\n// different type, with a different mangled name and binary layout, depending on\r\n// the compiler flags passed by the end user.  For more info, see\r\n// https://abseil.io/about/design/dropin-types.\r\n//\r\n// User code should not inspect this macro.  To check in the preprocessor if\r\n// absl::string_view is a typedef of std::string_view, use the feature macro\r\n// ABSL_USES_STD_STRING_VIEW.\r\n\r\n#define ABSL_OPTION_USE_STD_STRING_VIEW 2\r\n\r\n// ABSL_OPTION_USE_STD_VARIANT\r\n//\r\n// This option controls whether absl::variant is implemented as an alias to\r\n// std::variant, or as an independent implementation.\r\n//\r\n// A value of 0 means to use Abseil's implementation.  This requires only C++11\r\n// support, and is expected to work on every toolchain we support.\r\n//\r\n// A value of 1 means to use an alias to std::variant.  This requires that all\r\n// code using Abseil is built in C++17 mode or later.\r\n//\r\n// A value of 2 means to detect the C++ version being used to compile Abseil,\r\n// and use an alias only if a working std::variant is available.  This option\r\n// is useful when you are building your program from source.  It should not be\r\n// used otherwise -- for example, if you are distributing Abseil in a binary\r\n// package manager -- since in mode 2, absl::variant will name a different\r\n// type, with a different mangled name and binary layout, depending on the\r\n// compiler flags passed by the end user.  For more info, see\r\n// https://abseil.io/about/design/dropin-types.\r\n//\r\n// User code should not inspect this macro.  To check in the preprocessor if\r\n// absl::variant is a typedef of std::variant, use the feature macro\r\n// ABSL_USES_STD_VARIANT.\r\n\r\n#define ABSL_OPTION_USE_STD_VARIANT 2\r\n\r\n\r\n// ABSL_OPTION_USE_INLINE_NAMESPACE\r\n// ABSL_OPTION_INLINE_NAMESPACE_NAME\r\n//\r\n// These options controls whether all entities in the absl namespace are\r\n// contained within an inner inline namespace.  This does not affect the\r\n// user-visible API of Abseil, but it changes the mangled names of all symbols.\r\n//\r\n// This can be useful as a version tag if you are distributing Abseil in\r\n// precompiled form.  This will prevent a binary library build of Abseil with\r\n// one inline namespace being used with headers configured with a different\r\n// inline namespace name.  Binary packagers are reminded that Abseil does not\r\n// guarantee any ABI stability in Abseil, so any update of Abseil or\r\n// configuration change in such a binary package should be combined with a\r\n// new, unique value for the inline namespace name.\r\n//\r\n// A value of 0 means not to use inline namespaces.\r\n//\r\n// A value of 1 means to use an inline namespace with the given name inside\r\n// namespace absl.  If this is set, ABSL_OPTION_INLINE_NAMESPACE_NAME must also\r\n// be changed to a new, unique identifier name.  In particular \"head\" is not\r\n// allowed.\r\n\r\n#define ABSL_OPTION_USE_INLINE_NAMESPACE 1\r\n#define ABSL_OPTION_INLINE_NAMESPACE_NAME lts_20220623\r\n\r\n// ABSL_OPTION_HARDENED\r\n//\r\n// This option enables a \"hardened\" build in release mode (in this context,\r\n// release mode is defined as a build where the `NDEBUG` macro is defined).\r\n//\r\n// A value of 0 means that \"hardened\" mode is not enabled.\r\n//\r\n// A value of 1 means that \"hardened\" mode is enabled.\r\n//\r\n// Hardened builds have additional security checks enabled when `NDEBUG` is\r\n// defined. Defining `NDEBUG` is normally used to turn `assert()` macro into a\r\n// no-op, as well as disabling other bespoke program consistency checks. By\r\n// defining ABSL_OPTION_HARDENED to 1, a select set of checks remain enabled in\r\n// release mode. These checks guard against programming errors that may lead to\r\n// security vulnerabilities. In release mode, when one of these programming\r\n// errors is encountered, the program will immediately abort, possibly without\r\n// any attempt at logging.\r\n//\r\n// The checks enabled by this option are not free; they do incur runtime cost.\r\n//\r\n// The checks enabled by this option are always active when `NDEBUG` is not\r\n// defined, even in the case when ABSL_OPTION_HARDENED is defined to 0. The\r\n// checks enabled by this option may abort the program in a different way and\r\n// log additional information when `NDEBUG` is not defined.\r\n\r\n#define ABSL_OPTION_HARDENED 0\r\n\r\n#endif  // ABSL_BASE_OPTIONS_H_\r\n```\r\n"
        },
        {
            "created_at": "2022-07-25T03:41:44.679Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570611) by Kouhei Sutou (kou):*\nThanks.\r\n\r\nHere is the important part:\r\n\r\n> ```\n> // A value of 2 means to detect the C++ version being used to compile Abseil,\n> // and use an alias only if a working std::string_view is available.  This\n> // option is useful when you are building your program from source.  It should\n> // not be used otherwise -- for example, if you are distributing Abseil in a\n> // binary package manager -- since in mode 2, absl::string_view will name a\n> // different type, with a different mangled name and binary layout, depending on\n> // the compiler flags passed by the end user.  For more info, see\n> // https://abseil.io/about/design/dropin-types.\n> \n> #define ABSL_OPTION_USE_STD_STRING_VIEW 2\n> ```\r\n\r\nCould you also show `strings $(brew --prefix abseil)/lib/libabsl_time.a | c++filt | grep FormatTime`?"
        },
        {
            "created_at": "2022-07-25T04:05:05.492Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570618) by Rok Mihevc (rokm):*\nThanks for looking into this Kou!\r\n\r\nI just have dynamic libs:\r\n```\n\r\n/opt/homebrew/opt/abseil/lib/libabsl_time.dylib\r\n/opt/homebrew/opt/abseil/lib/libabsl_time.2206.0.0.dylib\r\n```\r\nI'm not sure if I can get static with brew."
        },
        {
            "created_at": "2022-07-25T05:23:04.816Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570633) by Kouhei Sutou (kou):*\n`OK. Then could you show {{{}strings $(brew --prefix abseil)/lib/libabsl_time.dylib | c++filt | grep FormatTime{`}?}}"
        },
        {
            "created_at": "2022-07-25T05:31:15.721Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570636) by Rok Mihevc (rokm):*\n```\n\r\nstrings $(brew --prefix abseil)/lib/libabsl_time.dylib | c++filt | grep FormatTime\r\n```\r\n\r\nDoesn't return anything. Filesize of libabsl_time.dylib is 106K."
        },
        {
            "created_at": "2022-07-25T05:33:13.480Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570637) by Rok Mihevc (rokm):*\nJust:\r\n```\n\r\nstrings $(brew --prefix abseil)/lib/libabsl_time.dylib\r\n```\r\n\r\nReturns:\r\n\r\n```\n\r\n-%m-%d%ET%H:%M:%S\r\n-%m-%d%ET%H:%M\r\n-%m-%d%ET%H\r\n-%m-%d\r\n-2562047788015215h30m8s\r\n%Y-%m-%d%ET%H:%M:%E*S%Ez\r\n%Y-%m-%d%ET%H:%M:%S%Ez\r\n%a, %d %b %E4Y %H:%M:%S %z\r\n%d %b %E4Y %H:%M:%S %z\r\ninfinite-future\r\ninfinite-past\r\nvH7Br\r\n```\r\n"
        },
        {
            "created_at": "2022-07-25T05:48:18.435Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570669) by Kouhei Sutou (kou):*\nOh... Could you try the following?\r\n\r\n```\n\r\nfor x in $(brew --prefix abseil)/lib/libabsl*.dylib; do\r\n strings $x | c++filt G FormatTime && echo $x;\r\ndone\r\n```"
        },
        {
            "created_at": "2022-07-25T06:00:10.203Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570672) by Rok Mihevc (rokm):*\nSure:\u00a0\r\n```\n\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_bad_any_cast_impl.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_bad_any_cast_impl.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_bad_optional_access.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_bad_optional_access.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_bad_variant_access.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_bad_variant_access.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_base.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_base.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_city.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_city.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_civil_time.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_civil_time.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cord.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cord.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cord_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cord_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cordz_functions.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cordz_functions.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cordz_handle.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cordz_handle.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cordz_info.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cordz_info.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cordz_sample_token.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_cordz_sample_token.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_debugging_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_debugging_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_demangle_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_demangle_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_examine_stack.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_examine_stack.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_exponential_biased.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_exponential_biased.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_failure_signal_handler.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_failure_signal_handler.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_commandlineflag.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_commandlineflag.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_commandlineflag_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_commandlineflag_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_config.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_config.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_marshalling.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_marshalling.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_parse.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_parse.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_private_handle_accessor.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_private_handle_accessor.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_program_name.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_program_name.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_reflection.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_reflection.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_usage.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_usage.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_usage_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_flags_usage_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_graphcycles_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_graphcycles_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_hash.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_hash.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_hashtablez_sampler.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_hashtablez_sampler.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_int128.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_int128.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_leak_check.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_leak_check.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_log_severity.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_log_severity.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_low_level_hash.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_low_level_hash.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_malloc_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_malloc_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_periodic_sampler.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_periodic_sampler.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_distributions.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_distributions.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_distribution_test_util.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_distribution_test_util.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_platform.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_platform.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_pool_urbg.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_pool_urbg.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_randen.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_randen.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_randen_hwaes.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_randen_hwaes.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_randen_hwaes_impl.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_randen_hwaes_impl.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_randen_slow.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_randen_slow.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_seed_material.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_internal_seed_material.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_seed_gen_exception.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_seed_gen_exception.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_seed_sequences.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_random_seed_sequences.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_raw_hash_set.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_raw_hash_set.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_raw_logging_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_raw_logging_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_scoped_set_env.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_scoped_set_env.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_spinlock_wait.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_spinlock_wait.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_stacktrace.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_stacktrace.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_status.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_status.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_statusor.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_statusor.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_str_format_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_str_format_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_strerror.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_strerror.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_strings.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_strings.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_strings_internal.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_strings_internal.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_symbolize.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_symbolize.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_synchronization.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_synchronization.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_throw_delegate.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_throw_delegate.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_time.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_time.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_time_zone.2206.0.0.dylib\r\nG\r\nFormatTime\r\n/opt/homebrew/opt/abseil/lib/libabsl_time_zone.dylib\r\n```\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-07-25T06:10:45.593Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570677) by Kouhei Sutou (kou):*\nAh, sorry. \"G\" is my local alias... Please use \"| grep\" instead of \"G\":\r\n\r\n```\n\r\nfor x in $(brew --prefix abseil)/lib/libabsl*.dylib; do\r\n strings $x | c++filt | grep FormatTime && echo $x;\r\ndone\r\n```"
        },
        {
            "created_at": "2022-07-25T06:33:07.631Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570686) by Rok Mihevc (rokm):*\nAh, that makes sense :)\r\nThat returns nothing."
        },
        {
            "created_at": "2022-07-25T06:47:20.608Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570691) by Kouhei Sutou (kou):*\nOK. I'll try this this week or the next week because I'll get a M1 mac soon."
        },
        {
            "created_at": "2022-07-25T06:49:44.843Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17570693) by Rok Mihevc (rokm):*\nGreat! If I have time I'll try to move this too and will report here."
        },
        {
            "created_at": "2022-07-28T07:15:38.381Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17572265) by Kouhei Sutou (kou):*\nI found that this is caused by mixing system Abseil (installed by Homebrew) and bundled Abseil."
        },
        {
            "created_at": "2022-07-28T07:23:11.579Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17572269) by Rok Mihevc (rokm):*\nOh, that makes sense."
        },
        {
            "created_at": "2022-07-29T19:51:00.267Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17573157) by Ian Cook (icook):*\n`[~kou]` `[~rokm]` \u00a0do you think we could get the patch for this included in the next 9.0.0 release candidate (assuming there will be another release candidate)?"
        },
        {
            "created_at": "2022-07-29T22:49:57.208Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17573182) by Rok Mihevc (rokm):*\nI think Krisz is [probably open to it](https://ursalabs.zulipchat.com/#narrow/stream/180245-dev/topic/Status.20of.20GCS.20support.3F) if we have a fix.\r\n`[~kou]` please let me know if I can help testing or otherwise!"
        },
        {
            "created_at": "2022-07-30T04:45:57.869Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17573201) by Kouhei Sutou (kou):*\nThis is ready but I'm not sure whether we should cherry-pick this to 9.0.0 or not. (I don't opposite it.)\r\nGenerally, users don't use `ARROW_BUILD_TESTS=ON`. I think that this isn't occurred without `ARROW_BUILD_TESTS=ON`."
        },
        {
            "created_at": "2022-07-30T10:30:33.775Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17573241) by Rok Mihevc (rokm):*\nWith this change I'm able to build locally on M1. I think it'd be nice if this would be included as it's not possible to build locally otherwise. With ARROW_BUILD_TESTS=OFF you still can't build a working python library, see [Krisz' comment on Zulip](https://ursalabs.zulipchat.com/#narrow/stream/180245-dev/topic/Status.20of.20GCS.20support.3F/near/291180396)."
        },
        {
            "created_at": "2022-07-30T20:54:01.131Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17573300) by Kouhei Sutou (kou):*\nThe error message\r\n\r\n```\n\r\nImportError: dlopen(/Users/kszucs/Workspace/arrow/python/pyarrow/lib.cpython-39-darwin.so, 0x0002): symbol not found in flat namespace '__ZN4absl12lts_2021110210FormatTimeENS0_11string_viewENS0_4TimeENS0_8TimeZoneE'\r\n```\r\n\r\nmay not be related to this.\r\n\r\nThis may be able to fix by specifying `-DCMAKE_CXX_STANDARD=17`. (If used Abseil is built with C+17 and Arrow is built with C+11, this may be caused.)"
        },
        {
            "created_at": "2022-08-03T19:57:46.112Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17574910) by Kae Suarez (ksuarez):*\nI can confirm that when turning on C++17, I stop having the error you show there, `[~kou]`. Also, this happens even with Abseil not in my homebrew, but in my Conda."
        },
        {
            "created_at": "2022-08-05T04:53:22.316Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17193?focusedCommentId=17575565) by Kouhei Sutou (kou):*\nIssue resolved by pull request 13731\n<https://github.com/apache/arrow/pull/13731>"
        }
    ]
}