{
    "issue": {
        "title": "[C++] Add/Sub/Mul arithmetic kernels with overflow check",
        "body": "***Note**: This issue was originally created as [ARROW-9022](https://issues.apache.org/jira/browse/ARROW-9022). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n~~Currently the output type of the Add function is identical with the argument types which makes it unsafe to add numeric limit values, so instead of using `(int8, int8) -> int8` signature we should use `((int8, int8) -> int16`.~~\r\n\r\nThe current kernels do wrap around for performance reasons, so implement different kernels with overflow checking and add arithmetics options to let the caller choose which variant to run",
        "created_at": "2020-06-03T11:32:48.000Z",
        "updated_at": "2020-07-09T17:17:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2020-06-18T23:01:47.000Z"
    },
    "comments": [
        {
            "created_at": "2020-06-03T12:20:00.790Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9022?focusedCommentId=17124909) by Joris Van den Bossche (jorisvandenbossche):*\nFor reference (not that this is necessarily an argument), numpy preserves the data types in addition (so int8 + int8 -> int8)"
        },
        {
            "created_at": "2020-06-03T14:17:40.367Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9022?focusedCommentId=17124992) by Krisztian Szucs (kszucs):*\nIt's not trivial which behaviour to choose. We may introduce options for the arithmetic kernels to select the right one. \r\n\r\nAs a reference clickhouse follows the upcasting semantics, seems like Impala and DuckDB use the same types."
        },
        {
            "created_at": "2020-06-03T14:42:06.553Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9022?focusedCommentId=17125012) by Ben Kietzman (bkietz):*\nReplicating https://github.com/apache/arrow/pull/7341#issuecomment-638241193 here:\r\n\r\nI'm not sure this approach is desirable. For one thing this leads to inconsistent handling of 64 bit integer types, which are currently allowed to overflow (NB: that means we would incur undefined behavior for int64).\r\n\r\nThere are a few other approaches we could take (ordered by personal preference):\r\n\r\n-   define explicit overflow behavior for signed integer operands (for example if we declared that add(i8(a), i8(b)) will always be equivalent to i8(i16(a) + i16(b)) then we could instantiate only unsigned addition kernels)\n-   raise an error on signed overflow\n-   provide ArithmeticOptions::overflow_behavior and allow users to choose between these\n-   require users to pass arguments which will not overflow\n"
        },
        {
            "created_at": "2020-06-03T18:08:12.423Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9022?focusedCommentId=17125193) by Jacek Pliszka (jacek.pliszka):*\nI believe we should keep it identical. User can always promote/cast explicitly.\r\n\r\n\u00a0\r\n\r\nI am for Antoine's approach from mail thread - user selectable option - either error on overflow or ignore it."
        },
        {
            "created_at": "2020-06-18T23:01:47.710Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9022?focusedCommentId=17140050) by Wes McKinney (wesm):*\nIssue resolved by pull request 7420\n<https://github.com/apache/arrow/pull/7420>"
        }
    ]
}