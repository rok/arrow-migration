{
    "issue": {
        "title": "[C++] Refactor hash table support",
        "body": "***Note**: This issue was originally created as [ARROW-2653](https://issues.apache.org/jira/browse/ARROW-2653). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently our hash table support is scattered in several places:\r\n \\* `compute/kernels/hash.cc`\r\n \\* `util/hash.h` and `util/hash.cc`\r\n \\* `builder.cc` (in the DictionaryBuilder implementation)\r\n\r\nPerhaps we should have something like a type-parametered hash table class (perhaps backed by non-owned memory) with several primitives:\r\n \\* decide allocation size for a given number of items\r\n \\* lookup an item\r\n \\* insert an item\r\n \\* decide whether resizing is needed\r\n \\* resize to a new memory area\r\n \\* ...",
        "created_at": "2018-05-31T14:28:30.000Z",
        "updated_at": "2018-11-22T19:59:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2018-11-22T19:54:58.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-16T13:36:48.454Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2653?focusedCommentId=16689424) by Wes McKinney (wesm):*\nI agree with this, with the caveat that in my experience this type of code (hashing) is very performance sensitive. I've been surprised at the changes that can cause 30-50% change in execution time. \r\n\r\nLuckily, we have plenty of other hash table implementations in other projects to look at to see how efficient our implementations are relative to comparables"
        },
        {
            "created_at": "2018-11-16T14:38:30.071Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2653?focusedCommentId=16689492) by Antoine Pitrou (apitrou):*\nI have already started on that. The benchmarks on DictionaryBuilder are positive: i.e. the rewritten hash support performs slightly better. I haven't tried to migrate kernels yet, as that part seems a bit messier currently."
        },
        {
            "created_at": "2018-11-16T14:49:54.552Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2653?focusedCommentId=16689507) by Wes McKinney (wesm):*\nThat's great to hear. AFAIK we aren't using any SSE4.2 intrinsics like crc32 for hashing yet, so based on what features the CPU supports we will eventually want to select a fast path vs. a compatible path "
        },
        {
            "created_at": "2018-11-16T15:06:33.473Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2653?focusedCommentId=16689531) by Antoine Pitrou (apitrou):*\nBasically I'm using [xxhash](https://cyan4973.github.io/xxHash/) (the 64-bit variant). There's also a special case for integers."
        },
        {
            "created_at": "2018-11-16T15:34:59.695Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2653?focusedCommentId=16689562) by Antoine Pitrou (apitrou):*\nApparently SSE4.2 (which includes the CRC instructions) is supported on all recent x86 CPUs: https://en.wikipedia.org/wiki/SSE4#SSE4.2"
        },
        {
            "created_at": "2018-11-22T19:54:58.037Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2653?focusedCommentId=16696229) by Wes McKinney (wesm):*\nIssue resolved by pull request 3005\n<https://github.com/apache/arrow/pull/3005>"
        }
    ]
}