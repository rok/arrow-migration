{
    "issue": {
        "title": "[Website] Announce Acero Engine",
        "body": "***Note**: This issue was originally created as [ARROW-16632](https://issues.apache.org/jira/browse/ARROW-16632). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nGiven consensus on Acero as the name for C++ streaming execution engine, it may be time to write a blog post announcing the engine, how it's currently available in the ecosystem, and what's happening next with it.",
        "created_at": "2022-05-23T15:31:25.000Z",
        "updated_at": "2022-06-23T18:33:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Website",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-05-23T16:01:59.928Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16632?focusedCommentId=17541023) by Will Jones (willjones127):*\nPotential outline:\r\n1. Motivation\n   1. Why streaming?\n   1. Introduce the name, where codebase lives\n   1. Where does this fit in versus other Arrow-based engines (e.g. DuckDB, DataFusion, Velox)? (No SQL or optimizer, low-level and modular design)\n1. Acero's current state\n   \n   1. In R arrow package, used as backend for Arrow dplyr queries / Datasets\n   1. Results can be retrieved as a Record Batch Reader, which can be passed through Arrow's C data interface. This is used, for example, to create pipelines that do some processing in Acero and some in DuckDB.\n   1. In PyArrow, used as backend for datasets(?)\n1. Acero's near future\n   1. Substrait support\n   1. OpenTelemetry integration"
        },
        {
            "created_at": "2022-05-23T17:29:26.606Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16632?focusedCommentId=17541066) by Weston Pace (westonpace):*\nThis is a good outline.\r\n\r\n> 2 Acero's current state\r\n\r\nAcero's public API probably has a good surface area reaching semi-stable (e.g. everything we use for TPC-H) but there are still a few changes planned.\r\nAcero's internal API (for exec node developers) is still a bit experimental.  There are some significant changes that are going to be made to the scheduler, etc.\r\n\r\n> 2.3 In PyArrow, used as a backend for datasets\r\n\r\nI'm not sure what the question mark is here for but this is a correct statement and would be good to mention.  I think Pyarrow is also adding more and more dplyr-like functionality built on top of datasets."
        },
        {
            "created_at": "2022-05-23T17:42:27.525Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16632?focusedCommentId=17541069) by Will Jones (willjones127):*\n> I'm not sure what the question mark is here for but this is a correct statement and would be good to mention. I think Pyarrow is also adding more and more dplyr-like functionality built on top of datasets.\r\nI was just unsure of the state of Python + Acero is. My understanding right now is:\r\n1. There are some individual functions like `join` that use Acero under the hood.\n1. Once Ibis is a Substrait producer and Acero a consumer, Ibis will be the (dplyr-equivalent) Python API to write queries with deferred execution.\n   \n   Does that sound right?"
        },
        {
            "created_at": "2022-06-08T20:48:14.337Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16632?focusedCommentId=17551791) by Ian Cook (icook):*\n`[~amol-]` \u00a0is probably in the best position to reply to the above comment about Python + Acero"
        },
        {
            "created_at": "2022-06-09T10:20:53.772Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16632?focusedCommentId=17552101) by Alessandro Molina (amol-):*\nAnalytics functions in PyArrow all use Acero under the hood (filtering, joining, grouping/aggrs).\r\nAt the moment Acero is never mentioned on purpose in Python and R documentation because we don't have a clear story about what we actually want to expose to end users. In both Python and R acero is a private api that users can't access directly and thus they are undocumented.\r\n\r\nThe idea is that the interface to Acero in R will be dyplr while in Python there is the intention to make a DataFrame like API and defer to IBIS the lazy evaluation use case. In both cases we won't expose Acero as a public API and the idea is to communicate with Acero only through substrait on long term (That's already being implemented in R, and will be done for Python in the near future)\r\n\r\nTo wrap-up, I think at the moment we could talk about Acero as the engine powering dyplr in R and Analytics capabilities in Python. And we should talk about Acero itself only from the C++ point of view as probably the R and Python bindings will never expose it to the public.\r\n\r\nPS: If we want to start promoting Acero to the world, I think we should work on improving a bit the documentation first. Having a blog post that then redirects people to a docs that they find hard to read/apply might actually be counterproductive as it might create a fame of being badly documented.\r\nAt the moment the only mention of it is https://arrow.apache.org/docs/cpp/streaming_execution.html and it's not very easy to follow (not much explainations, just blocks of code).  In comparison if you look at the compute chapter in Python ( https://arrow.apache.org/docs/dev/python/compute.html ) it's much more talkative and explains things as it goes."
        },
        {
            "created_at": "2022-06-23T18:33:28.360Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16632?focusedCommentId=17558191) by Will Jones (willjones127):*\nPerhaps as a way to advertise the extensibility of the engine, we may wish to highlight ARROW-16083 as a case study."
        }
    ]
}