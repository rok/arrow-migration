{
    "issue": {
        "title": "[Rust][DataFusion] Improve performance of Array.slice",
        "body": "***Note**: This issue was originally created as [ARROW-11331](https://issues.apache.org/jira/browse/ARROW-11331). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn DataFusion we are using Array.slice since <https://github.com/apache/arrow/pull/9271> to pass data into the accumulators, instead of having the overhead of building arrays (possibly with few rows) at once.\r\n\r\nHowever, it seems pretty inefficient by now (taking a 1/6 of instructions for hash aggregates) doing some allocations under the hood instead of the promised \"zero copy\", much more than for example take which copies / shuffles the entire array based on indices.\r\n\r\n`[~jorgecarleitao]`\r\n> Yes, slicing is suboptimal atm. Also, IMO it should not be the Array to implement that method, but each implementation individually. I haven't touch that part yet, though.\r\n![105164296-42515780-5b15-11eb-87f0-a042c4287514.png](https://issues.apache.org/jira/secure/attachment/13019088/105164296-42515780-5b15-11eb-87f0-a042c4287514.png)\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2021-01-20T20:12:16.000Z",
        "updated_at": "2021-12-16T16:59:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}