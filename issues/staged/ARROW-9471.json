{
    "issue": {
        "title": "[C++] Scan Dataset in reverse",
        "body": "***Note**: This issue was originally created as [ARROW-9471](https://issues.apache.org/jira/browse/ARROW-9471). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIf a dataset does not fit into the OS cache, it can be beneficial to alternate between normal and reverse 'scanning'. Even if 90% of the a set of files fits into cache, scanning the same set twice will not make use of the OS cache. On the other hand, if the second time, scanning goes in reverse order, 90% will still be in OS cache. We use this trick in vaex, and I'd like to support that for parquet reading as well. (Is there a proper name/term for this?)\r\n\r\nNote that since you don't want to reverse on byte level, you may want to reverse the way of traversing the fragment, or fragment and row groups. Too small chunks (e.g. pages) could lead to a performance decrease because most read algorithms implement read-ahead optimization (not the reverse). I think doing this on fragment level might be enough.",
        "created_at": "2020-07-14T16:54:55.000Z",
        "updated_at": "2020-12-22T13:53:37.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-08-13T18:50:19.498Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9471?focusedCommentId=17177252) by Joris Van den Bossche (jorisvandenbossche):*\nAnother use case for a \"reverse scan\" is an efficient `tail` method (to inspect the last rows of a dataset), which `[~npr]` added in R (in https://github.com/apache/arrow/pull/7913, but which now needs to actually traverse to all scan tasks to get the last one?)"
        }
    ]
}