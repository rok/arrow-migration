{
    "issue": {
        "title": "[C++] dynamic_casts in parquet TypedColumnWriterImpl impacting performance",
        "body": "***Note**: This issue was originally created as [ARROW-13965](https://issues.apache.org/jira/browse/ARROW-13965). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe methods WriteDictionaryPage(), CheckDictionarySizeLimit(), WriteValues(), and WriteValuesSpaced() in TypedColumnWriterImpl (cpp/src/parquet/column_writer.cc) perform dynamic_casts of the current_dict_ object to either DictEncoder or ValueEncoderType pointers.\u00a0 When calling WriteBatch() with a large number of values this is ok, but when writing batches of 1 (as when using the stream api), these dynamic casts can consume a great deal of cpu.\u00a0 Using gperftools against code I wrote to do a log structured merge of several parquet files, I measured the dynamic_casts taking as much as 25% of execution time.\r\n\r\nBy modifying TypedColumnWriterImpl to save downcasted observer pointers of the appropriate types, I was able to cut my execution time from 32 to 24 seconds, validating the gpertools results.\u00a0 I've attached a patch to show what I did.",
        "created_at": "2021-09-09T19:07:03.000Z",
        "updated_at": "2021-09-16T16:58:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-09-16T16:57:47.000Z"
    },
    "comments": [
        {
            "created_at": "2021-09-10T01:34:52.751Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13965?focusedCommentId=17412901) by Yibo Cai (yibocai):*\nThis looks a nice improvement. Will you created a PR? Thanks."
        },
        {
            "created_at": "2021-09-16T16:57:47.577Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13965?focusedCommentId=17416244) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 11131\n<https://github.com/apache/arrow/pull/11131>"
        }
    ]
}