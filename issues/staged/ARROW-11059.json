{
    "issue": {
        "title": "[Rust] [DataFusion] Implement extensible configuration mechanism",
        "body": "***Note**: This issue was originally created as [ARROW-11059](https://issues.apache.org/jira/browse/ARROW-11059). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe are getting to the point where there are multiple settings we could add to operators to fine-tune performance. Custom operators provided by crates that extend DataFusion may also need this capability.\r\n\r\nI propose that we add support for key-value configuration options so that we don't need to plumb through each new configuration setting that we add.\r\n\r\nFor example. I am about to start on a \"coalesce batches\" operator and I would like a setting such as \"coalesce.batch.size\".\r\n\r\nFor built-in settings like this we can provide information such as documentation and default values and generate documentation from this.\r\n\r\nFor example, here is how Spark defines configs:\r\n```java\n\r\n  val PARQUET_VECTORIZED_READER_ENABLED =\r\n            buildConf(\"spark.sql.parquet.enableVectorizedReader\")\r\n              .doc(\"Enables vectorized parquet decoding.\")\r\n              .version(\"2.0.0\")\r\n              .booleanConf\r\n              .createWithDefault(true) \n```",
        "created_at": "2020-12-29T05:46:34.000Z",
        "updated_at": "2021-04-26T13:25:37.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T13:25:37.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-26T13:25:36.489Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11059?focusedCommentId=17332333) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-datafusion/issues/138"
        }
    ]
}