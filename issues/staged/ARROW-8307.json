{
    "issue": {
        "title": "[Python] Expose use_memory_map option in pyarrow.feather APIs",
        "body": "***Note**: This issue was originally created as [ARROW-8307](https://issues.apache.org/jira/browse/ARROW-8307). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n",
        "created_at": "2020-04-01T16:37:30.000Z",
        "updated_at": "2020-04-04T20:56:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-04-04T20:56:16.000Z"
    },
    "comments": [
        {
            "created_at": "2020-04-01T17:31:22.212Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8307?focusedCommentId=17073012) by Joris Van den Bossche (jorisvandenbossche):*\nIn the using-facing parquet APIs, the option is called `memory_map=True/False`, in the new LocalFileSystem it is called `use_mmap=True/False`. We should probably try to be somewhat consistent here."
        },
        {
            "created_at": "2020-04-01T18:54:39.399Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8307?focusedCommentId=17073099) by Wes McKinney (wesm):*\nUnfortunate. I would have been fine with having `memory_map=` everywhere, but I'm also OK with using `use_mmap=`. Thoughts?"
        },
        {
            "created_at": "2020-04-01T18:59:45.389Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8307?focusedCommentId=17073100) by Joris Van den Bossche (jorisvandenbossche):*\nThe `memory_map` is around longer, so I would rather go for that"
        },
        {
            "created_at": "2020-04-01T19:51:53.465Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8307?focusedCommentId=17073146) by Wes McKinney (wesm):*\nIt's somewhat unrelated to the name of the parameter, but I'm a bit opposed to globally setting whether to memory map when opening a file at the filesystem level. This would be better handled through a separate filesystem API that allows mapped memory to be requested (and this will either use mmap for local or pull the entire file into memory for remote filesystems). And possibly an attribute of filesystems to indicate whether or not they support zero-copy mapped memory"
        },
        {
            "created_at": "2020-04-01T19:54:41.800Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8307?focusedCommentId=17073148) by Joris Van den Bossche (jorisvandenbossche):*\ncc `[~apitrou]`"
        },
        {
            "created_at": "2020-04-02T16:12:27.356Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8307?focusedCommentId=17073862) by Antoine Pitrou (apitrou):*\nWhy not always make it on by default for Feather? Are we worried that people may overwrite the file while in use?"
        },
        {
            "created_at": "2020-04-02T18:07:15.717Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8307?focusedCommentId=17073964) by Wes McKinney (wesm):*\nIt is on by default. I just wanted to expose it as an option to toggle it off (I needed this feature for my benchmarks, for example)"
        },
        {
            "created_at": "2020-04-04T20:56:16.464Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8307?focusedCommentId=17075302) by Wes McKinney (wesm):*\nIssue resolved by pull request 6832\n<https://github.com/apache/arrow/pull/6832>"
        }
    ]
}