{
    "issue": {
        "title": "[Python] Add DataType.to_numpy_dtype (equivalent of to_pandas_dtype, but for numpy)",
        "body": "***Note**: This issue was originally created as [ARROW-13040](https://issues.apache.org/jira/browse/ARROW-13040). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn contrast to `to_pandas_dtype`, a `to_numpy_dtype` could preserve the resolution for datetime-like types (timestamp, date, duration)\r\n\r\nOriginal issue report below:\r\n\r\n----\r\n\r\n\r\nMost of them mistakenly assume nanoseconds, but some are not implemented.\r\n\r\nHere's the complete run-down:\r\n\r\n`date32/date64/time32/time64`\r\n`---------------------------`\r\n\r\n`>>> pyarrow.date32()`\r\n`DataType(date32[day])`\r\n`>>> pyarrow.date32().to_pandas_dtype()`\r\n`dtype('<M8[ns]')`\r\n\r\n`>>> pyarrow.date64()`\r\n`DataType(date64[ms])`\r\n`>>> pyarrow.date64().to_pandas_dtype()`\r\n`dtype('<M8[ns]')`\r\n\r\n`>>> pyarrow.time32(\"s\")`\r\n`Time32Type(time32[s])`\r\n`>>> pyarrow.time32(\"s\").to_pandas_dtype()`\r\n`Traceback (most recent call last):`\r\n` File \"<stdin>\", line 1, in <module>`\r\n` File \"pyarrow/types.pxi\", line 200, in pyarrow.lib.DataType.to_pandas_dtype`\r\n`NotImplementedError: time32[s]`\r\n\r\n`>>> pyarrow.time32(\"ms\")`\r\n`Time32Type(time32[ms])`\r\n`>>> pyarrow.time32(\"ms\").to_pandas_dtype()`\r\n`Traceback (most recent call last):`\r\n` File \"<stdin>\", line 1, in <module>`\r\n` File \"pyarrow/types.pxi\", line 200, in pyarrow.lib.DataType.to_pandas_dtype`\r\n`NotImplementedError: time32[ms]`\r\n\r\n`>>> pyarrow.time64(\"us\")`\r\n`Time64Type(time64[us])`\r\n`>>> pyarrow.time64(\"us\").to_pandas_dtype()`\r\n`Traceback (most recent call last):`\r\n` File \"<stdin>\", line 1, in <module>`\r\n` File \"pyarrow/types.pxi\", line 200, in pyarrow.lib.DataType.to_pandas_dtype`\r\n`NotImplementedError: time64[us]`\r\n\r\n`>>> pyarrow.time64(\"ns\")`\r\n`Time64Type(time64[ns])`\r\n`>>> pyarrow.time64(\"ns\").to_pandas_dtype()`\r\n`Traceback (most recent call last):`\r\n` File \"<stdin>\", line 1, in <module>`\r\n` File \"pyarrow/types.pxi\", line 200, in pyarrow.lib.DataType.to_pandas_dtype`\r\n`NotImplementedError: time64[ns]`\r\n\r\n`timestamp`\r\n`---------`\r\n\r\n`>>> pyarrow.timestamp(\"s\")`\r\n`TimestampType(timestamp[s])`\r\n`>>> pyarrow.timestamp(\"s\").to_pandas_dtype()`\r\n`dtype('<M8[ns]')`\r\n\r\n`>>> pyarrow.timestamp(\"ms\")`\r\n`TimestampType(timestamp[ms])`\r\n`>>> pyarrow.timestamp(\"ms\").to_pandas_dtype()`\r\n`dtype('<M8[ns]')`\r\n\r\n`>>> pyarrow.timestamp(\"us\")`\r\n`TimestampType(timestamp[us])`\r\n`>>> pyarrow.timestamp(\"us\").to_pandas_dtype()`\r\n`dtype('<M8[ns]')`\r\n\r\n`>>> pyarrow.timestamp(\"ns\")`\r\n`TimestampType(timestamp[ns])`\r\n`>>> pyarrow.timestamp(\"ns\").to_pandas_dtype()`\r\n`dtype('<M8[ns]')`\r\n\r\n`duration`\r\n`--------`\r\n\r\n`>>> pyarrow.duration(\"s\")`\r\n`DurationType(duration[s])`\r\n`>>> pyarrow.duration(\"s\").to_pandas_dtype()`\r\n`dtype('<m8[ns]')`\r\n\r\n`>>> pyarrow.duration(\"ms\")`\r\n`DurationType(duration[ms])`\r\n`>>> pyarrow.duration(\"ms\").to_pandas_dtype()`\r\n`dtype('<m8[ns]')`\r\n\r\n`>>> pyarrow.duration(\"us\")`\r\n`DurationType(duration[us])`\r\n`>>> pyarrow.duration(\"us\").to_pandas_dtype()`\r\n`dtype('<m8[ns]')`\r\n\r\n`>>> pyarrow.duration(\"ns\")`\r\n`DurationType(duration[ns])`\r\n`>>> pyarrow.duration(\"ns\").to_pandas_dtype()`\r\n`dtype('<m8[ns]')`",
        "created_at": "2021-06-10T19:21:21.000Z",
        "updated_at": "2021-06-15T12:41:59.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-06-11T07:27:19.194Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13040?focusedCommentId=17361491) by Joris Van den Bossche (jorisvandenbossche):*\n> Most of them mistakenly assume nanoseconds,\r\n\r\nThe problem is that pandas supports _only_ nanoseconds, so from that point of view, this is correct. \r\n\r\nSo the result you get with `to_pandas_dtype` is consistent with the dtype of the result of `to_pandas`:\r\n\r\n```python\n\r\n>>> pa.timestamp(\"s\").to_pandas_dtype()\r\ndtype('<M8[ns]')\r\n\r\n>>> pa.array([1, 2], pa.timestamp(\"s\")).to_pandas().dtype\r\ndtype('<M8[ns]')\r\n```\r\n\r\nWe should maybe have a \"to_numpy_dtype\" equivalent, that can then preserve the resolution (for numpy dtypes, we only seem to have the reverse mapping with `pyarrow.from_numpy_dtype`)."
        },
        {
            "created_at": "2021-06-11T11:08:46.773Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13040?focusedCommentId=17361650) by Jim Pivarski (jpivarski):*\nOh, I didn't realize that.\n\nI would be in favor of a `to_numpy_dtype`, since I have been using `to_pandas_dtype` for exactly that purpose. (That's how I ran into this and didn't think of checking to see if Pandas had yet another way of handling dates and times.)"
        },
        {
            "created_at": "2021-06-15T12:34:25.853Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13040?focusedCommentId=17363610) by Joris Van den Bossche (jorisvandenbossche):*\nOK, let's repurpose this issue then to add a `to_numpy_dtype`"
        }
    ]
}