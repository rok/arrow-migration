{
    "issue": {
        "title": "[Rust] [DataFusion] Add support for is_in",
        "body": "***Note**: This issue was originally created as [ARROW-10356](https://issues.apache.org/jira/browse/ARROW-10356). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAdd support for a function that returns true if an element belongs to a finite list of elements in a list.\r\n\r\nThe list should be an arrow array (to be dynamically-typed).\r\n\r\n\u00a0",
        "created_at": "2020-10-20T16:27:41.000Z",
        "updated_at": "2021-01-10T03:57:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-01-08T11:51:22.000Z"
    },
    "comments": [
        {
            "created_at": "2020-10-21T12:45:28.980Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17218272) by Neville Dipale (nevi_me):*\nI had some list kernels at <https://github.com/nevi-me/rust-dataframe/blob/master/src/functions/array.rs.>\u00a0The code is old, so it's written with the builder pattern, but some of it could be used as a start.\r\n\r\n`[~jorgecarleitao]` \u00a0how about we classify kernels into groups, and implement them as subtasks in an umbrella JIRA? It might help with completeness for say list kernels. We could use Spark as inspiration for what to support (as I had done above)"
        },
        {
            "created_at": "2020-11-08T00:52:54.543Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17227881) by Vivek Akupatni (apatniv):*\nHi all, I would like to work on it. But I am not sure where to start. Any pointers/references or what is expected would be useful for me. \r\nThanks for your time."
        },
        {
            "created_at": "2020-11-08T02:51:13.493Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17227899) by Jorge Leit\u00e3o (jorgecarleitao):*\nHi `[~apatniv]`, Sure!\r\n\r\nSo, broad steps, we can split this issue in two:\r\n \\* changes in the arrow crate\r\n \\* changes in the datafusion crate\r\n\r\nArrow:\r\n1. fork the repo on github and clone it to your computer\n1. bootsrap your working environment (e.g. vs code + git + rust analyzer plugin)\n1. create a new module `is_in.rs` on the arrow crate under compute/kernels.\n1. Design the function. E.g. `is_in` is something like `fn is_in(array1, array2) -> boolean array`.\n   1. Can we leverage the arrow format somehow, or do we need to do it directly on the values? E.g. `is_in` seems to be a NxM problem, as we need to check each element in array1 on array2. Is there any way to speed this process?\n   1. which utility methods do we may need?\n   1. Any edge cases?\n1. Implement. Check other kernels for inspiration. It is fine to PR only a subset of all types. e.g. start with the implementation for only primitive arrays (int32, int64, etc.)\n1. Add tests (can be done first)\n1. Update README\n1. PR (optional, good to get initial feedback :))\n   \n   DataFusion:\n1. Use the kernel defined above on data fusion on physical_plan/functions.rs\n1. Add the function `is_in` to the `impl` of Expr in logical_plan.rs\n1. Update README\n1. PR\n   \n   Let us know if you have any questions!"
        },
        {
            "created_at": "2020-11-08T04:36:29.260Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17227912) by Neville Dipale (nevi_me):*\n`[~jorgecarleitao]` \u00a0is this not the same as ARROW-10103? We called it 'contains' there, where we check if a list contains a primitive, returning a boolean. If it is, perhaps we could use this to expand the datatypes supported there (if we don't support all), and maybe tweak behaviour where desired (there were some questions around null behaviour at the time)"
        },
        {
            "created_at": "2020-11-08T16:31:00.356Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17228131) by Vivek Akupatni (apatniv):*\nJust to confirm are these the corresponding code repos.\r\n<https://github.com/apache/arrow/tree/master/rust/arrow>\r\n<https://github.com/apache/arrow/tree/master/rust/datafusion>"
        },
        {
            "created_at": "2020-11-14T07:34:41.059Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17231955) by Jorge Leit\u00e3o (jorgecarleitao):*\n[~nevi_me], it is. I think we should move that to `compute::kernels`, for consistency.\r\n\r\n\u00a0\r\n\r\n`[~apatniv]`, I am really sorry, this is a duplicate, I did not know this was already supported. Yes, those are the directories.\r\n\r\nEDIT: this is not supported in DataFusion, AFAIK. So, there is still work in this issue to add it to DataFusion."
        },
        {
            "created_at": "2020-11-14T16:10:46.219Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17232064) by Vivek Akupatni (apatniv):*\n[~nevi_me] Not a problem. I can work on integrating into DataFusion."
        },
        {
            "created_at": "2021-01-08T11:51:22.796Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17261252) by Andrew Lamb (alamb):*\nIssue resolved by pull request 9038\n<https://github.com/apache/arrow/pull/9038>"
        },
        {
            "created_at": "2021-01-08T11:52:12.459Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10356?focusedCommentId=17261254) by Andrew Lamb (alamb):*\nFWIW `[~MikeSeddonAU]` has implemented this \u2013 there is still other work that is possible \u2013 see https://issues.apache.org/jira/browse/ARROW-11182"
        }
    ]
}