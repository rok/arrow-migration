{
    "issue": {
        "title": "[C++] Add utf8proc library to toolchain",
        "body": "***Note**: This issue was originally created as [ARROW-8961](https://issues.apache.org/jira/browse/ARROW-8961). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is a minimal MIT-licensed library for UTF-8 data processing originally developed for use in Julia\r\n\r\nhttps://github.com/JuliaStrings/utf8proc",
        "created_at": "2020-05-27T02:25:13.000Z",
        "updated_at": "2020-06-24T22:08:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-06-24T21:36:33.000Z"
    },
    "comments": [
        {
            "created_at": "2020-05-27T07:01:39.463Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17117446) by Uwe Korn (uwe):*\nFor conda-forge and other distributions that can handle binary dependencies, we want to have use the system one. So we definitely need a ARROW_USE_SYSTEM_UTF8PROC option if we vendor."
        },
        {
            "created_at": "2020-05-27T16:40:26.676Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17117907) by Antoine Pitrou (apitrou):*\nI'll take a look sometimes if you don't beat me to it."
        },
        {
            "created_at": "2020-05-27T17:19:08.918Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17117932) by Wes McKinney (wesm):*\n`[~uwe]` I would say it would be worth going ahead and adding utf8proc to conda-forge if it is not there already. "
        },
        {
            "created_at": "2020-05-27T17:35:44.828Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17117942) by Uwe Korn (uwe):*\nIt's already there, named `libutf8proc`."
        },
        {
            "created_at": "2020-05-27T20:39:18.594Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17118061) by Wes McKinney (wesm):*\nAh great. I see that utf8proc includes a 1.5 MB data file, so we shouldn't be too cavalier about vendoring it. If utf8proc is only required when `-DARROW_COMPUTE=ON` then perhaps we can just add it as a normal thirdparty toolchain library"
        },
        {
            "created_at": "2020-05-28T14:09:36.168Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17118713) by Maarten Breddels (maartenbreddels):*\nFWIW, in Vaex i've relied on\u00a0<https://github.com/ufal/unilib>\u00a0which is a very minimal/barebone library, I have no strong opinions about this though (unless benchmarks tell me otherwise)."
        },
        {
            "created_at": "2020-06-07T07:01:50.932Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17127531) by Uwe Korn (uwe):*\nWe should definitely run benchmarks as in the utf8proc issue tracker they mention that `icu` seems to be significantly faster than `utf8proc`. Still, `icu` is much fatter than `utf8proc` and we probably need exact the functionality that is part of `utf8proc`, not more."
        },
        {
            "created_at": "2020-06-08T15:21:39.147Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17128379) by Antoine Pitrou (apitrou):*\nWhat algorithms would we use in `utf8proc` ? If it's just tolower() and friends, the implementation seems simple and fast to me (and I doubt other libraries would be significantly faster)."
        },
        {
            "created_at": "2020-06-08T15:32:16.118Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17128386) by Antoine Pitrou (apitrou):*\nAlso, `unilib` uses similar a lookup scheme, so it's unlikely to be significantly faster (it's actually a bit more complicated, because it seems it tries to compress the data tables more, at the expense of slightly more complicated lookup).\r\n\r\nA concern about `unilib`, though, would be that it has had a single contributor over its 6 years of existence."
        },
        {
            "created_at": "2020-06-08T16:22:16.916Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17128420) by Antoine Pitrou (apitrou):*\nI've compiled both libraries:\r\n \\* `utf8proc` weighs around 300 kB (mostly static data)\r\n \\* the weight of `unilib` depends on which functionality is being used, as it's header only; for example a test executable that uses property lookup and conversion, but not codepoint combining weighs around 120 kB"
        },
        {
            "created_at": "2020-06-08T17:05:52.023Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17128462) by Wes McKinney (wesm):*\nunilib's license (MPL 2.0) isn't ideal, see https://www.apache.org/legal/resolved.html#weak-copyleft-licenses. I'd prefer to only depend on MPL 2.0 libraries as a last resort. "
        },
        {
            "created_at": "2020-06-24T21:36:33.071Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8961?focusedCommentId=17144419) by Kouhei Sutou (kou):*\nIssue resolved by pull request 7452\n<https://github.com/apache/arrow/pull/7452>"
        }
    ]
}