{
    "issue": {
        "title": "[C++] Segmentation faults on Fedora 24 with pyarrow-manylinux1 and self-compiled turbodbc",
        "body": "***Note**: This issue was originally created as [ARROW-1171](https://issues.apache.org/jira/browse/ARROW-1171). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nOriginal issue: https://github.com/blue-yonder/turbodbc/issues/102\n\nWhen using the `pyarrow`\u00a0`manylinux1`\u00a0Wheels to build Turbodbc on Fedora 24, the `turbodbc_arrow`\u00a0unittests segfault. The main environment attribute here is that the compiler version used for building Turbodbc is newer than the one used for Arrow.",
        "created_at": "2017-06-30T09:59:02.000Z",
        "updated_at": "2019-02-06T03:49:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-02-06T03:49:57.000Z"
    },
    "comments": [
        {
            "created_at": "2017-06-30T13:27:01.299Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16070087) by Wes McKinney (wesm):*\nSeems like disabling the gcc5 ABI may be the solution?"
        },
        {
            "created_at": "2017-06-30T13:28:57.497Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16070090) by Uwe Korn (uwe):*\nNo, we already disabled that. With enabled gcc5 ABI, it won't even link."
        },
        {
            "created_at": "2017-09-13T21:07:08.410Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16165283) by Uwe Korn (uwe):*\nFor reference, an import of this mixture (pyarrow-manylinux1 0.6.0 & turbodbc-self-compiled 2.2.0 on Fedora 24) fails with \n\n```Java\nThread 1 (Thread 0x7f927a5db700 (LWP 21)):\n#0  0x00007f9278df4110 in vtable for arrow::StringType () from /venv/lib/python2.7/site-packages/pyarrow/libarrow.so.0\n#1  0x00007f92789d2069 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /venv/lib/python2.7/site-packages/pyarrow/libarrow.so.0\n#2  0x00007f92792cc948 in __run_exit_handlers (status=0, listp=0x7f92796505d8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:82\n#3  0x00007f92792cc995 in __GI_exit (status=<optimized out>) at exit.c:104\n#4  0x00007f92792b3738 in __libc_start_main (main=0x563816bf87b0 <main>, argc=3, argv=0x7ffc0b05e9f8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>,\n    stack_end=0x7ffc0b05e9e8) at ../csu/libc-start.c:323\n#5  0x0000563816bf87e9 in _start ()\n```"
        },
        {
            "created_at": "2017-09-13T21:10:19.521Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16165289) by Wes McKinney (wesm):*\nIs the self-compiling Fedora 24 user using devtoolset or stock gcc? "
        },
        {
            "created_at": "2017-09-13T21:23:31.059Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16165310) by Uwe Korn (uwe):*\nStock GCC, so there is a version mismatch. I learned a bit more about `-Bsymbolic` and its friends, giving this a shot to see if that fixes it."
        },
        {
            "created_at": "2017-09-15T18:25:42.008Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16168305) by Uwe Korn (uwe):*\n`-DCMAKE_CXX_FLAGS='-Wl,-Bsymbolic -static-libstdc++'`\u00a0seems to solve the issue, marking this for the next release. I'll not do a direct PR but rather understand the effect a bit better."
        },
        {
            "created_at": "2017-11-30T08:38:40.050Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16272357) by Uwe Korn (uwe):*\nMoved to 0.9.0 as the decimal code throws exceptions once I add `-Bsymbolic` to the linker options. This seems to take much longer to correctly understand the varying behaviour."
        },
        {
            "created_at": "2018-04-10T15:21:27.088Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16432452) by Antoine Pitrou (apitrou):*\nAs a sidenote, a new manylinux standard is being developed with a more recent baseline (CentOS 6) :\r\nhttps://www.python.org/dev/peps/pep-0571/\r\n\r\nThe PEP is still being discussed but chances are it will be accepted soon:\r\nhttps://mail.python.org/pipermail/distutils-sig/2018-March/032102.html\r\n\r\nPerhaps it will end the libstdc++ issues (or perhaps not :-))."
        },
        {
            "created_at": "2018-04-10T15:23:50.234Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16432457) by Uwe Korn (uwe):*\nIt will not end the issues but help us to move to a more modern compiler for the `manylinux1` packages. We will still get issues when the wrong symbols are pulled in, probably for a lot less symbols than currently."
        },
        {
            "created_at": "2018-04-10T15:40:38.559Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16432484) by Antoine Pitrou (apitrou):*\nI'm assuming the issue is that the libstdc++ Arrow was (statically or not) linked with also gets used at runtime to resolve symbols in turbodbc (or the reverse)? Am I right?\r\n\r\nApparently another solution would be to use something called a \"version script\" to control which symbols are exported from the Arrow library, so that the static libstdc++ doesn't participate in dynamic symbol resolution:\r\n\r\n<https://www.technovelty.org/c/what-exactly-does-bsymblic-do.html>\r\n\r\n<http://anadoxin.org/blog/control-over-symbol-exports-in-gcc.html>\r\n\r\n(I may be speaking cluelessly here)"
        },
        {
            "created_at": "2018-04-10T16:57:34.431Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16432580) by Uwe Korn (uwe):*\n> I'm assuming the issue is that the libstdc++ Arrow was (statically or not) linked with also gets used at runtime to resolve symbols in turbodbc (or the reverse)? Am I right?\r\n\r\nYes. There are some symbols that are in the C++ STL that are always statically linked. We provide a version script and don't export our symbols but sadly other libraries export theirs and this then leads to a crash in Arrow.\r\n\r\nUsing `-Bsymbolic` (and friends!) would be the path that would ensure that Arrow actually uses the symbols that were packaged with it. Sadly this has some nasty side effects. When I have some more time, I try to dive into this issue again and read also the linked articles. Currently this problem here is no a high priority for me."
        },
        {
            "created_at": "2018-11-10T21:30:16.863Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16682604) by Wes McKinney (wesm):*\nIs this reproducible? "
        },
        {
            "created_at": "2018-11-10T23:20:33.036Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1171?focusedCommentId=16682656) by Uwe Korn (uwe):*\nYes, this is reproducible and probably not fixable."
        }
    ]
}