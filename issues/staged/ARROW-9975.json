{
    "issue": {
        "title": "[Rust] min and max aggregate kernels are inconsistent for floating point types. ",
        "body": "***Note**: This issue was originally created as [ARROW-9975](https://issues.apache.org/jira/browse/ARROW-9975). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe aggregation kernels min and max yield inconsistent results if there are NaN values in the arrays.\r\n\r\nRelated issue: <https://github.com/ritchie46/polars/issues/71>\r\n```c++\n\r\n        use arrow::{\r\n            datatypes::Float64Type,\r\n            compute::kernels::aggregate::min,\r\n            array::{\r\n                PrimitiveBuilder\r\n            }\r\n        };\r\n        let mut builder_1 = PrimitiveBuilder::<Float64Type>::new(2);\r\n        builder_1.append_value(1.0).unwrap();\r\n        builder_1.append_value(f64::NAN).unwrap();\r\n        let array_1 = builder_1.finish();\r\n\r\n        let mut builder_2 = PrimitiveBuilder::<Float64Type>::new(2);\r\n        builder_2.append_value(f64::NAN).unwrap();\r\n        builder_2.append_value(1.0).unwrap();\r\n        let array_2 = builder_2.finish();\r\n \r\n        // expect both nan, or both 1.0\r\n        assert_eq!(min(&array_1), min(&array_2));\r\n```\r\nOutputs:\r\n```bash\n\r\nLeft:  Some(1.0)\r\nRight: Some(NaN)\r\n<Click to see difference>\r\n\r\nthread 'frame::ser::csv::test::test_' panicked at 'assertion failed: `(left == right)`\r\n  left: `Some(1.0)`,\r\n right: `Some(NaN)`', polars/src/frame/ser/csv.rs:328:9\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/73dc675b9437c2a51a975a9f58cc66f05463c351/library/std/src/panicking.rs:483\r\n   1: std::panicking::begin_panic_fmt\r\n             at /rustc/73dc675b9437c2a51a975a9f58cc66f05463c351/library/std/src/panicking.rs:437\r\n   2: polars::frame::ser::csv::test::test_\r\n             at ./src/frame/ser/csv.rs:328\r\n   3: polars::frame::ser::csv::test::test_::{{closure}}\r\n             at ./src/frame/ser/csv.rs:310\r\n   4: core::ops::function::FnOnce::call_once\r\n             at /home/ritchie46/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227\r\n   5: core::ops::function::FnOnce::call_once\r\n             at /rustc/73dc675b9437c2a51a975a9f58cc66f05463c351/library/core/src/ops/function.rs:227\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: test failed, to rerun pass '-p polars --lib'\r\n```",
        "created_at": "2020-09-11T12:20:19.000Z",
        "updated_at": "2021-04-26T12:34:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-04-26T12:34:03.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-26T12:34:02.176Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9975?focusedCommentId=17332125) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/101"
        }
    ]
}