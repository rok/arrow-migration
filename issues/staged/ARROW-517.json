{
    "issue": {
        "title": "[C++] Verbose Array::Equals",
        "body": "***Note**: This issue was originally created as [ARROW-517](https://issues.apache.org/jira/browse/ARROW-517). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn failing unit tests I often wished `Array::Equals` would tell me where they aren't equal. This would save a lot of time in debugging.",
        "created_at": "2017-01-28T17:52:18.000Z",
        "updated_at": "2019-08-13T17:30:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-08-13T17:29:52.000Z"
    },
    "comments": [
        {
            "created_at": "2017-01-29T18:21:59.303Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-517?focusedCommentId=15844588) by Wes McKinney (wesm):*\nAs part of this, and also slightly related to ARROW-519, it would make sense to move the implementation details of `Equals` and `ApproxEquals` out of the `arrow/array.h` component. We can still have a base `Array::Equals` method that invokes the functions implemented in `arrow/compare.h` (or whatever we call it)"
        },
        {
            "created_at": "2017-01-29T21:36:56.990Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-517?focusedCommentId=15844684) by Wes McKinney (wesm):*\nI'm refactoring the `Array::Equals` code path \u2013 `[~xhochy]` if you were going to work on this could you hold off until I have a patch up? thanks"
        },
        {
            "created_at": "2017-03-01T01:10:06.928Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-517?focusedCommentId=15889254) by Wes McKinney (wesm):*\nI don't think this is difficult to implement (probably want to add a `verbose` flag to `RangeEqualsVisitor` in `compare.cc`), but the one tedious item is that we need to implement string formatting functions for scalar values (i.e. something that knows how to write a human-readable value into an `std::ostream`)"
        },
        {
            "created_at": "2019-08-13T17:29:52.658Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-517?focusedCommentId=16906432) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 4782\n<https://github.com/apache/arrow/pull/4782>"
        }
    ]
}