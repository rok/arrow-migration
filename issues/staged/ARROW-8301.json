{
    "issue": {
        "title": "[R] Handle ChunkedArray and Table in C data interface",
        "body": "***Note**: This issue was originally created as [ARROW-8301](https://issues.apache.org/jira/browse/ARROW-8301). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently the C data interface does Array and RecordBatch, but we're also going to need ChunkedArray and Table.\u00a0",
        "created_at": "2020-03-31T18:10:14.000Z",
        "updated_at": "2020-07-07T17:56:13.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-07-07T17:56:08.000Z"
    },
    "comments": [
        {
            "created_at": "2020-06-25T12:56:57.957Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8301?focusedCommentId=17144890) by Antoine Pitrou (apitrou):*\nCould you elaborate on the use case? Is it suboptimal, for example, to export your Table one batch at a time?\r\n\r\nAlso cc `[~wesm]` for advice."
        },
        {
            "created_at": "2020-06-25T13:35:57.214Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8301?focusedCommentId=17144917) by Wes McKinney (wesm):*\nThere's actually a more fundamental issue at play, namely at C library interfaces that need to provide a sequence of C interface ArrowArray objects which may not be available all up front. `[~jacques]` brought this up also when we were designing the C interface. \r\n\r\nSo the iteration API looks something like this:\r\n\r\n```Java\n\r\nstruct ArrowArrayStream {\r\n  void (*get_schema)(struct ArrowSchema*);\r\n  int (*get_next)(struct ArrowArray*);\r\n  void (*release)(struct ArrowArrayStream*);\r\n  void* private_data;\r\n};\r\n```\r\n\r\nConsider a canonical use case: a database query returning a sequence of RecordBatches.\r\n\r\nYou could say that this interface should be redefined and redefined on an application by application basis but that seems rather tedious to me. "
        },
        {
            "created_at": "2020-06-25T15:23:21.427Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8301?focusedCommentId=17145016) by Neal Richardson (npr):*\nThe use case I'm thinking of is: the Python package I'm using that does things with Arrow, and from which I want to pull data into R, always returns a Table. I can't \"just\" export its RecordBatches because Tables don't contain RecordBatches, they contain ChunkedArrays. So to export the Table, it would be something like\r\n\r\n```Java\n\r\ntable.export_schema()\r\nfor col in table.chunked_arrays():\r\n    for a in col.chunks():\r\n        a.export_array()\r\n```\r\n\r\nand reassemble the Table. Looking at the R and Python code we have now that does the Array and RecordBatch work, I'm not sure how simple that would be to do, and I wonder if there's a better way."
        },
        {
            "created_at": "2020-06-25T16:08:43.493Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8301?focusedCommentId=17145055) by Antoine Pitrou (apitrou):*\n`[~wesm]` I wonder if an iteration API wouldn't need some kind of error signalling - e.g. the database goes down in the middle of iterating. In that case, `void`-returning callbacks aren't really adequate.\r\n\r\n`[~npr]` TableBatchReader gives you a stream of record batches from a Table. It's reasonably efficient as well (no data is copied)."
        },
        {
            "created_at": "2020-06-25T22:08:06.850Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8301?focusedCommentId=17145887) by Wes McKinney (wesm):*\n`[~apitrou]` I agree that it would need error signaling. I was thinking that `int` return values might be sufficient plus perhaps a \"get error message\" callback. \r\n\r\nIn any case, perhaps we could propose a standard interface to add to the ABI for this"
        },
        {
            "created_at": "2020-06-27T19:13:41.492Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8301?focusedCommentId=17147067) by Antoine Pitrou (apitrou):*\n`[~wesm]` We should probably launch a discussion on the ML about the ABI/API design. This depends a lot on third-party needs (though we can already take some inspiration the Flight APIs)."
        },
        {
            "created_at": "2020-06-29T04:26:43.366Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8301?focusedCommentId=17147536) by Wes McKinney (wesm):*\nDone"
        },
        {
            "created_at": "2020-07-07T17:56:08.351Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8301?focusedCommentId=17152955) by Neal Richardson (npr):*\nIssue resolved by pull request 7648\n<https://github.com/apache/arrow/pull/7648>"
        }
    ]
}