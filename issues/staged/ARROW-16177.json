{
    "issue": {
        "title": "[C++] Replace ThreadIndexer with a more performant thread-local implementation",
        "body": "***Note**: This issue was originally created as [ARROW-16177](https://issues.apache.org/jira/browse/ARROW-16177). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nMany of the ExecNode operations use thread local state (mostly temporary buffers) to avoid per-batch allocation.  Currently we are using ThreadIndexer but to get the thread local state requires locking a mutex and a map lookup.  For some of the critical sections we are developing in hash-join this has become a bottleneck.  Ideally we can replace this with something that relies on thread local state instead of a map shared across all threads. ",
        "created_at": "2022-04-13T04:17:45.000Z",
        "updated_at": "2022-04-14T19:55:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-04-14T10:40:44.790Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16177?focusedCommentId=17522228) by Antoine Pitrou (apitrou):*\nThreadIndexer could trivially use a `std::map` instead of a `std::unordered_map`. Then, successful lookups do not need to lock the mutex, since `std::map` doesn't invalidate existing references on insertion. There's still the `std::map` lookup cost, but that should be reasonably cheap given the map is bound to be small and the key type is trivial.\r\n\r\nIt may also help to add ThreadIndexer-based microbenchmarks (for both 1 and N threads perhaps)."
        },
        {
            "created_at": "2022-04-14T19:55:25.253Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16177?focusedCommentId=17522517) by Weston Pace (westonpace):*\nBenchmarks sound like a good idea.  I'll throw some together and measure the map impl as well."
        }
    ]
}