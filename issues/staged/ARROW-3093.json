{
    "issue": {
        "title": "[C++] Linking errors with ORC enabled",
        "body": "***Note**: This issue was originally created as [ARROW-3093](https://issues.apache.org/jira/browse/ARROW-3093). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn an attempt to work around ARROW-3091 and ARROW-3092, I've recreated my conda environment, and now I get linking errors if ORC support is enabled:\r\n\r\n```Java\n\r\ndebug/libarrow.so.11.0.0: error: undefined reference to 'google::protobuf::MessageLite::ParseFromString(std::string const&)'\r\ndebug/libarrow.so.11.0.0: error: undefined reference to 'google::protobuf::MessageLite::SerializeToString(std::string*) const'\r\ndebug/libarrow.so.11.0.0: error: undefined reference to 'google::protobuf::internal::fixed_address_empty_string'\r\n[etc.]\r\n```\r\n",
        "created_at": "2018-08-20T08:59:35.000Z",
        "updated_at": "2018-10-03T00:18:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-08-20T18:08:50.000Z"
    },
    "comments": [
        {
            "created_at": "2018-08-20T18:06:57.049Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3093?focusedCommentId=16586327) by Wes McKinney (wesm):*\nI believe this can be fixed by changing the order of the linked libraries in \r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/CMakeLists.txt#L618\r\n\r\nI had run into some other issues about the protobuf symbols so I might have introduced this bug, though unclear why it isn't showing up elsewhere"
        },
        {
            "created_at": "2018-08-20T18:08:24.968Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3093?focusedCommentId=16586329) by Antoine Pitrou (apitrou):*\nActually I think it was solved when I switched to `-D_GLIBCXX_USE_CXX11_ABI=1` (that's because `std::string` resolves to a different symbol name then)."
        }
    ]
}