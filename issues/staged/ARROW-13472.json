{
    "issue": {
        "title": "[R] Remove .engine = \"duckdb\" argument",
        "body": "***Note**: This issue was originally created as [ARROW-13472](https://issues.apache.org/jira/browse/ARROW-13472). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nARROW-12688 added:\r\n \\* A new function `to_duckdb()` which registers an Arrow Dataset\u00a0with DuckDB and returns a dbplyr object\u00a0that can be used in dplyr pipelines\r\n \\* An `.engine = \"duckdb\"` option in the `summarise()` function which calls `to_duckdb()` inside `summarise()`\r\n\r\nAt the moment, the latter is very convenient because `summarise()` is not yet natively supported for Arrow Datasets.\r\n\r\nHowever, this\u00a0`.engine = \"duckdb\"` option is probably not such a great design for how users should interact with the arrow package in the longer term after native `summarise()` support is added. At that point, it will seem strange that this one particular dplyr verb has an `.engine` option while the others do not. Adding the option to all the other dplyr verbs also seems like a poor UX design.\r\n\r\nConsider whether we should ultimately have users choose whether to use the Arrow C++ engine or the DuckDB engine by passing an `.engine`\u00a0argument to the `collect()` or `compute()` function, as `[~jonkeane]` \u00a0suggested in these\u00a0comments. `collect()` would return a tibble whereas\u00a0`compute()` would return an Arrow Table.",
        "created_at": "2021-07-28T01:10:27.000Z",
        "updated_at": "2021-10-04T16:53:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-10-04T16:53:41.000Z"
    },
    "comments": [
        {
            "created_at": "2021-07-28T12:40:04.817Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13472?focusedCommentId=17388735) by Jonathan Keane (jonkeane):*\nThanks for this and putting it into these words. I agree that the `.engine` argument while convenient, is awkward and departs from the experience of `summarise` and the rest of the other dplyr verbs like you mention. That was the major motivation in creating the `to_duckdb` function.\r\n\r\nThough in that PR (this was in the original description + you can see it in the commit history, though both are relatively hidden now), I came to the conclusion that neither `collect()` nor `compute()` was a good match for what we were doing where a person could pass an Arrow object to duckdb (or other system) in the middle of a pipeline. The biggest reason being that both `collect()` and `compute()` imply that work is being done / executed at that point which for this it is not. I toyed with the idea of calling this `alchemise()` (or having a family like `alchemise_to_duckdb()` so that one knows what the function returns from the name + it is consistent), so that one could do something like the following:\r\n\r\n```r\n\r\nds <- InMemoryDataset$create(example_data)\r\n\r\nds %>%\r\n  alchemize(to = \"duckdb\") %>%\r\n  group_by(lgl) %>%\r\n  summarise(mean_int = mean(int, na.rm = TRUE), mean_dbl = mean(dbl, na.rm = TRUE)) %>%\r\n  alchemize(to = \"arrow\") %>%\r\n  collect()\r\n```"
        },
        {
            "created_at": "2021-07-28T13:26:11.066Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13472?focusedCommentId=17388778) by Jonathan Keane (jonkeane):*\nOne benefit of having this in just after 5.0.0 is we have time to refine this before it's released to the world.\r\n\r\nOne more thing to note: I also think that the UX being that one has to declare when those hand offs happen, rather than specifying them later on in something like a `collect()` is both easier to understand + learn + use because there's no magic/guessing which steps are being executed where, but also more tractable to implement. "
        },
        {
            "created_at": "2021-09-03T20:37:14.478Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13472?focusedCommentId=17409703) by Jonathan Keane (jonkeane):*\nUnless there are objections, my plan is to remove the `.engine` argument entirely and focus on the `to_duckdb()` `to_arrow()` kinds of interface(s).\r\n\r\nWe might eventually want `collect()` or `compute()` to have an engine argument, but for that to work (without some pretty hacky workarounds) we'll need an IR of some sort we could pass between the two. \r\n\r\ncc `[~npr]` and `[~icook]`"
        },
        {
            "created_at": "2021-09-23T18:56:35.449Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13472?focusedCommentId=17419411) by Ian Cook (icook):*\n\ud83d\udc4d sounds good to me"
        },
        {
            "created_at": "2021-10-04T16:53:41.957Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13472?focusedCommentId=17424034) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 11307\n<https://github.com/apache/arrow/pull/11307>"
        }
    ]
}