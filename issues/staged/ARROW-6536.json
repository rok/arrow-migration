{
    "issue": {
        "title": "[C++] CSV reader accept schema",
        "body": "***Note**: This issue was originally created as [ARROW-6536](https://issues.apache.org/jira/browse/ARROW-6536). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe CSV reader lets you specify `column_types`, but this is an `unordered_map` of column name and type. Why not accept a Schema instead? Isn't that essentially an ordered map? Seems that if you took a Schema, some of the validation of what's being passed in would already have been handled. Plus, I suspect that the Datasets project will want to do even more with passing a Schema (e.g. selecting a subset of columns). \r\n\r\nThoughts `[~pitrou]` `[~fsaintjacques]` `[~bkietz]`?",
        "created_at": "2019-09-11T21:27:12.000Z",
        "updated_at": "2020-04-10T15:32:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-09-11T21:32:24.247Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6536?focusedCommentId=16928017) by Antoine Pitrou (apitrou):*\nBecause you may want to pass a subset of the CSV file's columns.\r\n\r\nTo emulate passing a schema, you can probably set both `column_names` and `column_types`. Though it probably deserves checking whether it does what you expect."
        },
        {
            "created_at": "2019-09-12T20:09:52.467Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6536?focusedCommentId=16928858) by Ben Kietzman (bkietz):*\nI think column_types can be replaced with a schema with no loss of functionality:\r\na subset of the CSV file's columns can be achieved by passing a schema without fields named for the columns you want to ignore.\r\n\r\nRelated: https://issues.apache.org/jira/browse/ARROW-5423"
        },
        {
            "created_at": "2019-09-17T15:12:18.620Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6536?focusedCommentId=16931555) by Antoine Pitrou (apitrou):*\nThen passing a schema becomes ambiguous: sometimes the user would like that exact schema, sometimes they would like to have the other columns too. The `column_names` and `column_types` duo allows both explicitly."
        },
        {
            "created_at": "2019-09-19T14:43:25.751Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6536?focusedCommentId=16933452) by Francois Saint-Jacques (fsaintjacques):*\nIf we don't pass a schema, the minimum we should provide is common options for other readers (Parquet, Json) for selecting columns + type hinting when required (JSON, CSV). This way, the dataset facility can write\u00a0 a single function to do this.\r\n\r\nI wouldn't tackle extra columns in the reader, only subset + type."
        },
        {
            "created_at": "2019-09-19T14:45:58.160Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6536?focusedCommentId=16933456) by Antoine Pitrou (apitrou):*\nWe can perhaps discuss a \"common options for column type hinting\" in a separate JIRA."
        },
        {
            "created_at": "2020-01-28T10:45:57.155Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6536?focusedCommentId=17025031) by Joris Van den Bossche (jorisvandenbossche):*\nThe use case mentioned in ARROW-7655 (allow to specify the nullability of fields by specifying a full schema) might be an argument for having a _separate_ `schema` option where you specify the _exact_ schema that the output should have (while with `column_types` isn't strict on the exact columns being specified)."
        }
    ]
}