{
    "issue": {
        "title": "[C++] Provide streaming output from GetFileInfo",
        "body": "***Note**: This issue was originally created as [ARROW-11924](https://issues.apache.org/jira/browse/ARROW-11924). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor situations where a monolithic call to GetFileInfo will be slow, it would be useful to immediately receive any results which **are** ready through an `AsyncGenerator<std::vector<FileInfo>>` or so. This is probably a prerequisite of ARROW-8163, where the goal is to begin scanning known fragments while other fragments are still being discovered.\r\n\r\nIIUC, one concrete example would be paging through a long output from S3's ListObjectsV2.",
        "created_at": "2021-03-10T16:06:03.000Z",
        "updated_at": "2021-04-14T10:04:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-14T10:04:36.000Z"
    },
    "comments": [
        {
            "created_at": "2021-03-10T18:24:33.209Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11924?focusedCommentId=17299051) by Antoine Pitrou (apitrou):*\nThen it would probably be a non-reentrant `AsyncGenerator`. Is that ok?"
        },
        {
            "created_at": "2021-03-10T18:47:34.964Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11924?focusedCommentId=17299062) by Weston Pace (westonpace):*\nThat should be ok.\u00a0 If we get to a point that a consumer needs an async-reentrant input (e.g. we decide that the fragment generator should always be async-reentrant) then we can add a general purpose `buffer` operator that simply buffers incoming requests.\u00a0 Buffering requests is generally assumed to be cheap (it wouldn't be an unlimited buffer as we never pull with unlimited reentrancy) and doesn't add any real memory pressure.\r\n\r\nIf this is in the scanning we will need to change Dataset::GetFragmentsAsync to a FragmentGenerator instead of Future<FragmentVector> but that is not really a problem either."
        },
        {
            "created_at": "2021-03-10T19:01:41.871Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11924?focusedCommentId=17299081) by Antoine Pitrou (apitrou):*\nNote that the implementation could very well be able to produce results in parallel. However, it's not known up front how many results will be produced. I'm not sure if that's a problem."
        },
        {
            "created_at": "2021-04-14T10:04:36.935Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11924?focusedCommentId=17320872) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 9995\n<https://github.com/apache/arrow/pull/9995>"
        }
    ]
}