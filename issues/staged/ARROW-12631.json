{
    "issue": {
        "title": "[Python] pyarrow.dataset.write_table should accept a Scanner to write",
        "body": "***Note**: This issue was originally created as [ARROW-12631](https://issues.apache.org/jira/browse/ARROW-12631). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAssume you open a dataset and want to write it back with some projected columns. Currently you need to actually materialize it to a Table or convert it to an iterator of batches, for being able to write the dataset:\r\n\r\n```python\n\r\nimport pyarrow.dataset as ds\r\n\r\ndataset = ds.dataset(pa.table({'a': [1, 2, 3]}))\r\n\r\n# write with projected columns\r\nprojection = {'b': ds.field('a')}\r\n\r\n# this works but materializes full table\r\nds.write_dataset(dataset.to_table(columns=projection), \"test.parquet\", format=\"parquet\")\r\n\r\n# this requires the exact schema, which is a bit annoying as you need to construct that manually\r\nds.write_dataset(dataset.to_batches(columns=projection), \"test.parquet\", format=\"parquet\", schema=...<projected schema>...)\r\n```\r\n\r\nYou could expect to do the following?\r\n\r\n```Java\n\r\nds.write_dataset(dataset.scanner(columns=projection), \"test.parquet\", format=\"parquet\")\r\n```\r\n\r\ncc `[~lidavidm]` do you think this logic is correct?\r\n\r\n(encountered this while trying to reproduce ARROW-12620 in Python)",
        "created_at": "2021-05-03T12:54:39.000Z",
        "updated_at": "2021-05-04T12:58:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-05-04T12:44:45.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-03T13:03:10.095Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12631?focusedCommentId=17338359) by David Li (lidavidm):*\n`[~jorisvandenbossche]` I agree the write method should also take a scanner. It's essentially a convenience, but would be useful. You can get the schema in the last case with `Scanner.projected_schema` already, but it saves some digging & perhaps on the C++ side we could eventually do something smarter if we know it's a scanner. (For instance, I recall there are issues about preserving partitioning info when round-tripping a dataset.)"
        },
        {
            "created_at": "2021-05-03T13:07:18.770Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12631?focusedCommentId=17338363) by Joris Van den Bossche (jorisvandenbossche):*\nIt seems we actually already pass a Scanner to the C++ write method"
        },
        {
            "created_at": "2021-05-04T12:44:45.553Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12631?focusedCommentId=17338956) by David Li (lidavidm):*\nIssue resolved by pull request 10224\n<https://github.com/apache/arrow/pull/10224>"
        }
    ]
}