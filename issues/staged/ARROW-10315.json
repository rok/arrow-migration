{
    "issue": {
        "title": "[C++] CSV skip wrong rows",
        "body": "***Note**: This issue was originally created as [ARROW-10315](https://issues.apache.org/jira/browse/ARROW-10315). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be helpful to add another option to <font color=\"#267f99\">ReadOptions </font>which will enable skipping rows with wrong data (e.g. data type mismatch with column type) and continue reading next rows. Wrong rows numbers may be reported at the end of processing.\r\n\r\nThis way I can deal with the wrongly formatted data or ignore it if I have a large load success rate and I don\u2019t care about the exceptions.",
        "created_at": "2020-10-15T14:03:36.000Z",
        "updated_at": "2020-12-08T15:15:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-12-08T15:15:36.000Z"
    },
    "comments": [
        {
            "created_at": "2020-10-15T16:55:12.963Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10315?focusedCommentId=17214832) by Antoine Pitrou (apitrou):*\nSkipping rows entirely will be difficult. We could add an option to emit nulls in that case, though. What do you think?"
        },
        {
            "created_at": "2020-10-19T09:03:51.094Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10315?focusedCommentId=17216554) by Maciej (mskrzypkowski):*\nEmitting nulls wouldn't work for me. I may stick with checking the file myself before loading by Arrow."
        },
        {
            "created_at": "2020-10-21T18:47:34.500Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10315?focusedCommentId=17218492) by Joris Van den Bossche (jorisvandenbossche):*\nFor reference (not that we should copy pandas.read_csv's full API though ;)), `pandas.read_csv` has a `error_bad_lines` option, with a default to raise an error on a \"bad line\" (eg not enough values, or too many values), but with the option to skip them.\r\n\r\n`[~apitrou]` when you say that skipping is difficult, is this because if you encounter an error in the value for a certain column, the values are already appended to the builder for the previous columns?"
        },
        {
            "created_at": "2020-10-21T18:51:25.977Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10315?focusedCommentId=17218494) by Antoine Pitrou (apitrou):*\nColumns are converted independently from each other. So we would need a way to remove individual values from an array after the fact. Not only we don't have such a facility currently, but it wouldn't be costless at runtime either.\r\n"
        },
        {
            "created_at": "2020-10-21T18:52:32.581Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10315?focusedCommentId=17218495) by Joris Van den Bossche (jorisvandenbossche):*\nAnd a summary of some discussion related to this in pandas (and old issue of mine): https://github.com/pandas-dev/pandas/issues/15122\r\n\r\nIn general it might be useful to add some options on how to deal with lines with a wrong number of elements (eg filling with nulls if too few, skipping the extra values if there are too many)"
        },
        {
            "created_at": "2020-10-21T18:55:45.402Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10315?focusedCommentId=17218497) by Antoine Pitrou (apitrou):*\nThis issue specifically mentions \"data type mismatch with column type\", which is a different category of errors.\r\n\r\nDealing with lines with wrong number of elements wouldn't easier, though the difficulties would reside in the parser."
        },
        {
            "created_at": "2020-10-22T05:46:52.394Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10315?focusedCommentId=17218763) by Micah Kornfield (emkornfield@gmail.com):*\n> Columns are converted independently from each other. So we would need a way to remove individual values from an array after the fact. Not only we don't have such a facility currently, but it wouldn't be costless at runtime either.\r\nThis seems like a very similar case to having to filter out rows.\u00a0 Would a viable solution be to optionally create a second array (i.e. non-nullable bool), and do the compaction afterwards? Not costless, but I would hope a code path like this would be optimized in the compute kernels?"
        },
        {
            "created_at": "2020-10-22T08:24:40.645Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10315?focusedCommentId=17218862) by Antoine Pitrou (apitrou):*\nWell, we don't want the price of creating the second array in the common case, so we would need two codepaths and a refactor to retry with the error-handling codepath when a conversion fails..."
        }
    ]
}