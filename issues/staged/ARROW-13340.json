{
    "issue": {
        "title": "[C++][Dataset] Simplify ScanOptions after complexity has moved to ScanNode",
        "body": "***Note**: This issue was originally created as [ARROW-13340](https://issues.apache.org/jira/browse/ARROW-13340). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nScanOptions currently has a number of constraints between members, which violates the contract of a public struct:\r\n\r\n- `filter` must be bound to `dataset_schema`\n- `projection` must be bound to `dataset_schema`\n- `projected_schema` must be `schema<...fields>`, where the type of projection is `struct<...fields>`\n  \n  These are currently required to support `FilterAndProjectScanTask`, but after ARROW-13328 this complexity can be removed and ScanOptions can be a pure struct argument to `MakeScanNode`. Specifically, it should be possible to:\n  \n- remove the `projected_schema` field (ScanNode doesn't need to know the schemas of any subsequent nodes)\n- remove the `projection` field (ScanNode doesn't need to know how or if scanned batches will be projected)\n- provide a simple vector of `FieldRef` to indicate which fields should be materialized (MakeScanNode can validate that this includes every field referenced by `filter`)\n- allow `filter` to be unbound (MakeScanNode can bind it to the dataset schema)\n  \n  `dataset_schema` seems slightly redundant too since MakeScanNode also takes a Dataset as an argument but it is currently used by CsvFileFormat to derive column types",
        "created_at": "2021-07-14T15:05:43.000Z",
        "updated_at": "2022-07-04T17:41:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-01-14T20:59:55.856Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13340?focusedCommentId=17476424) by Weston Pace (westonpace):*\nI think this is a good idea (some of the discussion in ARROW-12311 is related)\r\n\r\nOne challenge is that ScanOptions is also used for the \"convenience methods\" like Scanner::Scan and Scanner::Head.  These methods construct an ExecPlan (the fact that they construct a scanner is incidental so it's probably not quite correct they are Scanner methods) and so they need to take in a projection.\r\n\r\nOne way to tackle that problem would be to create QueryOptions which has ScanOptions + projection (and maybe other stuff down the road).  Another way to handle it would be to modify Scanner::Scan and Scanner::Head to take projection as an optional argument."
        }
    ]
}