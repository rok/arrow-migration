{
    "issue": {
        "title": "[R] Improve lazy ALTREP implementation for String",
        "body": "***Note**: This issue was originally created as [ARROW-17187](https://issues.apache.org/jira/browse/ARROW-17187). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nARROW-16578 noted that there was a high cost to looping through an ALTREP character vector that we created in the arrow R package. The temporary workaround is to materialize whenever the first element is requested, which is much faster than our initial implementation but is probably not necessary given that other ALTREP character implementations appear to not have this issue:\r\n\r\n(Timings before merging ARROW-16578, which reduces the 5 second operation below to 0.05 seconds).\r\n\r\n```R\n\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\n\r\ndf1 <- tibble::tibble(x=as.character(floor(runif(1000000) * 20)))\r\nwrite_parquet(df1,\"/tmp/test.parquet\")\r\ndf2 <- read_parquet(\"/tmp/test.parquet\")\r\nsystem.time(unique(df1$x))\r\n#>    user  system elapsed \r\n#>   0.022   0.001   0.023\r\nsystem.time(unique(df2$x))\r\n#>    user  system elapsed \r\n#>   4.529   0.680   5.226\r\n\r\n# the speed is almost certainly not due to ALTREP itself\r\n# but is probably something to do with our implementation\r\ntf <- tempfile()\r\nreadr::write_csv(df1, tf)\r\ndf3 <- vroom::vroom(tf, delim = \",\", altrep = TRUE)\r\n#> Rows: 1000000 Columns: 1\r\n#> \u2500\u2500 Column specification \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n#> Delimiter: \",\"\r\n#> dbl (1): x\r\n#> \r\n#> \u2139 Use `spec()` to retrieve the full column specification for this data.\r\n#> \u2139 Specify the column types or set `show_col_types = FALSE` to quiet this message.\r\n.Internal(inspect(df3$x))\r\n#> @2d2042048 14 REALSXP g0c0 [REF(65535)] vroom_dbl (len=1000000, materialized=F)\r\nsystem.time(unique(df3$x))\r\n#>    user  system elapsed \r\n#>   0.127   0.001   0.128\r\n.Internal(inspect(df3$x))\r\n#> @2d2042048 14 REALSXP g1c0 [MARK,REF(65535)] vroom_dbl (len=1000000, materialized=F)\r\n```\r\n",
        "created_at": "2022-07-22T17:01:57.000Z",
        "updated_at": "2022-10-28T16:31:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-10-26T14:10:05.000Z"
    },
    "comments": [
        {
            "created_at": "2022-10-26T14:10:05.484Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17187?focusedCommentId=17624494) by Dewey Dunnington (paleolimbot):*\nIssue resolved by pull request 14271\n<https://github.com/apache/arrow/pull/14271>"
        }
    ]
}