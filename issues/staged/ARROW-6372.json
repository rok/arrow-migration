{
    "issue": {
        "title": "[Rust][Datafusion] Casting from Un-signed to Signed Integers not supported",
        "body": "***Note**: This issue was originally created as [ARROW-6372](https://issues.apache.org/jira/browse/ARROW-6372). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe following code reproduces the issue:\r\n\r\n<https://gist.github.com/paddyhoran/598db6cbb790fc5497320613e54a02c6>\r\n\r\nIf you disable the predicate push down optimization it works fine.",
        "created_at": "2019-08-28T01:56:08.000Z",
        "updated_at": "2019-08-29T12:57:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-08-29T12:57:41.000Z"
    },
    "comments": [
        {
            "created_at": "2019-08-28T13:39:27.084Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6372?focusedCommentId=16917782) by Andy Grove (andygrove):*\nThanks Paddy. Here is a unit test to reproduce this (can be added to `type_coercion.rs`):\r\n```java\n\r\n#[test]\r\nfn test_add_u32_i64() {\r\n    binary_cast_test(\r\n        DataType::UInt32,\r\n        DataType::Int64,\r\n        \"CAST(#0 AS Int64) Plus #1\",\r\n    );\r\n    binary_cast_test(\r\n        DataType::Int64,\r\n        DataType::UInt32,\r\n        \"#0 Plus CAST(#1 AS Int64)\",\r\n    );\r\n} \n```\r\nThe issue is that the\u00a0`can_coerce_from` function in `datafusion/src/logicalplan.rs` does not support automatic coercion between signed and unsigned types, and is inconsistent with the logic in the\u00a0`get_supertype` method in `datafusion/src/optimizer/utils.rs`. \r\n\r\nThis is also somewhat related to https://issues.apache.org/jira/browse/ARROW-4957"
        },
        {
            "created_at": "2019-08-28T13:45:30.337Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6372?focusedCommentId=16917788) by Andy Grove (andygrove):*\nIf nobody picks this up before the weekend, I will resolve it then. Really we need to make get_supertype and can_coerce_from consistent and better implemented (it's pretty hacky right now and only supports a subset of data types)."
        },
        {
            "created_at": "2019-08-28T14:01:55.960Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6372?focusedCommentId=16917804) by Andy Grove (andygrove):*\nAnother note on this ... in this case we have one expression that references a column and one that is a literal ... in this case the type of the column should take precedence and the literal value (Int64) should be cast to the type of the column (UInt32). The literal is Int64 just because that's the type the SQL parser uses for any literal integers."
        },
        {
            "created_at": "2019-08-29T02:50:07.989Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6372?focusedCommentId=16918234) by Paddy Horan (paddyhoran):*\nOh that's interesting.\u00a0 I was trying to give a minimal example of an issue I am having in another project and I believe the example highlights a different issue.\r\n\r\nI'll take this one on, I thought it was more complex."
        },
        {
            "created_at": "2019-08-29T12:57:41.243Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6372?focusedCommentId=16918589) by Krisztian Szucs (kszucs):*\nIssue resolved by pull request 5224\n<https://github.com/apache/arrow/pull/5224>"
        }
    ]
}