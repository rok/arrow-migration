{
    "issue": {
        "title": "Improvement the performance of class SegmentsUtil",
        "body": "***Note**: This issue was originally created as [ARROW-5221](https://issues.apache.org/jira/browse/ARROW-5221). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nImprove the performance of class SegmentsUtil from two points:\r\n1. In method allocateReuseBytes, the generated byte array should be cached for reuse, if the size does not exceed\u00a0MAX_BYTES_LENGTH. However, the array is not cached if\u00a0bytes.length < length, and this will lead to performance overhead:\n   \n   \u00a0\n   \n   if (bytes == null) {\n   \u00a0 if (length <= MAX_BYTES_LENGTH) {\n   \u00a0 \u00a0 bytes = new byte[MAX_BYTES_LENGTH];\n   \u00a0 \u00a0 BYTES_LOCAL.set(bytes);\n   \u00a0 } else {\n   \u00a0 \u00a0 bytes = new byte[length];\n   \u00a0 }\n    } else if (bytes.length < length) {\n   \u00a0 bytes = new byte[length];\n    }\n   \n   \u00a0\n   \n   2. To evaluate the offset, an integer is bitand with a mask to clear to low bits, and then shift right. The bitand is useless:\n   \n   \u00a0\n   \n   ((index & BIT_BYTE_POSITION_MASK) >>> 3)\n   \n   \u00a0",
        "created_at": "2019-04-26T09:36:15.000Z",
        "updated_at": "2019-04-26T09:38:15.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-04-26T09:38:15.000Z"
    },
    "comments": []
}