{
    "issue": {
        "title": "[C++][Dataset] Handle NaNs correctly in Parquet predicate push-down",
        "body": "***Note**: This issue was originally created as [ARROW-12264](https://issues.apache.org/jira/browse/ARROW-12264). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe Parquet spec (in parquet.thrift) says the following about handling of floating-point statistics:\r\n```Java\n\r\n   * (*) Because the sorting order is not specified properly for floating\r\n   *     point values (relations vs. total ordering) the following\r\n   *     compatibility rules should be applied when reading statistics:\r\n   *     - If the min is a NaN, it should be ignored.\r\n   *     - If the max is a NaN, it should be ignored.\r\n   *     - If the min is +0, the row group may contain -0 values as well.\r\n   *     - If the max is -0, the row group may contain +0 values as well.\r\n   *     - When looking for NaN values, min and max should be ignored.\r\n```\r\n\r\nIt appears that the dataset code uses the following filter expression when doing Parquet predicate push-down (in `file_parquet.cc`):\r\n```c++\n\r\n    return and_(greater_equal(field_expr, literal(min)),\r\n                less_equal(field_expr, literal(max)));\r\n```\r\n\r\nA NaN value will fail that filter and yet may be found in the given Parquet column chunk.\r\n\r\nWe may instead need a \"greater_equal_or_nan\" comparison that returns true if either value is NaN.",
        "created_at": "2021-04-07T16:25:47.000Z",
        "updated_at": "2022-07-04T17:41:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Parquet",
            "Type: task"
        ],
        "closed": false
    },
    "comments": []
}