{
    "issue": {
        "title": "[C++][CSV] Timestamp parsing should accept any valid ISO 8601 without requiring custom parse strings",
        "body": "***Note**: This issue was originally created as [ARROW-13625](https://issues.apache.org/jira/browse/ARROW-13625). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI was trying to read in some git logs and got this parse error for a column I had declared as timestamp type:\r\n\r\nError: Invalid: In CSV column #0: CSV conversion error to timestamp[s]: invalid value '2021-08-11T17:39:50-04:00'\r\n\r\nThis is valid ISO 8601 and is what git log produces with the `I` \"strict ISO 8601 format\" option (https://git-scm.com/docs/pretty-formats). \r\n\r\nI see mentioned on ARROW-10343 that timezone indicators are not supported--is that still true? And I recognize that it's not trivial because a timestamp array has to have the same timezone for all values, so if some rows in this CSV had different timezones listed, we would have to handle that (converting everything to UTC is probably the most useful thing but technically loses information).",
        "created_at": "2021-08-13T14:56:37.000Z",
        "updated_at": "2022-05-13T18:46:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-05-13T18:46:28.000Z"
    },
    "comments": [
        {
            "created_at": "2021-08-13T18:57:53.240Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13625?focusedCommentId=17398865) by Weston Pace (westonpace):*\nI think converting everything to UTC is fine.  If people really care about time zone information it should be stored out of band."
        },
        {
            "created_at": "2021-08-14T23:04:08.635Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13625?focusedCommentId=17399281) by Rok Mihevc (rokm):*\nhttps://issues.apache.org/jira/browse/ARROW-12820\u00a0and https://issues.apache.org/jira/browse/ARROW-13348\u00a0are also related."
        },
        {
            "created_at": "2022-02-08T17:02:07.788Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13625?focusedCommentId=17489005) by Nicola Crane (thisisnic):*\nI believe this is resolved now; here's what I think is a reprex which I ran with a recent version of Arrow:\r\n\r\n\r\n```r\n\r\nlibrary(arrow)\r\n#> \r\n#> Attaching package: 'arrow'\r\n#> The following object is masked from 'package:utils':\r\n#> \r\n#>     timestamp\r\ncsv_file = tempfile()\r\nwriteLines(\"x\\n2021-08-11T17:39:50-04:00\", con = csv_file)\r\nread_csv_arrow(csv_file)\r\n#> # A tibble: 1 \u00d7 1\r\n#>   x                  \r\n#>   <dttm>             \r\n#> 1 2021-08-11 21:39:50\n```\r\n"
        },
        {
            "created_at": "2022-02-08T17:06:25.826Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13625?focusedCommentId=17489009) by Nicola Crane (thisisnic):*\nThat said, it goes wrong when using a schema:\r\n```r\n\r\nlibrary(arrow)\r\n#>\u00a0\r\n#> Attaching package: 'arrow'\r\n#> The following object is masked from 'package:utils':\r\n#>\u00a0\r\n#> \u00a0 \u00a0 timestamp\r\ncsv_file = tempfile()\r\nwriteLines(\"x\\n2021-08-11T16:39:50-04:00\", con = csv_file)\r\nread_csv_arrow(csv_file)\r\n#> # A tibble: 1 \u00d7 1\r\n#> \u00a0 x \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\n#> \u00a0 <dttm> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\r\n#> 1 2021-08-11 20:39:50\r\nread_csv_arrow(csv_file, skip = 1, schema=schema(x = timestamp()))\r\n#> Error in `handle_csv_read_error()`:\r\n#> ! Invalid: In CSV column #0: CSV conversion error to timestamp[s]: expected no zone offset in '2021-08-11T16:39:50-04:00'\r\n#> /home/nic2/arrow/cpp/src/arrow/csv/converter.cc:550 \u00a0decoder_.Decode(data, size, quoted, &value)\r\n#> /home/nic2/arrow/cpp/src/arrow/csv/parser.h:123 \u00a0status\r\n#> /home/nic2/arrow/cpp/src/arrow/csv/converter.cc:554 \u00a0parser.VisitColumn(col_index, visit)\r\n#> \u2139 If you have supplied a schema and your data contains a header row, you should supply the argument `skip = 1` to prevent the header being read in as data.\r\nread_csv_arrow(csv_file, skip = 1, schema=schema(x = timestamp(timezone = \"-4:00\")))\r\n#> # A tibble: 1 \u00d7 1\r\n#> \u00a0 x \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\n#> \u00a0 <dttm> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\r\n#> 1 2021-08-11 20:39:50 \n```"
        },
        {
            "created_at": "2022-02-09T10:14:12.263Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13625?focusedCommentId=17489427) by Nicola Crane (thisisnic):*\nI think what is happening is that when we say that a column is a timestamp(), if we don't include a timezone in the call to timestamp(), then it's expected to be a a timestamp without a timezone, which is not true.  I think ARROW-14442 is related to this.  `[~dragosmg]` - will your changes on the PR for that ticket affect this one?"
        },
        {
            "created_at": "2022-02-09T14:01:54.260Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13625?focusedCommentId=17489565) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\n[ARROW-14442](https://issues.apache.org/jira/browse/ARROW-14442) looks at timestamps without timezone and assumes (just like R does) they are timestamps with the local timezone. As far as I can tell from a quick skim of this conversations the 2 issues are slightly different. I think the timestamp Neil is referring to contains the timezone as offset from UTC (the `%z` in R's format) which doesn't seem to be recognised by arrow (which recognises only string timezones - R's `%Z`).\r\n\r\nA small reprex:\r\n```r\n\r\nx <- as.POSIXct(\"2022-02-09\", tz = \"Europe/Bucharest\")\r\nformat(x, format = \"%z\")\r\n#> [1] \"+0200\"\r\nformat(x, format = \"%Z\")\r\n#> [1] \"EET\"\r\n```"
        },
        {
            "created_at": "2022-02-10T10:15:53.093Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13625?focusedCommentId=17490074) by Joris Van den Bossche (jorisvandenbossche):*\nI think this issue is indeed resolved. By default, Arrow will now infer a \"timestamp with timezone UTC\" type for such data:\r\n\r\n```python\n\r\nimport io\r\nfrom pyarrow import csv\r\n\r\ns = \"\"\"a\r\n2021-08-11T17:39:50-04:00\"\"\"\r\n\r\n>>> csv.read_csv(io.BytesIO(s.encode()))\r\npyarrow.Table\r\na: timestamp[s, tz=UTC]\r\n----\r\na: [[2021-08-11 21:39:50]]\r\n```\r\n\r\nwhich seems like a good default behaviour?\r\n\r\nIt indeed fails when specifying \"timestamp\" as the type for that column:\r\n\r\n```Java\n\r\n>>> csv.read_csv(io.BytesIO(s.encode()), convert_options=csv.ConvertOptions(column_types={'a': pa.timestamp('ns')}))\r\n...\r\nArrowInvalid: In CSV column #0: CSV conversion error to timestamp[ns]: expected no zone offset in '2021-08-11T17:39:50-04:00'\r\n```\r\n\r\nBut that is probably fine? (otherwise you have the ambiguity about using the UTC value vs the printed value as the tz-naive timestamp) \r\nThe error message is also clear about not expecting a timezone offset. We could maybe further improve the error message by saying something about \"... for a timestamp without timezone\" to stress that it is because the specified type has no timezone. \r\n(the reverse case of expecting a zone offset if there is none also has an expanded message: https://github.com/apache/arrow/blob/c0bae8daea2ace51c64f6db38cfb3d04c5bed657/cpp/src/arrow/csv/converter.cc#L382-L391)\r\n\r\nAnd it works fine if you specify a timestamp type with timezone for the column:\r\n\r\n```Java\n\r\n>>> csv.read_csv(io.BytesIO(s.encode()), convert_options=csv.ConvertOptions(column_types={'a': pa.timestamp('ns', tz=\"UTC\")}))\r\npyarrow.Table\r\na: timestamp[ns, tz=UTC]\r\n----\r\na: [[2021-08-11 21:39:50.000000000]]\r\n```\r\n\r\nI don't think it is directly related to ARROW-14442 because here it is about parsing a string, while ARROW-14442 is about converting an R object that already represents some form of timestamp.\r\n\r\n> I think the timestamp Neil is referring to contains the timezone as offset from UTC (the %z in R's format) which doesn't seem to be recognised by arrow (which recognises only string timezones - R's %Z).\r\n\r\nArrow actually does \"support\" such offset timezone (`%z`), at least in the format specification (see https://github.com/apache/arrow/blob/c0bae8daea2ace51c64f6db38cfb3d04c5bed657/format/Schema.fbs#L341-L351). However, we currently don't really have support for that kind of timezone in any kernel.\r\n\r\nSo specifying such a offset timezone works:\r\n\r\n```Java\n\r\n>>> table = csv.read_csv(io.BytesIO(s.encode()), convert_options=csv.ConvertOptions(column_types={'a': pa.timestamp('ns', tz=\"+05:00\")}))\r\n>>> table \r\npyarrow.Table\r\na: timestamp[ns, tz=+05:00]\r\n----\r\na: [[2021-08-11 21:39:50.000000000]]\r\n```\r\n\r\n(now, this is a bit confusing because it doesn't actually matter here, I could also have used `tz=\"blabla\"` and it would also have worked. It doesn't matter because once it a timestamp with timezone type, Arrow will just convert the string to the underlying UTC value, which is always the same regardless of the actual timezone).\r\n\r\nBut once you do an operation, it currently fails:\r\n\r\n```Java\n\r\n>>> import pyarrow.compute as pc\r\n>>> pc.hour(table['a'])\r\n...\r\nArrowInvalid: Cannot locate timezone '+05:00': +05:00 not found in timezone database\r\n```\r\n\r\nThe JIRA for this is ARROW-14477"
        },
        {
            "created_at": "2022-05-13T18:46:28.535Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13625?focusedCommentId=17536836) by Neal Richardson (npr):*\nConfirming this is now fixed."
        }
    ]
}