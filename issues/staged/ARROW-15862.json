{
    "issue": {
        "title": "[C++] Provide a way to go from numeric to duration",
        "body": "***Note**: This issue was originally created as [ARROW-15862](https://issues.apache.org/jira/browse/ARROW-15862). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n**Update**: I keep forgetting that R integers are translated into int32 (since R does not have int64). int64 -> duration is supported.\u00a0\r\n\u00a0Would it make sense to support float -> duration or int32 -> duration? \r\n\r\n======================\r\nCurrently it is not possible to directly create a duration object from a numeric one (for example through casting).\r\n```r\n\r\nlibrary(arrow)\r\n\r\na <- Array$create(32L)\r\na$cast(duration(\"s\"))\r\n#> Error: NotImplemented: Unsupported cast from int32 to duration using function cast_duration\r\n#> /Users/dragos/Documents/arrow/cpp/src/arrow/compute/function.cc:231  DispatchBest(&inputs)\r\n```\r\nThis underpins a lot of the date-time arithmetic in R, which support the conversion/ coercion of an integer to difftime (R's equivalent for duration), such as in the pipeline below.\r\n```r\n\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> See arrow_info() for available features\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\nlibrary(lubridate, warn.conflicts = FALSE)\r\n\r\ndf <- tibble(time = as_datetime(c(\"2022-03-07 15:00:28\", \"2022-03-06 14:00:28\"))) \r\ndf\r\n#> # A tibble: 2 \u00d7 1\r\n#>   time               \r\n#>   <dttm>             \r\n#> 1 2022-03-07 15:00:28\r\n#> 2 2022-03-06 14:00:28\r\n\r\ndf %>% \r\n  mutate(time2 = time + seconds(2))\r\n#> # A tibble: 2 \u00d7 2\r\n#>   time                time2              \r\n#>   <dttm>              <dttm>             \r\n#> 1 2022-03-07 15:00:28 2022-03-07 15:00:30\r\n#> 2 2022-03-06 14:00:28 2022-03-06 14:00:30\r\n```",
        "created_at": "2022-03-07T16:29:18.000Z",
        "updated_at": "2022-07-11T18:54:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-03-15T11:37:35.690Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17506864) by Joris Van den Bossche (jorisvandenbossche):*\n>   Would it make sense to support float -> duration or int32 -> duration? \r\n\r\nDo you mean in the (C++) Cast machinery? \r\n\r\nWe also don't support this for example timestamp:\r\n\r\n```python\n\r\n# casting int64 to timestamp is fine\r\n>>> pa.array([1, 2, 3]).cast(pa.timestamp(\"s\"))\r\n<pyarrow.lib.TimestampArray object at 0x7fb5c314c340>\r\n[\r\n  1970-01-01 00:00:01,\r\n  1970-01-01 00:00:02,\r\n  1970-01-01 00:00:03\r\n]\r\n\r\n# casting int32 not\r\n>>> pa.array([1, 2, 3], type=\"int32\").cast(pa.timestamp(\"s\"))\r\n... ArrowNotImplementedError: Unsupported cast from int32 to timestamp using function cast_timestamp\r\n../src/arrow/compute/function.cc:231  DispatchBest(&inputs)\r\n```\r\n\r\nWe might want to do this, but I think it is a general issue / question for the casting machinery of Arrow how to handle casts that might need an additional step (like \"int32 -> timestamp\" can be done as \"int32 -> int64 -> timestamp\" which are all supported)"
        },
        {
            "created_at": "2022-03-15T11:45:51.196Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17506866) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nYes, I was thinking in the C++ cast machinery. True, at the moment I am going via int64, which is not a problem. Float -> duration would be useful. R for example can handle conversions of double/ float to difftime (the base R duration equivalent).\r\n\r\n```r\n\r\nas.difftime(32.5, units = \"secs\")\r\n#> Time difference of 32.5 secs\r\n``` "
        },
        {
            "created_at": "2022-03-15T15:44:31.542Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17506995) by Joris Van den Bossche (jorisvandenbossche):*\nRelated issue, but for other kernels: ARROW-11508\r\n"
        },
        {
            "created_at": "2022-06-29T16:39:39.200Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17560365) by Antoine Pitrou (apitrou):*\n`[~dragosmg]` You can cast indirectly, for example float->int64->duration. I don't think we want to proliferate variations of cast kernels, though this could be discussed. `[~lidavidm]` Thoughts?"
        },
        {
            "created_at": "2022-06-29T16:43:07.192Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17560368) by David Li (lidavidm):*\nYeah, this seems like something we could implement in the bindings or frontend by just doing two casts. Unless there's a significant performance benefit to avoiding the extra cast (I would guess not?) we should at least try to be a little conscious about code/binary size."
        },
        {
            "created_at": "2022-06-29T16:50:08.548Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17560372) by Antoine Pitrou (apitrou):*\nAlso, I think the last cast (int64->duration) is zero-copy already?"
        },
        {
            "created_at": "2022-06-30T09:53:07.758Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17560956) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\n`[~apitrou]` I don't think float -> int64 casting works. Unless I am missing something.  \r\n\r\n```r\n\r\nlibrary(arrow)\r\n  \r\na <- Array$create(32.5)\r\na$cast(float())$cast(int64())\r\n#> Error: Invalid: Float value 32.5 was truncated converting to int64\r\n```"
        },
        {
            "created_at": "2022-06-30T09:59:01.014Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17560958) by Antoine Pitrou (apitrou):*\nWell, if the cast would truncate, it fails by default but you can select an unsafe cast:\r\n```python\n\r\n>>> pc.cast(3.5, pa.int64())\r\nTraceback (most recent call last):\r\n  ...\r\nArrowInvalid: Float value 3.5 was truncated converting to int64\r\n>>> pc.cast(3.5, pa.int64(), safe=False)\r\n<pyarrow.Int64Scalar: 3>\r\n```\r\n"
        },
        {
            "created_at": "2022-06-30T10:13:18.184Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17560962) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nTrue, but an unsafe cast ultimately alters the value. \u00a0\r\n```r\n\r\na <- Array$create(32.6)\r\nb <- Array$create(32.7)\r\na$cast(int64(), safe = FALSE)$cast(duration()) + b$cast(int64(), safe = FALSE)$cast(duration())\r\n#> Array\r\n#> <duration[s]>\r\n#> [\r\n#>   64\r\n#> ]\r\n```"
        },
        {
            "created_at": "2022-07-11T18:54:40.569Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15862?focusedCommentId=17565147) by Neal Richardson (npr):*\nI'm ok with not supporting float cast to duration, but it seems that any integer type should be able to cast to duration, not just int64. This seems odd to me:\r\n\r\n```Java\n\r\n> Scalar$create(1L)$cast(duration())\r\nError: NotImplemented: Unsupported cast from int32 to duration using function cast_duration\r\n```"
        }
    ]
}