{
    "issue": {
        "title": "[Java] Enable integration tests for dictionaries-within-dictionaries",
        "body": "***Note**: This issue was originally created as [ARROW-7779](https://issues.apache.org/jira/browse/ARROW-7779). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe integration test is implemented but currently disabled for all implementations",
        "created_at": "2020-02-06T01:33:21.000Z",
        "updated_at": "2022-07-12T14:04:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Format",
            "Component: Integration",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-04-17T17:55:00.062Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17085959) by Jacques Nadeau (jnadeau):*\nHey `[~wesm]` can you expound on what you mean by dictionaries within dictionaries? Are you talking about dictionary encoding or something else? Are you talking about a map where the key or value is a map?"
        },
        {
            "created_at": "2020-04-17T18:14:35.265Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17085969) by Wes McKinney (wesm):*\nSure. Consider the following schema:\r\n\r\n```Java\n\r\nmovie_genres: array<string>\r\n```\r\n\r\nYou could have\r\n\r\n```Java\n\r\nmovie_genres: array<\r\n  dictionary<indices=int32, values=string>\r\n>\r\n```\r\n\r\nor\r\n\r\n```Java\n\r\nmovie_genres: dictionary<\r\n  indices=int32,\r\n  values= array<dictionary<indices=int32, values=string>>\r\n>\r\n```\r\n\r\nSlightly contrived maybe, but there may be situations where you want to memoize entries of a nested type which might themselves have e.g. dictionary-encoded strings. The question is not really about whether you _should_ do this \u2013 this is well-representable using the Arrow IPC metadata, but is not adequately tested."
        },
        {
            "created_at": "2020-04-17T18:21:13.064Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17085972) by Jacques Nadeau (jnadeau):*\nIt feels like a mistake to think of dictionary-encoding as a type. I don't think the example you gave was in the spirit of what we intended when we defined dictionary encoding. Why not just say it isn't supported? \r\n\r\nIn this example we'd say: if you want to dictionary encode the lists, you can't dictionary encode the values in the lists as well. At least for now. "
        },
        {
            "created_at": "2020-04-17T19:09:38.257Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17085995) by Wes McKinney (wesm):*\nSorry, it's not a type. Here would be the representation (simplified) in Flatbuffers\r\n\r\n```Java\n\r\nField<\r\n  name: \"movie_genres\",\r\n  type: Array\r\n  dictionary: id=1\r\n  child[0]: Field<\r\n      name: \"item\",\r\n      type: String\r\n      dictionary: id=0\r\n  >\r\n>\r\n```\r\n\r\nFrom an algebraic standpoint, the way that dictionary encoding is implemented is as:\r\n\r\n```Java\n\r\nArray <\r\n  indices: Array,\r\n  dictionary: Array\r\n>\r\n```\r\n\r\nSo if we disallow \"dictionary\" from itself containing dictionary-encoded data (which is not difficult to construct in-memory), then we have to do data sanitization either at time of array construction or upon writing to IPC. Both of those options are icky but the percentage of users that will be harmed by them is small"
        },
        {
            "created_at": "2020-04-17T19:15:20.573Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17086002) by Wes McKinney (wesm):*\nFTR implementing this correctly in principle does not strike me as a great hardship. Because it may not be difficult doesn't mean it's a good idea, though"
        },
        {
            "created_at": "2020-04-17T19:55:15.046Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17086034) by Jacques Nadeau (jnadeau):*\nI don't like it would require in terms of complexity on the processing side."
        },
        {
            "created_at": "2020-05-07T11:26:05.521Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17101569) by Antoine Pitrou (apitrou):*\n\"type: Array\" means \"type: List\" above, right?"
        },
        {
            "created_at": "2021-04-06T17:35:34.344Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17315745) by Antoine Pitrou (apitrou):*\ncc `[~emkornfield]` [~fan_li_ya]"
        },
        {
            "created_at": "2021-04-07T16:04:20.144Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17316451) by Micah Kornfield (emkornfield):*\nThis very low on my priority list for contributions at the moment.\u00a0 I think dictionary of dictionaries is niche enough and IIRC Java's dictionary APIs complex enough that this might not be easy to do."
        },
        {
            "created_at": "2021-04-09T07:40:32.858Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17317743) by Liya Fan (fan_li_ya):*\nI can provide help if needed. "
        },
        {
            "created_at": "2022-07-12T14:04:54.207Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7779?focusedCommentId=17565831) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}