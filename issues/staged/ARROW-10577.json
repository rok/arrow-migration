{
    "issue": {
        "title": "[Rust][DataFusion] Hash Aggregator stream finishes unexpectedly after going to Pending state",
        "body": "***Note**: This issue was originally created as [ARROW-10577](https://issues.apache.org/jira/browse/ARROW-10577). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis happens when executing a DataFusion query plan with hash aggregation where the data source is not ready on the first call by the Executor, and the async state machine is passed to a _pending_ state\r\n\r\nIn the `Stream` implem of `GroupedHashAggregateStream` and `HashAggregateStream`, the state is set to `self.finished = true` on the first call to `poll_next()`. If the inner stream is `Poll::Pending` on the first call, this means that the next call resolves to `Poll::Ready(None)`, thus finishing the stream instead of actually consuming the inner data.\r\n\r\nI think that it does not happen with most current sources because they never trigger the `Poll::Pending` state. Parquet is implemented with a blocking call inside `poll_next()` (which is also problematic but an other issue), Memory yields directly, and CSV also always yields `Poll::Ready`\r\n\r\nAn analysis should be performed on all physical plans to check if the issue occurs in other places.",
        "created_at": "2020-11-13T08:19:39.000Z",
        "updated_at": "2020-12-24T19:07:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-11-16T13:26:05.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-13T08:22:33.749Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10577?focusedCommentId=17231251) by R\u00e9mi Dettai (rdettai):*\nI can take a crack at it. `[~jorgecarleitao]` and `[~andygrove]` do you know of they are any other places where the stream has been implemented in a similar fashion ?"
        },
        {
            "created_at": "2020-11-13T16:33:18.593Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10577?focusedCommentId=17231611) by Andrew Lamb (alamb):*\n`[~rdettai]` this PR may be related: https://github.com/apache/arrow/pull/8553"
        },
        {
            "created_at": "2020-11-16T13:26:05.956Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10577?focusedCommentId=17232755) by Andrew Lamb (alamb):*\nIssue resolved by pull request 8658\n<https://github.com/apache/arrow/pull/8658>"
        }
    ]
}