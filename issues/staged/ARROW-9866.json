{
    "issue": {
        "title": "[Python] Incorrect timestamp column filtering",
        "body": "***Note**: This issue was originally created as [ARROW-9866](https://issues.apache.org/jira/browse/ARROW-9866). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHere are some sample test cases:\r\n\r\n\u00a0\r\n```java\n\r\nimport io\r\nimport itertools\r\n\r\nimport pandas\r\nimport pyarrow\r\nimport pyarrow.dataset\r\nimport pyarrow.parquet\r\nimport pytest\r\nimport pytz\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"data_date, filter_date\",\r\n    itertools.product(\r\n        [\r\n            pandas.Timestamp(\"2000-01-01 00:00:00\"),\r\n            pandas.Timestamp(\"2000-01-01 00:00:00\", tz=\"UTC\"),\r\n            pandas.Timestamp(\"2000-01-01 00:00:00\", tz=\"US/Eastern\"),\r\n            pandas.Timestamp(\"1999-12-31 19:00:00\", tz=pytz.FixedOffset(-300)),\r\n        ],\r\n        repeat=2,\r\n    ),\r\n    ids=lambda x: x.isoformat(),\r\n)\r\ndef test_timestsamp_filter(data_date, filter_date):\r\n    data_date = pandas.Timestamp(data_date)\r\n    filter_date = pandas.Timestamp(filter_date)\r\n    df = pandas.DataFrame(dict(date=[data_date]))\r\n    try:\r\n        if data_date == filter_date:\r\n            expected = df\r\n        else:\r\n# empty frame\r\n            expected = df.iloc[:0, :]\r\n\r\n    except TypeError:\r\n# empty frame\r\n        expected = df.iloc[:0, :]\r\n    fileobj = io.BytesIO()\r\n    pyarrow.parquet.write_table(pyarrow.Table.from_pandas(df), fileobj)\r\n    actual = pyarrow.parquet.read_table(fileobj, filters=pyarrow.dataset.field(\"date\") == filter_date).to_pandas()\r\n    pandas.testing.assert_frame_equal(actual, expected)\r\n\r\n```\r\n\u00a0Pytest summary:\r\n```\n\r\n=========================== short test summary info ============================\r\nFAILED test_arrow.py::test_timestsamp_filter[2000-01-01T00:00:00-2000-01-01T00:00:00+00:00]\r\nFAILED test_arrow.py::test_timestsamp_filter[2000-01-01T00:00:00-2000-01-01T00:00:00-05:00]\r\nFAILED test_arrow.py::test_timestsamp_filter[2000-01-01T00:00:00+00:00-2000-01-01T00:00:00]\r\nFAILED test_arrow.py::test_timestsamp_filter[2000-01-01T00:00:00+00:00-2000-01-01T00:00:00-05:00]\r\nFAILED test_arrow.py::test_timestsamp_filter[2000-01-01T00:00:00+00:00-1999-12-31T19:00:00-05:00]\r\nFAILED test_arrow.py::test_timestsamp_filter[2000-01-01T00:00:00-05:00-2000-01-01T00:00:00-05:00]\r\nFAILED test_arrow.py::test_timestsamp_filter[1999-12-31T19:00:00-05:00-2000-01-01T00:00:00]\r\nFAILED test_arrow.py::test_timestsamp_filter[1999-12-31T19:00:00-05:00-2000-01-01T00:00:00-05:00]\r\nFAILED test_arrow.py::test_timestsamp_filter[1999-12-31T19:00:00-05:00-1999-12-31T19:00:00-05:00]\r\n========================= 9 failed, 7 passed in 0.23s ==========================\n```",
        "created_at": "2020-08-26T21:13:24.000Z",
        "updated_at": "2020-08-28T15:05:01.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-08-28T08:38:12.964Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9866?focusedCommentId=17186387) by Joris Van den Bossche (jorisvandenbossche):*\nThis comes down to the timezone handling (how are the pandas Timestamp values with potentially a timezone converted to a pyarrow scalar for the comparison).\r\n\r\nUsing your example timestamps, but only looking at the conversion and equality check for a moment:\r\n\r\n```python\n\r\nimport itertools\r\nimport pandas\r\nimport pyarrow\r\nimport pyarrow.compute\r\nimport pytz\r\n\r\n\r\nfor left, right in itertools.product(\r\n    [\r\n        pandas.Timestamp(\"2000-01-01 00:00:00\"),\r\n        pandas.Timestamp(\"2000-01-01 00:00:00\", tz=\"UTC\"),\r\n        pandas.Timestamp(\"2000-01-01 00:00:00\", tz=\"US/Eastern\"),\r\n        pandas.Timestamp(\"1999-12-31 19:00:00\", tz=pytz.FixedOffset(-300)),\r\n    ],\r\n    repeat=2,\r\n):\r\n    typ = pyarrow.array(pandas.Series([left])).type\r\n    scalar_left = pyarrow.scalar(left, type=typ)\r\n    scalar_right = pyarrow.scalar(right, type=typ)\r\n    equal = pyarrow.compute.equal(scalar_left, scalar_right)\r\n    print(f\"Left : {left} -> {scalar_left} ({scalar_left.type})\")\r\n    print(f\"Right: {right} -> {scalar_right} ({scalar_right.type})\")\r\n    print(f\"Equal: {equal}\\n\")\r\n```\r\n\r\n(I am converting the right timestamp (what you are filtering with) to the type of the left, as that is what also happens when filtering with the `filter=` expression)\r\n\r\nWith pyarrow 1.0, this gives:\r\n\r\n```Java\n\r\nLeft : 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nRight: 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nRight: 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nRight: 2000-01-01 00:00:00-05:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nRight: 1999-12-31 19:00:00-05:00 -> 1999-12-31 19:00:00 (timestamp[ns])\r\nEqual: False\r\n\r\nLeft : 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nRight: 2000-01-01 00:00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nRight: 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nRight: 2000-01-01 00:00:00-05:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nRight: 1999-12-31 19:00:00-05:00 -> 1999-12-31 19:00:00+00:00 (timestamp[ns, tz=UTC])\r\nEqual: False\r\n\r\nLeft : 2000-01-01 00:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nRight: 2000-01-01 00:00:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nRight: 2000-01-01 00:00:00+00:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nRight: 2000-01-01 00:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nRight: 1999-12-31 19:00:00-05:00 -> 1999-12-31 14:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nEqual: False\r\n\r\nLeft : 1999-12-31 19:00:00-05:00 -> 1999-12-31 14:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nRight: 2000-01-01 00:00:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nEqual: False\r\n\r\nLeft : 1999-12-31 19:00:00-05:00 -> 1999-12-31 14:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nRight: 2000-01-01 00:00:00+00:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nEqual: False\r\n\r\nLeft : 1999-12-31 19:00:00-05:00 -> 1999-12-31 14:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nRight: 2000-01-01 00:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nEqual: False\r\n\r\nLeft : 1999-12-31 19:00:00-05:00 -> 1999-12-31 14:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nRight: 1999-12-31 19:00:00-05:00 -> 1999-12-31 14:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nEqual: True\r\n```\r\n\r\nHowever, there was recently a change / fix in how timestamps are converted to pyarrow if they are timezone aware (https://github.com/apache/arrow/pull/7816, ARROW-9528). So running the same with master gives:\r\n\r\n```Java\n\r\nLeft : 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nRight: 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nRight: 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nRight: 2000-01-01 00:00:00-05:00 -> 2000-01-01 05:00:00 (timestamp[ns])\r\nEqual: False\r\n\r\nLeft : 2000-01-01 00:00:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nRight: 1999-12-31 19:00:00-05:00 -> 2000-01-01 00:00:00 (timestamp[ns])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nRight: 2000-01-01 00:00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nRight: 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nRight: 2000-01-01 00:00:00-05:00 -> 2000-01-01 05:00:00+00:00 (timestamp[ns, tz=UTC])\r\nEqual: False\r\n\r\nLeft : 2000-01-01 00:00:00+00:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nRight: 1999-12-31 19:00:00-05:00 -> 2000-01-01 00:00:00+00:00 (timestamp[ns, tz=UTC])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00-05:00 -> 2000-01-01 00:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nRight: 2000-01-01 00:00:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nEqual: False\r\n\r\nLeft : 2000-01-01 00:00:00-05:00 -> 2000-01-01 00:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nRight: 2000-01-01 00:00:00+00:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nEqual: False\r\n\r\nLeft : 2000-01-01 00:00:00-05:00 -> 2000-01-01 00:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nRight: 2000-01-01 00:00:00-05:00 -> 2000-01-01 00:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nEqual: True\r\n\r\nLeft : 2000-01-01 00:00:00-05:00 -> 2000-01-01 00:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nRight: 1999-12-31 19:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=US/Eastern])\r\nEqual: False\r\n\r\nLeft : 1999-12-31 19:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nRight: 2000-01-01 00:00:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nEqual: True\r\n\r\nLeft : 1999-12-31 19:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nRight: 2000-01-01 00:00:00+00:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nEqual: True\r\n\r\nLeft : 1999-12-31 19:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nRight: 2000-01-01 00:00:00-05:00 -> 2000-01-01 00:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nEqual: False\r\n\r\nLeft : 1999-12-31 19:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nRight: 1999-12-31 19:00:00-05:00 -> 1999-12-31 19:00:00-05:00 (timestamp[ns, tz=-05:00])\r\nEqual: True\r\n```\r\n\r\nThe above now seems correct to me."
        },
        {
            "created_at": "2020-08-28T15:05:01.831Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9866?focusedCommentId=17186601) by Josh (josham):*\nIt looks good though it would be better to raise a warning or exception when making timezone naive data timezone aware."
        }
    ]
}