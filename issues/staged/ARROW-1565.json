{
    "issue": {
        "title": "[C++][Compute] Implement TopK/BottomK",
        "body": "***Note**: This issue was originally created as [ARROW-1565](https://issues.apache.org/jira/browse/ARROW-1565). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHeap-based topk can compute these indices in O(n log k) time",
        "created_at": "2017-09-19T22:29:54.000Z",
        "updated_at": "2021-09-30T12:14:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-09-10T14:42:41.000Z"
    },
    "comments": [
        {
            "created_at": "2020-02-18T18:13:16.331Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1565?focusedCommentId=17039309) by Antoine Pitrou (apitrou):*\nAnother possibility is to use quickselect."
        },
        {
            "created_at": "2020-05-25T14:06:37.649Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1565?focusedCommentId=17116048) by Wes McKinney (wesm):*\nI reframed this issue as a query processing task. We need to be able to compute TopK/BottomK with chunked data"
        },
        {
            "created_at": "2021-08-04T08:40:20.794Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1565?focusedCommentId=17392867) by Antoine Pitrou (apitrou):*\ncc `[~bkietz]`"
        },
        {
            "created_at": "2021-08-09T14:25:57.061Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1565?focusedCommentId=17396072) by David Li (lidavidm):*\nDaniel Lemire compared various approaches (modifications of the heap approach or modifications of quickselect) and found that the heap wins in his tests: https://lemire.me/blog/2017/06/21/top-speed-for-top-k-queries/ \r\n\r\nIf we want this to perfectly emulate Pandas's nlargest/nsmallest then there are some additional complications (inputs must have a defined order to resolve ties, and/or we must be able to track and output duplicate values)."
        },
        {
            "created_at": "2021-09-10T14:42:41.602Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1565?focusedCommentId=17413223) by David Li (lidavidm):*\nIssue resolved by pull request 11019\n<https://github.com/apache/arrow/pull/11019>"
        }
    ]
}