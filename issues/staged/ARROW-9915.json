{
    "issue": {
        "title": "[Java] getObject API for temporal types is inconsistent and in some cases incorrect",
        "body": "***Note**: This issue was originally created as [ARROW-9915](https://issues.apache.org/jira/browse/ARROW-9915). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt seems that the work which has been tracked in ARROW-2015 and merged in <https://github.com/apache/arrow/pull/2966> to change the return types of the various Time and Date vector types when using the getObject API missed some of the vector types which are temporal and so should return a temporal type, and provided an incorrect implementation for others (some of this was pointed out in the initial PR review, but it seems that it slipped through the cracks and was not addressed before merging).\r\n\r\nHere is a table of the various temporal vector types, what they currently return from getObject, and what they should return, in my opinion (I have included ones in which the implementation is correct for completeness, and coloured them green).\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\n|Vector class|Current return type|Proposed return type|Comments|\r|\n|-|-|-|-|-|\n|DateDayVector|Integer|LocalDate|Currently returns the raw value of days since epoch, should return the actual date|\r|\n|DateMilliVector|LocalDateTime|LocalDate|This type is supposed to encode a date, not a datetime, so even though epoch millis are used, the result should be a LocalDate|\r|\n|<font color=\"#00875a\">DurationVector</font>|<font color=\"#00875a\">Duration</font>|<font color=\"#00875a\">Duration</font>|<font color=\"#00875a\">Correct.</font>|\r|\n|IntervalDayVector|Duration|Period|As per <https://github.com/apache/arrow/blob/master/format/Schema.fbs#L251> , Interval should be a calendar-based datatype, not a time-based one. This is represented in Java by a Period type. However, I note that the Java Period class does not support milliseconds, unlike the Arrow type, which might be why Duration is being returned. Some discussion may be needed on the best way to deal with this.|\r|\n|<font color=\"#00875a\">IntervalYearVector</font>|<font color=\"#00875a\">Period</font>|<font color=\"#00875a\">Period</font>|<font color=\"#00875a\">Correct.</font>|\r|\n|TimeMicroVector|Long|LocalTime|Currently returns the raw number of micros, should return the actual time|\r|\n|TimeMilliVector|LocalDateTime|LocalTime|Currently returns a datetime on 1970-01-01 with the correct time component, should just return the time|\r|\n|TimeNanoVector|Long|LocalTime|Currently returns the raw number of nanos, should return the actual time|\r|\n|TimeSecVector|Integer|LocalTime|Currently returns the raw number of seconds, should return the actual time|\r|\n|<font color=\"#00875a\">TimeStampMicroVector</font>|<font color=\"#00875a\">LocalDateTime</font>|<font color=\"#00875a\">LocalDateTime</font>|<font color=\"#00875a\">Correct.</font>|\r|\n|<font color=\"#00875a\">TimeStampMilliVector</font>|<font color=\"#00875a\">LocalDateTime</font>|<font color=\"#00875a\">LocalDateTime</font>|<font color=\"#00875a\">Correct.</font>|\r|\n|<font color=\"#00875a\">TimeStampNanoVector</font>|<font color=\"#00875a\">LocalDateTime</font>|<font color=\"#00875a\">LocalDateTime</font>|<font color=\"#00875a\">Correct.</font>|\r|\n|<font color=\"#00875a\">TimeStampSecVector</font>|<font color=\"#00875a\">LocalDateTime</font>|<font color=\"#00875a\">LocalDateTime</font>|<font color=\"#00875a\">Correct.</font>|\r|\n|TimeStampMicroTZVector|Long|ZonedDateTime|Currently returns the underlying micros, and TZ has to be obtained separately. Should return the actual datetime with timezone|\r|\n|TimeStampMilliTZVector|Long|ZonedDateTime|Currently returns the underlying millis, and TZ has to be obtained separately. Should return the actual datetime with timezone|\r|\n|TimeStampNanoTZVector|Long|ZonedDateTime|Currently returns the underlying nanos, and TZ has to be obtained separately. Should return the actual datetime with timezone|\r|\n|TimeStampSecTZVector|Long|ZonedDateTime|Currently returns the underlying seconds, and TZ has to be obtained separately. Should return the actual datetime with timezone|\r<br>\r<br>I am happy to submit a PR to fix this if there is no other reason for this to persist other than these types being rarely used, but note that these would all be breaking API changes.\r<br>\r<br>\u00a0|\n",
        "created_at": "2020-09-04T15:10:05.000Z",
        "updated_at": "2020-09-09T08:11:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-09-06T00:23:28.675Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9915?focusedCommentId=17191169) by Micah Kornfield (emkornfield@gmail.com):*\n[~mjadczak_gsa]\u00a0thank you for the detailed analysis.\u00a0 The last time this was [discussed on the mailing list](https://lists.apache.org/thread.html/bd9286591fa8bd682322c625f4176701af78e2510005a0488da359b3%40%3Cdev.arrow.apache.org%3E), it was decided not to make these changes (but possibly add utility methods).\u00a0 we can potentially discuss again."
        },
        {
            "created_at": "2020-09-07T11:21:01.056Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9915?focusedCommentId=17191646) by Matt Jadczak (mjadczak_gsa):*\nIt looks like the mailing list discussion was about a specific shortcoming from my list, however given the extent of the inconsistencies, it seems to me like perhaps more discussion would be warranted? I'm not super-familiar with how the project tends to work - is the best place for such discussion here or on the mailing list?\r\n\r\nIMO if the goal is to leave these implementations alone for back-compat and encourage users to write their own \"hydration\" function based on the raw `get` functions, we should go as far as deprecating `getObject` entirely. When used in a dynamic context (i.e. when you just have some vector returning some `Object`, rather than a statically typed vector returning a statically typed object) I think it can be extremely confusing when two vector types like TimeNanoVector and TimeMilliVector return different types of objects, neither of them what you would expect (in fact, that is exactly how we stumbled upon this issue internally)."
        },
        {
            "created_at": "2020-09-09T08:11:31.866Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9915?focusedCommentId=17192720) by Micah Kornfield (emkornfield@gmail.com):*\n[~mjadczak_gsa]\u00a0discussing it more sounds fine.\u00a0 For topics like API breaking changes it is best to have a discussion on the dev mailing list.\r\n\r\n\u00a0\r\n\r\n\u00a0"
        }
    ]
}