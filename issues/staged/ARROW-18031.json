{
    "issue": {
        "title": "[C++][Parquet] Undefined behavior in boolean RLE decoder",
        "body": "***Note**: This issue was originally created as [ARROW-18031](https://issues.apache.org/jira/browse/ARROW-18031). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA fuzzing run found this undefined behavior, which hints that the RLE boolean decoder implementation is wrong:\r\n```Java\n\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n#1  0x00007ffff7a45859 in __GI_abort () at abort.c:79\r\n#2  0x000055555beafa07 in __sanitizer::Abort() ()\r\n#3  0x000055555bead8a1 in __sanitizer::Die() ()\r\n#4  0x000055555bec15cc in __ubsan::ScopedReport::~ScopedReport() ()\r\n#5  0x000055555bec437b in handleLoadInvalidValue(__ubsan::InvalidValueData*, unsigned long, __ubsan::ReportOptions) ()\r\n#6  0x000055555bec43be in __ubsan_handle_load_invalid_value_abort ()\r\n#7  0x000055555c5acb9b in arrow::bit_util::BitReader::GetAligned<bool> (this=0x607000001060, num_bytes=1, v=0x7fffffff99d0)\r\n    at /home/antoine/arrow/dev/cpp/src/arrow/util/bit_stream_utils.h:415\r\n#8  0x000055555c5aa7d4 in arrow::util::RleDecoder::NextCounts<bool> (this=0x607000001060) at /home/antoine/arrow/dev/cpp/src/arrow/util/rle_encoding.h:663\r\n#9  0x000055555c5a7328 in arrow::util::RleDecoder::GetBatch<bool> (this=0x607000001060, values=0x7ffff5408000, batch_size=2089)\r\n    at /home/antoine/arrow/dev/cpp/src/arrow/util/rle_encoding.h:329\r\n#10 0x000055555c59834e in parquet::(anonymous namespace)::RleBooleanDecoder::Decode (this=0x606000003ce0, buffer=0x7ffff5408000, max_values=2089)\r\n    at /home/antoine/arrow/dev/cpp/src/parquet/encoding.cc:2388\r\n#11 0x000055555c4f43d9 in parquet::internal::(anonymous namespace)::TypedRecordReader<parquet::PhysicalType<(parquet::Type::type)0> >::ReadValuesDense (\r\n    this=0x614000001050, values_to_read=2089) at /home/antoine/arrow/dev/cpp/src/parquet/column_reader.cc:1531\r\n#12 0x000055555c4f7668 in parquet::internal::(anonymous namespace)::TypedRecordReader<parquet::PhysicalType<(parquet::Type::type)0> >::ReadRecordData (\r\n    this=0x614000001050, num_records=2089) at /home/antoine/arrow/dev/cpp/src/parquet/column_reader.cc:1575\r\n#13 0x000055555c4f03e5 in parquet::internal::(anonymous namespace)::TypedRecordReader<parquet::PhysicalType<(parquet::Type::type)0> >::ReadRecords (\r\n    this=0x614000001050, num_records=2089) at /home/antoine/arrow/dev/cpp/src/parquet/column_reader.cc:1331\r\n#14 0x000055555bf0acee in parquet::arrow::(anonymous namespace)::LeafReader::LoadBatch (this=0x608000001020, records_to_read=2089)\r\n    at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:479\r\n#15 0x000055555bf019df in parquet::arrow::ColumnReaderImpl::NextBatch (this=0x608000001020, batch_size=2089, out=0x7fffffffb740)\r\n    at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:109\r\n#16 0x000055555bf78829 in parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadColumn (this=0x613000001a80, i=0, \r\n    row_groups=std::vector of length 1, capacity 1 = {...}, reader=0x608000001020, out=0x7fffffffb740)\r\n    at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:285\r\n#17 0x000055555bff1b9c in parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, arrow::internal::Executor*)::$_4::operator()(unsigned long, std::shared_ptr<parquet::arrow::ColumnReaderImpl>) const (this=0x7fffffffbdc0, i=0, reader=warning: RTTI symbol not found for class 'std::_Sp_counted_deleter<parquet::arrow::ColumnReaderImpl*, std::default_delete<parquet::arrow::ColumnReaderImpl>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>'\r\nwarning: RTTI symbol not found for class 'std::_Sp_counted_deleter<parquet::arrow::ColumnReaderImpl*, std::default_delete<parquet::arrow::ColumnReaderImpl>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>'\r\n\r\nstd::shared_ptr<parquet::arrow::ColumnReaderImpl> (use count 2, weak count 0) = {...}) at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:1236\r\n#18 0x000055555bfed49d in arrow::internal::OptionalParallelForAsync<parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, arrow::internal::Executor*)::$_4&, std::shared_ptr<parquet::arrow::ColumnReaderImpl>, std::shared_ptr<arrow::ChunkedArray> >(bool, std::vector<std::shared_ptr<parquet::arrow::ColumnReaderImpl>, std::allocator<std::shared_ptr<parquet::arrow::ColumnReaderImpl> > >, parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, arrow::internal::Executor*)::$_4&, arrow::internal::Executor*) (use_threads=false, inputs=std::vector of length 1, capacity 1 = {...}, func=..., executor=0x604000002b90)\r\n    at /home/antoine/arrow/dev/cpp/src/arrow/util/parallel.h:95\r\n#19 0x000055555bfebe4c in parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups (this=0x613000001a80, \r\n    self=std::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl> (empty) = {...}, row_groups=std::vector of length 1, capacity 1 = {...}, \r\n    column_indices=std::vector of length 1, capacity 1 = {...}, cpu_executor=0x604000002b90) at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:1254\r\n#20 0x000055555bee0d57 in parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadRowGroups (this=0x613000001a80, \r\n    row_groups=std::vector of length 1, capacity 1 = {...}, column_indices=std::vector of length 1, capacity 1 = {...}, out=0x7fffffffc880)\r\n    at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:1215\r\n#21 0x000055555bedf948 in parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadRowGroup (this=0x613000001a80, row_group_index=0, \r\n    column_indices=std::vector of length 1, capacity 1 = {...}, out=0x7fffffffc880) at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:322\r\n#22 0x000055555bedfe9c in parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadRowGroup (this=0x613000001a80, i=0, table=0x7fffffffc880)\r\n    at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:326\r\n#23 0x000055555becf902 in parquet::arrow::internal::FuzzReader (reader=std::unique_ptr<parquet::arrow::FileReader> = {...})\r\n    at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:1338\r\n#24 0x000055555bed0f66 in parquet::arrow::internal::FuzzReader (data=0x60e000000e40 \" \\377  \\025\", size=159)\r\n    at /home/antoine/arrow/dev/cpp/src/parquet/arrow/reader.cc:1355\r\n#25 0x000055555bec8b78 in LLVMFuzzerTestOneInput (data=0x60e000000e40 \" \\377  \\025\", size=159) at /home/antoine/arrow/dev/cpp/src/parquet/arrow/fuzz.cc:22\r\n#26 0x000055555bdef964 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) ()\r\n#27 0x000055555bdd9d30 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) ()\r\n#28 0x000055555bddfa37 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) ()\r\n#29 0x000055555be09053 in main ()\r\n```\r\n",
        "created_at": "2022-10-13T10:26:40.000Z",
        "updated_at": "2022-10-15T07:12:46.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Parquet",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-10-14T00:33:39.000Z"
    },
    "comments": [
        {
            "created_at": "2022-10-13T10:37:03.732Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18031?focusedCommentId=17616942) by Antoine Pitrou (apitrou):*\n`[~sfc-gh-nthimmegowda]` Do you have time to take a look at this before 10.0.0?"
        },
        {
            "created_at": "2022-10-13T10:47:35.389Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18031?focusedCommentId=17616947) by Antoine Pitrou (apitrou):*\nIf not, I think we'll have to revert the ARROW-17450 PRs."
        },
        {
            "created_at": "2022-10-13T11:56:28.336Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18031?focusedCommentId=17616990) by Nishanth (sfc-gh-nthimmegowda):*\nHi `[~apitrou]` ,\u00a0\r\nwhen is 10.0.0 planned release date ?"
        },
        {
            "created_at": "2022-10-13T13:07:44.302Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18031?focusedCommentId=17617039) by Antoine Pitrou (apitrou):*\nWe hope to do a RC in a week or so. "
        },
        {
            "created_at": "2022-10-13T13:11:42.632Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18031?focusedCommentId=17617042) by Antoine Pitrou (apitrou):*\nThe concrete issue here seems to be that `BitReader::GetAligned<bool>` doesn't take the expected bit width, and tries to copy blindly the encoded bytes into the `bool*` output buffer.\r\n\r\nI actually don't understand how the tests work at all given this seems clearly broken, unless other Parquet writers happen to make a similar mistake?"
        },
        {
            "created_at": "2022-10-13T16:06:00.064Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18031?focusedCommentId=17617165) by Antoine Pitrou (apitrou):*\n`[~raulcd]` `[~kou]` I think we should make this a blocker until either it is fixed or ARROW-17450 is reverted."
        },
        {
            "created_at": "2022-10-14T00:33:39.470Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18031?focusedCommentId=17617368) by Kouhei Sutou (kou):*\nIssue resolved by pull request 14407\n<https://github.com/apache/arrow/pull/14407>"
        }
    ]
}