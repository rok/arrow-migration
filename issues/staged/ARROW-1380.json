{
    "issue": {
        "title": "[C++] Fix \"still reachable\" valgrind warnings when PLASMA_VALGRIND=1",
        "body": "***Note**: This issue was originally created as [ARROW-1380](https://issues.apache.org/jira/browse/ARROW-1380). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI thought I fixed this, but they seem to have recurred:\n\nhttps://travis-ci.org/apache/arrow/jobs/266421430#L5220",
        "created_at": "2017-08-20T03:49:16.000Z",
        "updated_at": "2018-09-13T14:18:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Plasma",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-09-13T14:18:20.000Z"
    },
    "comments": [
        {
            "created_at": "2017-10-09T01:18:07.530Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1380?focusedCommentId=16196420) by Wes McKinney (wesm):*\nI am not sure if these are harmful, but definitely unsightly. I moved off 0.8.0 for now"
        },
        {
            "created_at": "2018-08-17T02:21:51.566Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1380?focusedCommentId=16583276) by Lukasz Bartnik (lbartnik):*\nI took a quick look at a recent build (<https://travis-ci.org/apache/arrow/builds/417014924).>\u00a0Neither of its C++ jobs (<https://travis-ci.org/apache/arrow/jobs/417014931>\u00a0and <https://travis-ci.org/apache/arrow/jobs/417014927)>\u00a0seem to use valgrind. The only job that\u00a0seems to use valgrind is the openjdk8/gcc one (<https://travis-ci.org/apache/arrow/jobs/417014925)>\u00a0but there are no reports from valgrind in the log; in fact, valgrind doesn't seem to be used there at all.\r\n\r\nLooking at job descriptions: the original job where \"still reachable\" blocks are reported was a \"gcc C++\" one, but there were two such jobs back then (3786.1 and 3786.8) whereas there's only one now (9492.7).\r\n\r\nIt seem that the error has been fixed between builds 3786 and 9492.\r\n\r\nI'm attaching the LastTest.log which does not contain any valgrind alarms: every \"HEAP SUMMARY\" line is followed by a \"in use at exit: 0 bytes in 0 blocks\" line."
        },
        {
            "created_at": "2018-08-17T05:58:34.712Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1380?focusedCommentId=16583408) by Wes McKinney (wesm):*\nThe valgrind output for the Python unit tests where this occurs is being suppressed\r\n\r\nsee https://github.com/apache/arrow/pull/1883"
        },
        {
            "created_at": "2018-08-21T02:38:59.824Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1380?focusedCommentId=16586818) by Lukasz Bartnik (lbartnik):*\nAll Valgrind errors seem to originate in libpython. I re-ran:\r\n\r\n```Java\nexport PLASMA_VALGRIND=1\r\npython \\-m\u00a0pytest\u00a0\\-vv\u00a0\\-r\u00a0sxX\u00a0--durations=15 -s $PYARROW_PATH --parquet\n```\r\n\r\nwith a suppression file aiming at ```Java\nobj:*/libpython3.6m.so*\n``` (attached) and all errors\u00a0got\u00a0suppressed. Another way to show it is to extract all suppressions from Valgrind: there are no C++ related context filters among those extracted suppressions."
        },
        {
            "created_at": "2018-08-21T16:14:57.534Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1380?focusedCommentId=16587666) by Wes McKinney (wesm):*\nI'm still seeing \"still reachable\" warnings. Note that the thing that is being valgrinded is the Plasma store not the Python process. Sorry that the JIRA was not more clear\r\n\r\n```Java\n\r\n$ export PLASMA_VALGRIND=1\r\n$ py.test pyarrow/tests/test_plasma.py -s -v\r\n=================================================== test session starts ====================================================\r\nplatform linux -- Python 3.6.5, pytest-3.6.0, py-1.5.3, pluggy-0.6.0 -- /home/wesm/miniconda/envs/arrow-dev/bin/python\r\ncachedir: .pytest_cache\r\nrootdir: /home/wesm/code/arrow/python, inifile: setup.cfg\r\ncollected 24 items                                                                                                         \r\n\r\npyarrow/tests/test_plasma.py::TestPlasmaClient::test_connection_failure_raises_exception ==32111== Memcheck, a memory error detector\r\n==32111== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==32111== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\r\n==32111== Command: /home/wesm/code/arrow/python/pyarrow/plasma_store -s /tmp/test_plasma-im2a8xhc/plasma.sock -m 100000000\r\n==32111== \r\nAllowing the Plasma store to use up to 0.1GB of memory.\r\nStarting object store with directory /dev/shm and huge page support disabled\r\nConnection to IPC socket failed for pathname unknown-store-name, retrying 1 more times\r\nPASSED==32111== \r\n==32111== HEAP SUMMARY:\r\n==32111==     in use at exit: 33 bytes in 1 blocks\r\n==32111==   total heap usage: 33 allocs, 32 frees, 129,757 bytes allocated\r\n==32111== \r\n==32111== 33 bytes in 1 blocks are still reachable in loss record 1 of 1\r\n==32111==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32111==    by 0x5739BBE: allocate (new_allocator.h:111)\r\n==32111==    by 0x5739BBE: std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&) (basic_string.tcc:1057)\r\n==32111==    by 0x5739D47: std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (basic_string.tcc:929)\r\n==32111==    by 0x573A16B: std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long) (basic_string.tcc:1134)\r\n==32111==    by 0x47E54D: main (store.cc:937)\r\n==32111== \r\n==32111== LEAK SUMMARY:\r\n==32111==    definitely lost: 0 bytes in 0 blocks\r\n==32111==    indirectly lost: 0 bytes in 0 blocks\r\n==32111==      possibly lost: 0 bytes in 0 blocks\r\n==32111==    still reachable: 33 bytes in 1 blocks\r\n==32111==                       of which reachable via heuristic:\r\n==32111==                         stdstring          : 33 bytes in 1 blocks\r\n==32111==         suppressed: 0 bytes in 0 blocks\r\n==32111== \r\n==32111== For counts of detected and suppressed errors, rerun with: -v\r\n==32111== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\r\n```"
        },
        {
            "created_at": "2018-08-22T03:01:15.473Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1380?focusedCommentId=16588313) by Lukasz Bartnik (lbartnik):*\nThe first of these\u00a0warnings could be probably addressed by not calling exit(0) from the signal handler. My impression is that after a signal is caught and exit() is called, main() never returns, and thus destructors for its local objects are not called. Below is the valgrind warning in question.\r\n\r\n```java\n\r\n==1990== 33 bytes in 1 blocks are still reachable in loss record 1 of 2\r\n==1990== at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==1990== by 0x513088C: std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)\r\n==1990== by 0x5130C55: std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)\r\n==1990== by 0x5131321: std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)\r\n==1990== by 0x198A23: main (store.cc:937)\r\n```\r\n\r\nWith changes as in https://github.com/lbartnik/arrow/commit/089153d518c081d7b9c1b3fb839463bca9ac1a35 I can reduce warnings to\u00a0the one below. Looking at the code it's not clear if CreateObject() should be paired with a delete operation of if there is an internal pool/tracking mechanism.\r\n\r\n```Java\n\r\npyarrow/tests/test_plasma.py::TestPlasmaClient::test_put_and_get command:  valgrind --track-origins=yes --leak-check=full --show-leak-kinds=all --leak-check-heuristics=stdstring --error-exitcode=1 /io/arrow/python/pyarrow/plasma_store_server -s /tmp/test_plasma-k6wtcvi4/plasma.sock -m 100000000\r\n==575== Memcheck, a memory error detector\r\n==575== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==575== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\r\n==575== Command: /io/arrow/python/pyarrow/plasma_store_server -s /tmp/test_plasma-k6wtcvi4/plasma.sock -m 100000000\r\n==575== \r\nAllowing the Plasma store to use up to 0.1GB of memory.\r\nStarting object store with directory /dev/shm and huge page support disabled\r\nPASSED==575== \r\n==575== HEAP SUMMARY:\r\n==575==     in use at exit: 552 bytes in 1 blocks\r\n==575==   total heap usage: 178 allocs, 177 frees, 143,037 bytes allocated\r\n==575== \r\n==575== 552 bytes in 1 blocks are still reachable in loss record 1 of 1\r\n==575==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==575==    by 0x567F5F7: fdopen@@GLIBC_2.2.5 (iofdopen.c:122)\r\n==575==    by 0x1BD47F: create_buffer(long) (malloc.cc:105)\r\n==575==    by 0x1BFF17: fake_mmap (malloc.cc:135)\r\n==575==    by 0x1C077B: sys_alloc (dlmalloc.c:4155)\r\n==575==    by 0x1C077B: dlmalloc (dlmalloc.c:4680)\r\n==575==    by 0x1C2850: internal_memalign.constprop.98 (dlmalloc.c:4917)\r\n==575==    by 0x19391A: plasma::PlasmaStore::CreateObject(plasma::UniqueID const&, long, long, int, plasma::Client*, plasma::PlasmaObject*) (store.cc:178)\r\n==575==    by 0x197337: plasma::PlasmaStore::ProcessMessage(plasma::Client*) (store.cc:740)\r\n==575==    by 0x195E02: plasma::PlasmaStore::ConnectClient(int)::{lambda(int)#1}::operator()(int) const (store.cc:544)\r\n==575==    by 0x19927B: std::_Function_handler<void (int), plasma::PlasmaStore::ConnectClient(int)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&) (std_function.h:297)\r\n==575==    by 0x1B75FD: std::function<void (int)>::operator()(int) const (std_function.h:687)\r\n==575==    by 0x1B6F4E: plasma::EventLoop::FileEventCallback(aeEventLoop*, int, void*, int) (events.cc:28)\r\n==575== \r\n==575== LEAK SUMMARY:\r\n==575==    definitely lost: 0 bytes in 0 blocks\r\n==575==    indirectly lost: 0 bytes in 0 blocks\r\n==575==      possibly lost: 0 bytes in 0 blocks\r\n==575==    still reachable: 552 bytes in 1 blocks\r\n==575==         suppressed: 0 bytes in 0 blocks\r\n==575== \r\n==575== For counts of detected and suppressed errors, rerun with: -v\r\n==575== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\r\n```"
        },
        {
            "created_at": "2018-09-13T14:18:20.999Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1380?focusedCommentId=16613559) by Wes McKinney (wesm):*\nIssue resolved by pull request 2466\n<https://github.com/apache/arrow/pull/2466>"
        }
    ]
}