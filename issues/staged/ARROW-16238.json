{
    "issue": {
        "title": "[C++] Fix nullptr deference in ipc/reader.cc",
        "body": "***Note**: This issue was originally created as [ARROW-16238](https://issues.apache.org/jira/browse/ARROW-16238). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nMinGW GCC catches this\r\n```\n\r\n[20/278] Building CXX object src/arrow/CMakeFiles/arrow_shared.dir/Unity/unity_24_cxx.cxx.obj\r\nIn file included from C:/msys64/home/User/arrow/build/cpp/src/arrow/CMakeFiles/arrow_shared.dir/Unity/unity_24_cxx.cxx:3:\r\nC:/msys64/home/User/arrow/cpp/src/arrow/ipc/reader.cc: In member function 'virtual arrow::Result<std::function<arrow::Future<std::shared_ptr<arrow::RecordBatch> >()> > arrow::ipc::RecordBatchFileReaderImpl::GetRecordBatchGenerator(bool, const arrow::io::IOContext&, arrow::io::CacheOptions, arrow::internal::Executor*)':\r\nC:/msys64/home/User/arrow/cpp/src/arrow/ipc/reader.cc:1303:34: warning: 'this' pointer is null [-Wnonnull]\r\n\u00a01303 | \u00a0 \u00a0 \u00a0 return cached_source->Cache({{0, footer_offset_}});\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\r\nIn file included from C:/msys64/home/User/arrow/cpp/src/arrow/ipc/reader.h:28,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from C:/msys64/home/User/arrow/cpp/src/arrow/ipc/reader.cc:18,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from C:/msys64/home/User/arrow/build/cpp/src/arrow/CMakeFiles/arrow_shared.dir/Unity/unity_24_cxx.cxx:3:\r\nC:/msys64/home/User/arrow/cpp/src/arrow/io/caching.h:124:10: note: in a call to non-static member function 'arrow::Status arrow::io::internal::ReadRangeCache::Cache(std::vector<arrow::io::ReadRange>)'\r\n\u00a0 124 | \u00a0 Status Cache(std::vector<ReadRange> ranges);\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0^~~~~ \n```\r\n\r\nThis is pretty clearly wrong:\r\n\r\n```cpp\n\r\n    std::shared_ptr<io::internal::ReadRangeCache> cached_source;\r\n    if (coalesce && file_->supports_zero_copy()) {\r\n      if (!owned_file_) return Status::Invalid(\"Cannot coalesce without an owned file\");\r\n      // Since the user is asking for all fields then we can cache the entire\r\n      // file (up to the footer)\r\n      return cached_source->Cache({{0, footer_offset_}});\r\n    }\r\n    return WholeIpcFileRecordBatchGenerator(std::move(state), std::move(cached_source),\r\n                                            io_context, executor);\r\n```\r\n\r\nIt seems ARROW-14577 removed one too many lines",
        "created_at": "2022-04-19T16:11:01.000Z",
        "updated_at": "2022-04-28T11:51:20.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-04-23T08:13:15.000Z"
    },
    "comments": [
        {
            "created_at": "2022-04-20T07:51:03.865Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16238?focusedCommentId=17524787) by Antoine Pitrou (apitrou):*\nI take it this isn't covered by any existing test?"
        },
        {
            "created_at": "2022-04-20T12:19:12.168Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16238?focusedCommentId=17524952) by David Li (lidavidm):*\nIt doesn't seem so (I suppose because you wouldn't normally ask to coalesce a memory-mapped file or such)"
        },
        {
            "created_at": "2022-04-23T08:13:15.507Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16238?focusedCommentId=17526794) by Krisztian Szucs (kszucs):*\nIssue resolved by pull request 12937\n<https://github.com/apache/arrow/pull/12937>"
        }
    ]
}