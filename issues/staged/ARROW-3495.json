{
    "issue": {
        "title": "[Java] Optimize bit operations performance",
        "body": "***Note**: This issue was originally created as [ARROW-3495](https://issues.apache.org/jira/browse/ARROW-3495). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFrom `[~atrivedi]`'s benchmark finding:\r\n\r\n2) Materialize values from Validity and Value direct buffers instead of\r\ncalling getInt() function on the IntVector. This is implemented as a new\r\nUnsafe reader type (\r\n<https://github.com/animeshtrivedi/benchmarking-arrow/blob/master/src/main/java/com/github/animeshtrivedi/benchmark/ArrowReaderUnsafe.java#L31>\r\n)\r\n\r\n3) Optimize bitmap operation to check if a bit is set or not (\r\n<https://github.com/animeshtrivedi/benchmarking-arrow/blob/master/src/main/java/com/github/animeshtrivedi/benchmark/ArrowReaderUnsafe.java#L23>\r\n)",
        "created_at": "2018-10-11T15:44:22.000Z",
        "updated_at": "2022-07-12T14:04:16.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2018-10-12T08:45:07.017Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3495?focusedCommentId=16647667) by Animesh Trivedi (atrivedi):*\nThis one has 3 items that need to be worked separately\u00a0\r\n\r\n1) delete the optimized bitmap (for all null or all set case) routine in BitVectorHelper (<https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java#L179)>\u00a0- i am not sure what is the sense behind this optimization. As I wrote on the mailing list, at this point the validity buffer is already read from the storage, no need to spend more CPU time to generate an optimized bitmap.\u00a0\r\n\r\n\u00a0\r\n\r\n2) change the implementation of isSet function in (UnionVector.java ,\u00a0BaseFixedWidthVector.java ,\u00a0 BaseVariableWidthVector.java ,\u00a0FixedSizeListVector.java ,\u00a0ListVector.java ,\u00a0StructVector.java) to test for equality with zero. No need to count number of bits set in a Long as done here : <https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java#L797>\r\n\r\n\u00a0\r\n\r\n3) I need to think about the UnsafeReader type, and how it should be integrated.\u00a0\r\n\r\n\u00a0\r\n\r\nI can open a pull request for the first two items.\u00a0"
        },
        {
            "created_at": "2019-02-06T20:11:03.948Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3495?focusedCommentId=16762076) by Wes McKinney (wesm):*\nIs there still interest in this?"
        },
        {
            "created_at": "2019-02-06T21:51:13.140Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3495?focusedCommentId=16762174) by Animesh Trivedi (atrivedi):*\nHi `[~wesmckinn]`, thanks for catching up. I have been on an extended break since beginning of the year, but I am starting to catch up my pending items now. I will push the bitmap optimizations in coming weeks. Hope that is ok.\u00a0"
        },
        {
            "created_at": "2019-02-06T21:51:30.000Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3495?focusedCommentId=16762175) by Wes McKinney (wesm):*\nOK, sounds good!"
        },
        {
            "created_at": "2019-12-01T21:04:07.132Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3495?focusedCommentId=16985680) by Azim Afroozeh (azimafroozeh):*\nHi all,\r\n\r\nI'm opening the following pull request for this issue:\u00a0<https://github.com/apache/arrow/pull/5930>\r\n\r\nThis patch does the following changes:\r\n \\* moves two common function \"getNullCount\" and \"splitAndTransferValidityBuffer\" to the top-level BaseValueVector. This change requires moving \"validityBuffer\" to the BaseValueVector class (as recommended in this TODO:\u00a0<https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java#L89>)\r\n \\* optimize the implementation of loadValidityBuffer (in the BaseValueVector) to just pass the reference for the validity buffer instead of optimizing it\r\n \\* optimize for the common boundary condition when all variables are valid (as done in the C++ code:\u00a0<https://github.com/apache/arrow/blob/master/cpp/src/arrow/array.h#L290>)\r\n\r\nThe optimization delivers performance.\r\n\r\nTests: Read 50M integers from a single Int column (2GB).\r\n\r\nBefore the patch:\r\nBaseline: 7.64 Gb/sec\r\nWith the Holder API: 9.99 Gb/sec\r\n\r\nAfter the patch (with the bitmap condition checks)\r\nBaseline: 12.13 Gb/sec (+58.7% gains)\r\nWith the Holder API: 16.03 Gb/sec (+60.4% gains)"
        },
        {
            "created_at": "2022-07-12T14:04:16.242Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3495?focusedCommentId=17565495) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}