{
    "issue": {
        "title": "[CI] Build bundled dependencies in docker build step",
        "body": "***Note**: This issue was originally created as [ARROW-5914](https://issues.apache.org/jira/browse/ARROW-5914). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn the recently introduced ARROW-5803, some heavy dependencies (thrift, protobuf, flatbufers, grpc) are build at each invocation of docker-compose build (thus each travis test).\r\n\r\nWe should aim to build the third party dependencies in docker build phase instead, to exploit caching and docker-compose pull so that the CI step doesn't need to build said dependencies each time.",
        "created_at": "2019-07-11T19:12:13.000Z",
        "updated_at": "2020-06-12T02:10:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Continuous Integration",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-07-12T09:34:21.841Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5914?focusedCommentId=16883681) by Uwe Korn (uwe):*\n`[~fsaintjacques]` `[~kszucs]` `[~wesmckinn]` This is why we have used conda in these builds. I have the great fear that we rely more and on more on manual building of thirdparty dependencies in our build scripts which just adds more maintenance overhead. I was so frustrated with the manual scripts in the manylinux1 one case that I was considering in making a manylinux1 conda channel to build the dependencies. This would have greatly reduced my pain in the maintenance of the manylinux1 container.\r\n\r\nWe need to test against system dependencies but then we should do this as we were doing this previously in the nightlies."
        },
        {
            "created_at": "2019-07-12T13:07:03.203Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5914?focusedCommentId=16883790) by Wes McKinney (wesm):*\nYeah, so an alternative is that we use conda only for the dependencies that don't work from the system package manager. I guess that's about as good as building the dependency in the image"
        },
        {
            "created_at": "2019-07-12T13:42:51.226Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5914?focusedCommentId=16883823) by Uwe Korn (uwe):*\n> Yeah, so an alternative is that we use conda only for the dependencies that don't work from the system package manager. I guess that's about as good as building the dependency in the image\r\nNo, it is either all-from-conda or none, mixing is not working due to the different toolchains.\r\n \u00a0"
        },
        {
            "created_at": "2020-01-07T23:47:24.823Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5914?focusedCommentId=17010175) by Wes McKinney (wesm):*\n`[~fsaintjacques]` is this still an issue?"
        },
        {
            "created_at": "2020-01-14T09:38:51.393Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5914?focusedCommentId=17014966) by Antoine Pitrou (apitrou):*\nIdeally this would allow us to make GHA builds shorter. However, the problem is that it would make the docker images depend on the CMake files at time of push (you need to run CMake on Arrow to build the bundled dependencies...). When the CMake files later change, this could create subtle issues (because of cached CMake variables and other CMake quirks)."
        }
    ]
}