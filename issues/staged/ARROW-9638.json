{
    "issue": {
        "title": "[C++][Compute] Implement mode(most frequent number) kernel",
        "body": "***Note**: This issue was originally created as [ARROW-9638](https://issues.apache.org/jira/browse/ARROW-9638). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n",
        "created_at": "2020-08-04T02:12:01.000Z",
        "updated_at": "2020-08-13T12:46:46.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-08-11T15:45:18.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-04T09:01:51.140Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9638?focusedCommentId=17170664) by Joris Van den Bossche (jorisvandenbossche):*\nOne question might be what to do in case of\u00a0 \"multiple\" mode.\r\n\r\n\u00a0\r\n\r\nFor example, scipy returns only the smalles mode (<https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mode.html),> pandas always returns a list of elements (and thus returns all modes if there are multiple)"
        },
        {
            "created_at": "2020-08-04T09:25:11.318Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9638?focusedCommentId=17170679) by Yibo Cai (yibocai):*\nI'm not certain to return top mode or all modes sorted.\r\nI plan to return only the top mode. To return all modes looks similar to value_count() operation.\r\nThat said, I think the implementation should be similar. Even if only the top mode is required, we still need to count all elements internally. The difference is at finalizing time, non-trivial extra work is required to return all modes."
        },
        {
            "created_at": "2020-08-07T12:47:30.620Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9638?focusedCommentId=17173117) by Joris Van den Bossche (jorisvandenbossche):*\nTo be clear, my comment was specifically about when the top mode is ambiguous (eg in the set [1, 1, 2, 2, 3] both 1 and 2 are modes). So what do you see as the \"top\" mode in such a case? (the first occurring, the smallest/largest value, ..) "
        },
        {
            "created_at": "2020-08-07T20:43:55.420Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9638?focusedCommentId=17173464) by Wes McKinney (wesm):*\nIt might be worth thinking about generalizing to compute the \"nth_largest\". So the mode would be \"nth_largest(data, n=0)\""
        },
        {
            "created_at": "2020-08-08T06:17:59.568Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9638?focusedCommentId=17173590) by Yibo Cai (yibocai):*\n`[~jorisvandenbossche]` I think the common practice is to return the smallest value"
        },
        {
            "created_at": "2020-08-08T07:48:51.664Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9638?focusedCommentId=17173600) by Yibo Cai (yibocai):*\n`[~wesm]` Didn't find obvious way to compute nth_largest efficiently in both time and space. Guess we can start with simpler approach and impove it."
        },
        {
            "created_at": "2020-08-11T15:45:18.251Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9638?focusedCommentId=17175654) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 7920\n<https://github.com/apache/arrow/pull/7920>"
        }
    ]
}