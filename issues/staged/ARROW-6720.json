{
    "issue": {
        "title": "[JAVA][C++]Support Parquet Read and Write in Java",
        "body": "***Note**: This issue was originally created as [ARROW-6720](https://issues.apache.org/jira/browse/ARROW-6720). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe added a new java interface to support parquet read and write from hdfs or local file.\r\n\r\nThe purpose of this implementation is that when we loading and dumping parquet data in Java, we can only use rowBased put and get methods. Since arrow already has C++ implementation to load and dump parquet, so we wrapped those codes as Java APIs.\r\n\r\nAfter test, we noticed in our workload, performance improved more than 2x comparing with rowBased load and dump. So we want to contribute codes to arrow.\r\n\r\nsince this is a total independent change, there is no codes change to current arrow codes. We added two folders as listed:\u00a0\u00a0java/adapter/parquet and cpp/src/jni/parquet",
        "created_at": "2019-09-27T02:14:32.000Z",
        "updated_at": "2022-07-12T14:04:17.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-11-20T18:11:18.042Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6720?focusedCommentId=16978645) by Ben Kietzman (bkietz):*\nIssue resolved by pull request 5820\n<https://github.com/apache/arrow/pull/5820>"
        },
        {
            "created_at": "2019-11-21T06:46:49.991Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6720?focusedCommentId=16979022) by Micah Kornfield (emkornfield@gmail.com):*\nI don't think this has been fully resolved, we should probably make subtasks to record the progress towards getting this all checked in."
        },
        {
            "created_at": "2020-03-23T16:14:12.475Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6720?focusedCommentId=17064908) by Wes McKinney (wesm):*\nWhere do things stand on this project?"
        },
        {
            "created_at": "2020-07-10T16:03:39.728Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6720?focusedCommentId=17155572) by Wes McKinney (wesm):*\nI moved out of 1.0.0 due to lack of activity"
        },
        {
            "created_at": "2020-10-07T23:35:54.551Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6720?focusedCommentId=17209927) by Krisztian Szucs (kszucs):*\nIt would be nice to have a status update here. Until that I'm postponing to 3.0."
        },
        {
            "created_at": "2021-01-09T03:41:23.864Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6720?focusedCommentId=17261745) by Steve M. Kim (chairmank):*\nI think that this proposed feature interacts with\r\n \\* ARROW-7272\r\n \\* ARROW-7808\r\n\r\nOnce we have the ability to view the same Arrow buffers as a RecordBatch/Table across both Java and cpp, we just need to provide Java methods that invoke the Parquet reader and writer functionality in cpp."
        },
        {
            "created_at": "2021-06-04T08:24:11.244Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6720?focusedCommentId=17357165) by Hongze Zhang (zhztheplayer):*\nAdded issue links for Java Dataset read API and write API."
        },
        {
            "created_at": "2022-07-12T14:04:17.997Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6720?focusedCommentId=17565516) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}