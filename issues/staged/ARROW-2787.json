{
    "issue": {
        "title": "[Python] Memory Issue passing table from python to c++ via cython",
        "body": "***Note**: This issue was originally created as [ARROW-2787](https://issues.apache.org/jira/browse/ARROW-2787). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI wanted to create a simple example of reading a table in Python and pass it to C+, but I'm doing something wrong or there is a memory issue. When the table gets to C+ and I print out column names it also prints out a lot of junk and what looks like pydocs. Let me know if you need any more info. Thanks!\r\n\r\n**demo.py**\r\n```python\n\r\nimport numpy\r\nfrom psy.automl import cyth\r\nimport pandas as pd\r\nfrom absl import app\r\n\r\ndef main(argv):\r\n  sup = pd.DataFrame({\r\n  'int': [1, 2],\r\n  'str': ['a', 'b']\r\n  })\r\n  table = pa.Table.from_pandas(sup)\r\n  cyth.c_t(table)\r\n```\r\n\r\n**cyth.pyx**\r\n```python\n\r\nimport pandas as pd\r\nimport pyarrow as pa\r\nfrom pyarrow.lib cimport *\r\n\r\ncdef extern from \"cyth.h\" namespace \"psy\":\r\n void t(shared_ptr[CTable])\r\n\r\ndef c_t(obj):\r\n# These print work\r\n# for i in range(obj.num_columns):\r\n# print(obj.column(i).name\r\n  cdef shared_ptr[CTable] tbl = pyarrow_unwrap_table(obj)\r\n  t(tbl)\r\n```\r\n\r\n **cyth.h**\r\n```c++\n\r\n#include <iostream>\r\n#include <string>\r\n#include \"arrow/api.h\"\r\n#include \"arrow/python/api.h\"\r\n#include \"Python.h\"\r\n\r\nnamespace psy {\r\n\r\nvoid t(std::shared_ptr<arrow::Table> pytable) {\r\n\r\n// This works\r\n  std::cout << \"NUM\" << pytable->num_columns();\r\n\r\n// This prints a lot of garbage\r\n  for(int i = 0; i < pytable->num_columns(); i++) {\r\n  std::cout << pytable->column(i)->name();\r\n  }\r\n }\r\n}\r\n```\r\n\u00a0\r\n",
        "created_at": "2018-07-03T16:25:04.000Z",
        "updated_at": "2018-07-17T14:07:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Documentation",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-07-17T13:56:01.000Z"
    },
    "comments": [
        {
            "created_at": "2018-07-17T10:17:52.169Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2787?focusedCommentId=16546323) by Antoine Pitrou (apitrou):*\n(fixed code snippet formatting)"
        },
        {
            "created_at": "2018-07-17T11:37:10.289Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2787?focusedCommentId=16546459) by Antoine Pitrou (apitrou):*\nI can reproduce with clang 6.0.1 (though not with gcc 4.9)."
        },
        {
            "created_at": "2018-07-17T12:46:43.532Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2787?focusedCommentId=16546536) by Antoine Pitrou (apitrou):*\nOk, I see, this is because we build the Linux binaries with `-D_GLIBCXX_USE_CXX11_ABI=0`, so you must pass that flag when building your Cython extension as well. It kind of sucks that it crashes weirdly instead of failing to compile if you don't pass it, though."
        },
        {
            "created_at": "2018-07-17T13:56:01.915Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2787?focusedCommentId=16546638) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 2276\n<https://github.com/apache/arrow/pull/2276>"
        }
    ]
}