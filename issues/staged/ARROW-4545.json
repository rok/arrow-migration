{
    "issue": {
        "title": "[C#] Extend Append/AppendRange in BinaryArray to support building rows",
        "body": "***Note**: This issue was originally created as [ARROW-4545](https://issues.apache.org/jira/browse/ARROW-4545). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is a\u00a0proposal to extend BinaryArray to\u00a0provide the ability to call Append/AppendRange to grow list elements when building arrays, and to expose\u00a0values in ArrowBuffer.Builder<T> through a property to facilitate algorithms that require introspecting the buffer data (sorting, filtering) when building an array.\r\n\r\n**Example:**\r\n```java\n\r\nvar builder = new BinaryArray.Builder()\r\n \u00a0 \u00a0 .Append(10, false) \u00a0 \u00a0 \r\n     .Append(20, false)\r\n     .Mark();\r\nbuilder.Append(builder.Values[0], true);\r\nvar array = builder.Build();\r\n\r\n// General idea:\r\n//\r\n// 1. Append byte (10) to current element (0)\r\n// 2. Append byte (20) to current element (0)\r\n// 3. Mark end of the row \r\n// 4. Append byte (10) to current element (1)\r\n\r\n// Constructs a binary array with 2 elements:\r\n//\r\n// [0] 10, 20\r\n// [1] 10\n```\r\n\u00a0\r\n\r\nThis proposed change would\u00a0add the concept of \"current element\" to the builder,\u00a0which in the specification are separated by\u00a0recording the value offset. Append(true) appends one or more bytes to the current element and then marks the element as completed. Append(false) appends one or more bytes to the current element; Mark is required to signal to the builder that the current element is complete.\r\n## **Alternative Concept**\r\n\r\nAn alternative concept could be to add a\u00a0new overload for Append that\u00a0accepts another builder type\u00a0with the purpose of building individual list elements. This would keep\u00a0symmetry with the\u00a0primitive array types in that the growth functions always append a single element to the array (where an element is an entire list, for list arrays). Essentially the additional builder type's purpose is to build a\u00a0list of a specific primitive.\u00a0\r\n\r\n**Example:**\r\n```java\n\r\nvar builder = new BinaryArray.Builder()\r\n    .Append(e => e.Append(10).Append(20))\r\n    .Append(e => e.Append(30))\r\n    .Build();\r\n\r\n// Constructs a binary array with 2 elements:\r\n//\r\n// [0] 10, 20\r\n// [1] 30\n```",
        "created_at": "2019-02-12T16:58:36.000Z",
        "updated_at": "2019-06-24T01:46:46.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C#",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-02-12T19:34:40.501Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4545?focusedCommentId=16766362) by Chris Hutchinson (cshutchinson):*\n`[~eerhardt]` \u00a0Can you\u00a0offer some advice on this?"
        },
        {
            "created_at": "2019-03-14T23:20:24.126Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4545?focusedCommentId=16793159) by Wes McKinney (wesm):*\nMoved this to 0.14, but feel free to submit a patch sooner if you like"
        }
    ]
}