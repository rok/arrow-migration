{
    "issue": {
        "title": "[JS] IterableArrayLike should support map",
        "body": "***Note**: This issue was originally created as [ARROW-9982](https://issues.apache.org/jira/browse/ARROW-9982). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n`table.toArray()` returns an `IterableArrayLike` and I would like to be able to `map` a function to it. ",
        "created_at": "2020-09-12T19:49:06.000Z",
        "updated_at": "2020-09-26T20:00:37.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-09-26T20:00:37.000Z"
    },
    "comments": [
        {
            "created_at": "2020-09-19T20:02:36.481Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9982?focusedCommentId=17198830) by Paul Taylor (paul.e.taylor):*\nWhy not use [IxJS](https://github.com/ReactiveX/IxJS#iterable) or another similar library?\r\n\r\n\r\n```javascript\n\r\nimport { from } from 'ix/iterable';\r\nimport { map } from 'ix/iterable/operators';\r\nfrom(arrowVec)\r\n  .pipe(map((x) => x + 1))\r\n  .forEach(console.log.bind(console))\r\n```\r\n"
        },
        {
            "created_at": "2020-09-20T03:13:52.210Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9982?focusedCommentId=17198870) by Dominik Moritz (domoritz):*\nI don't think using an Arrow table for common operations should require another library. Maybe there is a better way to iterate over the data that I missed. "
        },
        {
            "created_at": "2020-09-26T19:42:04.635Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9982?focusedCommentId=17202664) by Paul Taylor (paul.e.taylor):*\n```javascript\n\u00af\\_(\u30c4)_/\u00af\n```\r\n\r\nWe're getting complaints about how large and un-tree-shakeable the library is already. I don't see a reason to add more unrelated functionality, especially when it already exists in other tree-shakeable libraries like Ix.\r\n\r\nOtherwise, you can do `for...of` over any iterable type already, or have your own map implementation (no need to use Ix for something so simple)\r\n\r\n\r\n```javascript\n\r\nfunction* map(source, project) { for (let x of source) yield project(x);  }\r\n\r\nfor (let value of map(vector, (x) => x + 1)) {\r\n  console.log(value);\r\n}\r\n```\r\n"
        },
        {
            "created_at": "2020-09-26T20:00:23.608Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9982?focusedCommentId=17202667) by Dominik Moritz (domoritz):*\nI'm convinced. Thanks for the explanation. I'll close this issue. "
        }
    ]
}