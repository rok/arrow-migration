{
    "issue": {
        "title": "[Python] Segmentation fault when converting empty table to pandas with categoricals",
        "body": "***Note**: This issue was originally created as [ARROW-3586](https://issues.apache.org/jira/browse/ARROW-3586). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```java\n\r\nimport pyarrow as pa\r\n\r\n\r\ntable = pa.Table.from_arrays(arrays=[pa.array([], type=pa.int32())], names=['col'])\r\ntable.to_pandas(categories=['col'])\n```\r\nThis produces a segmentation fault for certain types (e.g, int\\{32,64}) while it works for others (e.g. string, binary).",
        "created_at": "2018-10-22T13:52:04.000Z",
        "updated_at": "2019-06-03T12:30:24.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-12-06T15:07:24.000Z"
    },
    "comments": [
        {
            "created_at": "2018-12-03T19:48:19.382Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3586?focusedCommentId=16707703) by Francois Saint-Jacques (fsaintjacques):*\nIs this possible this was solved in the master branch? I can't seem to reproduce locally.\r\n\r\n\u00a0\r\n```java\n\r\nfor t in [pa.int32(), pa.int64(), pa.float32(), pa.float64()]:\r\n \u00a0 print(pa.Table.from_arrays(arrays=[pa.array([], type=t)], names=['col']).to_pandas(categories=['col']))\u00a0\r\n Empty DataFrame\r\n Columns: [col]\r\n Index: []\r\n Empty DataFrame\r\n Columns: [col]\r\n Index: []\r\n Empty DataFrame\r\n Columns: [col]\r\n Index: []\r\n Empty DataFrame\r\n Columns: [col]\r\n Index: []\r\nfor t in [pa.int32(), pa.int64(), pa.float32(), pa.float64()]:\r\n \u00a0print(pa.Table.from_arrays(arrays=[pa.array([1,2,3], type=t)], names=['col']).to_pandas(categories=['col']))\r\n col\r\n 0 1\r\n 1 2\r\n 2 3\r\n col\r\n 0 1\r\n 1 2\r\n 2 3\r\n col\r\n 0 1.0\r\n 1 2.0\r\n 2 3.0\r\n col\r\n 0 1.0\r\n 1 2.0\r\n 2 3.0\r\n```\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2018-12-03T19:49:56.366Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3586?focusedCommentId=16707706) by Francois Saint-Jacques (fsaintjacques):*\nNote that I was using python3, not sure if this would have any impact."
        },
        {
            "created_at": "2018-12-03T21:11:13.122Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3586?focusedCommentId=16707795) by Wes McKinney (wesm):*\nYou can pip install the 0.11 or 0.11.1 wheel and check, `pip install pyarrow==0.11.0`"
        },
        {
            "created_at": "2018-12-03T21:11:30.740Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3586?focusedCommentId=16707796) by Wes McKinney (wesm):*\nMight want to do that in a different conda environment"
        },
        {
            "created_at": "2018-12-06T13:15:55.774Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3586?focusedCommentId=16711424) by Francois Saint-Jacques (fsaintjacques):*\nSegfault was caused by a null deref in <https://github.com/apache/arrow/blob/apache-arrow-0.11.1/cpp/src/arrow/compute/kernels/util-internal.h#L35>\u00a0. This is fixed in master/0.12.0 in <https://github.com/apache/arrow/blob/master/cpp/src/arrow/array.h#L174>\u00a0.\u00a0"
        },
        {
            "created_at": "2018-12-06T15:07:24.043Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3586?focusedCommentId=16711567) by Wes McKinney (wesm):*\nIssue resolved by pull request 3116\n<https://github.com/apache/arrow/pull/3116>"
        }
    ]
}