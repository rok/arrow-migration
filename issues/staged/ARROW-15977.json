{
    "issue": {
        "title": "[Python] Can't ignore the overflow error.",
        "body": "***Note**: This issue was originally created as [ARROW-15977](https://issues.apache.org/jira/browse/ARROW-15977). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI know that the argument safe=False in pa.Table.from_pandas ignores overflow errors, but it does not ignore overflow in list or in struct.\r\n\r\nIt works.\r\n```java\n\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\nimport pandas as pd\r\nimport json\r\ntest_json = [\r\n\u00a0 \u00a0 {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"taro\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 3046682132,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"points\": [2, 2, 2],\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"groups\": {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"group_name\": \"baseball\",\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"group_id\": 1234\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 },\r\n\u00a0 \u00a0 {\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"taro\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 1234,\u00a0\r\n\u00a0 \u00a0 }\r\n]\r\nschema = pa.schema([\r\n\u00a0 \u00a0 pa.field('name', pa.string()),\r\n\u00a0 \u00a0 pa.field('id', pa.int32()),\r\n\u00a0 \u00a0 pa.field(\"points\", pa.list_(pa.int32())),\r\n\u00a0 \u00a0 pa.field('groups', pa.struct([\r\n\u00a0 \u00a0 \u00a0 \u00a0 pa.field(\"group_name\", pa.string()),\r\n\u00a0 \u00a0 \u00a0 \u00a0 pa.field(\"group_id\", pa.int32()),\r\n\u00a0 \u00a0 ])),\r\n])\r\nwriter = pq.ParquetWriter('test_schema.parquet', schema=schema)\r\ndf = pd.DataFrame(test_json)\r\ntable = pa.Table.from_pandas(df, schema=schema, safe=False)\r\nwriter.write_table(table)\r\nwriter.close()table = pq.read_table(\"test_schema.parquet\")\r\nprint(table) \n```\r\n```java\n\r\nname: [[\"taro\",\"taro\"]] id: [[-1248285164,1234]] points: [[[2,2,2],null]] groups: [ \u2013 is_valid: [ true, false ] \u2013 child 0 type: string [ \"baseball\", null ] \u2013 child 1 type: int32 [ 1234, null ]]\r\n```\r\nHowever, the following two do not work.\r\n\r\n\u00a0\r\n```java\n\r\ntest_json = [\r\n\u00a0 \u00a0 {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"taro\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 2,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"points\": [2, 3046682132, 2],\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"groups\": {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"group_name\": \"baseball\",\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"group_id\": 1234\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 },\r\n\u00a0 \u00a0 {\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"taro\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 1234,\u00a0\r\n\u00a0 \u00a0 }\r\n]\n```\r\n```java\n\r\nTraceback (most recent call last):\r\nFile \"test_pyarrow.py\", line 35, in <module>\r\ntable = pa.Table.from_pandas(df, schema=schema, safe=False)\r\nFile \"pyarrow/table.pxi\", line 1782, in pyarrow.lib.Table.from_pandas\r\nFile \"/home/s0108403058/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pyarrow/pandas_compat.py\", line 594, in dataframe_to_arrays\r\narrays = [convert_column(c, f)\r\nFile \"/home/s0108403058/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pyarrow/pandas_compat.py\", line 594, in <listcomp>\r\narrays = [convert_column(c, f)\r\nFile \"/home/s0108403058/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pyarrow/pandas_compat.py\", line 581, in convert_column\r\nraise e\r\nFile \"/home/s0108403058/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pyarrow/pandas_compat.py\", line 575, in convert_column\r\nresult = pa.array(col, type=type_, from_pandas=True, safe=safe)\r\nFile \"pyarrow/array.pxi\", line 312, in pyarrow.lib.array\r\nFile \"pyarrow/array.pxi\", line 83, in pyarrow.lib._ndarray_to_array\r\nFile \"pyarrow/error.pxi\", line 99, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowInvalid: ('Value 3046682132 too large to fit in C integer type', 'Conversion failed for column points with type object') \n```\r\n```java\n\r\ntest_json = [\r\n\u00a0 \u00a0 {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"taro\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 2,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"points\": [2, 2, 2],\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"groups\": {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"group_name\": \"baseball\",\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"group_id\": 3046682132\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 },\r\n\u00a0 \u00a0 {\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"taro\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 1234,\u00a0\r\n\u00a0 \u00a0 }\r\n] \n```\r\n```java\n\r\nTraceback (most recent call last):\r\nFile \"test_pyarrow.py\", line 35, in <module>\r\ntable = pa.Table.from_pandas(df, schema=schema, safe=False)\r\nFile \"pyarrow/table.pxi\", line 1782, in pyarrow.lib.Table.from_pandas\r\nFile \"/home/s0108403058/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pyarrow/pandas_compat.py\", line 594, in dataframe_to_arrays\r\narrays = [convert_column(c, f)\r\nFile \"/home/s0108403058/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pyarrow/pandas_compat.py\", line 594, in <listcomp>\r\narrays = [convert_column(c, f)\r\nFile \"/home/s0108403058/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pyarrow/pandas_compat.py\", line 581, in convert_column\r\nraise e\r\nFile \"/home/s0108403058/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pyarrow/pandas_compat.py\", line 575, in convert_column\r\nresult = pa.array(col, type=type_, from_pandas=True, safe=safe)\r\nFile \"pyarrow/array.pxi\", line 312, in pyarrow.lib.array\r\nFile \"pyarrow/array.pxi\", line 83, in pyarrow.lib._ndarray_to_array\r\nFile \"pyarrow/error.pxi\", line 99, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowInvalid: ('Value 3046682132 too large to fit in C integer type', 'Conversion failed for column groups with type object') \n```\r\nCould you please fix this bug?\r\n\r\npyarrow==7.0.0",
        "created_at": "2022-03-19T08:26:16.000Z",
        "updated_at": "2022-06-30T11:25:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-03-21T10:03:10.916Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15977?focusedCommentId=17509736) by Alessandro Molina (amol-):*\nI think that the problem might be that we are not propagating the conversion options. At least for structs that seems to be happening here: <https://github.com/apache/arrow/blob/06d0e650080a262146cbe5cdba2598390625ed1f/cpp/src/arrow/python/numpy_to_arrow.cc#L767-L768> the `cast_options` argument is not provided ( <https://github.com/apache/arrow/blob/06d0e650080a262146cbe5cdba2598390625ed1f/cpp/src/arrow/python/numpy_to_arrow.cc#L183-L185> )\r\n\r\n\u00a0\r\n\r\nI'll need to investigate more were the ListType behaviour is coming from instead as that doesn't seem to be visitable by the `NumPyConverter`"
        },
        {
            "created_at": "2022-06-30T11:25:07.147Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15977?focusedCommentId=17560993) by Ra\u00fal Cumplido (raulcd):*\nI have tried to investigate the issue but I'll need a lot of time to understand our numpy_to_arrow.cc workflow. I am just adding a small diff here with some minor unit tests to reproduce the issue in case it helps someone:\r\n```java\n\r\ndiff --git a/python/pyarrow/tests/test_pandas.py b/python/pyarrow/tests/test_pandas.py\r\nindex 215bf2f..26108f5 100644\r\n--- a/python/pyarrow/tests/test_pandas.py\r\n+++ b/python/pyarrow/tests/test_pandas.py\r\n@@ -697,6 +697,29 @@ class TestConvertPrimitiveTypes:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0assert table[0].to_pylist() == [1, 2, None]\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0tm.assert_frame_equal(df, table.to_pandas())\r\n\u00a0\r\n+ \u00a0 \u00a0def test_int_overflow(self):\r\n+ \u00a0 \u00a0 \u00a0 \u00a0# ARROW-15977\r\n+ \u00a0 \u00a0 \u00a0 \u00a0df = pd.DataFrame([{\"a\": 3046682132}])\r\n+ \u00a0 \u00a0 \u00a0 \u00a0schema = pa.schema([pa.field(\"a\", pa.int32(), nullable=True)])\r\n+ \u00a0 \u00a0 \u00a0 \u00a0table = pa.Table.from_pandas(df, schema=schema, safe=False)\r\n+ \u00a0 \u00a0 \u00a0 \u00a0assert table[0].to_pylist() == [-1248285164]\r\n+\r\n+ \u00a0 \u00a0def test_list_int_overflow(self):\r\n+ \u00a0 \u00a0 \u00a0 \u00a0# ARROW-15977\r\n+ \u00a0 \u00a0 \u00a0 \u00a0df = pd.DataFrame([{\"a\": [1, 3046682132, 0]}])\r\n+ \u00a0 \u00a0 \u00a0 \u00a0schema = pa.schema([pa.field(\"a\", pa.list_(pa.int32()), nullable=True)])\r\n+ \u00a0 \u00a0 \u00a0 \u00a0table = pa.Table.from_pandas(df, schema=schema, safe=False)\r\n+ \u00a0 \u00a0 \u00a0 \u00a0# TODO Fix assert\r\n+ \u00a0 \u00a0 \u00a0 \u00a0assert table[0].to_pylist() == [-1248285164]\r\n+\r\n+ \u00a0 \u00a0def test_struct_int_overflow(self):\r\n+ \u00a0 \u00a0 \u00a0 \u00a0# ARROW-15977\r\n+ \u00a0 \u00a0 \u00a0 \u00a0df = pd.DataFrame([{\"a\": {\"b\": 3046682132}}])\r\n+ \u00a0 \u00a0 \u00a0 \u00a0schema = pa.schema([pa.field(\"a\", pa.struct([pa.field(\"b\", pa.int32())]), nullable=True)])\r\n+ \u00a0 \u00a0 \u00a0 \u00a0table = pa.Table.from_pandas(df, schema=schema, safe=False)\r\n+ \u00a0 \u00a0 \u00a0 \u00a0# TODO Fix assert\r\n+ \u00a0 \u00a0 \u00a0 \u00a0assert table[0].to_pylist() == [-1248285164]\r\n+\r\n```"
        }
    ]
}