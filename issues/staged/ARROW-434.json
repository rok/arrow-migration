{
    "issue": {
        "title": "Segfaults and encoding issues in Python Parquet reads",
        "body": "***Note**: This issue was originally created as [ARROW-434](https://issues.apache.org/jira/browse/ARROW-434). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI've conda installed pyarrow and am trying to read data from the parquet-compatibility project.  I haven't explicitly built parquet-cpp or anything and may or may not have old versions lying around, so please take this issue with some salt:\n\n```python\nIn [1]: import pyarrow.parquet\n\nIn [2]: t = pyarrow.parquet.read_table('nation.plain.parquet')\n---------------------------------------------------------------------------\nArrowException                            Traceback (most recent call last)\n<ipython-input-2-5d966681a384> in <module>()\n----> 1 t = pyarrow.parquet.read_table('nation.plain.parquet')\n\n/home/mrocklin/Software/anaconda/lib/python3.5/site-packages/pyarrow/parquet.pyx in pyarrow.parquet.read_table (/feedstock_root/build_artefacts/work/arrow-79344b335849c2eb43954b0751018051814019d6/python/build/temp.linux-x86_64-3.5/parquet.cxx:2783)()\n\n/home/mrocklin/Software/anaconda/lib/python3.5/site-packages/pyarrow/parquet.pyx in pyarrow.parquet.ParquetReader.read_all (/feedstock_root/build_artefacts/work/arrow-79344b335849c2eb43954b0751018051814019d6/python/build/temp.linux-x86_64-3.5/parquet.cxx:2200)()\n\n/home/mrocklin/Software/anaconda/lib/python3.5/site-packages/pyarrow/error.pyx in pyarrow.error.check_status (/feedstock_root/build_artefacts/work/arrow-79344b335849c2eb43954b0751018051814019d6/python/build/temp.linux-x86_64-3.5/error.cxx:1185)()\n\nArrowException: NotImplemented: list<: uint8>\n```\n\nAdditionally I tried to read data from a Python file-like object pointing to data on S3.  Let me know if you'd prefer a separate issue.\n\n```python\nIn [1]: import s3fs\n\nIn [2]: fs = s3fs.S3FileSystem()\n\nIn [3]: f = fs.open('dask-data/nyc-taxi/2015/parquet/part.0.parquet')\n\nIn [4]: f.read(100)\nOut[4]: b'PAR1\\x15\\x00\\x15\\x90\\xc4\\xa2\\x12\\x15\\x90\\xc4\\xa2\\x12,\\x15\\xc2\\xa8\\xa4\\x02\\x15\\x00\\x15\\x06\\x15\\x08\\x00\\x00\\x00\\x80\\xbf\\xe7\\x8b\\x0b\\x05\\x00\\x00\\x80\\xbf\\xe7\\x8b\\x0b\\x05\\x00\\x00\\x80\\xbf\\xe7\\x8b\\x0b\\x05\\x00@\\xc2\\xce\\xe7\\x8b\\x0b\\x05\\x00\\xc0F\\xed\\xe7\\x8b\\x0b\\x05\\x00\\xc0F\\xed\\xe7\\x8b\\x0b\\x05\\x00\\x00\\x89\\xfc\\xe7\\x8b\\x0b\\x05\\x00@\\xcb\\x0b\\xe8\\x8b\\x0b\\x05\\x00\\x80\\r\\x1b\\xe8\\x8b\\x0b'\n\nIn [5]: import pyarrow.parquet\n\nIn [6]: t = pyarrow.parquet.read_table(f)\nSegmentation fault (core dumped)\n```\n\nHere is a more reproducible version:\n\n```python\nIn [1]: with open('nation.plain.parquet', 'rb') as f:\n   ...:     data = f.read()\n   ...:     \n\nIn [2]: from io import BytesIO\n\nIn [3]: f = BytesIO(data)\n\nIn [4]: f.seek(0)\nOut[4]: 0\n\nIn [5]: import pyarrow.parquet\n\nIn [6]: t = pyarrow.parquet.read_table(f)\nSegmentation fault (core dumped)\n```\n\nI was however pleased with round-trip functionality within this project, which was very pleasant.",
        "created_at": "2016-12-20T15:20:40.000Z",
        "updated_at": "2017-02-13T16:34:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2016-12-20T19:09:45.000Z"
    },
    "comments": [
        {
            "created_at": "2016-12-20T15:31:21.742Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15764461) by Wes McKinney (wesm):*\nCan you give me access to the data in the S3 bucket?"
        },
        {
            "created_at": "2016-12-20T15:49:16.485Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15764498) by Wes McKinney (wesm):*\nThe last two errors are probably the same bug, so I should be able to figure it out without the S3 data. Will report back"
        },
        {
            "created_at": "2016-12-20T16:17:45.362Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15764554) by Wes McKinney (wesm):*\nFound the problem causing the segfault, patch forthcoming. `[~xhochy]` is going to look into PARQUET-812"
        },
        {
            "created_at": "2016-12-20T16:34:25.446Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15764599) by Wes McKinney (wesm):*\nPR: https://github.com/apache/arrow/pull/247\n\nWhen PARQUET-812 is in, I'll update the conda-forge artifacts so you can verify the use case on your environment"
        },
        {
            "created_at": "2016-12-20T19:09:45.728Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15764984) by Wes McKinney (wesm):*\nIssue resolved by pull request 247\n<https://github.com/apache/arrow/pull/247>"
        },
        {
            "created_at": "2016-12-21T01:18:26.694Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15765767) by Wes McKinney (wesm):*\nWe hadn't yet dealt with binary (or non-UTF8 string) data, so there were a couple things to do around there. ARROW-374 (https://github.com/apache/arrow/pull/249) and PARQUET-812 (https://github.com/apache/parquet-cpp/pull/206) are in code review, so it will take a day or so for updated packages to hit conda-forge, but in any case I have:\n\n```Java\nIn [5]: data = open('/home/wesm/Downloads/nation.impala.parquet', 'rb').read()\n\nIn [6]: import io\n\nIn [7]: buf = io.BytesIO(data)\n\nIn [8]: import pyarrow.parquet as pq\n\nIn [9]: table = pq.read_table(buf)\n\nIn [10]: table.schema\nOut[10]: \nn_nationkey: int32\nn_name: binary\nn_regionkey: int32\nn_comment: binary\n\nIn [11]: table.to_pandas()\nOut[11]: \n    n_nationkey          n_name  n_regionkey  \\\n0             0         ALGERIA            0   \n1             1       ARGENTINA            1   \n2             2          BRAZIL            1   \n3             3          CANADA            1   \n4             4           EGYPT            4   \n5             5        ETHIOPIA            0   \n6             6          FRANCE            3   \n7             7         GERMANY            3   \n8             8           INDIA            2   \n9             9       INDONESIA            2   \n10           10            IRAN            4   \n11           11            IRAQ            4   \n12           12           JAPAN            2   \n13           13          JORDAN            4   \n14           14           KENYA            0   \n15           15         MOROCCO            0   \n16           16      MOZAMBIQUE            0   \n17           17            PERU            1   \n18           18           CHINA            2   \n19           19         ROMANIA            3   \n20           20    SAUDI ARABIA            4   \n21           21         VIETNAM            2   \n22           22          RUSSIA            3   \n23           23  UNITED KINGDOM            3   \n24           24   UNITED STATES            1   \n\n                                            n_comment  \n0    haggle. carefully final deposits detect slyly...  \n1   al foxes promise slyly according to the regula...  \n2   y alongside of the pending deposits. carefully...  \n3   eas hang ironic, silent packages. slyly regula...  \n4   y above the carefully unusual theodolites. fin...  \n5                     ven packages wake quickly. regu  \n6              refully final requests. regular, ironi  \n7   l platelets. regular accounts x-ray: unusual, ...  \n8   ss excuses cajole slyly across the packages. d...  \n9    slyly express asymptotes. regular deposits ha...  \n10  efully alongside of the slyly final dependenci...  \n11  nic deposits boost atop the quickly final requ...  \n12               ously. final, express gifts cajole a  \n13  ic deposits are blithely about the carefully r...  \n14   pending excuses haggle furiously deposits. pe...  \n15  rns. blithely bold courts among the closely re...  \n16      s. ironic, unusual asymptotes wake blithely r  \n17  platelets. blithely pending dependencies use f...  \n18  c dependencies. furiously express notornis sle...  \n19  ular asymptotes are about the furious multipli...  \n20  ts. silent requests haggle. closely express pa...  \n21     hely enticingly express accounts. even, final   \n22   requests against the platelets use never acco...  \n23  eans boost carefully special requests. account...  \n24  y final packages. slow foxes cajole quickly. q... \n```"
        },
        {
            "created_at": "2016-12-22T14:08:02.068Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15770120) by Wes McKinney (wesm):*\nartifacts are updated in conda-forge"
        },
        {
            "created_at": "2016-12-22T15:09:50.711Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15770242) by Matthew Rocklin (mrocklin):*\nCool, verified that it works on my end.  The taxi data on s3fs is still failing with an encoding error.  I've been having difficulty managing permissions on S3 to make this publicly available (just ignorance on my part).  In the mean time, here's the status of the files in the \"parquet compatibility project\"\n\n```Java\nIn [1]: import pyarrow.parquet\n\nIn [2]: from glob import glob\n\nIn [3]: filenames = sorted(glob('*.parquet'))\n\nIn [4]: filenames\nOut[4]: \n['customer.impala.parquet',\n 'foo.parquet',\n 'gzip-nation.impala.parquet',\n 'nation.dict.parquet',\n 'nation.impala.parquet',\n 'nation.plain.parquet',\n 'snappy-nation.impala.parquet',\n 'test-converted-type-null.parquet',\n 'test-null-dictionary.parquet',\n 'test-null.parquet',\n 'test.parquet']\n\nIn [5]: for fn in filenames:\n   ...:     try:\n   ...:         t = pyarrow.parquet.read_table(fn)\n   ...:     except Exception as e:\n   ...:         print('Failed on', fn, e)\n   ...:     else:\n   ...:         print(\"Succeeded on\", fn)\n   ...:         \n   ...:     \nSucceeded on customer.impala.parquet\nSucceeded on foo.parquet\nSucceeded on gzip-nation.impala.parquet\nFailed on nation.dict.parquet IOError: Unexpected end of stream.\nSucceeded on nation.impala.parquet\nSucceeded on nation.plain.parquet\nSucceeded on snappy-nation.impala.parquet\nSucceeded on test-converted-type-null.parquet\nSucceeded on test-null-dictionary.parquet\nSucceeded on test-null.parquet\nSucceeded on test.parquet\n\nIn [6]: pyarrow.parquet.read_table('nation.dict.parquet')\n---------------------------------------------------------------------------\nArrowException                            Traceback (most recent call last)\n<ipython-input-6-5c2e833b21a9> in <module>()\n----> 1 pyarrow.parquet.read_table('nation.dict.parquet')\n\n/home/mrocklin/Software/anaconda/envs/arrow-test/lib/python3.5/site-packages/pyarrow/parquet.pyx in pyarrow.parquet.read_table (/feedstock_root/build_artefacts/work/arrow-268ffbeffb1cd0617e52d381d500a2d10f61124c/python/build/temp.linux-x86_64-3.5/parquet.cxx:2907)()\n\n/home/mrocklin/Software/anaconda/envs/arrow-test/lib/python3.5/site-packages/pyarrow/parquet.pyx in pyarrow.parquet.ParquetReader.read_all (/feedstock_root/build_artefacts/work/arrow-268ffbeffb1cd0617e52d381d500a2d10f61124c/python/build/temp.linux-x86_64-3.5/parquet.cxx:2275)()\n\n/home/mrocklin/Software/anaconda/envs/arrow-test/lib/python3.5/site-packages/pyarrow/error.pyx in pyarrow.error.check_status (/feedstock_root/build_artefacts/work/arrow-268ffbeffb1cd0617e52d381d500a2d10f61124c/python/build/temp.linux-x86_64-3.5/error.cxx:1197)()\n\nArrowException: IOError: Unexpected end of stream.\n```"
        },
        {
            "created_at": "2016-12-22T15:28:16.367Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15770300) by Wes McKinney (wesm):*\nI will look into the taxi data issue if you can get me access to the file (Dropbox/Google Drive is fine too to share). \n\nWhere did \"nation.dict.parquet\" come from originally? I see it in jcrobak's github repo, but I don't see it in github.com/parquet/parquet-compatibility. "
        },
        {
            "created_at": "2016-12-22T21:40:07.345Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-434?focusedCommentId=15771159) by Wes McKinney (wesm):*\nI reported the decoding issue in PARQUET-816"
        }
    ]
}