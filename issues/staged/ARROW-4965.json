{
    "issue": {
        "title": "[Python] Timestamp array type detection should use tzname of datetime.datetime objects",
        "body": "***Note**: This issue was originally created as [ARROW-4965](https://issues.apache.org/jira/browse/ARROW-4965). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe type detection from datetime objects to array appears to ignore the presence of a tzinfo on the datetime object, instead storing them as naive timestamp columns.\r\n\r\nPython code:\r\n\r\n```python\n\r\nimport datetime\r\nimport pytz\r\nimport pyarrow as pa\r\n\r\nnaive_datetime = datetime.datetime(2019, 1, 13, 12, 11, 10)\r\nutc_datetime = datetime.datetime(2019, 1, 13, 12, 11, 10, tzinfo=pytz.utc)\r\ntzaware_datetime = utc_datetime.astimezone(pytz.timezone('America/Los_Angeles'))\r\n\r\ndef inspect(varname):\r\n    print(varname)\r\n    arr = globals()[varname]\r\n    print(arr.type)\r\n    print(arr)\r\n    print()\r\n\r\nauto_naive_arr = pa.array([naive_datetime])\r\ninspect(\"auto_naive_arr\")\r\n\r\nauto_utc_arr = pa.array([utc_datetime])\r\ninspect(\"auto_utc_arr\")\r\n\r\nauto_tzaware_arr = pa.array([tzaware_datetime])\r\ninspect(\"auto_tzaware_arr\")\r\n\r\nauto_mixed_arr = pa.array([utc_datetime, tzaware_datetime])\r\ninspect(\"auto_mixed_arr\")\r\n\r\nnaive_type = pa.timestamp(\"us\", naive_datetime.tzname())\r\nutc_type = pa.timestamp(\"us\", utc_datetime.tzname())\r\ntzaware_type = pa.timestamp(\"us\", tzaware_datetime.tzname())\r\n\r\nnaive_arr = pa.array([naive_datetime], type=naive_type)\r\ninspect(\"naive_arr\")\r\n\r\nutc_arr = pa.array([utc_datetime], type=utc_type)\r\ninspect(\"utc_arr\")\r\n\r\ntzaware_arr = pa.array([tzaware_datetime], type=tzaware_type)\r\ninspect(\"tzaware_arr\")\r\n\r\nmixed_arr = pa.array([utc_datetime, tzaware_datetime], type=utc_type)\r\ninspect(\"mixed_arr\")\r\n```\r\n\r\nThis prints:\r\n\r\n```\n\r\n$ python detect_timezone.py\r\nauto_naive_arr\r\ntimestamp[us]\r\n[\r\n  1547381470000000\r\n]\r\n\r\nauto_utc_arr\r\ntimestamp[us]\r\n[\r\n  1547381470000000\r\n]\r\n\r\nauto_tzaware_arr\r\ntimestamp[us]\r\n[\r\n  1547352670000000\r\n]\r\n\r\nauto_mixed_arr\r\ntimestamp[us]\r\n[\r\n  1547381470000000,\r\n  1547352670000000\r\n]\r\n\r\nnaive_arr\r\ntimestamp[us]\r\n[\r\n  1547381470000000\r\n]\r\n\r\nutc_arr\r\ntimestamp[us, tz=UTC]\r\n[\r\n  1547381470000000\r\n]\r\n\r\ntzaware_arr\r\ntimestamp[us, tz=PST]\r\n[\r\n  1547352670000000\r\n]\r\n\r\nmixed_arr\r\ntimestamp[us, tz=UTC]\r\n[\r\n  1547381470000000,\r\n  1547352670000000\r\n]\r\n```\r\n\r\nBut I would expect the following types instead:\r\n\r\n- `naive_datetime`: `timestamp[us]`\n- `auto_utc_arr`: `timestamp[us, tz=UTC]`\n- `auto_tzaware_arr`: `timestamp[us, tz=PST]` (Or maybe `tz='America/Los_Angeles'`. I'm not sure why `pytz` returns `PST` as the `tzname`)\n- `auto_mixed_arr`: `timestamp[us, tz=UTC]`\n  \n  Also, in the \"mixed\" case, I'd expect the actual stored microseconds to be the same for both rows, since `utc_datetime` and `tzaware_datetime` both refer to the same point in time. It seems reasonable for any naive datetime objects mixed in with tz-aware datetimes to be interpreted as UTC.",
        "created_at": "2019-03-19T17:11:07.000Z",
        "updated_at": "2020-09-23T14:42:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-09-23T14:42:30.000Z"
    },
    "comments": [
        {
            "created_at": "2020-09-01T12:48:22.991Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4965?focusedCommentId=17188426) by Krisztian Szucs (kszucs):*\nThis has possibly been fixed in ARROW-9528, need to check whether the issue persist or not."
        },
        {
            "created_at": "2020-09-23T14:41:37.534Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4965?focusedCommentId=17200868) by Krisztian Szucs (kszucs):*\nFirst of all thanks for the quickly reproducible example!\r\n\r\nPrior to ARROW-9528 the timezone information was not honored during conversion, but the current master shows the following results:\r\n\r\n```python\n\r\nauto_naive_arr                                                                                                                                                                                                                                        \r\ntimestamp[us]\r\n[\r\n  2019-01-13 12:11:10.000000\r\n]\r\n\r\nauto_utc_arr\r\ntimestamp[us, tz=UTC]\r\n[\r\n  2019-01-13 12:11:10.000000\r\n]\r\n\r\nauto_tzaware_arr\r\ntimestamp[us, tz=America/Los_Angeles]\r\n[\r\n  2019-01-13 12:11:10.000000\r\n]\r\n\r\nauto_mixed_arr\r\ntimestamp[us, tz=UTC]\r\n[\r\n  2019-01-13 12:11:10.000000,\r\n  2019-01-13 12:11:10.000000\r\n]\r\n\r\nnaive_arr\r\ntimestamp[us]\r\n[\r\n  2019-01-13 12:11:10.000000\r\n]\r\n\r\nutc_arr\r\ntimestamp[us, tz=UTC]\r\n[\r\n  2019-01-13 12:11:10.000000\r\n]\r\n\r\ntzaware_arr\r\ntimestamp[us, tz=PST]\r\n[\r\n  2019-01-13 12:11:10.000000\r\n]\r\n\r\nmixed_arr\r\ntimestamp[us, tz=UTC]\r\n[\r\n  2019-01-13 12:11:10.000000,\r\n  2019-01-13 12:11:10.000000\r\n]\r\n```\r\n\r\nIf I check it properly, the output is now in correspondence with the expected values and types you've listed in the ticket's description. \r\n\r\nClosing since it has been resolved.\r\n"
        }
    ]
}