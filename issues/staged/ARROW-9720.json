{
    "issue": {
        "title": "[Python] Long-term fate of pyarrow.parquet.ParquetDataset",
        "body": "***Note**: This issue was originally created as [ARROW-9720](https://issues.apache.org/jira/browse/ARROW-9720). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe business logic of the python implementation of reading partitioned parquet datasets in `pyarrow.parquet.ParquetDataset` has been ported to C++ (ARROW-3764), and has also been optionally enabled in ParquetDataset(..) by using `use_legacy_dataset=False` (ARROW-8039).\r\n\r\nBut the question still is: what do we do with this class long term? \r\n\r\nSo for users who now do:\r\n\r\n```Java\n\r\ndataset = pq.ParquetDataset(...)\r\ndataset.metadata\r\ntable = dataset.read()\r\n```\r\n\r\nwhat should they do in the future?  \r\nDo we keep a class like this (but backed by the pyarrow.dataset implementation), or do we deprecate the class entirely, pointing users to `dataset = ds.dataset(..., format=\"parquet\")` ?\r\n\r\nIn any case, we should strive to entirely delete the current custom python implementation, but we could keep a `ParquetDataset` class that wraps or inherits `pyarrow.dataset.FileSystemDataset` and adds some parquet specifics to it (eg access to the parquet schema, the common metadata, exposing the parquet-specific constructor keywords more easily, ..). \r\n\r\nFeatures the `ParquetDataset` currently has that are not exactly covered by pyarrow.dataset:\r\n\r\n- Partitioning information (the `.partitions` attribute\n- Access to common metadata (`.metadata_path`, `.common_metadata_path` and `.metadata` attributes)\n- ParquetSchema of the dataset\n",
        "created_at": "2020-08-13T09:33:56.000Z",
        "updated_at": "2022-10-04T08:33:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}