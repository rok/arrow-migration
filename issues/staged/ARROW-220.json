{
    "issue": {
        "title": "[C++] Build conda artifacts in a build environment with better cross-linux ABI compatibility",
        "body": "***Note**: This issue was originally created as [ARROW-220](https://issues.apache.org/jira/browse/ARROW-220). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nOperating system: Linux\n\nSteps to reproduce:\n```\nconda create -y -n test_pyarrow python=2.7\nsource activate test_pyarrow\nconda install -y -c apache/label/dev pyarrow\npython -c 'import pyarrow.parquet'\n```\n\nFails with\n```\n*** Error in `python': free(): invalid pointer: 0x00007f275a09bbc0 ***\nAborted\n```\n\nFull backtrace from running python under GDB:\n```\n#0  0x00007ffff6d39cc9 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n#1  0x00007ffff6d3d0d8 in __GI_abort () at abort.c:89\n#2  0x00007ffff6d76394 in __libc_message (do_abort=do_abort@entry=1, fmt=fmt@entry=0x7ffff6e84b28 \"*** Error in `%s': %s: 0x%s ***\\n\") at ../sysdeps/posix/libc_fatal.c:175\n#3  0x00007ffff6d8266e in malloc_printerr (ptr=<optimized out>, str=0x7ffff6e80c19 \"free(): invalid pointer\", action=1) at malloc.c:4996\n#4  _int_free (av=<optimized out>, p=<optimized out>, have_lock=0) at malloc.c:3840\n#5  0x00007fffec08f640 in _M_dispose (__a=..., this=<optimized out>) at /usr/include/c++/4.9/bits/basic_string.h:249\n#6  ~basic_string (this=0x7fffffffd1a0, __in_chrg=<optimized out>) at /usr/include/c++/4.9/bits/basic_string.h:547\n#7  __gnu_cxx::new_allocator<arrow::Field>::construct<arrow::Field<char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> > (this=<optimized out>, __p=0x7163d0)\n    at /usr/include/c++/4.9/ext/new_allocator.h:120\n#8  0x00007fffec0854a6 in _S_construct<arrow::Field, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__p=0x7163d0, __a=...) at /usr/include/c++/4.9/bits/alloc_traits.h:253\n#9  construct<arrow::Field, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__p=0x7163d0, __a=...) at /usr/include/c++/4.9/bits/alloc_traits.h:399\n#10 _Sp_counted_ptr_inplace<char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__a=..., this=0x7163c0) at /usr/include/c++/4.9/bits/shared_ptr_base.h:515\n#11 construct<std::_Sp_counted_ptr_inplace<arrow::Field, std::allocator<arrow::Field>, (__gnu_cxx::_Lock_policy)2>, std::allocator<arrow::Field> const, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__p=0x7163c0, this=<synthetic pointer>) at /usr/include/c++/4.9/ext/new_allocator.h:120\n#12 _S_construct<std::_Sp_counted_ptr_inplace<arrow::Field, std::allocator<arrow::Field>, (__gnu_cxx::_Lock_policy)2>, std::allocator<arrow::Field> const, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__p=<optimized out>, __a=<synthetic pointer>) at /usr/include/c++/4.9/bits/alloc_traits.h:253\n#13 construct<std::_Sp_counted_ptr_inplace<arrow::Field, std::allocator<arrow::Field>, (__gnu_cxx::_Lock_policy)2>, std::allocator<arrow::Field> const, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__p=<optimized out>, __a=<synthetic pointer>) at /usr/include/c++/4.9/bits/alloc_traits.h:399\n#14 __shared_count<arrow::Field, std::allocator<arrow::Field>, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__a=..., this=0x7fffffffd1f8) at /usr/include/c++/4.9/bits/shared_ptr_base.h:619\n#15 __shared_ptr<std::allocator<arrow::Field>, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__a=..., __tag=..., this=0x7fffffffd1f0) at /usr/include/c++/4.9/bits/shared_ptr_base.h:1090\n#16 shared_ptr<std::allocator<arrow::Field>, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__a=..., __tag=..., this=0x7fffffffd1f0) at /usr/include/c++/4.9/bits/shared_ptr.h:316\n#17 allocate_shared<arrow::Field, std::allocator<arrow::Field>, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> (__a=...) at /usr/include/c++/4.9/bits/shared_ptr.h:588\n#18 make_shared<arrow::Field, char const (&) [1], std::shared_ptr<arrow::UInt8Type> const&> () at /usr/include/c++/4.9/bits/shared_ptr.h:604\n#19 __static_initialization_and_destruction_0 (__initialize_p=1, __priority=65535) at /home/travis/build/apache/arrow/cpp/src/arrow/parquet/schema.cc:50\n#20 _GLOBAL__sub_I_schema.cc(void) () at /home/travis/build/apache/arrow/cpp/src/arrow/parquet/schema.cc:306\n#21 0x00007ffff7dea13a in call_init (l=<optimized out>, argc=argc@entry=3, argv=argv@entry=0x7fffffffe0d8, env=env@entry=0x749b80) at dl-init.c:78\n#22 0x00007ffff7dea223 in call_init (env=<optimized out>, argv=<optimized out>, argc=<optimized out>, l=<optimized out>) at dl-init.c:36\n#23 _dl_init (main_map=main_map@entry=0x9f5660, argc=3, argv=0x7fffffffe0d8, env=0x749b80) at dl-init.c:126\n#24 0x00007ffff7deec70 in dl_open_worker (a=a@entry=0x7fffffffd4b8) at dl-open.c:577\n#25 0x00007ffff7de9ff4 in _dl_catch_error (objname=objname@entry=0x7fffffffd4a8, errstring=errstring@entry=0x7fffffffd4b0, mallocedp=mallocedp@entry=0x7fffffffd4a0, \n    operate=operate@entry=0x7ffff7dee9a0 <dl_open_worker>, args=args@entry=0x7fffffffd4b8) at dl-error.c:187\n#26 0x00007ffff7dee3bb in _dl_open (file=0x71f590 \"/home/lomereiter/miniconda2/envs/test_pyarrow/lib/python2.7/site-packages/pyarrow/parquet.so\", mode=-2147483646, caller_dlopen=<optimized out>, nsid=-2, \n    argc=3, argv=0x7fffffffe0d8, env=0x749b80) at dl-open.c:661\n#27 0x00007ffff75d202b in dlopen_doit (a=a@entry=0x7fffffffd6d0) at dlopen.c:66\n#28 0x00007ffff7de9ff4 in _dl_catch_error (objname=0x625d90, errstring=0x625d98, mallocedp=0x625d88, operate=0x7ffff75d1fd0 <dlopen_doit>, args=0x7fffffffd6d0) at dl-error.c:187\n#29 0x00007ffff75d262d in _dlerror_run (operate=operate@entry=0x7ffff75d1fd0 <dlopen_doit>, args=args@entry=0x7fffffffd6d0) at dlerror.c:163\n#30 0x00007ffff75d20c1 in __dlopen (file=<optimized out>, mode=<optimized out>) at dlopen.c:87\n#31 0x00007ffff7b22dde in _PyImport_GetDynLoadFunc (fqname=<optimized out>, shortname=<optimized out>, \n    pathname=0x71f590 \"/home/lomereiter/miniconda2/envs/test_pyarrow/lib/python2.7/site-packages/pyarrow/parquet.so\", fp=0x704920) at Python/dynload_shlib.c:130\n#32 0x00007ffff7b078d8 in _PyImport_LoadDynamicModule (name=0x6b6fe0 \"pyarrow.parquet\", pathname=0x71f590 \"/home/lomereiter/miniconda2/envs/test_pyarrow/lib/python2.7/site-packages/pyarrow/parquet.so\", \n    fp=0x704920) at ./Python/importdl.c:42\n#33 0x00007ffff7b05f81 in import_submodule (mod=0x7ffff7e82b08, subname=0x6b6fe8 \"parquet\", fullname=0x6b6fe0 \"pyarrow.parquet\") at Python/import.c:2704\n#34 0x00007ffff7b061f4 in load_next (mod=0x7ffff7e82b08, altmod=0x7ffff7e82b08, p_name=<optimized out>, buf=0x6b6fe0 \"pyarrow.parquet\", p_buflen=0x7fffffffdb00) at Python/import.c:2519\n#35 0x00007ffff7b06860 in import_module_level (level=<optimized out>, fromlist=0x7ffff7da3cd0 <_Py_NoneStruct>, locals=<optimized out>, globals=<optimized out>, name=0x0) at Python/import.c:2236\n#36 PyImport_ImportModuleLevel (name=<optimized out>, globals=<optimized out>, locals=<optimized out>, fromlist=0x7ffff7da3cd0 <_Py_NoneStruct>, level=<optimized out>) at Python/import.c:2292\n#37 0x00007ffff7ae614f in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at Python/bltinmodule.c:49\n#38 0x00007ffff7a3cd23 in PyObject_Call (func=0x7ffff7fb6fc8, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2546\n#39 0x00007ffff7ae6633 in PyEval_CallObjectWithKeywords (func=0x7ffff7fb6fc8, arg=0x7ffff7e9ff70, kw=<optimized out>) at Python/ceval.c:4219\n#40 0x00007ffff7aeb29e in PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2622\n---Type <return> to continue, or q <return> to quit---\n#41 0x00007ffff7af0a2e in PyEval_EvalCodeEx (co=0x7ffff7eb6e30, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0)\n    at Python/ceval.c:3582\n#42 0x00007ffff7af0b42 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669\n#43 0x00007ffff7b0f5cc in run_mod (arena=0x641360, flags=<optimized out>, locals=0x7ffff7f58168, globals=0x7ffff7f58168, filename=0x7ffff7b3f7ed \"<string>\", mod=<optimized out>) at Python/pythonrun.c:1370\n#44 PyRun_StringFlags (str=0x601010 \"import pyarrow.parquet\\n\", start=257, globals=0x7ffff7f58168, locals=0x7ffff7f58168, flags=<optimized out>) at Python/pythonrun.c:1333\n#45 0x00007ffff7b108f0 in PyRun_SimpleStringFlags (command=0x601010 \"import pyarrow.parquet\\n\", flags=0x7fffffffdfb0) at Python/pythonrun.c:974\n#46 0x00007ffff7b26457 in Py_Main (argc=<optimized out>, argv=<optimized out>) at Modules/main.c:589\n#47 0x00007ffff6d24ec5 in __libc_start_main (main=0x400710 <main>, argc=3, argv=0x7fffffffe0d8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffe0c8)\n    at libc-start.c:287\n#48 0x0000000000400649 in _start ()\n```",
        "created_at": "2016-06-17T09:41:10.000Z",
        "updated_at": "2017-02-13T16:34:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2016-11-18T19:28:58.000Z"
    },
    "comments": [
        {
            "created_at": "2016-06-17T19:12:38.978Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15336746) by Wes McKinney (wesm):*\nI have a feeling this is because parquet-cpp is missing from the runtime dependencies of pyarrow\n\nhttps://github.com/apache/arrow/blob/master/python/conda.recipe/meta.yaml\n\nI will investigate and try to fix. "
        },
        {
            "created_at": "2016-06-17T21:18:23.222Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15336980) by Artem Tarasov (lomereiter):*\nAs far as I understand, g++ also should be in the build requirements and used for compilation, otherwise versions of libstdc++ at link- and runtime might be different. (I don't see it in parquet-cpp meta.yaml either.)"
        },
        {
            "created_at": "2016-06-17T21:30:10.346Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15336996) by Wes McKinney (wesm):*\nWe need to pass `-static-libstdc++` in all cases. We're already doing this in arrow-cpp\n\nhttps://github.com/apache/arrow/blob/master/cpp/conda.recipe/build.sh#L43\n\nand pyarrow\n\nhttps://github.com/apache/arrow/blob/master/python/conda.recipe/build.sh#L24\n\nI'll create a JIRA for parquet"
        },
        {
            "created_at": "2016-06-17T21:33:36.895Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15337008) by Wes McKinney (wesm):*\nSee PARQUET-635"
        },
        {
            "created_at": "2016-07-01T22:55:56.008Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15359792) by Wes McKinney (wesm):*\nAt this moment, I am seeing on my system:\n\n```Java\n$ python -c 'import pyarrow.parquet'\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nImportError: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by /home/wesm/anaconda3/envs/test_pyarrow/lib/python2.7/site-packages/pyarrow/../../.././libparquet.so)\n```\n\nI'm on Ubuntu 14.04, where gcc 4.8 is the default library. This will be solved by statically linking libstdc++ (since we are building with gcc 4.9 in Travis CI) \u2013 I'm going to try adding the static linking again now that PARQUET-489 has been taken care of (so there should not be any symbol conflicts) to see if we can get a working conda dev build.\n\nThe longer term solution here is to move our conda artifact builds to centos6/rhel6 with the devtoolset. See for example:\n\nhttps://github.com/conda-forge/docker-images/blob/master/linux-anvil/Dockerfile\n\nWe might even put the builds on conda-forge so we can post \"stable\" dev builds (not actually official releases). "
        },
        {
            "created_at": "2016-07-07T00:52:14.908Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15365422) by Wes McKinney (wesm):*\n`[~lomereiter]` after PARQUET-653 this seems to be in slightly better shape. Can you let me know how it's working for you now? On systems with gcc < 4.8 (i.e. no c++11 at all) or old glibc I expect the conda artifact is still broken. I am going to change the description to reflect the task of setting up a build environment on a more conservative Linux version (like CentOS 6)"
        },
        {
            "created_at": "2016-07-07T07:10:41.475Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15365715) by Artem Tarasov (lomereiter):*\nStill fails for me somehow (gcc 4.8.5). I'll try to setup a docker image later so that the issue can be reproduced easily."
        },
        {
            "created_at": "2016-07-08T20:55:20.845Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15368456) by Artem Tarasov (lomereiter):*\nI pinned it down to the conda `libgcc` package being installed.\nApparently, the problem is actually on the conda side: https://github.com/conda/conda-recipes/issues/558\nAccording to that discussion the workaround is to use latest compilers for builds, so that the versions are ahead of system libraries (currently 5.2.0).\n\nSo more precise steps to reproduce are:\n1. Install miniconda on a clean system\n2. conda install -c apache/label/dev -y pyarrow libgcc\n3. python -c 'import pyarrow.parquet'"
        },
        {
            "created_at": "2016-07-09T00:22:53.565Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15368801) by Wes McKinney (wesm):*\nWow, so this is a bit of a mess. See\n\nhttps://github.com/apache/incubator-kudu/blob/master/CMakeLists.txt#L128\n\nsee also https://wiki.debian.org/GCC5\n\nwith libstdc++ statically linked, you can see that a number of bits of the cxx ABI are exported\n\nhttps://gist.github.com/wesm/cb77057d3d3016fff5847886b04633dd\n\nSo if we use gcc-5.2 in our builds and pass _GLIBCXX_USE_CXX11_ABI=0 then things should work\n\nThe short term solution is not to use libgcc 5.2 from conda. "
        },
        {
            "created_at": "2016-07-11T23:39:22.279Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15371905) by Wes McKinney (wesm):*\nAs soon as I can, I will try to set up dev builds in conda-forge (where we can leverage the existing RHEL devtoolset build environment \u2013 this will hopefully yield good cross-Linux compatibility). I already have a feedstock for parquet-cpp staged that was blocked on some upstream changes, which were just merged, so this is the first step.\n\nhttps://github.com/conda-forge/staged-recipes/pull/992"
        },
        {
            "created_at": "2016-11-15T21:33:53.628Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15668435) by Uwe Korn (uwe):*\n`[~wesmckinn]` Is this fixed in the conda-forge builds? (I don't see which toolset we use but that may be due to my minimal conda knowledge)"
        },
        {
            "created_at": "2016-11-18T19:28:58.359Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-220?focusedCommentId=15677538) by Wes McKinney (wesm):*\nResolved by conda-forge builds (which use redhat devtoolset)\n\ngithub.com/conda-forge/arrow-cpp-feedstock\ngithub.com/conda-forge/pyarrow-feedstock"
        }
    ]
}