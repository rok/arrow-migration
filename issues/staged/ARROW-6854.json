{
    "issue": {
        "title": "[Dataset][C++] RecordBatchProjector is not thread safe",
        "body": "***Note**: This issue was originally created as [ARROW-6854](https://issues.apache.org/jira/browse/ARROW-6854). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhile working on ARROW-6769 I noted that RecordbBatchProjector is not thread safe. My goal is to use this class to wrap the ScanTaskIterator in another ScanTaskIterator that projects, so producer (fragments) don't have to know about this schema. The issue is that ScanTask are expected to run on concurrent thread. The projector will be invoked by multiple thread.\r\n\r\nThe lack of concurrency safety is due to adaptivity of input schemas and `SetInputSchema` stores in a local cache. I suggest we refactor into 2 classes.\u00a0\r\n1. `RecordBatchProjector` which will work with a static `from` schema, i.e. no adaptivity. The schema is defined at construct time. This class is thread safe to invoke after construction since no local modification is done.\n1. `AdaptiveRecordBatchProjector` which will have a cache map[schema_hash, std::shared_ptr<RecordBatchProjector>] protected with a mutex.\u00a0",
        "created_at": "2019-10-11T13:14:40.000Z",
        "updated_at": "2021-08-05T19:22:24.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-08-05T15:40:28.877Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6854?focusedCommentId=17394130) by Antoine Pitrou (apitrou):*\nDoes this still apply? cc `[~westonpace]`"
        },
        {
            "created_at": "2021-08-05T19:22:24.188Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6854?focusedCommentId=17394273) by Weston Pace (westonpace):*\nThe projection is now an execution of a scalar kernel which should be stateless (and threadsafe).  `[~bkietz]` (sorry to chain CC).  We do have some tests which run multiple scan tasks in parallel although I don't know if they use complex projections."
        }
    ]
}