{
    "issue": {
        "title": "[C++] Concatenate with an empty dictionary segfaults (ASan failure in TestFilterKernelWithString/0.FilterDictionary)",
        "body": "***Note**: This issue was originally created as [ARROW-13639](https://issues.apache.org/jira/browse/ARROW-13639). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```\n\r\n[ RUN      ] TestFilterKernelWithString/0.FilterDictionary\r\n=================================================================\r\n==31836==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f3788bac6c0 at pc 0x7f377c13382b bp 0x7ffe135dddb0 sp 0x7ffe135ddda8\r\nREAD of size 4 at 0x7f3788bac6c0 thread T0\r\n    #0 0x7f377c13382a in void arrow::internal::TransposeInts<signed char, signed char>(signed char const*, signed char*, long, int const*) /home/lidavidm/Code/upstream/merging/cpp/src/arrow/util/int_util.cc:434\r\n    #1 0x7f377c1243f2 in Visit<arrow::Int8Type> /home/lidavidm/Code/upstream/merging/cpp/src/arrow/util/int_util.cc:482\r\n    #2 0x7f377c11a5f9 in VisitTypeInline<arrow::internal::(anonymous namespace)::TransposeIntsDest<signed char> > /home/lidavidm/Code/upstream/merging/cpp/src/arrow/visitor_inline.h:89\r\n    #3 0x7f377c119b51 in operator() /home/lidavidm/Code/upstream/merging/cpp/src/arrow/util/int_util.cc:491\r\n    #4 0x7f377c102ac9 in Visit<arrow::Int8Type> /home/lidavidm/Code/upstream/merging/cpp/src/arrow/util/int_util.cc:508\r\n    #5 0x7f377c0f7c88 in VisitTypeInline<arrow::internal::(anonymous namespace)::TransposeIntsSrc> /home/lidavidm/Code/upstream/merging/cpp/src/arrow/visitor_inline.h:89\r\n    #6 0x7f377c0f479d in operator() /home/lidavidm/Code/upstream/merging/cpp/src/arrow/util/int_util.cc:515\r\n    #7 0x7f377c0f49f3 in arrow::internal::TransposeInts(arrow::DataType const&, arrow::DataType const&, unsigned char const*, unsigned char*, long, long, long, int const*) /home/lidavidm/Code/upstream/merging/cpp/src/arrow/util/int_util.cc:525\r\n    #8 0x7f377b6e72fd in ConcatenateDictionaryIndices /home/lidavidm/Code/upstream/merging/cpp/src/arrow/array/concatenate.cc:289\r\n    #9 0x7f377b6e85f0 in Visit /home/lidavidm/Code/upstream/merging/cpp/src/arrow/array/concatenate.cc:320\r\n    #10 0x7f377b6ef4cf in VisitTypeInline<arrow::(anonymous namespace)::ConcatenateImpl> /home/lidavidm/Code/upstream/merging/cpp/src/arrow/visitor_inline.h:89\r\n    #11 0x7f377b6e11a2 in Concatenate /home/lidavidm/Code/upstream/merging/cpp/src/arrow/array/concatenate.cc:193\r\n    #12 0x7f377b6ed681 in arrow::Concatenate(std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array> > > const&, arrow::MemoryPool*) /home/lidavidm/Code/upstream/merging/cpp/src/arrow/array/concatenate.cc:481\r\n    #13 0x55adf99765b9 in arrow::compute::TestFilterKernel::AssertFilter(std::shared_ptr<arrow::Array> const&, std::shared_ptr<arrow::Array> const&, std::shared_ptr<arrow::Array> const&) /home/lidavidm/Code/upstream/merging/cpp/src/arrow/compute/kernels/vector_selection_test.cc:221\r\n    #14 0x55adf9c12be2 in arrow::compute::TestFilterKernelWithString<arrow::BinaryType>::AssertFilterDictionary(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/lidavidm/Code/upstream/merging/cpp/src/arrow/compute/kernels/vector_selection_test.cc:517\r\n    #15 0x55adf9bb251d in arrow::compute::TestFilterKernelWithString_FilterDictionary_Test<arrow::BinaryType>::TestBody() /home/lidavidm/Code/upstream/merging/cpp/src/arrow/compute/kernels/vector_selection_test.cc:531\r\n    #16 0x7f378ac3698d in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/lidavidm/miniconda3/envs/arrow4/lib/libgtest.so+0x4c98d)\r\n    #17 0x7f378ac36be0 in testing::Test::Run() (/home/lidavidm/miniconda3/envs/arrow4/lib/libgtest.so+0x4cbe0)\r\n    #18 0x7f378ac36f0e in testing::TestInfo::Run() (/home/lidavidm/miniconda3/envs/arrow4/lib/libgtest.so+0x4cf0e)\r\n    #19 0x7f378ac37035 in testing::TestSuite::Run() (/home/lidavidm/miniconda3/envs/arrow4/lib/libgtest.so+0x4d035)\r\n    #20 0x7f378ac375eb in testing::internal::UnitTestImpl::RunAllTests() (/home/lidavidm/miniconda3/envs/arrow4/lib/libgtest.so+0x4d5eb)\r\n    #21 0x7f378ac37858 in testing::UnitTest::Run() (/home/lidavidm/miniconda3/envs/arrow4/lib/libgtest.so+0x4d858)\r\n    #22 0x7f378ac9707e in main (/home/lidavidm/miniconda3/envs/arrow4/lib/libgtest_main.so+0x107e)\r\n    #23 0x7f377180cbf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)\r\n    #24 0x55adf9431658  (/home/lidavidm/Code/upstream/merging/build/debug/arrow-compute-vector-test+0xbaa658)0x7f3788bac6c1 is located 0 bytes to the right of global variable 'zero_size_area' defined in '/home/lidavidm/Code/upstream/merging/cpp/src/arrow/memory_pool.cc:188:36' (0x7f3788bac6c0) of size 1\r\n  'zero_size_area' is ascii string ''\r\nSUMMARY: AddressSanitizer: global-buffer-overflow /home/lidavidm/Code/upstream/merging/cpp/src/arrow/util/int_util.cc:434 in void arrow::internal::TransposeInts<signed char, signed char>(signed char const*, signed char*, long, int const*)\r\nShadow bytes around the buggy address:\r\n  0x0fe77116d880: f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9 00 00 f9 f9\r\n  0x0fe77116d890: f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9 00 00 f9 f9\r\n  0x0fe77116d8a0: f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9 00 00 00 00\r\n  0x0fe77116d8b0: 01 f9 f9 f9 f9 f9 f9 f9 00 00 00 f9 f9 f9 f9 f9\r\n  0x0fe77116d8c0: 00 f9 f9 f9 f9 f9 f9 f9 02 f9 f9 f9 f9 f9 f9 f9\r\n=>0x0fe77116d8d0: 00 f9 f9 f9 f9 f9 f9 f9[01]f9 f9 f9 f9 f9 f9 f9\r\n  0x0fe77116d8e0: 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 00 00 00 00\r\n  0x0fe77116d8f0: 01 f9 f9 f9 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0fe77116d900: 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9\r\n  0x0fe77116d910: f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9\r\n  0x0fe77116d920: f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n  Shadow gap:              cc\r\n==31836==ABORTING\r\nfish: Job 1, './debug/arrow-compute-vector-te\u2026' terminated by signal SIGABRT (Abort) \n```",
        "created_at": "2021-08-16T19:19:08.000Z",
        "updated_at": "2021-08-18T16:55:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-08-18T14:54:02.000Z"
    },
    "comments": [
        {
            "created_at": "2021-08-16T19:37:44.759Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13639?focusedCommentId=17399970) by David Li (lidavidm):*\nThis boils down to calling Concatenate on dictionary types when the indices are all null and the dictionary is empty and the dictionaries are not the same. Concatenate unifies the dictionaries, generating a mapping of indices. It then maps the indices, but doesn't account for nullity, and hence tries to index into an empty mapping corresponding to a null slot."
        },
        {
            "created_at": "2021-08-18T14:54:02.128Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13639?focusedCommentId=17401118) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 10946\n<https://github.com/apache/arrow/pull/10946>"
        }
    ]
}