{
    "issue": {
        "title": "[C++] Error when creating Expression on Decimal128 types: precision out of range",
        "body": "***Note**: This issue was originally created as [ARROW-17601](https://issues.apache.org/jira/browse/ARROW-17601). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nReproducer in R:\r\n\r\n```Java\n\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\n\r\ntab <- Table$create(col1 = 1:4, col2 = 5:8)\r\ntab <- tab$cast(schema(col1 = decimal128(33, 4), col2 = decimal128(15, 2)))\r\ntab %>% mutate(col1 * col2)\r\n\r\n# Error: Invalid: Decimal precision out of range [1, 38]: 49\r\n# /Users/me/arrow/cpp/src/arrow/compute/kernels/scalar_arithmetic.cc:1078  DecimalType::Make(left_type.id(), precision, scale)\r\n# /Users/me/arrow/cpp/src/arrow/compute/exec/expression.cc:413  call.kernel->signature->out_type().Resolve(&kernel_context, types)\r\n```\r\n\r\nWe don't have this problem integers and floats (see comment below). For consistency with the other arithmetic functions, what I would expect would be that we would expand the precision as much as we could within Decimal128\u2013in this case, Decimal128(38, 6)\u2013and the compute function would either error _if_ there is an overflow (in the _checked version) or just overflow in the non-checked version. But it wouldn't error on determining the output type.",
        "created_at": "2022-09-02T14:57:18.000Z",
        "updated_at": "2022-09-07T16:54:12.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-09-02T16:33:44.860Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17599604) by Neal Richardson (npr):*\nHere's a reproducer just using Expressions, no dplyr:\r\n\r\n```Java\n\r\nexpr <- Expression$create(\"multiply_checked\", Expression$field_ref(\"col1\"), Expression$field_ref(\"col2\"))\r\nexpr\r\n\r\n# Expression\r\n# multiply_checked(col1, col2)\r\n\r\nexpr$type(schema(col1=decimal128(33, 4), col2=decimal128(15, 2)))\r\n\r\n# Error: Invalid: Decimal precision out of range [1, 38]: 49\r\n```\r\n\r\nNote that the different kernels have different promotion logic. Subtraction, for example, doesn't go out of range with these types.\r\n\r\n```Java\n\r\nexpr <- Expression$create(\"subtract_checked\", Expression$field_ref(\"col1\"), Expression$field_ref(\"col2\"))\r\nexpr$type(schema(col1=decimal128(33, 4), col2=decimal128(15, 2)))\r\n\r\n# Decimal128Type\r\n# decimal128(34, 4)\r\n```"
        },
        {
            "created_at": "2022-09-02T19:42:03.833Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17599693) by Neal Richardson (npr):*\nAlso, in case it's relevant: we don't have any problems like this with integer or floating-point types:\r\n\r\n```Java\n\r\n> expr <- Expression$create(\"multiply_checked\", Expression$field_ref(\"col1\"), Expression$field_ref(\"col2\"))\r\n> \r\n> expr$type(schema(col1=int64(), col2=int64()))\r\nInt64\r\nint64\r\n> expr$type(schema(col1=int32(), col2=int32()))\r\nInt32\r\nint32\r\n> expr$type(schema(col1=float32(), col2=float32()))\r\nFloat32\r\nfloat\r\n```"
        },
        {
            "created_at": "2022-09-04T19:44:12.332Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17600095) by Neal Richardson (npr):*\ncc `[~yibocai]` since you added the decimal arithmetic in ARROW-12074."
        },
        {
            "created_at": "2022-09-05T03:08:15.436Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17600137) by Yibo Cai (yibocai):*\nWill look into this issue. Thanks `[~npr]` for the report."
        },
        {
            "created_at": "2022-09-06T01:55:53.153Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17600547) by Yibo Cai (yibocai):*\nHmm, there are some difficulties:\r\n- If the total digits of the two input decimal128 types to be multiplied is larger than 38, the output type cannot be represented by decimal128 without losing precision. It has to fail.\n- Decimal overlow, like floating points, should lead to `Inf`, whether checked or non-checked. Currently we don't support decimal `Inf`."
        },
        {
            "created_at": "2022-09-06T13:16:37.774Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17600769) by Neal Richardson (npr):*\nThe trouble with the status quo is that we fail even if there is no overflow or required digits > 38:\r\n\r\n```Java\n\r\n> one <- Array$create(1)$cast(decimal128(33, 0))\r\n> one\r\nArray\r\n<decimal128(33, 0)>\r\n[\r\n  1\r\n]\r\n> two <- Array$create(2)$cast(decimal128(33, 0))\r\n> one + two\r\nArray\r\n<decimal128(34, 0)>\r\n[\r\n  3\r\n]\r\n> one * two\r\nError: Invalid: Decimal precision out of range [1, 38]: 67\r\n```"
        },
        {
            "created_at": "2022-09-07T03:45:59.014Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17601120) by Yibo Cai (yibocai):*\nFor arrays, if we reduce the maximal possible precision, we don't know ahead if threre will be some elements lead to overflow. I think we must check every result and raise overflow error even for non-checked operation, probably not a problem as decimal operations are quite expensive already.\r\nLooks better than simply reject the input. Will look into how other dbs handle this situation."
        },
        {
            "created_at": "2022-09-07T16:51:58.976Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17601404) by Weston Pace (westonpace):*\nI think query engines and planners really like to know the output type before the plan is not executed.  Determining the output type based on the input is not something that is traditionally done (though maybe it is time to break with tradition :).\r\n\r\nThat being said, we could perhaps model ourselves after Substrait (which itself, modeled its rules after Calcite which is maybe based on Spark's rules which is probably modeled after something else...)\r\n\r\nIn Substrait, if a limit is hit when determining the output, then scale is dropped (instead of outright rejection).  It is first dropped from the decimal places.\r\n\r\nSo, by Substrait rules, MULTIPLY(DECIMAL<33, 4>, DECIMAL<15, 2>) yields DECIMAL<49, 6> which truncates to DECIMAL<38, 6>\r\n\r\nHere is how it is explained in TSQL https://docs.microsoft.com/en-us/sql/t-sql/data-types/precision-scale-and-length-transact-sql?view=sql-server-ver16\r\n\r\n> In addition and subtraction operations, we need max(p1 - s1, p2 - s2) places to store integral part of the decimal number. If there isn't enough space to store them that is, max(p1 - s1, p2 - s2) < min(38, precision) - scale, the scale is reduced to provide enough space for integral part. Resulting scale is MIN(precision, 38) - max(p1 - s1, p2 - s2), so the fractional part might be rounded to fit into the resulting scale.\n> \n> In multiplication and division operations, we need precision - scale places to store the integral part of the result. The scale might be reduced using the following rules:\n> \n> The resulting scale is reduced to min(scale, 38 - (precision-scale)) if the integral part is less than 32, because it can't be greater than 38 - (precision-scale). Result might be rounded in this case.\n> The scale won't be changed if it's less than 6 and if the integral part is greater than 32. In this case, overflow error might be raised if it can't fit into decimal(38, scale)\n> The scale will be set to 6 if it's greater than 6 and if the integral part is greater than 32. In this case, both integral part and scale would be reduced and resulting type is decimal(38,6). Result might be rounded to 6 decimal places or the overflow error will be thrown if the integral part can't fit into 32 digits."
        },
        {
            "created_at": "2022-09-07T16:53:26.215Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17601?focusedCommentId=17601408) by Weston Pace (westonpace):*\nThe exact rules specified by substrait can be found here: https://github.com/substrait-io/substrait/blob/main/extensions/functions_arithmetic_decimal.yaml"
        }
    ]
}