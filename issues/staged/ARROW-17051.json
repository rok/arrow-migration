{
    "issue": {
        "title": "[C++][Flight] arrow-flight-sql-test fails with ASAN UBSAN",
        "body": "***Note**: This issue was originally created as [ARROW-17051](https://issues.apache.org/jira/browse/ARROW-17051). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe CI job for ASAN UBSAN is based on Ubuntu 20.04: **C++ / AMD64 Ubuntu 20.04 C++ ASAN UBSAN**\u00a0 \r\n\r\nTrying to build Flight and Flight SQL on Ubuntu 20.04 the job for ASAN UBSAN will also build with Flight and Flight SQL. This triggers some arrow-flight-sql-test failures like:\r\n```java\n\r\n \u00a0[ RUN \u00a0 \u00a0 \u00a0] TestFlightSqlClient.TestGetDbSchemas\r\nunknown file: Failure\r\nUnexpected mock function call - taking default action specified at:\r\n/arrow/cpp/src/arrow/flight/sql/client_test.cc:151:\r\n\u00a0 \u00a0 Function call: GetFlightInfo(@0x61500007d948 184-byte object <00-00 00-00 00-00 F0-BF 40-00 00-00 00-00 00-00 80-4C 06-49 CF-7F 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 01-01 00-00 00-00 00-00 00-20 00-00 00-00 00-00 ... 01-00 00-04 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00>, @0x7fff35794e80 64-byte object <02-00 00-00 00-00 00-00 C0-45 08-00 B0-60 00-00 65-00 00-00 00-00 00-00 65-00 00-00 00-00 00-00 C4-A9 AE-66 00-10 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00>)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Returns: (nullptr)\r\nGoogle Mock tried the following 1 expectation, but it didn't match:\r\n/arrow/cpp/src/arrow/flight/sql/client_test.cc:152: EXPECT_CALL(sql_client_, GetFlightInfo(Ref(call_options_), descriptor))...\r\n\u00a0 Expected arg #1: is equal to 64-byte object <02-00 00-00 BE-BE BE-BE C0-6B 05-00 C0-60 00-00 73-00 00-00 00-00 00-00 73-00 00-00 00-00 00-00 BE-BE BE-BE BE-BE BE-BE 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00>\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Actual: 64-byte object <02-00 00-00 00-00 00-00 C0-45 08-00 B0-60 00-00 65-00 00-00 00-00 00-00 65-00 00-00 00-00 00-00 C4-A9 AE-66 00-10 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00>\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Expected: to be called once\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Actual: never called - unsatisfied and active\r\n/arrow/cpp/src/arrow/flight/sql/client_test.cc:152: Failure\r\nActual function call count doesn't match EXPECT_CALL(sql_client_, GetFlightInfo(Ref(call_options_), descriptor))...\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Expected: to be called once\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Actual: never called - unsatisfied and active\r\n[ \u00a0FAILED \u00a0] TestFlightSqlClient.TestGetDbSchemas (1 ms)\n```\r\nThe error can be seen here: <https://github.com/apache/arrow/runs/7297442828?check_suite_focus=true>\r\n\r\nThis is the initial PR that triggered it:\r\n\r\n<https://github.com/apache/arrow/pull/13548>\r\n\r\n\u00a0",
        "created_at": "2022-07-12T14:32:00.000Z",
        "updated_at": "2022-07-28T15:20:02.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: FlightRPC",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-07-26T00:47:52.000Z"
    },
    "comments": [
        {
            "created_at": "2022-07-12T14:32:19.891Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17051?focusedCommentId=17565863) by Ra\u00fal Cumplido (raulcd):*\ncc `[~lidavidm]` \u00a0"
        },
        {
            "created_at": "2022-07-12T20:55:15.194Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17051?focusedCommentId=17566009) by David Li (lidavidm):*\nThanks for the help Ra\u00fal. I have it on my list to take a look this week"
        },
        {
            "created_at": "2022-07-13T17:41:55.070Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17051?focusedCommentId=17566440) by David Li (lidavidm):*\nOk, it only occurs with bundled (static) Protobuf/gRPC. It's not related to ASAN/UBSAN, this will do it:\r\n```\n\r\n-DARROW_FLIGHT=ON -DARROW_FLIGHT_SQL=ON -DARROW_BUILD_TESTS=ON -DProtobuf_SOURCE=BUNDLED -DgRPC_SOURCE=BUNDLED -DGTest_SOURCE=BUNDLED -DARROW_BUILD_SHARED=ON -DARROW_BUILD_STATIC=OFF \n```\r\nIt also fails differently when only a single test is run.\r\n\r\nI suspect that gRPC/Protobuf is getting linked twice, which is a common issue. Both libarrow_flight and libarrow_flight_sql contain Protobuf symbols. `env LD_DEBUG=all` shows the dynamic linker is not resolving any Protobuf symbols - so presumably each library is using its own copy of Protobuf. But Protobuf has global state.\r\n\r\nTo wit, it passes if we set `-DARROW_BUILD_SHARED=OFF -DARROW_BUILD_STATIC=ON` instead.\r\n\r\nSo I think the solution here is: change this job to link statically instead of dynamically, and prevent Flight from building shared libraries if Protobuf/gRPC are static dependencies."
        },
        {
            "created_at": "2022-07-26T00:47:52.768Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17051?focusedCommentId=17571143) by Kouhei Sutou (kou):*\nIssue resolved by pull request 13599\n<https://github.com/apache/arrow/pull/13599>"
        }
    ]
}