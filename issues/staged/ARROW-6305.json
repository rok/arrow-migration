{
    "issue": {
        "title": "[Python] scalar pd.NaT incorrectly parsed in conversion from Python",
        "body": "***Note**: This issue was originally created as [ARROW-6305](https://issues.apache.org/jira/browse/ARROW-6305). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen converting from scalar values, using `pd.NaT` (the missing value indicator that pandas uses for datetime64 data) results in an incorrect timestamp:\r\n\r\n```Java\n\r\nIn [6]: pa.array([pd.Timestamp(\"2012-01-01\"), pd.NaT]) \r\nOut[6]: \r\n<pyarrow.lib.TimestampArray object at 0x7f46c8368780>\r\n[\r\n  2012-01-01 00:00:00.000000,\r\n  0001-01-01 00:00:00.000000\r\n]\r\n```\r\n\r\nwhere `pd.NaT` is converted to \"0001-01-01\", which is strange, as that does not even correspond with the integer value of pd.NaT. \r\n\r\nNumpy's version (`np.datetime64('NaT')`) is correctly handled. Which also means that a pandas Series holding pd.NaT is handled correctly (as when converting to numpy it is using numpy's NaT).\r\n\r\nRelated to ARROW-842.",
        "created_at": "2019-08-21T08:48:34.000Z",
        "updated_at": "2019-08-21T15:18:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-08-21T15:18:38.000Z"
    },
    "comments": []
}