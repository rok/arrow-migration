{
    "issue": {
        "title": "[Rust] [DataFusion] Add constant folding to expressions during logically planning",
        "body": "***Note**: This issue was originally created as [ARROW-9770](https://issues.apache.org/jira/browse/ARROW-9770). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe high level idea is that if an expression can be partially evaluated during planning time then\r\n1. The execution time will be increased\n1. There may be additional optimizations possible (like removing entire LogicalPlan nodes, for example)\n   \n   I recently saw the following selection expression created (by the [predicate push down](https://github.com/apache/arrow/pull/7880))\n   \n   ```Java\n   \n   Selection: #a Eq Int64(1) And #b GtEq Int64(1) And #a LtEq Int64(1) And #a Eq Int64(1) And #b GtEq Int64(1) And #a LtEq Int64(1)\n                 TableScan: test projection=None\n   ```\n   \n   This could be simplified significantly:\n   1. Duplicate clauses could be removed (e.g. `#a Eq Int64(1) And #a Eq Int64(1)` --> `#a Eq Int64(1)`)\n   2. Algebraic simplification (e.g. if `A<=B and A=5`, is the same as `A=5`)\n   \n   Inspiration can be taken from the postgres code that evaluates constant expressions https://doxygen.postgresql.org/clauses_8c.html#ac91c4055a7eb3aa6f1bc104479464b28\n   \n   (in this case, for example if you have a predicate A=5 then you can basically substitute in A=5 for any expression higher up in the the plan).\n   \n   Other classic optimizations include things such as `A OR TRUE` -~~> `A`, `A AND TRUE` -~~> TRUE,  etc.\n",
        "created_at": "2020-08-17T14:40:21.000Z",
        "updated_at": "2021-04-26T13:19:06.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T13:19:06.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-23T21:51:08.856Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9770?focusedCommentId=17182860) by Jorge Leit\u00e3o (jorgecarleitao):*\nThat is a cool idea. It seems to be a case of algebraic simplification. Maybe there is already a rust library that can do that work for us?"
        },
        {
            "created_at": "2020-12-08T14:11:11.412Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9770?focusedCommentId=17245907) by R\u00e9mi Dettai (rdettai):*\nThis could also be used to apply filter pushdown into the catalog, if the combination (and) of:\r\n - the file/partition statistics (`col( x ) > min and col( x ) < max`)\r\n - the filter expression\r\n\r\ncan be simplified to `false`, their is no need to read that file/partition. Isn't that wonderful ? :)\r\n\r\nNote: there is an implementation of this folding for the C++ dataset API: <https://github.com/apache/arrow/blob/master/cpp/src/arrow/dataset/filter.h>"
        },
        {
            "created_at": "2021-04-26T12:33:27.229Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9770?focusedCommentId=17332119) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/96"
        },
        {
            "created_at": "2021-04-26T13:19:04.973Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9770?focusedCommentId=17332292) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-datafusion/issues/98"
        }
    ]
}