{
    "issue": {
        "title": "[C++][Dataset] Implement subtree pruning for FileSystemDataset::GetFragments",
        "body": "***Note**: This issue was originally created as [ARROW-8658](https://issues.apache.org/jira/browse/ARROW-8658). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is a very handy optimization for large datasets with multiple partition fields. For example, given a hive-style directory `$base_dir/a=3/` and a filter `\"a\"_ == 2` none of its files or subdirectories need be examined.\r\n\r\nAfter ARROW-8318 FileSystemDataset stores only files so subtree pruning (whose implementation depended on the presence of directories to represent subtrees) was disabled. It should be possible to reintroduce this without reference to directories by examining partition expressions directly and extracting a tree structure from their subexpressions.",
        "created_at": "2020-04-30T19:02:33.000Z",
        "updated_at": "2021-03-12T15:57:56.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-03-12T15:57:39.000Z"
    },
    "comments": [
        {
            "created_at": "2021-03-08T20:27:56.419Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8658?focusedCommentId=17297685) by David Li (lidavidm):*\nAfter looking through things here, I have a few thoughts:\r\n \\* Doing this with arbitrary expressions is expensive; we need a way to determine whether one is an 'ancestor' of another. Presumably, A is an ancestor of B if ![A => ](A => )B, but evaluating that is the expensive operation we're hoping to avoid in the first place!\u00a0If recovering a tree from expressions involves at least O(|fragments|) expression evaluations anyways, any gains you might get would be erased, especially in the case of ARROW-11781, where we'd do all that work, query it once, and then throw it all away.\u00a0\r\n \\* With arbitrary user-provided expressions, there may not be any tree structure worth recovering anyways.\r\n\r\n\u00a0Given that, it might be worth only implementing for the case of a KeyValuePartitioning, where we can define a sorting and ancestry test on vector<Key> and cheaply construct the tree. Datasets built by other means would continue to use a simple vector of fragments as they have been. Or we could try converting each expression back into a vector<Key>, and give up on any expression that doesn't fit - but there are potentially lots of cases to consider and it would be easy to accidentally make the conversion from Key to Expression and back lossy.\r\n\r\nAlso, fs::PathForest is now completely unused, so we can just refactor it into a \"KeyVector\"Forest and save some work. And since the internal representation of a \\*Forest is just a vector, we can easily interpret it either way as appropriate."
        },
        {
            "created_at": "2021-03-12T15:57:39.788Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8658?focusedCommentId=17300396) by Ben Kietzman (bkietz):*\nIssue resolved by pull request 9670\n<https://github.com/apache/arrow/pull/9670>"
        }
    ]
}