{
    "issue": {
        "title": "[C++][CI] arrow-compute-scalar-test fails on test-conda-cpp-valgrind",
        "body": "***Note**: This issue was originally created as [ARROW-17041](https://issues.apache.org/jira/browse/ARROW-17041). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere seems to be an issue on the arrow-compute-scalar-test as it has been failing for the last days, example: <https://github.com/ursacomputing/crossbow/runs/7274655770>\r\n\r\nSee <https://crossbow.voltrondata.com/>\r\n\r\nError:\r\n```java\n\r\n==13125== \r\n==13125== HEAP SUMMARY:\r\n==13125==     in use at exit: 16,090 bytes in 161 blocks\r\n==13125==   total heap usage: 14,612,979 allocs, 14,612,818 frees, 2,853,741,784 bytes allocated\r\n==13125== \r\n==13125== LEAK SUMMARY:\r\n==13125==    definitely lost: 0 bytes in 0 blocks\r\n==13125==    indirectly lost: 0 bytes in 0 blocks\r\n==13125==      possibly lost: 0 bytes in 0 blocks\r\n==13125==    still reachable: 16,090 bytes in 161 blocks\r\n==13125==         suppressed: 0 bytes in 0 blocks\r\n==13125== Reachable blocks (those to which a pointer was found) are not shown.\r\n==13125== To see them, rerun with: --leak-check=full --show-leak-kinds=all\r\n==13125== \r\n==13125== Use --track-origins=yes to see where uninitialised values come from\r\n==13125== For lists of detected and suppressed errors, rerun with: -s\r\n==13125== ERROR SUMMARY: 54 errors from 12 contexts (suppressed: 517836 from 44) \n```",
        "created_at": "2022-07-11T15:49:19.000Z",
        "updated_at": "2022-07-14T07:41:26.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-07-13T15:10:53.000Z"
    },
    "comments": [
        {
            "created_at": "2022-07-11T16:16:13.817Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17041?focusedCommentId=17565080) by David Li (lidavidm):*\nLooks like it's due to the compare kernel on strings:\r\n```\n\r\n==13125== Conditional jump or move depends on uninitialised value(s)\r\n==13125== \u00a0 \u00a0at 0x4040C54: bcmp (vg_replace_strmem.c:1203)\r\n==13125== \u00a0 \u00a0by 0x57F4FF0: compare (char_traits.h:361)\r\n==13125== \u00a0 \u00a0by 0x57F4FF0: compare (string_view.hpp:635)\r\n==13125== \u00a0 \u00a0by 0x57F4FF0: operator==<char, std::char_traits<char> > (string_view.hpp:969)\r\n==13125== \u00a0 \u00a0by 0x57F4FF0: Call<bool, nonstd::sv_lite::basic_string_view<char>, nonstd::sv_lite::basic_string_view<char> > (scalar_compare.cc:43)\r\n==13125== \u00a0 \u00a0by 0x57F4FF0: operator() (codegen_internal.h:735)\r\n==13125== \u00a0 \u00a0by 0x57F4FF0: void arrow::internal::GenerateBitsUnrolled<arrow::compute::internal::applicator::ScalarBinary<arrow::BooleanType, arrow::FixedSizeBinaryType, arrow::FixedSizeBinaryType, arrow::compute::internal::(anonymous namespace)::Equal>::ArrayArray(arrow::compute::KernelContext*, arrow::ArraySpan const&, arrow::ArraySpan const&, arrow::compute::ExecResult*)::{lambda()#1}>(unsigned char*, long, long, arrow::compute::internal::applicator::ScalarBinary<arrow::BooleanType, arrow::FixedSizeBinaryType, arrow::FixedSizeBinaryType, arrow::compute::internal::(anonymous namespace)::Equal>::ArrayArray(arrow::compute::KernelContext*, arrow::ArraySpan const&, arrow::ArraySpan const&, arrow::compute::ExecResult*)::{lambda()#1}&&) (bitmap_generate.h:103)\r\n==13125== \u00a0 \u00a0by 0x57FBB36: Write<arrow::compute::internal::applicator::ScalarBinary<OutType, Arg0Type, Arg1Type, Op>::ArrayArray<arrow::BooleanType, arrow::FixedSizeBinaryType, arrow::FixedSizeBinaryType, arrow::compute::internal::(anonymous namespace)::Equal>::<lambda()> > (codegen_internal.h:529)\r\n==13125== \u00a0 \u00a0by 0x57FBB36: ArrayArray (codegen_internal.h:735)\r\n==13125== \u00a0 \u00a0by 0x57FBB36: arrow::compute::internal::applicator::ScalarBinary<arrow::BooleanType, arrow::FixedSizeBinaryType, arrow::FixedSizeBinaryType, arrow::compute::internal::(anonymous namespace)::Equal>::Exec(arrow::compute::KernelContext*, arrow::compute::ExecSpan const&, arrow::compute::ExecResult*) (codegen_internal.h:772)\r\n==13125== \u00a0 \u00a0by 0x5243698: ExecuteSingleSpan (exec.cc:896)\r\n==13125== \u00a0 \u00a0by 0x5243698: arrow::compute::detail::(anonymous namespace)::ScalarExecutor::ExecuteSpans(arrow::compute::detail::ExecListener*) (exec.cc:864)\r\n==13125== \u00a0 \u00a0by 0x5243F49: arrow::compute::detail::(anonymous namespace)::ScalarExecutor::Execute(arrow::compute::ExecBatch const&, arrow::compute::detail::ExecListener*) (exec.cc:814)\r\n==13125== \u00a0 \u00a0by 0x53588D3: arrow::compute::(anonymous namespace)::ExecuteInternal(arrow::compute::Function const&, std::vector<arrow::Datum, std::allocator<arrow::Datum> >, long, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) (function.cc:292)\r\n==13125== \u00a0 \u00a0by 0x5359ABA: arrow::compute::Function::Execute(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const (function.cc:304)\r\n==13125== \u00a0 \u00a0by 0x5239B25: arrow::compute::CallFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) (exec.cc:1373)\r\n==13125== \u00a0 \u00a0by 0xAD6F32: arrow::compute::CheckScalar(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::shared_ptr<arrow::Scalar>, std::allocator<std::shared_ptr<arrow::Scalar> > > const&, std::shared_ptr<arrow::Scalar>, arrow::compute::FunctionOptions const*) (test_util.cc:86)\r\n==13125== \u00a0 \u00a0by 0xAD86A6: arrow::compute::CheckScalar(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::Datum, arrow::compute::FunctionOptions const*) (test_util.cc:127)\r\n==13125== \u00a0 \u00a0by 0xADA6AF: arrow::compute::CheckScalarBinary(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, arrow::Datum, arrow::Datum, arrow::Datum, arrow::compute::FunctionOptions const*) (test_util.cc:273)\r\n==13125== \u00a0 \u00a0by 0x472740: arrow::compute::TestCompareFixedSizeBinary_ArrayScalar_Test::TestBody() (scalar_compare_test.cc:767)\r\n==13125== \u00a0 \u00a0by 0x643B4DC: void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2607)\r\n==13125== \u00a0 \u00a0by 0x643290C: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\r\n==13125== \u00a0 \u00a0by 0x640DCDC: testing::Test::Run() (gtest.cc:2682)\r\n==13125== \u00a0 \u00a0by 0x640E6FE: testing::TestInfo::Run() (gtest.cc:2861)\r\n==13125== \u00a0 \u00a0by 0x640F0BD: testing::TestSuite::Run() (gtest.cc:3015)\r\n==13125== \u00a0 \u00a0by 0x641F1DB: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\r\n==13125== \u00a0 \u00a0by 0x643C497: bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2607)\r\n==13125== \u00a0 \u00a0by 0x6433AF9: bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2643)\r\n==13125== \u00a0 \u00a0by 0x641D6A8: testing::UnitTest::Run() (gtest.cc:5438)\r\n==13125== \u00a0 \u00a0by 0x4205918: RUN_ALL_TESTS() (gtest.h:2490)\r\n==13125== \u00a0 \u00a0by 0x420595B: main (gtest_main.cc:52)\r\n \n```"
        },
        {
            "created_at": "2022-07-12T12:06:21.459Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17041?focusedCommentId=17565444) by Ra\u00fal Cumplido (raulcd):*\nI've tried to investigate but haven't found the culprit. It started failing 5 days ago. My suspicious is that this PR is the cause: <https://github.com/apache/arrow/commit/6cc37cf2d1ba72c46b64fbc7ac499bd0d7296d20>\r\ncc `[~apitrou]` \u00a0"
        },
        {
            "created_at": "2022-07-12T19:18:42.268Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17041?focusedCommentId=17565977) by Antoine Pitrou (apitrou):*\nI'll take a look."
        },
        {
            "created_at": "2022-07-13T15:10:53.817Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17041?focusedCommentId=17566370) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 13597\n<https://github.com/apache/arrow/pull/13597>"
        }
    ]
}