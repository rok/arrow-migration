{
    "issue": {
        "title": "[JS] Add DataFrame.toJSON",
        "body": "***Note**: This issue was originally created as [ARROW-2202](https://issues.apache.org/jira/browse/ARROW-2202). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, `CountByResult` has its own [`toJSON` method](https://github.com/apache/arrow/blob/master/js/src/table.ts#L282), but there should be a more general one for every `DataFrame`.\r\n\r\n`CountByResult.toJSON` returns:\r\n```json\n\r\n{\r\n  \"keyA\": 10,\r\n  \"keyB\": 10,\r\n  ...\r\n}\n```\r\n\r\nA more general `toJSON` could just return a list of objects with an entry for each column. For the above `CountByResult`, the output would look like:\r\n```json\n\r\n[\r\n  {value: \"keyA\", count: 10},\r\n  {value: \"keyB\", count: 10},\r\n  ...\r\n]\n```",
        "created_at": "2018-02-22T22:43:32.000Z",
        "updated_at": "2018-02-26T14:32:56.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2018-02-26T06:39:55.094Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2202?focusedCommentId=16376441) by Paul Taylor (paul.e.taylor):*\n`[~bhulette]` since `RecordBatch`\u00a0extends\u00a0`StructVector`, and `StructVectors`\u00a0implement\u00a0`toJSON()`, we should be able to implement `toJSON()`\u00a0on the Table by\u00a0calling `toJSON()`\u00a0on each\u00a0inner `RecordBatch`. This would yield rows as compact Arrays of each value, but we could also apply the `MapView`\u00a0to each RecordBatch if we wanted rows as JS Objects of key/value pairs instead. Alternatively, we could\u00a0refactor the internal [`tableRowsToString()`](https://github.com/apache/arrow/blob/master/js/src/table.ts#L317)\u00a0method to yield compact rows.\r\n\r\nSince serializing table rows to JS Arrays or Objects can easily exceed the memory limit of\u00a0a single node process, it's probably worth exposing a row generator function. I ran into this issue piping the `toString()`\u00a0result to the console, so we can follow the same pattern here.\r\n\r\nIt also might be valuable to name it something else, and\u00a0reserve `toJSON()` for generating the Arrow JSON format. The rational here is that\u00a0`toJSON()` is\u00a0automatically\u00a0invoked by `JSON.stringify()`, which is most commonly used for serialization and deserialization, making this possible:\r\n```java\n\r\nconst newTable = Table.from(JSON.parse(JSON.stringify(oldTable)));\r\n```"
        },
        {
            "created_at": "2018-02-26T14:32:56.117Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2202?focusedCommentId=16376958) by Brian Hulette (bhulette):*\n[~paul.e.taylor] Good points. Definitely makes sense that `toJSON()` should return data parse-able by `Table.from`. I made a new ticket for creating that version of `toJSON()`. Maybe this accessor could be called `toObjectArray()`?\r\n\r\nMy primary motivation for this was to be able to easily access data from a relatively small `Table`, one that has been heavily filtered or aggregated somehow, so I wasn't too concerned with exceeding memory limits. That being said making it a generator or at least having a generator version could be useful for large tables as well."
        }
    ]
}