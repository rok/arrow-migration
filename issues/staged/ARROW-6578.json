{
    "issue": {
        "title": "[C++] Casting int64 to string columns",
        "body": "***Note**: This issue was originally created as [ARROW-6578](https://issues.apache.org/jira/browse/ARROW-6578). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI wanted to cast a list of a tables to the same schema so I could use concat_tables later. However, I encountered ArrowNotImplementedError:\r\n```java\n\r\n---------------------------------------------------------------------------\r\nArrowNotImplementedError                  Traceback (most recent call last)\r\n<ipython-input-11-bd4916c221bf> in <module>\r\n----> 1 list_tb = [i.cast(mts_schema, safe = True) for i in list_tb]\r\n\r\n<ipython-input-11-bd4916c221bf> in <listcomp>(.0)\r\n----> 1 list_tb = [i.cast(mts_schema, safe = True) for i in list_tb]\r\n\r\n~\\AppData\\Local\\Continuum\\miniconda3\\envs\\cyclone\\lib\\site-packages\\pyarrow\\table.pxi in itercolumns()\r\n\r\n~\\AppData\\Local\\Continuum\\miniconda3\\envs\\cyclone\\lib\\site-packages\\pyarrow\\table.pxi in pyarrow.lib.Column.cast()\r\n\r\n~\\AppData\\Local\\Continuum\\miniconda3\\envs\\cyclone\\lib\\site-packages\\pyarrow\\error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowNotImplementedError: No cast implemented from int64 to string\r\n```\r\nSome context: I want to read and concatenate a bunch of csv files that come from partitioning of the same table. Using cast after reading csv is usually significantly faster than specifying column_types in ConvertOptions. There are string columns that are mostly populated with integer-like values so a particular file can have an integer-only column. This situation is rather common so having an option to cast int64 column to string column would be helpful.\r\n\r\n\u00a0",
        "created_at": "2019-09-17T10:38:13.000Z",
        "updated_at": "2019-10-06T21:24:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-10-06T21:24:34.000Z"
    },
    "comments": [
        {
            "created_at": "2019-09-17T10:44:20.325Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6578?focusedCommentId=16931282) by Antoine Pitrou (apitrou):*\nA CSV file is made of strings. So you're saying that converting the CSV values to int64 and then converting them back to strings would be faster than reading them directly as strings? I doubt it.\r\n\r\nRegardless, it could be useful to have a int64 -> string cast implementation. But I don't think it is the right solution in your case :)"
        },
        {
            "created_at": "2019-09-18T07:33:19.090Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6578?focusedCommentId=16932161) by Igor Yastrebov (Igor Yastrebov):*\n`[~pitrou]` \u00a0When I benchmarked it on 16 csv files ~200 MB in size, using read+cast(safe=False) was >10% faster than read with ConvertOptions.\r\n\r\nThis doesn't account for string->int64->string conversions since they aren't implemented\u00a0:)"
        },
        {
            "created_at": "2019-10-06T21:24:34.983Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6578?focusedCommentId=16945469) by Wes McKinney (wesm):*\nIssue resolved by pull request 5556\n<https://github.com/apache/arrow/pull/5556>"
        }
    ]
}