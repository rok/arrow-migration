{
    "issue": {
        "title": "[C++] Add data structure to \"stage\" a sequence of IPC messages from in-memory data",
        "body": "***Note**: This issue was originally created as [ARROW-1860](https://issues.apache.org/jira/browse/ARROW-1860). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, when you need to pre-allocate space for a record batch or a stream (schema + dictionaries + record batches), you must make multiple passes over the data structures of interest (and use e.g. `MockOutputStream` to compute the size of the output buffer). It would be useful to make a single pass to \"prepare\" the IPC payload for both sizing and writing to prevent having to make multiple passes",
        "created_at": "2017-11-26T16:43:59.000Z",
        "updated_at": "2018-09-21T18:20:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-09-21T18:20:36.000Z"
    },
    "comments": [
        {
            "created_at": "2018-01-18T17:08:14.091Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1860?focusedCommentId=16330782) by Wes McKinney (wesm):*\n`[~1xuepanchen1]` I'm going to take a look at this if you don't mind. There are some nuances in the IPC writer around handling sliced bitmaps (see https://github.com/apache/arrow/blob/master/cpp/src/arrow/ipc/writer.cc#L125), and I want to see if we can improve the write performance in microbenchmarks while doing this refactoring"
        },
        {
            "created_at": "2018-01-24T17:06:06.874Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1860?focusedCommentId=16337899) by Wes McKinney (wesm):*\nI'm running into a slight issue with this refactoring around output streams which are currently at a position that is not a multiple of 8. \r\n\r\nsee https://github.com/apache/arrow/blob/master/cpp/src/arrow/ipc/metadata-internal.cc#L903\r\n\r\nThis results in the entire message payload being non-deterministic depending on the state of the OutputStream. I don't think it will impact any applications, but I suggest we write padding bytes at the _start_ to an 8-byte offset and then begin writing the message. This is the same approach used by `WriteTensor` in https://github.com/apache/arrow/blob/master/cpp/src/arrow/ipc/writer.cc#L621. \r\n\r\n`[~robertnishihara]` `[~pcmoritz]` `[~xhochy]` does this seem reasonable?"
        },
        {
            "created_at": "2018-03-12T03:46:01.616Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1860?focusedCommentId=16394781) by Wes McKinney (wesm):*\nMoving this to 0.10.0"
        },
        {
            "created_at": "2018-08-30T22:48:00.465Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1860?focusedCommentId=16598010) by Wes McKinney (wesm):*\nI will need to revisit this in the context of Flight RPC, where this data structure may be used to coordinate writes onto the GRPC output stream"
        },
        {
            "created_at": "2018-09-21T18:20:36.164Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1860?focusedCommentId=16624001) by Wes McKinney (wesm):*\nResolved in https://github.com/apache/arrow/commit/db0ef22dd68ae00e11f09da40b6734c1d9770b57#diff-caf39e9e4747cfd6c97822e76dbac4e5"
        }
    ]
}