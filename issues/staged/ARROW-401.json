{
    "issue": {
        "title": "[Java] Floating point vectors should do an approximate comparison in integration tests",
        "body": "***Note**: This issue was originally created as [ARROW-401](https://issues.apache.org/jira/browse/ARROW-401). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFloating point precision rears its ugly head:\n\n```Java\nIncompatible files\nDifferent values in column:\nField{name=float64_nullable, type=FloatingPoint{2}, children=[], layout=TypeLayout{[{width=1,type=VALIDITY}, {width=64,type=DATA}]}} at index 1: 912.4140000000002 != 912.414\n10:23:45.863 [main] ERROR org.apache.arrow.tools.Integration - Incompatible files\njava.lang.IllegalArgumentException: Different values in column:\nField{name=float64_nullable, type=FloatingPoint{2}, children=[], layout=TypeLayout{[{width=1,type=VALIDITY}, {width=64,type=DATA}]}} at index 1: 912.4140000000002 != 912.414\n```",
        "created_at": "2016-12-02T15:25:05.000Z",
        "updated_at": "2017-02-13T16:34:52.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2016-12-05T22:57:12.000Z"
    },
    "comments": [
        {
            "created_at": "2016-12-03T01:05:34.206Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-401?focusedCommentId=15717043) by Julien Le Dem (julienledem):*\nPR: https://github.com/apache/arrow/pull/223"
        },
        {
            "created_at": "2016-12-03T02:46:17.023Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-401?focusedCommentId=15717215) by Jacques Nadeau (jnadeau):*\nThis is what I've used elsewhere before:\n```Java\n    boolean evaluateEquality(Float f1, Float f2) {\n      if(f1.isNaN()){\n        return f2.isNaN();\n      }\n\n      if(f1.isInfinite()){\n        return f2.isInfinite();\n      }\n\n      if ((f1 + f2) / 2 != 0) {\n        return Math.abs(f1 - f2) / ((f1 + f2) / 2) < 1.0E-6;\n      } else {\n        return !(f1 != 0);\n      }\n    }\n```\n\n```Java\n    boolean evaluateEquality(Double f1, Double f2) {\n      if(f1.isNaN()){\n        return f2.isNaN();\n      }\n\n      if(f1.isInfinite()){\n        return f2.isInfinite();\n      }\n\n      if ((f1 + f2) / 2 != 0) {\n        return Math.abs(f1 - f2) / ((f1 + f2) / 2) < 1.0E-12;\n      } else {\n        return !(f1 != 0);\n      }\n    }\n  }\n```"
        },
        {
            "created_at": "2016-12-05T18:18:21.967Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-401?focusedCommentId=15722933) by Julien Le Dem (julienledem):*\nwhat is the source for those?\nAny details on why ![(f1 ]((f1 )= 0) as opposed to f1 == 0 for example?"
        },
        {
            "created_at": "2016-12-05T18:43:29.334Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-401?focusedCommentId=15723000) by Jacques Nadeau (jnadeau):*\nI wrote it based initially on the code here: https://github.com/mapr/drill-test-framework/blob/master/framework/src/main/java/org/apache/drill/test/framework/ColumnList.java#L115\n\nDon't remember offhand the f1 != 0. What are the rules about NaN and Infinite in the case of a floating point negation?"
        },
        {
            "created_at": "2016-12-05T19:03:28.796Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-401?focusedCommentId=15723050) by Julien Le Dem (julienledem):*\nthis method will return early if f1 is NAN or infinite so there's no special case here."
        },
        {
            "created_at": "2016-12-05T19:05:28.875Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-401?focusedCommentId=15723055) by Jacques Nadeau (jnadeau):*\ngood point :D"
        },
        {
            "created_at": "2016-12-05T22:57:12.655Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-401?focusedCommentId=15723644) by Julien Le Dem (julienledem):*\nIssue resolved by pull request 223\n<https://github.com/apache/arrow/pull/223>"
        }
    ]
}