{
    "issue": {
        "title": "[C++] [Parquet] Writing uint32 does not preserve parquet's LogicalType",
        "body": "***Note**: This issue was originally created as [ARROW-12201](https://issues.apache.org/jira/browse/ARROW-12201). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen writing a `uint32` column, (parquet's) logical type is not written, limiting interoperability with other engines.\r\n\r\nMinimal Python\r\n\r\n```\r\nimport pyarrow as pa\r\n\r\ndata = {\"uint32\", [1, None, 0]}\r\nschema = pa.schema([pa.field('uint32', pa.uint32())])\r\n\r\nt = pa.table(data, schema=schema)\r\npa.parquet.write_table(t, \"bla.parquet\")\r\n```\r\n\u00a0\r\nInspecting it with spark:\r\n\r\n```\r\nfrom pyspark.sql import SparkSession\r\n\r\nspark = SparkSession.builder.getOrCreate()\r\n\r\ndf = spark.read.parquet(\"bla.parquet\")\r\nprint(df.select(\"uint32\").schema)\r\n```\r\n\r\nshows `StructType(List(StructField(uint32,LongType,true)))`. \"LongType\" indicates that the field is interpreted as a 64 bit integer. Further inspection of the metadata shows that both convertedType and logicalType are not being set. Note that this is independent of the arrow-specific schema written in the metadata.",
        "created_at": "2021-04-05T04:42:47.000Z",
        "updated_at": "2021-04-05T15:32:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Parquet",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-04-05T10:25:28.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-05T10:10:27.650Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12201?focusedCommentId=17314751) by Antoine Pitrou (apitrou):*\nHmm, that's bummer. Hopefully we can fix this for 4.0.0."
        },
        {
            "created_at": "2021-04-05T10:24:50.036Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12201?focusedCommentId=17314755) by Antoine Pitrou (apitrou):*\nOh, actually, you simply need to add `version='2.0'` to the `write_table` call, and the annotation will be written out."
        },
        {
            "created_at": "2021-04-05T10:25:20.711Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12201?focusedCommentId=17314757) by Antoine Pitrou (apitrou):*\nWill close as this works as intended (by default maximum compatibility with old readers is ensured). However, we may want to bump the default version as some point."
        },
        {
            "created_at": "2021-04-05T10:27:36.098Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12201?focusedCommentId=17314760) by Jorge Leit\u00e3o (jorgecarleitao):*\nGot it. \r\n\r\nIn this case, doesn't compatibility require setting ConvertedType = UINT_32?\r\n"
        },
        {
            "created_at": "2021-04-05T10:33:25.232Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12201?focusedCommentId=17314774) by Antoine Pitrou (apitrou):*\nI have no idea why it wasn't done. This seems to date back to a 2016 PR:\r\nhttps://github.com/apache/parquet-cpp/pull/158/files#r607025397\r\n"
        },
        {
            "created_at": "2021-04-05T11:02:14.090Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12201?focusedCommentId=17314790) by Jorge Leit\u00e3o (jorgecarleitao):*\nholy cow. Ok, that explains it. Thanks a lot, and sorry for the noise."
        },
        {
            "created_at": "2021-04-05T15:32:50.665Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12201?focusedCommentId=17314930) by Micah Kornfield (emkornfield):*\nThere was another bug that discussed this at length.  int64 for int32 was used so the type could properly round trip.  But yes this is WAI."
        }
    ]
}