{
    "issue": {
        "title": "[C++][Compute] Add Top-k kernel",
        "body": "***Note**: This issue was originally created as [ARROW-7587](https://issues.apache.org/jira/browse/ARROW-7587). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAdd a kernel to get top k smallest or largest elements (indices). If we don't require these elements to be sorted, std::nth_element will be a much faster solution than sorting everything then pick top k.",
        "created_at": "2020-01-16T02:32:29.000Z",
        "updated_at": "2021-08-02T18:36:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-03-12T15:08:32.000Z"
    },
    "comments": [
        {
            "created_at": "2020-01-16T02:33:50.804Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7587?focusedCommentId=17016470) by Yibo Cai (yibocai):*\nComments welcomed"
        },
        {
            "created_at": "2020-03-02T08:57:55.096Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7587?focusedCommentId=17048886) by Yibo Cai (yibocai):*\nDid some benchmark again std::sort(), std::partial_sort() and std::nth_element().\r\n Code at <https://github.com/cyb70289/mytests/blob/master/cpp/sort-nth.cc>.\r\n\r\nTested sorting 10,000,000 elements, partial_sort first 1/3 elements, and nth_element 1/3 element. Below is the result:\r\n std::sort(): 1.90883 s\r\n std::partial_sort(): 4.68398 s\r\n std::nth_element(): 0.114514 s\r\n\r\nstd::partial_sort is much slower than std::sort when the number of elements to be partially sorted is large.\r\n **std:nth_element() is order faster, should be the best choice.**\r\n\r\nPS: why partial_sort can be slow\r\n <https://stackoverflow.com/questions/45455345/performance-of-stdpartial-sort-versus-stdsort-when-sorting-the-whole-ran>\r\n <https://www.quora.com/Why-is-STLs-partial_sort-slower-than-the-asymptotic-lower-bound>"
        },
        {
            "created_at": "2020-03-12T15:08:32.283Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7587?focusedCommentId=17058002) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 6530\n<https://github.com/apache/arrow/pull/6530>"
        },
        {
            "created_at": "2021-05-12T18:18:21.682Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7587?focusedCommentId=17343435) by Ian Cook (icook):*\n`[~yibocai]` it looks like this kernel is not registered in the function registry and is not listed in the compute functions docs page. Is it intended for internal use only?"
        },
        {
            "created_at": "2021-05-12T18:27:40.112Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7587?focusedCommentId=17343442) by Antoine Pitrou (apitrou):*\n`[~icook]` it's called \"partition_nth_indices\": https://arrow.apache.org/docs/cpp/compute.html#sorts-and-partitions"
        },
        {
            "created_at": "2021-05-12T20:05:52.397Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7587?focusedCommentId=17343547) by Ian Cook (icook):*\nAh, thanks `[~apitrou]`. I can see now that this was added to the function registry as \"partition_indices\" in ARROW-8792 then renamed \"partition_nth_indices\" in ARROW-9390."
        }
    ]
}