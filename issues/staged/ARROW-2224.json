{
    "issue": {
        "title": "[C++] Get rid of boost regex usage",
        "body": "***Note**: This issue was originally created as [ARROW-2224](https://issues.apache.org/jira/browse/ARROW-2224). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe're using `boost::regex` to parse decimal strings for `decimal128` types. We should use `libre2` instead.",
        "created_at": "2018-02-26T23:33:10.000Z",
        "updated_at": "2018-04-11T15:58:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-04-11T15:54:15.000Z"
    },
    "comments": [
        {
            "created_at": "2018-04-10T20:08:24.046Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2224?focusedCommentId=16432890) by Antoine Pitrou (apitrou):*\nCan you explain the \"should\"? AFAICS libre2 isn't header-only, so it may present the same linking and ABI issues as boost-regex."
        },
        {
            "created_at": "2018-04-10T20:38:04.801Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2224?focusedCommentId=16432928) by Phillip Cloud (cpcloud):*\nThe \"should\" here isn't related to linking issues, rather, it's related to performance. See here for some benchmarks: http://lh3lh3.users.sourceforge.net/reb.shtml\r\n\r\nThose benchmarks are now coming up on 8 years old, so we should revisit that.\r\n\r\nSome of the linking issues might be mitigated by using `<regex>` on Windows and `regcomp` on UNIX platforms. I'm unaware of the perils of that solution (if any)."
        },
        {
            "created_at": "2018-04-10T21:05:25.231Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2224?focusedCommentId=16432987) by Antoine Pitrou (apitrou):*\nHow important is it to have fast parsing of decimal types? If we reimplement our own parsing, we can tweak performance **and** remove the troublesome dependency."
        },
        {
            "created_at": "2018-04-10T21:11:36.107Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2224?focusedCommentId=16432995) by Phillip Cloud (cpcloud):*\nThe original implementation used C++ iterators to implement a handwritten parser, but it quickly got complex once we needed to support integers with exponential notation. Maybe the complexity of dealing with boost is greater than the complexity of debugging a handwritten parser, in which case it would be worth it to reimplement it without a regular expression."
        },
        {
            "created_at": "2018-04-10T21:12:37.991Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2224?focusedCommentId=16432996) by Antoine Pitrou (apitrou):*\nNote that the day where we really care about decimal performance, we should probably use Stefan Krah's libmpdec, which is also used by the Python _decimal module. It's a pure C library, is fast and would probably allow us to have tighter interoperation with Python decimals."
        },
        {
            "created_at": "2018-04-11T15:54:15.489Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2224?focusedCommentId=16434099) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 1880\n<https://github.com/apache/arrow/pull/1880>"
        }
    ]
}