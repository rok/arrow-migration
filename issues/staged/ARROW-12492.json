{
    "issue": {
        "title": "[Python] Add an helper method to decode a DictionaryArray back to a plain Array",
        "body": "***Note**: This issue was originally created as [ARROW-12492](https://issues.apache.org/jira/browse/ARROW-12492). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nTo create a DictionaryArray pyarrow currently offers the `Array.dictionary_encode` helper, but there is a lack of an obvious way to do the reverse. A `DictionaryArray.decode` helper could provide an immediate obvious solution to get back an unrolled Array from the dictionary encoded version.",
        "created_at": "2021-04-21T09:00:29.000Z",
        "updated_at": "2021-04-26T18:11:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T18:11:35.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-21T09:01:38.638Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12492?focusedCommentId=17326378) by Antoine Pitrou (apitrou):*\nThis sounds reasonable to me. Do you want to submit a PR?"
        },
        {
            "created_at": "2021-04-21T09:03:01.286Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12492?focusedCommentId=17326381) by Alessandro Molina (amol-):*\nImplementation can be based on `DictionaryArray.dictionary.take(DictionaryArray.indices)` doing a `DictionaryArray.cast` does the trick too, but in the casting seems to just run a `Take` underlying ( https://github.com/apache/arrow/blob/6b4a4aacc80b4be482054855db4af529b0bc5e65/cpp/src/arrow/compute/kernels/scalar_cast_internal.cc#L166 ) and thus it seems there is no performance benefit in casting\r\n\r\n```python\n\r\n>>> x = pa.DictionaryArray.from_arrays(\r\n...     pa.array([x % 2 for x in range(1000000)]),\r\n...     pa.array([\"A\", \"B\"])\r\n... )\r\n>>> \r\n>>> def take():\r\n...     return x.dictionary.take(x.indices)\r\n... \r\n>>> def cast():\r\n...     return x.cast(x.type.value_type)\r\n... \r\n>>> import timeit\r\n>>> timeit.timeit(take, number=1000)\r\n77.74172437500002\r\n>>> timeit.timeit(cast, number=1000)\r\n77.631453051\r\n```"
        },
        {
            "created_at": "2021-04-21T09:12:14.617Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12492?focusedCommentId=17326386) by Alessandro Molina (amol-):*\n`[~apitrou]` \u00a0yes, I'll propose a PR. My understanding at the moment is that it's a minor change that needs to be implemented only in pyarrow as libarrow doesn't currently expose any dedicated helper to encode/decode dictionaries in the classes themselves. Is my understanding correct?"
        },
        {
            "created_at": "2021-04-21T09:14:35.198Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12492?focusedCommentId=17326390) by Antoine Pitrou (apitrou):*\nYes, this is correct."
        },
        {
            "created_at": "2021-04-26T18:11:35.536Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12492?focusedCommentId=17332660) by David Li (lidavidm):*\nIssue resolved by pull request 10123\n<https://github.com/apache/arrow/pull/10123>"
        }
    ]
}