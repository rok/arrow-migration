{
    "issue": {
        "title": "[Packaging][Wheel] Symlink libraries in wheels",
        "body": "***Note**: This issue was originally created as [ARROW-5158](https://issues.apache.org/jira/browse/ARROW-5158). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nLibraries are copied instead of symlinking in linux and osx wheels, which result quiet big binaries:\r\n\r\n\u00a0\r\nThis is what the wheel contains before running auditwheel:\r\n\u00a0\r\n```Java\n\r\n-rwxr-xr-x\u00a0 1 root root 128K Apr\u00a0 3 09:02 libarrow_boost_filesystem.so\r\n-rwxr-xr-x\u00a0 1 root root 128K Apr\u00a0 3 09:02 libarrow_boost_filesystem.so.1.66.0\r\n-rwxr-xr-x\u00a0 1 root root 1.2M Apr\u00a0 3 09:02 libarrow_boost_regex.so\r\n-rwxr-xr-x\u00a0 1 root root 1.2M Apr\u00a0 3 09:02 libarrow_boost_regex.so.1.66.0\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 30K Apr\u00a0 3 09:02 libarrow_boost_system.so\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 30K Apr\u00a0 3 09:02 libarrow_boost_system.so.1.66.0\r\n-rwxr-xr-x\u00a0 1 root root 1.4M Apr\u00a0 3 09:02 libarrow_python.so\r\n-rwxr-xr-x\u00a0 1 root root 1.4M Apr\u00a0 3 09:02 libarrow_python.so.14\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 12M Apr\u00a0 3 09:02 libarrow.so\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 12M Apr\u00a0 3 09:02 libarrow.so.14\r\n-rw-r--r--\u00a0 1 root root 6.1M Apr\u00a0 3 09:02 lib.cpp\r\n-rwxr-xr-x\u00a0 1 root root 2.4M Apr\u00a0 3 09:02 [lib.cpython-36m-x86_64-linux-gnu.so|http://lib.cpython-36m-x86_64-linux-gnu.so/]\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 55M Apr\u00a0 3 09:02 libgandiva.so\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 55M Apr\u00a0 3 09:02 libgandiva.so.14\r\n-rwxr-xr-x\u00a0 1 root root 2.9M Apr\u00a0 3 09:02 libparquet.so\r\n-rwxr-xr-x\u00a0 1 root root 2.9M Apr\u00a0 3 09:02 libparquet.so.14\r\n-rwxr-xr-x\u00a0 1 root root 309K Apr\u00a0 3 09:02 libplasma.so\r\n-rwxr-xr-x\u00a0 1 root root 309K Apr\u00a0 3 09:02 libplasma.so.14\r\n\u00a0\n```\r\n\r\nAfter running auditwheel, the repaired wheel contains:\r\n\u00a0\r\n```Java\n\r\n-rwxr-xr-x\u00a0 1 root root 128K Apr\u00a0 3 09:02 libarrow_boost_filesystem.so\r\n-rwxr-xr-x\u00a0 1 root root 128K Apr\u00a0 3 09:02 libarrow_boost_filesystem.so.1.66.0\r\n-rwxr-xr-x\u00a0 1 root root 1.2M Apr\u00a0 3 09:02 libarrow_boost_regex.so\r\n-rwxr-xr-x\u00a0 1 root root 1.2M Apr\u00a0 3 09:02 libarrow_boost_regex.so.1.66.0\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 30K Apr\u00a0 3 09:02 libarrow_boost_system.so\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 30K Apr\u00a0 3 09:02 libarrow_boost_system.so.1.66.0\r\n-rwxr-xr-x\u00a0 1 root root 1.6M Apr\u00a0 3 09:55 libarrow_python.so\r\n-rwxr-xr-x\u00a0 1 root root 1.4M Apr\u00a0 3 09:02 libarrow_python.so.14\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 12M Apr\u00a0 3 09:55 libarrow.so\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 12M Apr\u00a0 3 09:02 libarrow.so.14\r\n-rw-r--r--\u00a0 1 root root 6.1M Apr\u00a0 3 09:02 lib.cpp\r\n-rwxr-xr-x\u00a0 1 root root 2.5M Apr\u00a0 3 09:55 [lib.cpython-36m-x86_64-linux-gnu.so|http://lib.cpython-36m-x86_64-linux-gnu.so/]\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 59M Apr\u00a0 3 09:55 libgandiva.so\r\n-rwxr-xr-x\u00a0 1 root root\u00a0 55M Apr\u00a0 3 09:02 libgandiva.so.14\r\n-rwxr-xr-x\u00a0 1 root root 3.5M Apr\u00a0 3 09:55 libparquet.so\r\n-rwxr-xr-x\u00a0 1 root root 2.9M Apr\u00a0 3 09:02 libparquet.so.14\r\n-rwxr-xr-x\u00a0 1 root root 345K Apr\u00a0 3 09:55 libplasma.so\r\n-rwxr-xr-x\u00a0 1 root root 309K Apr\u00a0 3 09:02 libplasma.so.14\r\n```\r\n\u00a0\r\nHere is the output of auditwheel <https://travis-ci.org/kszucs/crossbow/builds/514605723#L3340>\r\n\r\nThey should be symlinks, we have special code for this: https://github.com/apache/arrow/blob/4495305092411e8551c60341e273c8aa3c14b282/python/setup.py#L489-L499 This is probably not going into the wheel as wheels are zip-files and they don't support symlinks by default. So we probably need to pass the `--symlinks` parameter to the wheel code.",
        "created_at": "2019-04-10T12:11:57.000Z",
        "updated_at": "2020-06-15T16:24:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Packaging",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-06-15T16:23:59.000Z"
    },
    "comments": [
        {
            "created_at": "2020-01-29T09:43:54.294Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5158?focusedCommentId=17025745) by Michael Marino (mmarino):*\nNote that this is critical for applications using pyarrow in environments where space is limited.\u00a0 This is the case with e.g. ([AWS Lambda\\|[https://docs.aws.amazon.com/lambda/latest/dg/limits.html]]), where the package size of all modules needs to be below 250 MB.\u00a0 With this bug, it is impossible to deploy pyarrow together with e.g. pandas/numpy, making it impossible to load parquet files in lambda functions.\u00a0\u00a0"
        },
        {
            "created_at": "2020-01-30T02:04:18.544Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5158?focusedCommentId=17026397) by Wes McKinney (wesm):*\nYou are welcome to submit pull requests to help. \r\n\r\nMy organization (Ursa Labs) for example has no sponsors who use Lambda and we don't use Lambda ourselves so it's hard for us to volunteer our time to do packaging engineering on something we don't directly need. So we may work on this eventually but it's hard to say when"
        },
        {
            "created_at": "2020-02-06T12:32:18.045Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5158?focusedCommentId=17031544) by Michael Marino (mmarino):*\nHi Wes, thanks for the response.\u00a0 Indeed, I understand the issue and that this isn't a critical part of the immediate timeline.\u00a0 We currently work around this, and so it is not yet critical for us, but, especially with AWS pushing serverless for handling data workflows, I do expect this to become an issue for us and for others sometime soon.\u00a0\r\n\r\n\u00a0\r\n\r\nI personally have started looking at some possible solutions and will try to submit a PR here, but I would need some guidance as to the external requirements of the package.\u00a0 Given the conversation about this [here](https://discuss.python.org/t/symbolic-links-in-wheels/1945/5), it sounds like the libraries are packaged in such a way so as to be usable by other tools (e.g. pyspark?).\u00a0 If this is **not**\u00a0the case, then I would focus on trying to update how the library is loaded from within pyarrow itself to handle the case when the library is coming from within the wheel.\u00a0\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-06-15T16:24:00.016Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5158?focusedCommentId=17135998) by Wes McKinney (wesm):*\nThis was resolved by ARROW-5082"
        }
    ]
}