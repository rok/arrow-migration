{
    "issue": {
        "title": "[C++] parquet with invalid utf8 does not error",
        "body": "***Note**: This issue was originally created as [ARROW-14037](https://issues.apache.org/jira/browse/ARROW-14037). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe code below likely results in undefined behavior as the data in the parquet is not valid utf8.\r\n\r\n```java\n\r\nfrom io import BytesIO\r\nimport pyarrow\r\nimport pyarrow.parquet\r\n\r\n// parquet with 1 column marked as string with invalid utf8\r\ndata = [\r\n        80, 65, 82, 49, 21, 6, 21, 22, 21, 22, 92, 21, 2, 21, 0, 21, 2, 21, 0, 21, 4, 21,\r\n        0, 18, 28, 54, 0, 40, 5, 104, 101, 255, 108, 111, 24, 5, 104, 101, 255, 108, 111,\r\n        0, 0, 0, 3, 1, 5, 0, 0, 0, 104, 101, 255, 108, 111, 38, 110, 28, 21, 12, 25, 37,\r\n        6, 0, 25, 24, 2, 99, 49, 21, 0, 22, 2, 22, 102, 22, 102, 38, 8, 60, 54, 0, 40, 5,\r\n        104, 101, 255, 108, 111, 24, 5, 104, 101, 255, 108, 111, 0, 0, 0, 21, 4, 25, 44,\r\n        72, 4, 114, 111, 111, 116, 21, 2, 0, 21, 12, 37, 2, 24, 2, 99, 49, 37, 0, 76, 28,\r\n        0, 0, 0, 22, 2, 25, 28, 25, 28, 38, 110, 28, 21, 12, 25, 37, 6, 0, 25, 24, 2, 99,\r\n        49, 21, 0, 22, 2, 22, 102, 22, 102, 38, 8, 60, 54, 0, 40, 5, 104, 101, 255, 108,\r\n        111, 24, 5, 104, 101, 255, 108, 111, 0, 0, 0, 22, 102, 22, 2, 0, 40, 44, 65, 114,\r\n        114, 111, 119, 50, 32, 45, 32, 78, 97, 116, 105, 118, 101, 32, 82, 117, 115, 116,\r\n        32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 111,\r\n        102, 32, 65, 114, 114, 111, 119, 0, 130, 0, 0, 0, 80, 65, 82, 49,\r\n]\r\ndata = BytesIO(bytearray(data))\r\n\r\na = pyarrow.parquet.read_table(data)\r\n\r\nprint(a.column(0))\r\n```\r\n\r\nbut maybe this is by design and not a concern?",
        "created_at": "2021-09-19T14:45:10.000Z",
        "updated_at": "2021-09-19T18:50:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-09-19T16:04:34.280Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14037?focusedCommentId=17417361) by Antoine Pitrou (apitrou):*\nIndeed, we don't check that the data is valid on loading.\r\n\r\nYou could call `a.validate(full=True)` and should get an error, though."
        },
        {
            "created_at": "2021-09-19T16:09:24.203Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14037?focusedCommentId=17417363) by Antoine Pitrou (apitrou):*\nOh, and by the way, the loading can probably be made a little simpler:\r\n```python\n\r\ndata = [ 80, ... ]\r\ndata = BytesIO(bytearray(data))\r\n```"
        },
        {
            "created_at": "2021-09-19T18:46:41.912Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14037?focusedCommentId=17417379) by Jorge Leit\u00e3o (jorgecarleitao):*\nThanks; I have updated the example.\r\n\r\nThe context of this JIRA is that, in Rust, performing this operation must be marked as \"unsafe\" because it can result in UB. https://github.com/apache/arrow-rs/issues/786. Rust and C++ are similar in this context (of triggering UB in non-valid utf8), which is why I raised this here also.\r\n\r\nIf I am understanding correctly, the design is that it is the user of `Utf8Array`'s responsibility to always validate the array prior to using it, to ensure no UB is triggered? If that is the case, then I think we should mark this as won't fix / work as intended."
        },
        {
            "created_at": "2021-09-19T18:50:10.567Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14037?focusedCommentId=17417380) by Antoine Pitrou (apitrou):*\nWell, if your operations don't care about invalid UTF8 then you don't need to validate the data. C++ itself doesn't care about UTF8 validity."
        }
    ]
}