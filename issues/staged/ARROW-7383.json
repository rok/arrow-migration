{
    "issue": {
        "title": "[C++] [Java] Cannot Read In Java/Scala Streaming Arrow Files Generated In C++",
        "body": "***Note**: This issue was originally created as [ARROW-7383](https://issues.apache.org/jira/browse/ARROW-7383). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm working on a project to shuttle data back and forth from a java and c++ process. I'm able to read the java stream object in C+. However, I'm unable to read the C+ stream object in my Java project. When I do, I get a problem that I can't deserialize the message.\r\n```java\n\r\nException in thread \"main\" java.lang.IllegalArgumentExceptionException in thread \"main\" java.lang.IllegalArgumentException at java.nio.ByteBuffer.allocate(ByteBuffer.java:334) at org.apache.arrow.vector.ipc.message.MessageSerializer.readMessage(MessageSerializer.java:543) at org.apache.spark.sql.execution.arrow.ArrowConverters$$anon$3.readNextBatch(ArrowConverters.scala:243) at org.apache.spark.sql.execution.arrow.ArrowConverters$$anon$3.<init>(ArrowConverters.scala:229) at org.apache.spark.sql.execution.arrow.ArrowConverters$.getBatchesFromStream(ArrowConverters.scala:228) at org.apache.spark.sql.execution.arrow.ArrowConverters$$anonfun$readArrowStreamFromFile$2.apply(ArrowConverters.scala:216) at org.apache.spark.sql.execution.arrow.ArrowConverters$$anonfun$readArrowStreamFromFile$2.apply(ArrowConverters.scala:214) at org.apache.spark.util.Utils$.tryWithResource(Utils.scala:2543) at org.apache.spark.sql.execution.arrow.ArrowConverters$.readArrowStreamFromFile(ArrowConverters.scala:214) at org.apache.spark.sql.execution.arrow.MyArrowReader.rawRead(MyArrowReader.scala:23) at com.adobe.compute.PlatformGet$.main(PlatformGet.scala:121) at com.adobe.compute.PlatformGet.main(PlatformGet.scala) \n```\r\nI checked out the code in MessageSerializer.java and it looks like it is expecting the read size to be created in the first four bytes of the file. Those four bytes are\u00a0`[-1, -1, -1, -1]` in the C++ file, but in the Java file they are not. I do not know much about the internals of the Arrow streaming file format, so I can't say what it is supposed to be.\r\n\r\nI'm able to read the streaming file created in Java back in java (so Java is compatible with itself). The C++ code is able to read either the Java streaming file or the C++ Streaming file. Both work.\r\n\r\nHere's my C++ project to read and create a streaming object of its own.\r\n\r\n\u00a0\r\n```java\n\r\narrow::Status Table__from_RecordBatchStreamReader(\r\n        const std::shared_ptr<arrow::ipc::RecordBatchReader>& reader,\r\n        std::shared_ptr<::arrow::Table>* table) {    std::vector<std::shared_ptr<arrow::RecordBatch>> batches;\r\n    shared_ptr<arrow::RecordBatch> cur;\r\n    do {\r\n        ARROW_RETURN_NOT_OK(reader->ReadNext(&cur));\r\n        if (cur)\r\n            batches.push_back(cur);\r\n    } while (cur);    return arrow::Table::FromRecordBatches(batches, table);\r\n}\r\n#define EXIT_ON_FAILURE(expr)                      \\\r\n  do {                                             \\\r\n    arrow::Status status_ = (expr);                \\\r\n    if (!status_.ok()) {                           \\\r\n      std::cerr << status_.message() << std::endl; \\\r\n      return EXIT_FAILURE;                         \\\r\n    }                                              \\\r\n  } while (0);void checkStatus(arrow::Status st) {\r\n    if (st.ok())\r\n        return;\r\n    std::cout << st.ToString() << std::endl;\r\n}int main(int , char** argv) {\r\n    (void)argv;\r\n    std::shared_ptr<arrow::io::InputStream> infile\r\n        = *arrow::io::MemoryMappedFile::Open(\"/tmp/java-arrow-stream.arrow\", arrow::io::FileMode::READ);\r\n    std::shared_ptr<arrow::ipc::RecordBatchReader> reader;\r\n    checkStatus(\r\n            arrow::ipc::RecordBatchStreamReader::Open(infile, &reader));\r\n    std::shared_ptr<arrow::Table> table;\r\n    checkStatus(Table__from_RecordBatchStreamReader(reader, &table));    auto schema = reader->schema();    shared_ptr<arrow::io::OutputStream> outputStream;\r\n    outputStream = *arrow::io::FileOutputStream::Open(\r\n            \"/tmp/cpparrow-stream.arrow\");\r\n    shared_ptr<arrow::ipc::RecordBatchWriter> recordBatchStreamWriter;\r\n    checkStatus(arrow::ipc::RecordBatchStreamWriter::Open(\r\n                outputStream.get(), schema, &recordBatchStreamWriter));\r\n    checkStatus(recordBatchStreamWriter->WriteTable(*table));\r\n    return 0;\r\n}\r\n```\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2019-12-12T22:26:35.000Z",
        "updated_at": "2020-04-27T02:41:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Java",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-04-27T02:41:00.000Z"
    },
    "comments": [
        {
            "created_at": "2019-12-12T22:35:21.440Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7383?focusedCommentId=16995163) by David Wilcox (davidlukewilcox):*\nLooking at the code on master, it looks like this might've already been fixed ...\r\n<https://github.com/apache/arrow/blob/41c9b18ab3a5befb38018f2a2b339501185c803f/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java#L657>"
        },
        {
            "created_at": "2020-02-01T06:35:44.114Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7383?focusedCommentId=17027993) by Micah Kornfield (emkornfield@gmail.com):*\nThis sounds like you are trying to read the with the 0.14.1 Java library or earlier from a file generated from 0.15.0 or later.\u00a0 There was a format change.\u00a0 You need to pass a configuration parameter to write out an old version of the file if you can't upgrade.\u00a0 If this is using the same version please state that.\u00a0 0.15.0 and later should be able to read both formats"
        }
    ]
}