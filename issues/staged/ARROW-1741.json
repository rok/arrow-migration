{
    "issue": {
        "title": "[C++] Comparison function for DictionaryArray to determine if indices are \"compatible\"",
        "body": "***Note**: This issue was originally created as [ARROW-1741](https://issues.apache.org/jira/browse/ARROW-1741). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor example, if one array's dictionary is larger than the other, but the overlapping beginning portion is the same, then the respective dictionary indices correspond to the same values. Therefore, in analytics, one may choose to drop the smaller dictionary in favor of the larger dictionary, and this need not incur any computational overhead (beyond comparing the dictionary prefixes \u2013 there may be some way to engineer \"dictionary lineage\" to make this comparison even cheaper)",
        "created_at": "2017-10-26T22:37:35.000Z",
        "updated_at": "2019-09-14T22:34:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-09-14T22:34:54.000Z"
    },
    "comments": [
        {
            "created_at": "2018-01-25T23:57:55.292Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1741?focusedCommentId=16340320) by Panchen Xue (1xuepanchen1):*\nIs the following pseudocode correct?\r\n```java\n\r\nstd::shared_ptr<DictionaryArray> small;\r\nstd::shared_ptr<DictionaryArray> large;\r\n/* \r\n   bool RangeEquals(int64_t start_idx,\r\n                    int64_t end_idx,\r\n                    int64_t other_start_idx, \r\n                    const std::shared_ptr<Array>& other) const;\r\n*/\r\nif (small->RangeEquals(0, small->size() , 0, large)) {\r\n  // SetDictionary() to be implemented\r\n  small->SetDictionary(large->dictionary());\r\n}\r\n```"
        },
        {
            "created_at": "2018-01-26T02:12:08.185Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1741?focusedCommentId=16340458) by Wes McKinney (wesm):*\nI'm not sure about the right API for this yet, since this feature is not yet\u00a0needed for anything right now (I have not set a\u00a0\"Fix Version\" yet). When we implement array vector comparisons (e.g. `a == b`) this will be useful to enable dictionary-encoded arrays to be compared if one dictionary is contained in another."
        },
        {
            "created_at": "2019-05-22T15:02:40.169Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1741?focusedCommentId=16845961) by Wes McKinney (wesm):*\nNow that we have variable dictionaries in C++, having a function to determine if two DictionaryArrays can be compared without a unification step would be useful. "
        },
        {
            "created_at": "2019-08-21T16:37:00.268Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1741?focusedCommentId=16912491) by Wes McKinney (wesm):*\nI think it's straightforward to add a method to check whether two DictionaryArray objects have dictionaries that are the same or one is a subset of the other (slice to min of lengths, then use Array::Equals)"
        },
        {
            "created_at": "2019-09-14T22:34:54.479Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1741?focusedCommentId=16929834) by Wes McKinney (wesm):*\nIssue resolved by pull request 5342\n<https://github.com/apache/arrow/pull/5342>"
        }
    ]
}