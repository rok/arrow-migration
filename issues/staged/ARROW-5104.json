{
    "issue": {
        "title": "[Python/C++] Schema for empty tables include index column as integer",
        "body": "***Note**: This issue was originally created as [ARROW-5104](https://issues.apache.org/jira/browse/ARROW-5104). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe schema for an empty table/dataframe still includes the index as an integer column instead of being serialized solely as a metadata reference (see ARROW-1639)\r\n\r\nIn the example below, the empty dataframe still holds `__index_level_0__` as an integer column. Proper behavior would be to exclude it and reference the index information in the pandas metadata as it is the case for a non-empty column\r\n```Java\n\r\nIn [1]: import pandas as pd\r\nim\r\nIn [2]: import pyarrow as pa\r\n\r\nIn [3]: non_empty =  pd.DataFrame({\"col\": [1]})\r\n\r\nIn [4]: empty = non_empty.drop(0)\r\n\r\nIn [5]: empty\r\nOut[5]:\r\nEmpty DataFrame\r\nColumns: [col]\r\nIndex: []\r\n\r\nIn [6]: pa.Table.from_pandas(non_empty)\r\nOut[6]:\r\npyarrow.Table\r\ncol: int64\r\nmetadata\r\n--------\r\nOrderedDict([(b'pandas',\r\n              b'{\"index_columns\": [{\"kind\": \"range\", \"name\": null, \"start\": '\r\n              b'0, \"stop\": 1, \"step\": 1}], \"column_indexes\": [{\"name\": null,'\r\n              b' \"field_name\": null, \"pandas_type\": \"unicode\", \"numpy_type\":'\r\n              b' \"object\", \"metadata\": {\"encoding\": \"UTF-8\"}}], \"columns\": ['\r\n              b'{\"name\": \"col\", \"field_name\": \"col\", \"pandas_type\": \"int64\",'\r\n              b' \"numpy_type\": \"int64\", \"metadata\": null}], \"creator\": {\"lib'\r\n              b'rary\": \"pyarrow\", \"version\": \"0.13.0\"}, \"pandas_version\": nu'\r\n              b'll}')])\r\n\r\nIn [7]: pa.Table.from_pandas(empty)\r\nOut[7]:\r\npyarrow.Table\r\ncol: int64\r\n__index_level_0__: int64\r\nmetadata\r\n--------\r\nOrderedDict([(b'pandas',\r\n              b'{\"index_columns\": [\"__index_level_0__\"], \"column_indexes\": ['\r\n              b'{\"name\": null, \"field_name\": null, \"pandas_type\": \"unicode\",'\r\n              b' \"numpy_type\": \"object\", \"metadata\": {\"encoding\": \"UTF-8\"}}]'\r\n              b', \"columns\": [{\"name\": \"col\", \"field_name\": \"col\", \"pandas_t'\r\n              b'ype\": \"int64\", \"numpy_type\": \"int64\", \"metadata\": null}, {\"n'\r\n              b'ame\": null, \"field_name\": \"__index_level_0__\", \"pandas_type\"'\r\n              b': \"int64\", \"numpy_type\": \"int64\", \"metadata\": null}], \"creat'\r\n              b'or\": {\"library\": \"pyarrow\", \"version\": \"0.13.0\"}, \"pandas_ve'\r\n              b'rsion\": null}')])\r\n\r\nIn [8]: pa.__version__\r\nOut[8]: '0.13.0'\r\n\r\nIn [9]: ! python --version\r\nPython 3.6.7\r\n```",
        "created_at": "2019-04-03T11:16:46.000Z",
        "updated_at": "2019-09-13T11:20:48.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-09-13T11:20:48.000Z"
    },
    "comments": [
        {
            "created_at": "2019-05-08T07:01:26.656Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5104?focusedCommentId=16835375) by Joris Van den Bossche (jorisvandenbossche):*\n`[~fjetter]` thanks for the report!\r\n\r\nThe problem here is that the `non_empty` and `empty` dataframes have a different index (due to the `drop` call):\r\n\r\n```Java\n\r\n>>> non_empty.index\r\nRangeIndex(start=0, stop=1, step=1)\r\n\r\n>>> empty.index\r\nInt64Index([], dtype='int64')\r\n```\r\n\r\nAnd it is the type of Index that pyarrow uses to decide whether to serialize the index into an actual column or in metadata only (in case of a RangeIndex). \r\nSo it is doing the \"correct\" thing here, although of course surprising / unexpected (but which is also due to that it is not always clear in pandas when you have a RangeIndex and when not)\r\n"
        },
        {
            "created_at": "2019-09-06T21:41:08.970Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5104?focusedCommentId=16924627) by Ben Kietzman (bkietz):*\n`[~jorisvandenbossche]` is there work to be done here or should this issue be closed?"
        },
        {
            "created_at": "2019-09-13T11:19:52.521Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5104?focusedCommentId=16929121) by Joris Van den Bossche (jorisvandenbossche):*\nYeah, I don't think there is anything we can do from our side (we don't want to special case empty Int64 index I think).\r\n\r\nWith the new `preserve_index=True` you can ensure to _always_ have the index as a column, but for the other way around (ensure it is always serialized as metadata), the user needs to ensure the index is actually a RangeIndex.\r\n\r\n\u00a0\r\n\r\nSo `[~fjetter]` if you have other ideas how to deal with this, that's very welcome, but for now closing this issue."
        }
    ]
}