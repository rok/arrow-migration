{
    "issue": {
        "title": "[C#] ArrowStreamReader allocates and copies data excessively",
        "body": "***Note**: This issue was originally created as [ARROW-4503](https://issues.apache.org/jira/browse/ARROW-4503). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen reading `RecordBatch` instances using the `ArrowStreamReader`\u00a0class, it is currently allocating and copying memory 3 times for the data.\r\n1. It is allocating memory in order to [read the data from the Stream](https://github.com/apache/arrow/blob/044b418fa108a57f0b4e2e887546cc3e68271397/csharp/src/Apache.Arrow/Ipc/ArrowStreamReader.cs#L72-L74), and then reading from the Stream.\u00a0 (This should be the only allocation that is necessary.)\n1. It then\u00a0[creates a new `ArrowBuffer.Builder`](https://github.com/apache/arrow/blob/044b418fa108a57f0b4e2e887546cc3e68271397/csharp/src/Apache.Arrow/Ipc/ArrowStreamReader.cs#L227-L228), which allocates another `byte[]`, and calls `Append` on it, which copies the values to the new `byte[]`.\n1. Finally, it then calls `.Build()` on the `ArrowBuffer.Builder`, which [allocates memory from the MemoryPool, and then copies the intermediate buffer](https://github.com/apache/arrow/blob/044b418fa108a57f0b4e2e887546cc3e68271397/csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs#L112-L121) into it.\n   \n   \u00a0\n   \n   We should reduce this overhead to only allocating a single time (from the MemoryPool), and not copying the data more times than necessary.",
        "created_at": "2019-02-08T00:28:32.000Z",
        "updated_at": "2019-05-07T16:10:26.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C#",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-05-07T12:02:43.000Z"
    },
    "comments": [
        {
            "created_at": "2019-02-10T23:24:51.180Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4503?focusedCommentId=16764599) by Chris Hutchinson (cshutchinson):*\nThe serialization code needs a lot of work.\u00a0There were\u00a0recent changes to ArrowBuffer.Builder\u00a0that I made that I believe were a mistake.\u00a0I believe it should probably allocate from MemoryPool and \"freeze\" the builder after building an ArrowBuffer. I think this means you would expect InvalidOperationException when attempting to\u00a0modify the builder after building an ArrowBuffer, or perhaps just allocating new backing memory when needed.\r\n\r\nAs for\u00a0ByteBuffer, consider\u00a0that it is presently code generated by the Google FlatBuffer schema compiler. The correct approach\u00a0seems to be to allocate from MemoryPool, read from the stream into the allocated memory, have the ByteBuffer backed by that memory, and construct an ArrowBuffer directly from the ByteBuffer instead of\u00a0using ArrowBuffer.Builder. Alternatively ArrowBuffer.Builder could be modified to accept an existing memory\u00a0for the initial backing store.\u00a0\r\n\r\nPlease note one of the original goals was to target .NET Standard 1.3. I would be comfortable moving that up to .NET Standard 2.0, but also would be interested in hearing any arguments on that.\r\n\r\nGood work!\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2019-02-11T19:38:23.790Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4503?focusedCommentId=16765332) by Eric Erhardt (eerhardt):*\nThanks for the info, `[~cshutchinson]`. I was thinking the same approach that you describe above, so that's good.\r\n\r\nAs for the moving to .NET Standard 2.0, I don't think that is necessary at this time. We can make all the changes described above and still target 1.3, as far as I can tell.\r\n\r\nSide note: We may want to multi-target for `netstandard1.3`, `netstandard2.0` and `net4x`, following the OSS Library guidance here: <https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting.>\u00a0But for now we can keep just `netstandard1.3`, until we get more users asking for\u00a0`netstandard2.0` or `net4x` targets.\u00a0 (They are mainly just\u00a0convenience.)"
        },
        {
            "created_at": "2019-05-07T12:02:43.444Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4503?focusedCommentId=16834684) by Wes McKinney (wesm):*\nIssue resolved by pull request 3925\n<https://github.com/apache/arrow/pull/3925>"
        }
    ]
}