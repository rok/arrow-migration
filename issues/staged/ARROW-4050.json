{
    "issue": {
        "title": "[Python][Parquet] core dump on reading parquet file",
        "body": "***Note**: This issue was originally created as [ARROW-4050](https://issues.apache.org/jira/browse/ARROW-4050). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHi,\r\n\r\nI've a crash when doing this:\r\n\r\n`import pyarrow.parquet as pq`\r\n`pq.read_table('bug.parquet')`\r\n\r\n[bug.parquet](bug.parquet)\r\n\r\n(this is the same generated by\u00a0arrow/python/pyarrow/tests/test_parquet.py(112)test_single_pylist_column_roundtrip())",
        "created_at": "2018-12-16T22:45:24.000Z",
        "updated_at": "2019-03-20T02:20:01.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-03-20T02:20:01.000Z"
    },
    "comments": [
        {
            "created_at": "2018-12-16T23:37:42.692Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16722605) by Wes McKinney (wesm):*\nCan you post the full traceback?"
        },
        {
            "created_at": "2018-12-17T00:09:13.534Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16722611) by Antonio Cavallo (cav71):*\nMmmm, might it have to do with the _generated_version.py (eg.\u00a0version = '0.11.1.dev407+g8c413036.d20181217')?\r\n\r\n\u00a0\r\n\r\n>>> lldb \u2013 python -c \"import pyarrow.parquet as pq; pq.read_table('bug.parquet')\"\r\n(lldb) process launch\r\n\r\nthread #1: tid = 0x1f93bb, 0x000000010bfcc60f libparquet.12.dylib`boost::re_detail_106900::cpp_regex_traits_implementation<char>::transform(char const\\*, char const\\*) const + 47, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\r\n \\* frame #0: 0x000000010bfcc60f libparquet.12.dylib`boost::re_detail_106900::cpp_regex_traits_implementation<char>::transform(char const\\*, char const\\*) const + 47\r\n frame #1: 0x000000010bfcc047 libparquet.12.dylib`unsigned int boost::re_detail_106900::find_sort_syntax<boost::re_detail_106900::cpp_regex_traits_implementation<char>, char>(boost::re_detail_106900::cpp_regex_traits_implementation<char> const\\*, char\\*) + 55\r\n frame #2: 0x000000010bfcbe06 libparquet.12.dylib`boost::re_detail_106900::cpp_regex_traits_implementation<char>::init() + 1174\r\n frame #3: 0x000000010bfcb911 libparquet.12.dylib`boost::re_detail_106900::cpp_regex_traits_implementation<char>::cpp_regex_traits_implementation(boost::re_detail_106900::cpp_regex_traits_base<char> const&) + 145\r\n frame #4: 0x000000010bfcb28f libparquet.12.dylib`boost::object_cache<boost::re_detail_106900::cpp_regex_traits_base<char>, boost::re_detail_106900::cpp_regex_traits_implementation<char> >::do_get(boost::re_detail_106900::cpp_regex_traits_base<char> const&, unsigned long) + 287\r\n frame #5: 0x000000010bfcb06f libparquet.12.dylib`boost::object_cache<boost::re_detail_106900::cpp_regex_traits_base<char>, boost::re_detail_106900::cpp_regex_traits_implementation<char> >::get(boost::re_detail_106900::cpp_regex_traits_base<char> const&, unsigned long) + 63\r\n frame #6: 0x000000010bfcaf6e libparquet.12.dylib`boost::re_detail_106900::regex_data<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::regex_data() + 110\r\n frame #7: 0x000000010bfcacd4 libparquet.12.dylib`boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::do_assign(char const\\*, char const\\*, unsigned int) + 180\r\n frame #8: 0x000000010bfc2de7 libparquet.12.dylib`parquet::ApplicationVersion::ApplicationVersion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 119\r\n frame #9: 0x000000010bfc6956 libparquet.12.dylib`parquet::FileMetaData::FileMetaDataImpl::FileMetaDataImpl(unsigned char const\\*, unsigned int\\*) + 390\r\n frame #10: 0x000000010bfc24ef libparquet.12.dylib`parquet::FileMetaData::Make(unsigned char const\\*, unsigned int\\*) + 63\r\n frame #11: 0x000000010bfbdc47 libparquet.12.dylib`parquet::SerializedFile::ParseMetaData() + 391\r\n frame #12: 0x000000010bfbdec1 libparquet.12.dylib`parquet::ParquetFileReader::Open(std::__1::unique_ptr<parquet::RandomAccessSource, std::__1::default_delete<parquet::RandomAccessSource> >, parquet::ReaderProperties const&, std::__1::shared_ptr<parquet::FileMetaData> const&) + 145\r\n frame #13: 0x000000010bf48e78 libparquet.12.dylib`parquet::arrow::OpenFile(std::__1::shared_ptr<arrow::io::RandomAccessFile> const&, arrow::MemoryPool\\*, parquet::ReaderProperties const&, std::__1::shared_ptr<parquet::FileMetaData> const&, std::__1::unique_ptr<parquet::arrow::FileReader, std::__1::default_delete<parquet::arrow::FileReader> >\\*) + 88\r\n frame #14: 0x000000010e1ba4d4 _parquet.cpython-37m-darwin.so`__pyx_pw_7pyarrow_8_parquet_13ParquetReader_3open(_object\\*, _object\\*, _object\\*) + 564"
        },
        {
            "created_at": "2018-12-17T00:42:10.383Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16722622) by Wes McKinney (wesm):*\nThis looks like a toolchain / environment issue. Can you do a rebuild from scratch and also post your complete CMake logs"
        },
        {
            "created_at": "2018-12-17T12:13:03.261Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16722929) by Tanya Schlusser (tanya):*\nHello `[~cav71]`, I may be able to help \u2013 I'm new enough that I just went through the pain of setting up my environment too, and better my system sounds like yours: I have a mac with Xcode 10.1.\r\n\r\nI did the things you said: followed the documentation in a new Conda environment, and indeed have a segfault in the python parquet tests.\r\n\r\nHowever I can switch to a separate Conda environment and build and test just fine. I am currently going through my env to see what is different between the two and will report back when I figure out the relevant different thing. I had trouble setting up too, but was too shy to speak up about it and clearly the documentation could be improved \u2013 at least for us mac users!\r\n\r\nIf you want to try and figure it out too, the thing I did to get stuff working was read through the Python dockerfile and the scripts in arrow/dev and arrow/ci. The problem is I tried 1000 things and didn't pay attention to what worked or I'd answer this with more useful information.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2018-12-17T15:34:20.001Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16723081) by Wes McKinney (wesm):*\nThis suggests there's a problem with the toolchain on macOS perhaps related to the Boost 1.69 update from 4 days ago https://github.com/conda-forge/boost-cpp-feedstock\r\n\r\n`[~kszucs]` can you take a look?"
        },
        {
            "created_at": "2018-12-17T17:21:11.994Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16723180) by Tanya Schlusser (tanya):*\nI can confirm building the environment with `boost-cpp=1.68.0` works. I also had to add `make` to successfully build\u00a0`jemalloc_ep`, although without it the build and test still worked (the 'install' step right after it worked anyway; it was just disconcerting to have a failed step). I uploaded the entire sequence of commands that produces a successful python test in [`working_python37_build_on_osx.sh`](https://issues.apache.org/jira/secure/attachment/12952061/working_python37_build_on_osx.sh).\r\n\r\nThere are [numpy empty truth test deprecation warnings](https://github.com/numpy/numpy/issues/9583) but that's it. Hope it helps."
        },
        {
            "created_at": "2018-12-18T01:45:16.203Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16723575) by Antonio Cavallo (cav71):*\nHi Tanya,\u00a0Hello Wes,\r\n\r\nthanks to looking into this.\r\n\r\nI'm not sure if there's a ready-made conda build for python with debugging symbols: that would've make tracking these bugs easier.\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2018-12-18T15:30:46.955Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16724164) by Krisztian Szucs (kszucs):*\nI can confirm with boost 1.69 it segfaults whereas with boost 1.68 it works as expected. Generating the traceback..."
        },
        {
            "created_at": "2018-12-18T16:43:44.675Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16724239) by Wes McKinney (wesm):*\nDo you also have Boost installed with Homebrew? It could be a multiple version conflict"
        },
        {
            "created_at": "2018-12-18T22:34:43.377Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16724525) by Wes McKinney (wesm):*\n`[~kszucs]` were you able to get a backtrace for the segfault? I don't have access to a macOS machine"
        },
        {
            "created_at": "2018-12-19T13:31:21.285Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16724998) by Krisztian Szucs (kszucs):*\nhttps://gist.github.com/kszucs/abee56cf39c470e0392be2d8453485a4\r\nRemoving the homebrew installed boost doesn't help."
        },
        {
            "created_at": "2018-12-20T22:53:48.236Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16726295) by Wes McKinney (wesm):*\nIt seems there may be some rpath issues with the Parquet unit tests. `[~kszucs]` has been looking into it but we still don't have a resolution"
        },
        {
            "created_at": "2018-12-22T13:50:13.123Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16727468) by Antonio Cavallo (cav71):*\nI'm trying to rebuild pyarrow, but it seems pyarrow builds arrow (cpp)... and arrow (cpp) can build pyarrow. I'm still new to the build infrastructure..\u00a0"
        },
        {
            "created_at": "2018-12-22T17:54:56.996Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16727509) by Tanya Schlusser (tanya):*\nHi `[~cav71]`, maybe I can be useful.\r\n\r\nYou're right that arrow (cpp) builds a library called `libarrow_python` which exposes the parts of arrow that the Python library will use. That is the first step, run with `cmake` inside the directory `arrow/cpp/build`.\r\n\r\nBut to make the Python library there must also be a second step, run inside `arrow/python`:\r\nThe pyarrow library uses Cython (I am learning Cython \u2013 this [rectangle example](https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html) was helpful) wraps all of these exposed objects in Python for the end user.\r\n\r\n###### details / example:\r\nThe [pyarrow.__init__.py](https://github.com/apache/arrow/blob/master/python/pyarrow/__init__.py) imports a ton of stuff from `pyarrow.lib`. But there is no `pyarrow/lib.py` file in the source code. Instead, there are\r\n- `pyarrow/lib.pxd` (corresponds to a c++ header file)\n-  `pyarrow/lib.pyx` (corresponds to a c++ source file)\n  \n  which must be compiled using Cython. The `setup.py build_ext --inplace` uses Cython to\n1. auto- generate C++ code (`pyarrow/lib.cpp`, `pyarrow/lib_api.h`)\n1. compile it to a shared object  (on my laptop, `pyarrow/lib.cpython-36m-darwin.so`)\n   \n   That shared object is the `pyarrow.lib` imported in `pyarrow/__init__.py`.\n   I hope it is useful!\n   \n   P.S. The [script linked above](https://issues.apache.org/jira/secure/attachment/12952061/working_python37_build_on_osx.sh) successfully built the code on my laptop"
        },
        {
            "created_at": "2018-12-23T12:42:36.853Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16727966) by Antonio Cavallo (cav71):*\nHi `[~tanya]` It looks what's in the ci/docker_\\*.sh files, I'm just digging into the docker compose..\r\nI think this is a relevant thread https://github.com/apache/arrow/pull/3243. "
        },
        {
            "created_at": "2019-01-09T14:19:06.829Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16738289) by Uwe Korn (uwe):*\nThis is probably a different issue. Anaconda has a `libboost` package whereas conda-forge has `boost-cpp`. They both provide the boost libs and can be installed in parallel. Sadly, they both override what boost gets loaded and the last one wins."
        },
        {
            "created_at": "2019-03-18T19:31:37.024Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16795334) by Francois Saint-Jacques (fsaintjacques):*\n`[~kszucs]` can you validate if this issue is still happening?"
        },
        {
            "created_at": "2019-03-19T17:49:07.782Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16796340) by Krisztian Szucs (kszucs):*\nwith boost-cpp=1.68:\r\n\r\n```Java\n\r\n70/75 Test #70: parquet-file-deserialize-test ......***Failed    0.13 sec\r\n      Start 71: parquet-schema-test                                                                                                                                                                                                           71/75 Test #71: parquet-schema-test ................***Failed    0.12 sec\r\n```\r\n\r\n```Java\n\r\n(lldb) target create \"debug/parquet-schema-test\" --core \"/cores/core.12879\"\r\nCore file '/cores/core.12879' (x86_64) was loaded.\r\n(lldb) bt\r\n* thread #1, stop reason = signal SIGSTOP\r\n  * frame #0: 0x0000000000000001\r\n    frame #1: 0x000000010879954a parquet-schema-test`std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long) [inlined] std::__1::ctype<char>::widen(this=0x0000000108f47a50, __c=' ') const at __locale:653\r\n    frame #2: 0x000000010879951c parquet-schema-test`std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long) [inlined] std::__1::basic_ios<char, std::__1::char_traits<char> >::widen(this=0x00007fc213402b50, __c=' ') const at ios:756\r\n    frame #3: 0x00000001087994d9 parquet-schema-test`std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long) [inlined] std::__1::basic_ios<char, std::__1::char_traits<char> >::fill(this=0x00007fc213402b50) const at ios:765\r\n    frame #4: 0x0000000108799480 parquet-schema-test`std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(__os=0x00007fc213402b50, __str=\"gtest_\", __len=6) at ostream:732\r\n    frame #5: 0x00000001087992ec parquet-schema-test`std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::operator<<<std::__1::char_traits<char> >(__os=0x00007fc213402b50, __str=\"gtest_\") at ostream:864\r\n    frame #6: 0x0000000108951b00 libgtest.dylib`testing::Message& testing::Message::operator<<<char [7]>(char const (&) [7]) + 48\r\n    frame #7: 0x000000010898da8c libgtest.dylib`testing::internal::FlagToEnvVar(char const*) + 76\r\n    frame #8: 0x000000010891ed3d libgtest.dylib`testing::internal::BoolFromGTestEnv(char const*, bool) + 45\r\n    frame #9: 0x00000001089c3522 libgtest.dylib`__cxx_global_var_init + 18\r\n    frame #10: 0x00000001089c5939 libgtest.dylib`_GLOBAL__sub_I_gtest_all.cc + 9\r\n    frame #11: 0x00000001090c2cc8 dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) + 518\r\n    frame #12: 0x00000001090c2ec6 dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) + 40\r\n    frame #13: 0x00000001090be0da dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 358\r\n    frame #14: 0x00000001090be06d dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 249\r\n    frame #15: 0x00000001090be06d dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 249\r\n    frame #16: 0x00000001090bd254 dyld`ImageLoader::processInitializers(ImageLoader::LinkContext const&, unsigned int, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 134\r\n    frame #17: 0x00000001090bd2e8 dyld`ImageLoader::runInitializers(ImageLoader::LinkContext const&, ImageLoader::InitializerTimingList&) + 74\r\n    frame #18: 0x00000001090ac774 dyld`dyld::initializeMainExecutable() + 199\r\n    frame #19: 0x00000001090b178f dyld`dyld::_main(macho_header const*, unsigned long, int, char const**, char const**, char const**, unsigned long*) + 6237\r\n    frame #20: 0x00000001090ab4f6 dyld`dyldbootstrap::start(macho_header const*, int, char const**, long, macho_header const*, unsigned long*) + 1154\r\n    frame #21: 0x00000001090ab036 dyld`_dyld_start + 54\r\n```"
        },
        {
            "created_at": "2019-03-20T02:20:01.783Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4050?focusedCommentId=16796707) by Wes McKinney (wesm):*\nUnable to reproduce this"
        }
    ]
}