{
    "issue": {
        "title": "[C++] Add the ability to run async tasks without using the CPU thread pool",
        "body": "***Note**: This issue was originally created as [ARROW-12208](https://issues.apache.org/jira/browse/ARROW-12208). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is required allow Windows 32-bit RTools 3.5 builds avoid crashing as they don't seem to properly implement the `<threading>` header.\r\n\r\n\u00a0\r\n\r\nHowever, it could be generally useful to anyone that wants to avoid thread creation.\r\n\r\n\u00a0\r\n\r\nCurrently, the asynchronous approaches introduce necessary threading.\u00a0 For example, even a simple call to check if the CSVFileFormat supports a file requires peeking the file and reading the first block.\u00a0 These I/O operations happen on the I/O pools and then are transferred to the CPU thread pool (which is NOT the same thing as the calling thread) meanwhile the calling thread is blocked waiting for results.\r\n\r\n\u00a0\r\n\r\nThis can be avoided by treating the calling thread as a single threaded thread pool and then using that as the CPU thread pool.\u00a0 This allows all CPU work to be done on the calling thread alone.\u00a0 This could also allow us to remove duplicate code paths (e.g. code paths that exist only to keep functions serial such as the serial CSV reader) in the future.\r\n\r\n\u00a0\r\n\r\nThis capability could be extended to include the I/O thread pool as well at some point in the future.",
        "created_at": "2021-04-05T14:22:27.000Z",
        "updated_at": "2021-04-14T14:17:56.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-09T21:19:40.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-05T14:26:32.252Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12208?focusedCommentId=17314895) by Antoine Pitrou (apitrou):*\nI would not bother about RTools 3.5 at this point. We're dropping it in a month or two. Just disable whatever functionality doesn't work (especially if the problems are 32-bit only).\r\n\r\nRegardless, this is conceptually a worthwhile proposal, but I don't know if it will be easy to implement."
        },
        {
            "created_at": "2021-04-05T14:40:35.615Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12208?focusedCommentId=17314902) by Weston Pace (westonpace):*\nAh, my understanding from Neal was that we cannot release release 4.0 with RTools 3.5 broken.\u00a0 I had already been working on this as part of ARROW-12161 but ended up creating this separate Jira as the PR is doing more than just fixing a bug.\u00a0 I already have an implementation."
        },
        {
            "created_at": "2021-04-05T14:48:36.080Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12208?focusedCommentId=17314907) by Neal Richardson (npr):*\nCorrect, we cannot release 4.0 with a broken RTools 3.5 build. But if necessary we can conditionally disable features in it--we already do this for S3 support."
        },
        {
            "created_at": "2021-04-09T21:19:40.357Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12208?focusedCommentId=17318331) by Neal Richardson (npr):*\nIssue resolved by pull request 9892\n<https://github.com/apache/arrow/pull/9892>"
        }
    ]
}