{
    "issue": {
        "title": "[Python] Add from_pylist() and to_pylist() to pyarrow.Table to convert list of records",
        "body": "***Note**: This issue was originally created as [ARROW-6001](https://issues.apache.org/jira/browse/ARROW-6001). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI noticed that pyarrow.Table.to_pydict() exists, but pyarrow.Table.from_pydict() doesn't exist. There is a proposed ticket to create one, but it doesn't take into account\u00a0potential mismatches between column order and number of columns.\r\n\r\nI'm\u00a0including some code I've written which I've been using to handle arrow conversions to ordered dictionaries and\u00a0lists of dictionaries.. I've also included an example where this can be used to speed up pandas.to_dict() by a factor of 6x.\r\n\r\n\u00a0\r\n```java\n\r\ndef from_pylist(pylist, names=None, schema=None, safe=True):\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 Converts a python list of dictionaries to a pyarrow table\r\n\u00a0\u00a0\u00a0 :param pylist: pylist list of dictionaries\r\n\u00a0\u00a0\u00a0 :param names: list of column names\r\n\u00a0\u00a0\u00a0 :param schema: pyarrow schema\r\n\u00a0\u00a0\u00a0 :param safe: True or False\r\n\u00a0\u00a0\u00a0 :return: arrow table\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 arrow_columns = list()\r\n\u00a0\u00a0\u00a0 if schema:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for column in schema.names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for column in names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_table = pa.Table.from_arrays(arrow_columns, names)\r\n\u00a0\u00a0\u00a0 return arrow_table\r\n\r\ndef to_pylist(arrow_table, index_columns=None):\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 Converts a pyarrow table to a python list of dictionaries\r\n\u00a0\u00a0\u00a0 :param arrow_table: arrow table\r\n\u00a0\u00a0\u00a0 :param index_columns: columns to index\r\n\u00a0\u00a0\u00a0 :return: python list of dictionaries\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 pydict = arrow_table.to_pydict()\r\n\u00a0\u00a0\u00a0 if index_columns:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 columns = arrow_table.schema.names\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 columns.append(\"_index\")\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pylist = [{column: tuple([pydict[index_column][row] for index_column in index_columns]) if column == '_index' else pydict[column][row] for column in columns} for row in range(arrow_table.num_rows)]\r\n\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pylist = [{column: pydict[column][row] for column in arrow_table.schema.names} for row in range(arrow_table.num_rows)]\r\n\u00a0\u00a0\u00a0 return pylist\r\n\r\ndef from_pydict(pydict, names=None, schema=None, safe=True):\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 Converts a pyarrow table to a python ordered dictionary\r\n\u00a0\u00a0\u00a0 :param pydict: ordered dictionary\r\n\u00a0\u00a0\u00a0 :param names: list of column names\r\n\u00a0\u00a0\u00a0 :param schema: pyarrow schema\r\n\u00a0\u00a0\u00a0 :param safe: True or False\r\n\u00a0\u00a0\u00a0 :return: arrow table\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 arrow_columns = list()\r\n\u00a0\u00a0\u00a0 dict_columns = list(pydict.keys())\r\n\u00a0\u00a0\u00a0 if schema:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for column in schema.names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if column in pydict:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array(pydict[column], safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array([None] * len(pydict[dict_columns[0]]), safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if not names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 names = dict_columns\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for column in names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if column in dict_columns:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array(pydict[column], safe=safe))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array([None] * len(pydict[dict_columns[0]]), safe=safe))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_table = pa.Table.from_arrays(arrow_columns, names)\r\n\u00a0\u00a0\u00a0 return arrow_table\r\n\r\ndef get_indexed_values(arrow_table, index_columns):\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 returns back a set of unique values for a list of columns.\r\n\u00a0\u00a0\u00a0 :param arrow_table: arrow_table\r\n\u00a0\u00a0\u00a0 :param index_columns: list of column names\r\n\u00a0\u00a0\u00a0 :return: set of tuples\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 pydict = arrow_table.to_pydict()\r\n\u00a0\u00a0\u00a0 index_set = set([tuple([pydict[index_column][row] for index_column in index_columns]) for row in range(arrow_table.num_rows)])\r\n\u00a0\u00a0\u00a0 return index_set\r\n```\r\nHere are my benchmarks using pandas to arrow to python vs of pandas.to_dict()\r\n\r\n\u00a0\r\n```java\n\r\n# benchmark panda conversion to python objects\r\nprint('**benchmark 1 million rows**')\r\nstart_time = time.time()\r\npython_df1 = panda_df1.to_dict(orient='records')\r\ntotal_time = time.time() - start_time\r\nprint(\"pandas to python: \" + str(total_time))\r\n\r\nstart_time = time.time()\r\narrow_df1 = pa.Table.from_pandas(panda_df1)\r\npydict = arrow_df1.to_pydict()\r\npython_df1 = [{column: pydict[column][row] for column in arrow_df1.schema.names} for row in range(arrow_df1.num_rows)]\r\ntotal_time = time.time() - start_time\r\nprint(\"pandas to arrow to python: \" + str(total_time))\r\n\r\nprint('**benchmark 4 million rows**')\r\nstart_time = time.time()\r\npython_df4 = panda_df4.to_dict(orient='records')\r\ntotal_time = time.time() - start_time\r\nprint(\"pandas to python:: \" + str(total_time))\r\n\r\nstart_time = time.time()\r\narrow_df4 = pa.Table.from_pandas(panda_df4)\r\npydict = arrow_df4.to_pydict()\r\npython_df4 = [{column: pydict[column][row] for column in arrow_df4.schema.names} for row in range(arrow_df4.num_rows)]\r\ntotal_time = time.time() - start_time\r\nprint(\"pandas to arrow to python: \" + str(total_time))\r\n```\r\n\u00a0\u00a0\r\n```java\n\r\n**benchmark 1 million rows**\r\npandas to python: 13.204811334609985\r\npandas to arrow to python: 2.00173282623291\r\n**benchmark 4 million rows**\r\npandas to python:: 51.655067682266235\r\npandas to arrow to python: 8.562284231185913\r\n```",
        "created_at": "2019-07-22T17:39:11.000Z",
        "updated_at": "2022-01-12T20:51:58.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-01-11T13:35:41.000Z"
    },
    "comments": [
        {
            "created_at": "2019-07-22T17:43:18.007Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6001?focusedCommentId=16890340) by Wes McKinney (wesm):*\nHm, so we have `Table.from_pydict` \r\n\r\nhttps://github.com/apache/arrow/blob/master/python/pyarrow/table.pxi#L1021\r\n\r\nI think `Table.from_arrays` could be improved to accept other Python sequences. Can we split up this ticket into the different improvements you're proposing (and clarify how what you're saying is different from the existing `Table.from_pydict` function)?"
        },
        {
            "created_at": "2019-07-22T17:46:07.920Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6001?focusedCommentId=16890345) by David Lee (davlee1972@yahoo.com):*\nCurrent implementation"
        },
        {
            "created_at": "2019-07-22T18:56:40.011Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6001?focusedCommentId=16890398) by Antoine Pitrou (apitrou):*\nAlso cc `[~jorisvandenbossche]`"
        },
        {
            "created_at": "2019-07-23T15:37:16.417Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6001?focusedCommentId=16891152) by David Lee (davlee1972@yahoo.com):*\n\u00a0\r\n\r\nTable.from_dict in 0.14.1 looks fine. The code I originally reviewed iterated through the ordered dictionary keys instead of the schema field\u00a0names.\r\n\r\nHere's some testing samples for to_pylist() and from_pylist()\r\n\r\n\u00a0\r\n```java\n\r\ntest_schema = pa.schema([\r\n pa.field('id', pa.int16()),\r\n pa.field('struct_test', pa.list_(pa.struct([pa.field(\"child_id\", pa.int16()), pa.field(\"child_name\", pa.string())]))),\r\n pa.field('list_test', pa.list_(pa.int16()))\r\n])\r\ntest_data = [\r\n{'id': 1, 'struct_test': [{'child_id': 11, 'child_name': '_11'}, {'child_id': 12, 'child_name': '_12'}], 'list_test': [1,2,3]},\r\n{'id': 2, 'struct_test': [{'child_id': 21, 'child_name': '_21'}], 'list_test': [4,5]} \r\n]\r\ntest_tbl = from_pylist(test_data, schema = test_schema)\r\ntest_list = to_pylist(test_tbl)\r\ntest_tbl\r\ntest_list\r\n```\r\n\u00a0"
        },
        {
            "created_at": "2019-07-31T07:47:18.882Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6001?focusedCommentId=16896870) by Joris Van den Bossche (jorisvandenbossche):*\nSee also ARROW-4032 for similar discussion (I closed that one to not have duplicate issues).\r\n\r\nSince we have now `to_pydict` / `from_pydict`, repurposing this issue to focus on the to/from list of dicts usecase."
        },
        {
            "created_at": "2019-07-31T07:58:16.693Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6001?focusedCommentId=16896888) by Joris Van den Bossche (jorisvandenbossche):*\nI think the functionality to convert to / from a list of dicts (a \"list of records\") is something nice to have in pyarrow. The question is then where to fit it in or how to call the new method.\r\n\r\n> I think `Table.from_arrays` could be improved to accept other Python sequences\r\n\r\nI personally would not add such functionality to `from_arrays`, which is working column-wise (the arrays you pass make up the columns of the resulting Table). That's a well defined scope, and I would keep functionality to convert row-wise input data in a separate function.\r\n\r\nFor `from_pydict`, it is similar: that function also currently works column-wise.\r\n\r\nSo I think new methods such as `from_pylist` / `to_pylist` is the better approach.  \r\nI am only not fully sure about the name \"pylist\", as that name does not directly reflect that it is a list of rows as dicts (it could also be a list of column-wise arrays). In pandas, this is basically called `from_records`, but the \"records\" could also be confusing in arrow context given that we have RecordBatches (although a method to convert a list of that is already called `from_batches`)."
        },
        {
            "created_at": "2020-09-24T14:02:12.263Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6001?focusedCommentId=17201548) by Antoine Pitrou (apitrou):*\nI think calling this `from_pylist`/`to_pylist` is fine. I would expect it to mean \"a list of individual rows\".\r\n\r\nHowever, a question remains: does `to_pylist` return a list of tuples or a list of dicts?"
        },
        {
            "created_at": "2022-01-11T13:35:41.991Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6001?focusedCommentId=17472723) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 12010\n<https://github.com/apache/arrow/pull/12010>"
        }
    ]
}