{
    "issue": {
        "title": "[Python] automatic type inference for arrays of tuples",
        "body": "***Note**: This issue was originally created as [ARROW-5287](https://issues.apache.org/jira/browse/ARROW-5287). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nArrays of tuples are support to be converted to either ListArray or StructArray, if you specify the type explicitly:\r\n\r\n```Java\n\r\nIn [6]: pa.array([(1, 2), (3, 4, 5)], type=pa.list_(pa.int64()))\u00a0\r\nOut[6]: \r\n<pyarrow.lib.ListArray object at 0x7f1b01a4d408>\r\n[\r\n\u00a0 [\r\n\u00a0\u00a0\u00a0 1,\r\n\u00a0\u00a0\u00a0 2\r\n\u00a0 ],\r\n\u00a0 [\r\n\u00a0\u00a0\u00a0 3,\r\n\u00a0\u00a0\u00a0 4,\r\n\u00a0\u00a0\u00a0 5\r\n\u00a0 ]\r\n]\r\n\r\nIn [7]: pa.array([(1, 2), (3, 4)], type=pa.struct([('a', pa.int64()), ('b', pa.int64())]))\r\nOut[7]: \r\n<pyarrow.lib.StructArray object at 0x7f1b01a51b88>\r\n-- is_valid: all not null\r\n-- child 0 type: int64\r\n\u00a0 [\r\n\u00a0\u00a0\u00a0 1,\r\n\u00a0\u00a0\u00a0 3\r\n\u00a0 ]\r\n-- child 1 type: int64\r\n\u00a0 [\r\n\u00a0\u00a0\u00a0 2,\r\n\u00a0\u00a0\u00a0 4\r\n\u00a0 ]\r\n```\r\n\r\nBut not when no type is specified:\r\n\r\n```Java\n\r\nIn [8]: pa.array([(1, 2), (3, 4)])                                                                                                                            \r\n---------------------------------------------------------------------------\r\nArrowInvalid                              Traceback (most recent call last)\r\n<ipython-input-8-ab2d80c7486d> in <module>\r\n----> 1 pa.array([(1, 2), (3, 4)])\r\n\r\n~/scipy/repos/arrow/python/pyarrow/array.pxi in pyarrow.lib.array()\r\n\r\n~/scipy/repos/arrow/python/pyarrow/array.pxi in pyarrow.lib._sequence_to_array()\r\n\r\n~/scipy/repos/arrow/python/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowInvalid: Could not convert (1, 2) with type tuple: did not recognize Python value type when inferring an Arrow data type\r\n```\r\n\r\nDo we want to do automatic type inference for tuples as well? (defaulting to the ListArray case, just as arrays of python lists are supported) \r\nOr was there a specific reason to not support this by default?",
        "created_at": "2019-05-08T16:06:48.000Z",
        "updated_at": "2022-04-08T13:13:27.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-05-08T16:08:59.740Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5287?focusedCommentId=16835713) by Antoine Pitrou (apitrou):*\nSince it's ambiguous, I'm not sure it's a good idea to support it. The working inference case for list arrays is a list of lists:\r\n```python\n\r\n>>> pa.array([[1,2,3],[4,5]])                                                                                                                                         \r\n<pyarrow.lib.ListArray object at 0x7f114319eb38>\r\n[\r\n  [\r\n    1,\r\n    2,\r\n    3\r\n  ],\r\n  [\r\n    4,\r\n    5\r\n  ]\r\n]\r\n```"
        },
        {
            "created_at": "2019-05-08T16:19:41.849Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5287?focusedCommentId=16835730) by Joris Van den Bossche (jorisvandenbossche):*\nYes, I understand the \"ambiguous\" reason, but on the other hand, StructArray is not really an option as default since for that the struct names need to be known. \r\n\r\nDoing it automatically would allow to save such dataframes to Parquet out of the box (from ARROW-4814), but of course, you can always specify the schema manually.\r\n\r\nIn general, it would be nice to have an error message that points people towards specifying a list or struct type if you have tuples as data. But I assume this is not that easy, as the error message looks like a generic one where the value and type is filled in."
        }
    ]
}