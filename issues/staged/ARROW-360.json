{
    "issue": {
        "title": "C++: Add method to shrink PoolBuffer using realloc",
        "body": "***Note**: This issue was originally created as [ARROW-360](https://issues.apache.org/jira/browse/ARROW-360). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn the case where we have optimistically allocated a large PoolBuffer, we could shrink it later again using a call to `realloc`. This should free the exceeding memory but avoids an actual `memcpy`.",
        "created_at": "2016-11-03T10:47:11.000Z",
        "updated_at": "2017-02-13T16:34:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-01-07T21:29:28.000Z"
    },
    "comments": [
        {
            "created_at": "2016-11-06T19:27:20.606Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-360?focusedCommentId=15642270) by Wes McKinney (wesm):*\nWe could make `PoolBuffer::Resize` call realloc when shrinking the buffer, currently it assumes that the buffer is only getting larger"
        },
        {
            "created_at": "2017-01-02T22:26:57.698Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-360?focusedCommentId=15793613) by Wes McKinney (wesm):*\nHm, sorta bad news: http://stackoverflow.com/questions/9078259/realloc-alignment. We should definitely permit shrinking the buffer, but if we want to guarantee aligned memory, then we have to allocate-copy.\n\nWhat we could do is add a `MemoryPool::Reallocate` virtual function with a default implementation does does reallocate-copy, then an application which might less strict about memory alignment can choose to use realloc instead of `posix_memalign` plus `memcpy`."
        },
        {
            "created_at": "2017-01-03T06:12:29.386Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-360?focusedCommentId=15794271) by Uwe Korn (uwe):*\nThe dummy implementation won't be worse for the current case. I intend to built a custom allocator based on `jemalloc` which should be able to do alligned `realloc(x)` calls (see http://jemalloc.net/jemalloc.3.html). As I'm not sure about the implications of linking `jemalloc`, I would provide a leaf library `libarrow_jemalloc`"
        },
        {
            "created_at": "2017-01-06T18:24:57.184Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-360?focusedCommentId=15805217) by Uwe Korn (uwe):*\nPR: https://github.com/apache/arrow/pull/272"
        },
        {
            "created_at": "2017-01-07T21:29:28.469Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-360?focusedCommentId=15808181) by Wes McKinney (wesm):*\nIssue resolved by pull request 272\n<https://github.com/apache/arrow/pull/272>"
        }
    ]
}