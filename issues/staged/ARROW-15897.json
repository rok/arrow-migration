{
    "issue": {
        "title": "[C++] Linker error when building Flight tests",
        "body": "***Note**: This issue was originally created as [ARROW-15897](https://issues.apache.org/jira/browse/ARROW-15897). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen building the Flight unit tests, I get the following error:\r\n```Java\n\r\n[16/25] Linking CXX executable debug/flight-test-integration-server\r\nFAILED: debug/flight-test-integration-server \r\n[... snip long linker command line ...]\r\n/usr/bin/ld: /home/antoine/miniconda3/envs/pyarrow/lib/libgrpc++.so.1.44.0: undefined reference to `std::__throw_bad_array_new_length()@GLIBCXX_3.4.29'\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nThis is using a pre-built gRPC from conda-forge (`grpc-cpp 1.44.0 h3d78c48_1`).\r\nOther possibly relevant options: `CMAKE_CXX_STANDARD=17`, `ARROW_BUILD_STATIC=OFF`.",
        "created_at": "2022-03-10T10:37:25.000Z",
        "updated_at": "2022-07-04T17:41:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: FlightRPC",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-03-10T10:37:40.009Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504167) by Antoine Pitrou (apitrou):*\ncc `[~uwe]` does this error ring a bell?"
        },
        {
            "created_at": "2022-03-10T10:40:54.501Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504169) by Antoine Pitrou (apitrou):*\nAlso cc `[~lidavidm]`"
        },
        {
            "created_at": "2022-03-10T13:35:26.280Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504265) by David Li (lidavidm):*\nI wasn't able to reproduce with the same version of gRPC, but I recall occasionally seeing issues like this when my environment had too old a version of sysroot_linux-64 from conda-forge (my env has `2.12 he073ed8_15` for what it's worth)"
        },
        {
            "created_at": "2022-03-10T13:59:42.168Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504284) by Antoine Pitrou (apitrou):*\nHmm, I don't even have a \"sysroot_linux-64\" in my environment. Do you know where it comes from? Should I install the \"compilers\" package perhaps?"
        },
        {
            "created_at": "2022-03-10T14:18:24.150Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504295) by Antoine Pitrou (apitrou):*\nWow, trying to use the \"compilers\" and \"clang\" conda packages completely breaks the build here :\r\n```Java\n\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: warning: libbz2.so.1.0, needed by debug/libarrow.so.800.0.0, not found (try using -rpath or -rpath-link)\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: warning: liblz4.so.1, needed by debug/libarrow.so.800.0.0, not found (try using -rpath or -rpath-link)\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: warning: libsnappy.so.1, needed by debug/libarrow.so.800.0.0, not found (try using -rpath or -rpath-link)\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: warning: libzstd.so.1, needed by debug/libarrow.so.800.0.0, not found (try using -rpath or -rpath-link)\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: debug/libarrow.so.800.0.0: undefined reference to `snappy::MaxCompressedLength(unsigned long)'\r\n[...]\r\n```"
        },
        {
            "created_at": "2022-03-10T14:24:01.385Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504302) by David Li (lidavidm):*\nOdd, if you don't have it in the first place, then maybe it's not necessary. I'm not sure where it comes from (likely compilers?)\r\n\r\nI just tried again without compilers, though, and it still worked fine."
        },
        {
            "created_at": "2022-03-10T14:25:55.284Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504303) by Antoine Pitrou (apitrou):*\nWhich distro version are you on? I'm using Ubuntu 20.04 and trying to build with clang-10."
        },
        {
            "created_at": "2022-03-10T14:26:29.647Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504304) by David Li (lidavidm):*\nAh, I'm on Ubuntu 18.04\u2026let me try in a Docker container"
        },
        {
            "created_at": "2022-03-10T14:30:18.449Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504306) by Antoine Pitrou (apitrou):*\nLooking at the error message again, GLIBCXX_3.4.29 isn't provided by the libstdc++ on Ubuntu 20.04. It seems like conda-forge is linking against an extremely recent version of libstdc++."
        },
        {
            "created_at": "2022-03-10T14:32:40.972Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504308) by David Li (lidavidm):*\n> Wow, trying to use the \"compilers\" and \"clang\" conda packages completely breaks the build here :\r\nFWIW I've run into this before specifically with conda clang, I end up doing `LDFLAGS=\"-L$CONDA_PREFIX/lib -Wl,-rpath-link=$CONDA_PREFIX/lib -Wl,-rpath=$CONDA_PREFIX/lib\" cmake ...` when I want to use Conda clang."
        },
        {
            "created_at": "2022-03-10T14:40:55.882Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504313) by Antoine Pitrou (apitrou):*\nHmm, setting LDFLAGS seems to improve things a bit but I get another error :-(\r\n\r\n```Java\n\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: /home/antoine/miniconda3/envs/pyarrow/lib/libcrypto.so: undefined reference to `clock_gettime@GLIBC_2.17'\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: /home/antoine/miniconda3/envs/pyarrow/lib/libcrypto.so: undefined reference to `__fdelt_chk@GLIBC_2.15'\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: /home/antoine/miniconda3/envs/pyarrow/lib/libcrypto.so: undefined reference to `memcpy@GLIBC_2.14'\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: /home/antoine/miniconda3/envs/pyarrow/lib/libcrypto.so: undefined reference to `getauxval@GLIBC_2.16'\r\n/home/antoine/miniconda3/envs/pyarrow/bin/ld: /home/antoine/miniconda3/envs/pyarrow/lib/libcrypto.so: undefined reference to `secure_getenv@GLIBC_2.17'\r\n```\r\n\r\n(a frankly weird one I might say)"
        },
        {
            "created_at": "2022-03-10T14:45:56.707Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504319) by Antoine Pitrou (apitrou):*\nAh! Activating the environment again seems to have fixed the issue (perhaps some packages set some custom environment variables when they are being activated? a pity no messages says so when installing them...)."
        },
        {
            "created_at": "2022-03-10T14:47:06.274Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504320) by David Li (lidavidm):*\n\u2026that seems quite odd indeed.\r\n\r\nI can reproduce your original issue in a Ubuntu 20.04 container, at least. FYI: \r\n\r\n```\n\r\n# ldd /root/miniconda3/envs/dev/lib/libgrpc++.so.1.44.0 | grep libstdc\r\n\tlibstdc++.so.6 => /root/miniconda3/envs/dev/lib/./libstdc++.so.6 (0x00007fe181f8a000)\r\n```\r\n\r\nAdding this library to the link command also fixes things."
        },
        {
            "created_at": "2022-03-10T16:07:28.567Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504385) by Uwe Korn (uwe):*\nThe error is exactly as you discovered: conda-forge uses a more recent libstdc++ than your system. Reactivating your environment loads the correct environment variables. This should also happen automatically if you install packages with `conda` or a recent `mamba` version. "
        },
        {
            "created_at": "2022-03-10T16:08:14.306Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504387) by Uwe Korn (uwe):*\nThe environment variables are typically set by packages that end in the platform, e.g. `gxx_linux-64`."
        },
        {
            "created_at": "2022-03-10T16:30:13.637Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504402) by Antoine Pitrou (apitrou):*\nNot a Arrow issue anymore, but is it possible for conda to display a message when a newly installed package defines environment variables?"
        },
        {
            "created_at": "2022-03-10T16:36:43.592Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17504406) by Uwe Korn (uwe):*\nNot that easily but nowadays the `conda` and `mamba`\u00a0commands are no longer executables but shell functions to exactly handle the reactivation of the environment on installation of these packages."
        },
        {
            "created_at": "2022-04-21T18:27:01.860Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15897?focusedCommentId=17525946) by Krisztian Szucs (kszucs):*\n`[~apitrou]` is this still an issue?"
        }
    ]
}