{
    "issue": {
        "title": "[Format] Add a TensorMessage type",
        "body": "***Note**: This issue was originally created as [ARROW-550](https://issues.apache.org/jira/browse/ARROW-550). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSince all data message types at the moment are 1-dimensional, a \"tensor\" message will contain an array of dimensions and an order flag (C order vs. Fortran order) to enable data to be interpreted as multiple dimensions. This is similar to multidimensional arrays in APL or Fortran or MATLAB, ndarrays in NumPy, etc.",
        "created_at": "2017-02-12T03:58:33.000Z",
        "updated_at": "2017-03-26T16:21:46.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-03-24T15:58:43.000Z"
    },
    "comments": [
        {
            "created_at": "2017-02-12T19:18:43.384Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15862920) by Wes McKinney (wesm):*\n`[~pcmoritz]` `[~robertnishihara]` could you elaborate on your needs in the Ray project? I want to make sure we're supporting your use case well. "
        },
        {
            "created_at": "2017-02-12T22:28:49.298Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15863008) by Philipp Moritz (pcmoritz):*\nHey Wes,\n\nThanks for the note, we are really excited about this feature!\n\nOn a high level, we need the ability to serialize arbitrary numpy arrays. This means:\n\n1) Support for multiple dimensions (obviously)\n2) Support for all numpy types\n3) Support for numpy arrays that have more elements than can be indexed with an int32_t (we currently cannot do this but it is very important, we'd be interested in learning about your plans concerning this)\n\nWe have been using https://github.com/ray-project/ray/blob/master/src/numbuf/python/src/pynumbuf/adapters/numpy.cc and https://github.com/ray-project/ray/blob/master/src/numbuf/cpp/src/numbuf/dict.h so far which doesn't support 3) unfortunately.\n\n4) Something that is not critical but might be good for performance is to have a way to specify the attributes of the numpy array (row-major, column-major, if it is transposed or not). That would allow us to avoid reordering/copying in some cases.\n\nOne problem we also have in this context (this is a little separate) is that we cannot currently use the arrow builder classes without an additional copy because they require buffers to be aligned to 64 bytes but the numpy arrays might not be. Finding a solution for this would also be great!\n\nYou might also want to look into the tensorflow tensors, see\nhttps://github.com/tensorflow/tensorflow/blob/754048a0453a04a761e112ae5d99c149eb9910dd/tensorflow/core/framework/types.proto\nhttps://github.com/tensorflow/tensorflow/blob/754048a0453a04a761e112ae5d99c149eb9910dd/tensorflow/core/framework/tensor.proto\nThey have some more types that make sense in the deep learning context.\n\n\u2013 Philipp."
        },
        {
            "created_at": "2017-02-12T23:32:26.024Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15863035) by Wes McKinney (wesm):*\nI will look into the links you provided, thank you. Couple immediate follow up questions:\n\n- Do you have any need of nested types with tensors? \n- When you say \"all NumPy types\", do you mean all fixed-size data types excluding `dtype=object` arrays? \n\nHaving tensor metadata that supports more than int32_t size elements is not a problem \u2013 expanding normal Arrow arrays to exceed 2G would be a challenging proposition because Java does not support large buffers very well. I suspect that the tensor functionality would be limited to native code users.\n\nAs a first draft implementation in the Arrow C++ libraries I would add additional metadata for tensors and define tensor types that use the common metadata types defined in `arrow::DataType`. "
        },
        {
            "created_at": "2017-02-13T00:09:27.135Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15863058) by Philipp Moritz (pcmoritz):*\nWe do need tensors within other types but having only tensors of primitive types is fine. We have written our own sequence type to support nesting within lists or dicts, see https://github.com/ray-project/ray/blob/master/src/numbuf/cpp/src/numbuf/sequence.h. Something that comes up a lot for example in deep learning is dictionaries of tensors (these are weight collections for neural networks).\n\nYes, fixed size types are what we need. To handle dtype=object, we convert the tensors to lists and then use our sequence type.\n\nCan you clarify what exactly you mean regarding the 2G limitation? If tensors larger than 2G are not accessible from Java that'd be ok for us for now.\n\nAlso using arrow::DataType sounds good!"
        },
        {
            "created_at": "2017-02-13T00:13:12.709Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15863064) by Philipp Moritz (pcmoritz):*\nWould it be possible to use tensors inside an array (a) if the sizes of the individual tensors are larger than 2G or (b) if the sum of the sizes of the tensors is larger than 2G? Having (a) would be best and (b) is crucial."
        },
        {
            "created_at": "2017-02-17T19:28:35.532Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15872365) by Wes McKinney (wesm):*\n`[~pcmoritz]` we discussed this issue on the Arrow sync call yesterday. I think we should be able to propose a design for C++ users that will meet your needs (including accommodating arrays larger than 2G in the Arrow builder classes) \u2013 I will draw up a patch when I can and we can discuss. "
        },
        {
            "created_at": "2017-02-17T19:37:14.387Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15872388) by Philipp Moritz (pcmoritz):*\nThat's great and will help us a lot, thank you!"
        },
        {
            "created_at": "2017-03-23T21:36:17.191Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15939266) by Wes McKinney (wesm):*\nPR: https://github.com/apache/arrow/pull/435"
        },
        {
            "created_at": "2017-03-24T15:58:43.248Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-550?focusedCommentId=15940613) by Wes McKinney (wesm):*\nIssue resolved by pull request 435\n<https://github.com/apache/arrow/pull/435>"
        }
    ]
}