{
    "issue": {
        "title": "[C++] Array internals corruption in StructArray::Flatten",
        "body": "***Note**: This issue was originally created as [ARROW-7740](https://issues.apache.org/jira/browse/ARROW-7740). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nReading a nested ndjson file using arrow::read_json_arrow with the default `as_data_frame=TRUE` causes an immediate session crash, but switching to `as_data_frame=FALSE` works fine and the resulting arrow object schema is correct.\r\n```java\n\r\nlibrary(tidyr)\r\nlibrary(arrow)\r\nlibrary(jsonlite)\r\n# Create two test datasets: long_df and a variant that nests long_df into\r\n# a dataframe with a list-column 'nest_level1' containing a dataframe\r\nlong_df <- tidyr::expand_grid(ABC = LETTERS[1:3], xyz = letters[24:26], num = 1:3)\r\nlong_df[[\"ftr1\"]] <- runif(nrow(long_df))\r\nlong_df[[\"ftr2\"]] <- rpois(nrow(long_df), 100)\r\nnested_frame_level1 <- tidyr::nest(long_df, nest_level1 = c(num, ftr1, ftr2))\r\n# Write and validate nested ndjson\r\njsonlite::stream_out(nested_frame_level1, con = file(\"nested_frame_level1.json\"))\r\nreadLines(\"nested_frame_level1.json\", n = 2) # check we have valid ndjson here\r\n# This does not cause a session crash\r\nnested_arrow <- arrow::read_json_arrow(file = \"nested_frame_level1.json\", as_data_frame = FALSE)\r\nnested_arrow$schema # correctly interprets 'nest_level1` as `list<item: struct<num: int64, ftr1: double, ftr2: int64>>`\r\n# This causes a session crash\r\nnested_df <- arrow::read_json_arrow(file = \"nested_frame_level1.json\", as_data_frame = TRUE)\r\n\u00a0\r\n```\r\nThe R package version of Arrow is latest CRAN release (arrow \\* 0.15.1.1, 2019-11-05, CRAN (R 3.5.2)). I'm running this code in a slightly older R version (3.5.1), macOS\u00a010.14.6,\u00a0x86_64, darwin15.6.0, via RStudio 1.2.5001.\u00a0\r\n\r\n[edit: formatting fix]",
        "created_at": "2020-02-01T16:28:12.000Z",
        "updated_at": "2020-04-01T02:53:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-04-01T01:03:05.000Z"
    },
    "comments": [
        {
            "created_at": "2020-02-01T18:18:37.051Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7740?focusedCommentId=17028181) by Neal Richardson (npr):*\nThanks for the report. I think there's multiple issues here, actually. I made a more minimal reproducer by taking the json file yours creates and trimming it down.\r\n\r\n```Java\n\r\nf2 <- tempfile()\r\nf3 <- tempfile()\r\ncat('{\"nest_level1\":[{\"num\":1,\"ftr1\":0.23342},{\"num\":2,\"ftr1\":0.31621}]}\r\n{\"nest_level1\":[{\"num\":1,\"ftr1\":0.31869},{\"num\":2,\"ftr1\":0.45382}]}\r\n', file=f2)\r\ncat('{\"nest_level1\":[{\"num\":1,\"ftr1\":0.23342},{\"num\":2,\"ftr1\":0.31621}]}\r\n{\"nest_level1\":[{\"num\":1,\"ftr1\":0.31869},{\"num\":2,\"ftr1\":0.45382}]}\r\n{\"nest_level1\":[{\"num\":1,\"ftr1\":0.05254},{\"num\":2,\"ftr1\":0.482}]}\r\n', file=f3)\r\n\r\narrow::read_json_arrow(f2)\r\narrow::read_json_arrow(f3)\r\n```\r\n\r\nInterestingly, the one with 2 rows doesn't crash, but the data it reads into R is wrong:\r\n\r\n```Java\n\r\n> arrow::read_json_arrow(f2)\r\n                                               nest_level1\r\n1 4.940656e-324, 9.881313e-324, 2.334200e-01, 3.162100e-01\r\n2 4.940656e-324, 9.881313e-324, 3.186900e-01, 4.538200e-01\r\n```\r\n\r\nWith 3 lines, it aborts. Here's a backtrace:\r\n\r\n```Java\n\r\n> arrow::read_json_arrow(f3)\r\n/Users/enpiar/Documents/ursa/arrow/cpp/src/arrow/array.cc:97:  Check failed: (off) <= (length) Slice offset greater than array length\r\n0   libarrow.100.dylib                  0x0000000113ac0354 _ZN5arrow4util7CerrLog14PrintBackTraceEv + 52\r\n1   libarrow.100.dylib                  0x0000000113ac0274 _ZN5arrow4util7CerrLogD2Ev + 100\r\n2   libarrow.100.dylib                  0x0000000113ac01d5 _ZN5arrow4util7CerrLogD1Ev + 21\r\n3   libarrow.100.dylib                  0x0000000113ac01f9 _ZN5arrow4util7CerrLogD0Ev + 25\r\n4   libarrow.100.dylib                  0x0000000113ac00e0 _ZN5arrow4util8ArrowLogD2Ev + 80\r\n5   libarrow.100.dylib                  0x0000000113ac0115 _ZN5arrow4util8ArrowLogD1Ev + 21\r\n6   libarrow.100.dylib                  0x000000011342535e _ZNK5arrow9ArrayData5SliceExx + 238\r\n7   libarrow.100.dylib                  0x0000000113432314 _ZNK5arrow11StructArray5fieldEi + 388\r\n8   arrow.so                            0x000000010d55e383 _ZN5arrow1r16Converter_StructC2ERKNSt3__16vectorINS2_10shared_ptrINS_5ArrayEEENS2_9allocatorIS6_EEEE + 163\r\n9   arrow.so                            0x000000010d551f04 _ZN5arrow1r9Converter4MakeERKNSt3__16vectorINS2_10shared_ptrINS_5ArrayEEENS2_9allocatorIS6_EEEE + 1012\r\n10  arrow.so                            0x000000010d55199d _ZN5arrow1r22ArrayVector__as_vectorElRKNSt3__16vectorINS1_10shared_ptrINS_5ArrayEEENS1_9allocatorIS5_EEEE + 29\r\n11  arrow.so                            0x000000010d5530b9 _Z16Array__as_vectorRKNSt3__110shared_ptrIN5arrow5ArrayEEE + 153\r\n12  arrow.so                            0x000000010d55f6bf _ZZNK5arrow1r14Converter_List17Ingest_some_nullsEP7SEXPRECRKNSt3__110shared_ptrINS_5ArrayEEEllENKUllE_clEl + 95\r\n13  arrow.so                            0x000000010d55f52b _ZNK5arrow1r14Converter_List17Ingest_some_nullsEP7SEXPRECRKNSt3__110shared_ptrINS_5ArrayEEEll + 251\r\n14  arrow.so                            0x000000010d55401b _ZNSt3__110__function6__funcIZN5arrow1r9Converter14IngestParallelEP7SEXPRECRKNS_10shared_ptrINS2_8internal9TaskGroupEEEEUlvE_NS_9allocatorISD_EEFNS2_6StatusEvEEclEv + 107\r\n15  libarrow.100.dylib                  0x0000000113ada414 _ZNKSt3__110__function12__value_funcIFN5arrow6StatusEvEEclEv + 68\r\n16  libarrow.100.dylib                  0x0000000113ad9d0c _ZNKSt3__18functionIFN5arrow6StatusEvEEclEv + 28\r\n17  libarrow.100.dylib                  0x0000000113add8e2 _ZZN5arrow8internal17ThreadedTaskGroup10AppendRealENSt3__18functionIFNS_6StatusEvEEEENKUlvE_clEv + 82\r\n18  libarrow.100.dylib                  0x0000000113add86d _ZNSt3__1L8__invokeIRZN5arrow8internal17ThreadedTaskGroup10AppendRealENS_8functionIFNS1_6StatusEvEEEEUlvE_JEEEDTclclsr3std3__1E7forwardIT_Efp_Espclsr3std3__1E7forwardIT0_Efp0_EEEOSA_DpOSB_ + 29\r\n19  libarrow.100.dylib                  0x0000000113add81d _ZNSt3__128__invoke_void_return_wrapperIvE6__callIJRZN5arrow8internal17ThreadedTaskGroup10AppendRealENS_8functionIFNS3_6StatusEvEEEEUlvE_EEEvDpOT_ + 29\r\n20  libarrow.100.dylib                  0x0000000113add7ed _ZNSt3__110__function12__alloc_funcIZN5arrow8internal17ThreadedTaskGroup10AppendRealENS_8functionIFNS2_6StatusEvEEEEUlvE_NS_9allocatorIS9_EEFvvEEclEv + 29\r\n21  libarrow.100.dylib                  0x0000000113adc4f9 _ZNSt3__110__function6__funcIZN5arrow8internal17ThreadedTaskGroup10AppendRealENS_8functionIFNS2_6StatusEvEEEEUlvE_NS_9allocatorIS9_EEFvvEEclEv + 25\r\n22  libarrow.100.dylib                  0x0000000113ae7b75 _ZNKSt3__110__function12__value_funcIFvvEEclEv + 53\r\n23  libarrow.100.dylib                  0x0000000113ae7725 _ZNKSt3__18functionIFvvEEclEv + 21\r\n24  libarrow.100.dylib                  0x0000000113ae70ea _ZN5arrow8internalL10WorkerLoopENSt3__110shared_ptrINS0_10ThreadPool5StateEEENS1_15__list_iteratorINS1_6threadEPvEE + 618\r\n25  libarrow.100.dylib                  0x0000000113ae6e41 _ZZN5arrow8internal10ThreadPool21LaunchWorkersUnlockedEiENK3$_1clEv + 65\r\n26  libarrow.100.dylib                  0x0000000113ae6dbd _ZNSt3__1L8__invokeIZN5arrow8internal10ThreadPool21LaunchWorkersUnlockedEiE3$_1JEEEDTclclsr3std3__1E7forwardIT_Efp_Espclsr3std3__1E7forwardIT0_Efp0_EEEOS5_DpOS6_ + 29\r\n27  libarrow.100.dylib                  0x0000000113ae6d25 _ZNSt3__1L16__thread_executeINS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEZN5arrow8internal10ThreadPool21LaunchWorkersUnlockedEiE3$_1JEJEEEvRNS_5tupleIJT_T0_DpT1_EEENS_15__tuple_indicesIJXspT2_EEEE + 37\r\n28  libarrow.100.dylib                  0x0000000113ae6506 _ZNSt3__114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEEZN5arrow8internal10ThreadPool21LaunchWorkersUnlockedEiE3$_1EEEEEPvSC_ + 118\r\n29  libsystem_pthread.dylib             0x00007fff7a2f82eb _pthread_body + 126\r\n30  libsystem_pthread.dylib             0x00007fff7a2fb249 _pthread_start + 66\r\n31  libsystem_pthread.dylib             0x00007fff7a2f740d thread_start + 13\r\nAbort trap: 6\r\n```\r\n\r\n"
        },
        {
            "created_at": "2020-02-03T13:29:37.225Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7740?focusedCommentId=17028934) by Francois Saint-Jacques (fsaintjacques):*\n`[~npr]` did you try with master or with 0.15.1? Might be a duplicate of ARROW-7647 https://github.com/apache/arrow/pull/6273"
        },
        {
            "created_at": "2020-02-03T15:58:35.470Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7740?focusedCommentId=17029057) by Neal Richardson (npr):*\nYeah I'm on master. FWIW, as the original report notes, it appears that the data is read into Arrow fine, the problems are on translating from Arrow to R:\r\n\r\n```Java\n\r\n> arrow::read_json_arrow(f3, as_data_frame=FALSE)\r\nTable\r\n3 rows x 1 columns\r\n$nest_level1: list<item: struct<num: int64, ftr1 <double>>>\r\n```"
        },
        {
            "created_at": "2020-03-29T23:28:41.230Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7740?focusedCommentId=17070577) by Wes McKinney (wesm):*\nI started looking at this, I'm far enough down the rabbit hole that I might as well figure out the fix"
        },
        {
            "created_at": "2020-03-30T00:02:57.731Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7740?focusedCommentId=17070604) by Wes McKinney (wesm):*\nI've hit the limit of my knowledge of how the R C API works. See this commit\r\n\r\nhttps://github.com/wesm/arrow/commit/b5f07442c0297b85030b8624faced5bb114bb849#diff-85a7e5bb1bf1ea13536e9956b1920093R589\r\n\r\nI placed Validate usages on either side of `SET_VECTOR_ELT` here\r\n\r\n```Java\n\r\n    auto ingest_one = [&](R_xlen_t i) {\r\n      auto slice =\r\n          values_array->Slice(list_array->value_offset(i), list_array->value_length(i));\r\n      STOP_IF_NOT_OK(slice->Validate());\r\n      STOP_IF_NOT_OK(values_array->Validate());\r\n      SET_VECTOR_ELT(data, i + start, Array__as_vector(slice));\r\n      STOP_IF_NOT_OK(values_array->Validate());\r\n      STOP_IF_NOT_OK(slice->Validate());\r\n    };\r\n```\r\n\r\nThe code `SET_VECTOR_ELT(data, i + start, Array__as_vector(slice));` causes memory corruption (because the Validate calls fail on the subsequent lines) so presumably there is some missing use of Protect or other APIs "
        },
        {
            "created_at": "2020-03-30T00:03:30.595Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7740?focusedCommentId=17070605) by Wes McKinney (wesm):*\nThat commit also implements R bindings for Validate/ValidateFull, that should be broken out into a separate patch at some point"
        },
        {
            "created_at": "2020-03-30T00:04:24.214Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7740?focusedCommentId=17070606) by Wes McKinney (wesm):*\ncc `[~romainfrancois]`"
        },
        {
            "created_at": "2020-04-01T01:03:05.329Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7740?focusedCommentId=17072281) by Wes McKinney (wesm):*\nIssue resolved by pull request 6792\n<https://github.com/apache/arrow/pull/6792>"
        }
    ]
}