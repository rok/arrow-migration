{
    "issue": {
        "title": "[C++] Allow automatic String -> LargeString promotions when concatenating tables",
        "body": "***Note**: This issue was originally created as [ARROW-7245](https://issues.apache.org/jira/browse/ARROW-7245). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\ninspired by GitHub issue https://github.com/apache/arrow/issues/5874",
        "created_at": "2019-11-22T21:21:09.000Z",
        "updated_at": "2022-09-23T13:57:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-05-25T20:05:25.799Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7245?focusedCommentId=17116231) by Wes McKinney (wesm):*\nPerhaps Concatenate can be reimplemented as a vector kernel, so that type promotions can be handled by the kernel execution machinery"
        },
        {
            "created_at": "2022-08-10T19:37:28.932Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7245?focusedCommentId=17578136) by Clark Zinzow (clarkzinzow):*\n+1 to having `Concatenate` go through the type promotion logic in the compute layer. I'm currently running into a similar issue with concatenating tables with different numeric types that can certainly be promoted to a common numeric type. I'm currently working around this in application code by doing manual type promotion of each column to the common dtype for that column across all tables (mimicking Arrow's internal type promotion logic [here](https://github.com/apache/arrow/blob/6cc37cf2d1ba72c46b64fbc7ac499bd0d7296d20/cpp/src/arrow/compute/kernels/codegen_internal.cc#L145-L338))) before concatenating the tables.\r\n\r\nHere is a pyarrow MWE:\r\n```python\n\r\nIn [1]: t1 = pa.table({\"a\": pa.array([1, 2], type=pa.int16())})\r\n\r\nIn [2]: t2 = pa.table({\"a\": pa.array([3, 4], type=pa.int64())})\r\n\r\nIn [3]: pa.concat_tables([t1, t2])\r\n---------------------------------------------------------------------------\r\nArrowInvalid                              Traceback (most recent call last)\r\n<ipython-input-91-40afec1155a5> in <module>\r\n----> 1 pa.concat_tables([t1, t2])\r\n\r\n~/.local/lib/python3.7/site-packages/pyarrow/table.pxi in pyarrow.lib.concat_tables()\r\n\r\n~/.local/lib/python3.7/site-packages/pyarrow/error.pxi in pyarrow.lib.pyarrow_internal_check_status()\r\n\r\n~/.local/lib/python3.7/site-packages/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowInvalid: Schema at index 1 was different:\r\na: int16\r\nvs\r\na: int64\r\n```"
        }
    ]
}