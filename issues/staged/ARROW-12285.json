{
    "issue": {
        "title": "[C++] Create a better mechanism for async state management",
        "body": "***Note**: This issue was originally created as [ARROW-12285](https://issues.apache.org/jira/browse/ARROW-12285). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt can be a bit tricky keeping everything alive in an async context.\u00a0 This is an umbrella issue for discussion and brainstorming of ideas.\r\n\r\n\u00a0\r\n\r\nFor example, a nursery blocks until all underlying tasks have finished.\u00a0 This allows things defined at the top level of the nursery to be global state shared by reference across all tasks.\r\n\r\n\u00a0\r\n\r\nA common approach in use right now is to wrap state in a shared pointer and pass that state by copy to all callbacks but this might involve a lot of shared pointer copies.\r\n\r\n\u00a0\r\n\r\nAnother approach could be to define a method like `Future<T> AsyncBind(function<Future<T>(S\\*)>>, shared_ptr<S>)` which guarantees the S\\* is valid until the future completes.\r\n\r\n\u00a0\r\n\r\nThose approaches also might help futures but then not be able to help async generators, especially if that generator is passed back to user code.\u00a0 In that case it might be helpful to have something like...\r\n\r\n\u00a0\r\n\r\nAsyncGenerator<T> AddFinallyCallback(AsyncGenerator<T>, function<void()>)\r\n\r\n...or...\r\n\r\nAsyncGenerator<T> BindToGenerator(function<AsyncGenerator<T>(S\\*)>, std::shared_ptr<S>)",
        "created_at": "2021-04-07T22:33:27.000Z",
        "updated_at": "2021-04-07T22:33:27.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}