{
    "issue": {
        "title": "[Format][C++] Add \"LargeMap\" type with 64-bit offsets",
        "body": "***Note**: This issue was originally created as [ARROW-15554](https://issues.apache.org/jira/browse/ARROW-15554). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be nice if a \"LargeMap\" type existed along side the \"Map\" type for parity. For other datatypes that require offset arrays/buffers, such as String, List, BinaryArray, provides a \"large\" version of these types, i.e. LargeString, LargeList, and LargeBinaryArray. It would be nice to have a \"LargeMap\" for parity.",
        "created_at": "2022-02-03T19:30:39.000Z",
        "updated_at": "2022-02-07T20:21:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-02-03T19:38:39.622Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15554?focusedCommentId=17486676) by Antoine Pitrou (apitrou):*\nIs this out of a concrete need?"
        },
        {
            "created_at": "2022-02-04T15:42:59.620Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15554?focusedCommentId=17487136) by Sarah Gilmore (sgilmore):*\nHi `[~apitrou]`,\r\n\u00a0\r\nI was more thinking about the future when I created this Jira issue. I don't have a concrete need now, but I can picture a few scenarios in which the size limitation imposed by MapArray's 32-bit offsets cannot be worked around.\r\n\u00a0\r\n**Scenario 1:**\r\n\u00a0\r\nSuppose you have a ListArray of MapArrays. If one of the maps requires more than int32::max key-value pairs,\u00a0there's no way to do this currently. You could try using a ChunkedArray, but you would still need to split the large map across multiple rows in the list.\r\n\u00a0\r\n**Scenario 2:**\r\n\u00a0\r\nEven if the MapArray is at the top of the object hierarchy, the same problem could potentially arise if a row within the array needs to contain more than int32::max key-value pairs. You could try to use a ChunkedArray to resolve the issue, but the key-value pairs would still be split across multiple rows.\r\n\u00a0\r\nI've seen Parquet files with MAP columns, and I can imagine a situation in which someone has a very large MAP as the top-most data structure or within a nested one. While running into a situation in which they can't use MapArrays to represent their data is probably rare, it's not entirely impossible given int32's size restrictions.\u00a0\r\n\u00a0\r\nI'd honestly be interested in looking into this myself.\r\n\u00a0\r\nI hope this helps.\r\n\u00a0\r\nBest,\r\nSarah\r\n\u00a0\r\n\u00a0"
        },
        {
            "created_at": "2022-02-07T17:58:32.332Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15554?focusedCommentId=17488293) by Antoine Pitrou (apitrou):*\nHi `[~sgilmore]` , thank you for the explanation. In any case, format additions have to be discussed and voted on on the development mailing-list. I encourage you to create a new discussion there: see <https://arrow.apache.org/community/>"
        },
        {
            "created_at": "2022-02-07T20:21:05.052Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15554?focusedCommentId=17488413) by Sarah Gilmore (sgilmore):*\nWill do!"
        }
    ]
}