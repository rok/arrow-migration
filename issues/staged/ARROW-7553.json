{
    "issue": {
        "title": "[GLib] Unable to free all memory allocated when creating a GArrowSchema",
        "body": "***Note**: This issue was originally created as [ARROW-7553](https://issues.apache.org/jira/browse/ARROW-7553). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI was not able to run the test code in [this gist](https://gist.github.com/mpontillo/cfbe7ebbf0b0f2acf31063512439bde7) (and corresponding [GitHub issue](https://github.com/apache/arrow/issues/6164)) without encountering a memory leak via `garrow_schema_get_type_once` (according to `valgrind`):\r\n\r\n```java\n\r\n24 bytes in 1 blocks are possibly lost in loss record 192 of 486\r\n   at 0x4A391AF: realloc (vg_replace_malloc.c:836)\r\n   by 0x53B5D97: g_realloc (gmem.c:164)\r\n   by 0x5128108: type_node_any_new_W (gtype.c:502)\r\n   by 0x512D9EC: g_type_register_static (gtype.c:2766)\r\n   by 0x512DDB4: g_type_register_static_simple (gtype.c:2719)\r\n   by 0x4CB3CF8: garrow_schema_get_type_once (in /home/linuxbrew/.linuxbrew/Cellar/apache-arrow-glib/0.15.1_1/lib/libarrow-glib.so.15.0.1)\r\n   by 0x4CB3E40: garrow_schema_get_type (in /home/linuxbrew/.linuxbrew/Cellar/apache-arrow-glib/0.15.1_1/lib/libarrow-glib.so.15.0.1)\r\n   by 0x4CB4098: garrow_schema_new_raw(std::shared_ptr<arrow::Schema>*) (in /home/linuxbrew/.linuxbrew/Cellar/apache-arrow-glib/0.15.1_1/lib/libarrow-glib.so.15.0.1)\r\n   by 0x4CB5860: garrow_schema_new (in /home/linuxbrew/.linuxbrew/Cellar/apache-arrow-glib/0.15.1_1/lib/libarrow-glib.so.15.0.1)\r\n   by 0x401219: main (main.c:13)\r\n```\r\n\r\nI'm not positive if this is an actual bug in `apache-arrow-glib` or if my test code is incorrect, but I thought I would file an issue here (in addition to my question posted as a GitHub issue) for greater visibility.\r\n\r\nIt looks like the `realloc` call actually happens via `glib`; is this a one-time type registration that isn't expected to be cleaned up until the process exits? (I couldn't find a reference to `garrow_schema_get_type_once` in the `arrow` code.) I wanted to be certain, since I expect to use `arrow-glib` within a long-running process.",
        "created_at": "2020-01-11T01:31:14.000Z",
        "updated_at": "2022-08-27T14:41:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C",
            "Component: Documentation",
            "Component: GLib",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-01-11T04:09:19.000Z"
    },
    "comments": [
        {
            "created_at": "2020-01-11T02:06:21.280Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7553?focusedCommentId=17013330) by Mike Pontillo (mpontillo):*\nI ran the test code 10 million times and observed constant memory usage. So I don't think there is an actual bug here, but it would be nice if the documentation could be clarified to note the supported way to release memory when using these objects."
        },
        {
            "created_at": "2020-01-11T04:07:00.319Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7553?focusedCommentId=17013364) by Kouhei Sutou (kou):*\n> It looks like the realloc call actually happens via glib; is this a one-time type registration that isn't expected to be cleaned up until the process exits?\r\n\r\nRight.\r\n\r\nThe detected valgrind report is false positive. It's allocated by GLib."
        },
        {
            "created_at": "2020-01-11T04:08:36.340Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7553?focusedCommentId=17013366) by Kouhei Sutou (kou):*\nFYI: `garrow_schema_get_type_once` is defined by `G_DEFINE_TYPE_WITH_PRIVATE(GArrowSchema, garrow_schema, G_TYPE_OBJECT)` macro in `c_glib/arrow-glib/schema.cpp`."
        },
        {
            "created_at": "2022-08-27T14:41:47.068Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7553?focusedCommentId=17585841) by @toddfarmer:*\nTransitioning issue from Resolved to Closed to based on resolution field value."
        }
    ]
}