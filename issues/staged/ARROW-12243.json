{
    "issue": {
        "title": "[C++] Datasets/Fragment/ScanOptions should be immutable",
        "body": "***Note**: This issue was originally created as [ARROW-12243](https://issues.apache.org/jira/browse/ARROW-12243). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA dataset is a collection of fragments, a file format, and some partitioning rules.\r\n\r\nA fragment is a description of some location to get data from.\r\n\r\nThe ScanOptions describe how the user wants the scan to behave.\r\n\r\n\u00a0\r\n\r\nThese things don't need mutable state.\u00a0 Currently, datasets do not have any state and its methods could be converted to const painlessly.\r\n\r\n\u00a0\r\n\r\nThe parquet file fragment is a little tricky.\u00a0 It caches statistics gleamed lazily from the parquet metadata at scan time.\u00a0 This is a little confusing and feels like it should be a part of a scan (although that would mean we lose out from multiple scans of the same dataset).\u00a0 Also, though unlikely, what if the files were replaced in the meantime?\r\n\r\n\u00a0\r\n\r\nThe scan options currently get populated as the scan runs based on expression simplification and other information figured out at scan time.\u00a0 Again, this information feels like it should be part of a scan.\r\n\r\n\u00a0\r\n\r\nThese different pieces make the code confusing (to me at least) to reason on.\u00a0 For example, there was some recent discussion in <https://github.com/apache/arrow/pull/9802> about whether a fragment or a dataset should be reusable (the conclusion was they should not but I still think maybe they should be).\r\n\r\n\u00a0\r\n\r\nJust to be clear.\u00a0 I'm not stating these things as self evident and obvious.\u00a0\u00a0 This is more of a \"for discussion\" issue.\u00a0 I also don't have a concrete idea of implementation.\u00a0 It would seem there would end up being a \"scan context\" again of some kind and it might even be persisted to use on future scans to save time (e.g. the cached parquet statistics).",
        "created_at": "2021-04-07T08:04:00.000Z",
        "updated_at": "2022-07-04T17:41:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-04-07T08:04:48.260Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12243?focusedCommentId=17316094) by Weston Pace (westonpace):*\n`[~bkietz]` `[~lidavidm]` `[~jorisvandenbossche]` \r\n\r\nCC people involved in recent discussions on the topic."
        },
        {
            "created_at": "2021-04-07T13:34:33.027Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12243?focusedCommentId=17316341) by David Li (lidavidm):*\nI agree that mostly, we don't need mutable state or could move it to some sort of context object. As with the FragmentScanOptions, though, a separate context object feels like the kind of thing that Python/R users shouldn't have to think about default.\r\n\r\nThe reusablility part is odd in that yes, I think it's very weird to have a fragment that's only readable once (see ARROW-12231). However, it comes up because of writing, where you may not want to materialize all data in-memory before writing it out. Since both reading and writing use the same machinery, you then end up with a read-once fragment/dataset."
        }
    ]
}