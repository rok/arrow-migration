{
    "issue": {
        "title": "[Python] Make Buffered* IO classes available to Python, incorporate into input_stream, output_stream factory functions",
        "body": "***Note**: This issue was originally created as [ARROW-3126](https://issues.apache.org/jira/browse/ARROW-3126). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n",
        "created_at": "2018-08-28T00:41:11.000Z",
        "updated_at": "2019-01-10T04:38:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-01-10T04:38:36.000Z"
    },
    "comments": [
        {
            "created_at": "2018-08-28T10:29:23.129Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3126?focusedCommentId=16594799) by Antoine Pitrou (apitrou):*\nWhat would that do under the hood exactly? Any benchmarks to watch for?"
        },
        {
            "created_at": "2018-08-28T11:36:22.842Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3126?focusedCommentId=16594856) by Uwe Korn (uwe):*\nAs far as I understand the title, I would do the same as https://docs.python.org/3/library/io.html#io.BufferedReader internally does. Simply using the Python class in pyarrow already brought us great improvements in reading Parquet files from Azure."
        },
        {
            "created_at": "2018-08-28T11:46:09.701Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3126?focusedCommentId=16594863) by Antoine Pitrou (apitrou):*\nOk. The term \"read ahead\" is a bit misleading, because it implies that I/O is hidden in the background, which is not how a buffering layer works (the buffer is filled up synchronously when empty, it's not fed by a separate thread).\r\n\r\nCan we-reuse io.BufferedReader for this or is the intention to have a similar primitive written in C++? Also, does it return a InputStream or a full-blown RandomAccessFile (the latter is quite a bit more difficult to get right and optimize)."
        },
        {
            "created_at": "2018-08-28T16:27:00.681Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3126?focusedCommentId=16595233) by Wes McKinney (wesm):*\n`open_stream` only uses InputStream https://github.com/apache/arrow/blob/master/python/pyarrow/ipc.pxi#L247. So we should implement a buffering InputStream in C++"
        },
        {
            "created_at": "2018-12-09T20:41:55.997Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3126?focusedCommentId=16714092) by Wes McKinney (wesm):*\n`[~kszucs]` would you be interested in working on this? My thinking is to add a `buffer_size` argument to both `pyarrow.input_stream` and `output_stream`. After a raw reader or writer is created, if this argument it set, it will be wrapped in either a BufferedInputStream or BufferedOutputStream as appropriate"
        },
        {
            "created_at": "2018-12-18T01:42:46.202Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3126?focusedCommentId=16723571) by Wes McKinney (wesm):*\nIf someone else could pick this up I would be appreciative. If I finish the other work assigned to me this week and this is not done, I will pick it up"
        },
        {
            "created_at": "2019-01-10T04:38:36.553Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3126?focusedCommentId=16738992) by Wes McKinney (wesm):*\nIssue resolved by pull request 3252\n<https://github.com/apache/arrow/pull/3252>"
        }
    ]
}