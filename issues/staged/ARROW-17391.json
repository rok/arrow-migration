{
    "issue": {
        "title": "[C#] arrow::read_feather() cannot read DictionaryArray written from C#",
        "body": "***Note**: This issue was originally created as [ARROW-17391](https://issues.apache.org/jira/browse/ARROW-17391). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis applies to Arrow 9.0.0, both the C# nuget and R package, but for some reason 9.0.0 isn't in the issue dropdowns' list of released versions. It also appears the [implementation status page](https://arrow.apache.org/docs/status.html#ipc-format) may be stale as the C#\u00a0 source contains [DictionaryArray](https://github.com/apache/arrow/blob/master/csharp/src/Apache.Arrow/Arrays/DictionaryArray.cs) and a look in the debugger confirms the flags flip and the data structures update for [ArrowStreamWriter](https://github.com/apache/arrow/blob/master/csharp/src/Apache.Arrow/Ipc/ArrowStreamWriter.cs) having correctly received both the dictionary index and value arrays it's given on the code paths which write a [dictionary batch](https://arrow.apache.org/docs/format/Columnar.html)\u00a0. However, on the R side, read_feather() fails with\r\n\r\n`Error: Key error: Dictionary with id 1 not found`\r\n\r\nSo it appears most likely either C# isn't properly emitting the dictionary batch, despite seeming to have all the code to do so, or something's going wrong in the C++ layers under R in the reading side.\r\n\r\nSetup on the C# side is simple\r\n\r\n`\u00a0 \u00a0 \u00a0 \u00a0 public static DictionaryArray CreateStringTable(Memory<byte> indicies, IList<string> values)`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 {`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StringArray.Builder valueArray = new();`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (int valueIndex = 0; valueIndex < values.Count; ++valueIndex)`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 valueArray.Append(values[valueIndex]);`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `}`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UInt8Array indexArray = new(ArrowArrayExtensions.WrapInArrayData(UInt8Type.Default, indicies, indicies.Length));`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return new DictionaryArray(new(UInt8Type.Default, StringType.Default, false), indexArray, valueArray.Build());`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 `}\r\n\r\nas is the R\r\n\r\n`\u00a0 \u00a0 \u00a0 \u00a0 library(arrow)`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 foo = read_feather(\"test.feather\")`\r\n\r\nIf I drop the dictionary column the two Arrow implementations interop without difficulty. Same if I write only the indices as a UInt8 column. So the issue here is clearly specific to the use of DictionaryColumn. I've also tried other index sizes, so it doesn't appear specific to the use of UInt8.\r\n\r\nI'm therefore left with two questions:\r\n\r\n1) Does DictionaryArray have working use cases in 9.0.0?\r\n\r\n2) If what I'm doing's not supposed to work yet, or I'm not getting the data structures set up correctly (there's no C# DictionaryArray example [on github](https://github.com/apache/arrow/tree/master/csharp/examples)), is there an array level workaround?\r\n\r\nThere's only one string table in this schema and it's typically tiny (five values or less) so putting its values part in the schema metadata is a viable workaround, albeit an inelegant one.\r\n\r\nNot seeing that there's a feather file viewer available but, if there is, I'd be happy to take a closer look. Can also link the sources after they've been committed and pushed, which should be by the end of the day tomorrow.",
        "created_at": "2022-08-11T21:19:58.000Z",
        "updated_at": "2022-08-12T16:18:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C#",
            "Component: R",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-08-11T23:00:36.640Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17391?focusedCommentId=17578729) by Neal Richardson (npr):*\nDictionaryArray integration tests are skipped for C#, so this leads me to believe that whatever the C# library produces here is not compatible with the Arrow specification: https://github.com/apache/arrow/blob/master/dev/archery/archery/integration/datagen.py#L1651-L1652"
        },
        {
            "created_at": "2022-08-12T16:18:51.451Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17391?focusedCommentId=17579040) by Todd West (twest820):*\nI was just looking in the C# sources for another thing and noticed ARROW-6870: C# Add Support for Dictionary Arrays and Dictionary Encoding resolved fixed on 2021-08-09. While there's a note in 6870's commit about only supporting DictionaryBatch serialization, that does suggest the write from C# bit of this issue can reasonably be expected to work.\r\n\r\nThere is C# test coverage for DictionaryArray in [ArrowStreamWriterTests.cs](https://github.com/apache/arrow/blob/master/csharp/test/Apache.Arrow.Tests/ArrowStreamWriterTests.cs) and a few of the other classes in the same directory."
        }
    ]
}