{
    "issue": {
        "title": "Unit tests fail if assertions are disabled",
        "body": "***Note**: This issue was originally created as [ARROW-105](https://issues.apache.org/jira/browse/ARROW-105). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSome unit tests fail with the following stack trace if assertions are disabled.\n```\njava.lang.NullPointerException\n\tat org.apache.arrow.memory.BaseAllocator.verifyAllocator(BaseAllocator.java:589)\n\tat org.apache.arrow.memory.BaseAllocator.verifyAllocator(BaseAllocator.java:570)\n\tat org.apache.arrow.memory.RootAllocator.verify(RootAllocator.java:37)\n\tat org.apache.arrow.memory.TestBaseAllocator.testAllocator_claimedReservation(TestBaseAllocator.java:574)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n\tSuppressed: java.lang.IllegalStateException: Memory was leaked by query. Memory leaked: (64)\nAllocator(claimedReservation) 0/64/64/8192 (res/actual/peak/limit)\n\n\t\tat org.apache.arrow.memory.BaseAllocator.close(BaseAllocator.java:497)\n\t\tat org.apache.arrow.memory.TestBaseAllocator.testAllocator_claimedReservation(TestBaseAllocator.java:580)\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\t\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.lang.reflect.Method.invoke(Method.java:606)\n\t\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\t\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\t\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\t\tat mockit.integration.junit4.internal.JUnit4TestRunnerDecorator.executeTestMethod(JUnit4TestRunnerDecorator.java:120)\n\t\tat mockit.integration.junit4.internal.JUnit4TestRunnerDecorator.invokeExplosively(JUnit4TestRunnerDecorator.java:65)\n\t\tat mockit.integration.junit4.internal.MockFrameworkMethod.invokeExplosively(MockFrameworkMethod.java:29)\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\t\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.lang.reflect.Method.invoke(Method.java:606)\n\t\tat mockit.internal.util.MethodReflection.invokeWithCheckedThrows(MethodReflection.java:95)\n\t\tat mockit.internal.annotations.MockMethodBridge.callMock(MockMethodBridge.java:76)\n\t\tat mockit.internal.annotations.MockMethodBridge.invoke(MockMethodBridge.java:41)\n\t\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java)\n\t\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\t\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\t\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\t\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\t\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\t\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\t\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\t\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\t\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\t\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\t\t... 6 more\n\tSuppressed: java.lang.IllegalStateException: Memory was leaked by query. Memory leaked: (64)\nAllocator(ROOT) 0/64/64/8192 (res/actual/peak/limit)\n\n\t\tat org.apache.arrow.memory.BaseAllocator.close(BaseAllocator.java:497)\n\t\tat org.apache.arrow.memory.TestBaseAllocator.testAllocator_claimedReservation(TestBaseAllocator.java:581)\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\t\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.lang.reflect.Method.invoke(Method.java:606)\n\t\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\t\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\t\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\t\tat mockit.integration.junit4.internal.JUnit4TestRunnerDecorator.executeTestMethod(JUnit4TestRunnerDecorator.java:120)\n\t\tat mockit.integration.junit4.internal.JUnit4TestRunnerDecorator.invokeExplosively(JUnit4TestRunnerDecorator.java:65)\n\t\tat mockit.integration.junit4.internal.MockFrameworkMethod.invokeExplosively(MockFrameworkMethod.java:29)\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\t\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.lang.reflect.Method.invoke(Method.java:606)\n\t\tat mockit.internal.util.MethodReflection.invokeWithCheckedThrows(MethodReflection.java:95)\n\t\tat mockit.internal.annotations.MockMethodBridge.callMock(MockMethodBridge.java:76)\n\t\tat mockit.internal.annotations.MockMethodBridge.invoke(MockMethodBridge.java:41)\n\t\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java)\n\t\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\t\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\t\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\t\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\t\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\t\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\t\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\t\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\t\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\t\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\t\t... 6 more\n```\n",
        "created_at": "2016-04-15T20:58:36.000Z",
        "updated_at": "2018-07-08T14:24:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2017-02-13T16:38:39.000Z"
    },
    "comments": [
        {
            "created_at": "2016-04-15T20:59:32.238Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-105?focusedCommentId=15243637) by Laurent Goujon (laurent):*\n`BaseAllocator.java` is accessing `DEBUG_LOCK` before checking if `DEBUG` is true. This should be the opposite."
        },
        {
            "created_at": "2016-05-14T16:36:53.002Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-105?focusedCommentId=15283604) by Laurent Goujon (laurent):*\npull request: https://github.com/apache/arrow/pull/64"
        },
        {
            "created_at": "2016-05-20T00:38:23.035Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-105?focusedCommentId=15292447) by Laurent Goujon (laurent):*\nThis was merged in e316b3f765167fa1f45197061624e73332b095f4"
        }
    ]
}