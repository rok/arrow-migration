{
    "issue": {
        "title": "[Python] Allow pc.call_function to use field references (needed for UDFs)",
        "body": "***Note**: This issue was originally created as [ARROW-16475](https://issues.apache.org/jira/browse/ARROW-16475). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen writing a projection expression I can write something clean when using the builtin functions:\r\n\r\n```\n\r\ndataset.to_table(columns={'projected': pc.ascii_upper(ds.field('name'))})\r\n```\r\n\r\nHowever, if I am using a custom function (UDF) then there isn't a great solution today that I can find.  The best I can come up with is:\r\n\r\n```\n\r\ndataset.to_table(columns={'projected': pc.Expression._call('my_udf', [ds.field('name')])})\r\n```\r\n\r\nI'd think one approach could be:\r\n\r\n```\n\r\ndataset.to_table(columns={'projected': pc.call('my_udf', [ds.field('name')])})\r\n```\r\n\r\nHowever, I'm open to other suggestions as well.",
        "created_at": "2022-05-05T02:43:03.000Z",
        "updated_at": "2022-05-09T20:06:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-05-09T12:28:35.985Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16475?focusedCommentId=17533784) by David Li (lidavidm):*\nShouldn't `pc.call_function(\"udf\", [field(\"name\")])` work already?"
        },
        {
            "created_at": "2022-05-09T19:48:08.464Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16475?focusedCommentId=17533991) by Weston Pace (westonpace):*\nI don't think so but I could be doing something wrong:\r\n```\n\r\n>>> pc.call_function('add', [ds.field('x'), ds.field('y')])\r\nTraceback (most recent call last):\r\n\u00a0 File \"<stdin>\", line 1, in <module>\r\n\u00a0 File \"pyarrow/_compute.pyx\", line 542, in pyarrow._compute.call_function\r\n\u00a0 File \"pyarrow/_compute.pyx\", line 335, in pyarrow._compute.Function.call\r\n\u00a0 File \"pyarrow/_compute.pyx\", line 460, in pyarrow._compute._pack_compute_args\r\nTypeError: Got unexpected argument type <class 'pyarrow._compute.Expression'> for compute function \n```\r\n\u00a0"
        },
        {
            "created_at": "2022-05-09T19:53:23.005Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16475?focusedCommentId=17533997) by David Li (lidavidm):*\nAh, I was thinking the 'smarts' for the usual function wrappers were in `call_function`, but it turns out they're in the actual generated wrappers instead (https://github.com/apache/arrow/blob/d00caa947ea53774e0e6745c857bf622457081ad/python/pyarrow/compute.py#L226-L254)\r\n\r\nI would argue `pc.call_function` would be the right place to put it"
        },
        {
            "created_at": "2022-05-09T20:06:31.502Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16475?focusedCommentId=17534003) by Weston Pace (westonpace):*\n`pc.call_function` works for me.  I'll update the title."
        }
    ]
}