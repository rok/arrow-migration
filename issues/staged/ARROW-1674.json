{
    "issue": {
        "title": "[C++] Add ExtensionType implementation for 8-bit boolean values",
        "body": "***Note**: This issue was originally created as [ARROW-1674](https://issues.apache.org/jira/browse/ARROW-1674). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSome libraries (e.g. NumPy) represent boolean values using an array of int8 or uint8 values of 1's and 0's. This can present a challenge at times to receive such memory without copying. \r\n\r\nNow that we have ExtensionType capabilities, we could define an extension type distinguish UInt8/Int8-annotated-as-boolean to be able to flow through such data in applications.\r\n\r\nA discussion about introducing a new logical type didn't go anywhere, so having a custom container that can be used for these specialized applications is one way to unblock the use case. If we develop some endogenous use of such data in C++, we would need to be mindful to sanitize it to bitpacked boolean before sending to another Arrow application",
        "created_at": "2017-10-14T15:55:29.000Z",
        "updated_at": "2021-11-03T19:48:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2017-10-14T17:57:25.818Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1674?focusedCommentId=16204763) by Uwe Korn (uwe):*\nThis is only a hint that the data was initially 8bit but we won't support 8bit booleans? (My preferred answer would be \"yes\"  here to keep the implementation of the Arrow spec as simple as possible)"
        },
        {
            "created_at": "2017-10-14T19:51:44.196Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1674?focusedCommentId=16204798) by Wes McKinney (wesm):*\nThe goal is to have enough metadata to support zero copy transport of memory to or from other runtimes. As a primary representation for computation, we would use the 1-bit variety. Right now there is no way to describe an 8-bit boolean in the metadata, and some applications that are only transporting memory (e.g. to/from Plasma) will not want to convert to bit-packed form"
        },
        {
            "created_at": "2017-10-14T21:50:59.491Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1674?focusedCommentId=16204834) by Philipp Moritz (pcmoritz):*\nI'm giving this a shot now; one question here is if we want a separate type on the C++ side or one type with a boolean flag. I'm leaning towards a separate type BOOL8 right now."
        },
        {
            "created_at": "2018-11-10T21:46:54.785Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1674?focusedCommentId=16682615) by Wes McKinney (wesm):*\nI think we should probably define a metadata annotation for uint8/int8 to indicate that the data is semantically boolean. This will enable numpy.bool_ to be roundtrippped more gracefully. Doesn't necessarily need to be a formal part of the Arrow format"
        },
        {
            "created_at": "2021-08-04T08:46:15.832Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1674?focusedCommentId=17392872) by Antoine Pitrou (apitrou):*\nIs there still an actual need for this?"
        },
        {
            "created_at": "2021-08-04T18:41:49.777Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1674?focusedCommentId=17393393) by Weston Pace (westonpace):*\nYes, it is still needed for zero-copy compatibility with numpy which can be useful in a few situations."
        }
    ]
}