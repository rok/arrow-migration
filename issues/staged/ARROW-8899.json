{
    "issue": {
        "title": "[R] Add R metadata like pandas metadata for round-trip fidelity",
        "body": "***Note**: This issue was originally created as [ARROW-8899](https://issues.apache.org/jira/browse/ARROW-8899). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nArrow Schema and Field objects have custom_metadata fields to store arbitrary strings in a key-value store. Pandas stores JSON in a \"pandas\" key and uses that to improve the fidelity of round-tripping data to Arrow/Parquet/Feather and back. https://pandas.pydata.org/docs/dev/development/developer.html#storing-pandas-dataframe-objects-in-apache-parquet-format describes this a bit.\r\n\r\nYou can see this pandas metadata in the sample Parquet file:\r\n\r\n```r\n\r\ntab <- read_parquet(system.file(\"v0.7.1.parquet\", package=\"arrow\"), as_data_frame = FALSE)\r\ntab\r\n\r\n# Table\r\n# 10 rows x 11 columns\r\n# $carat <double>\r\n# $cut <string>\r\n# $color <string>\r\n# $clarity <string>\r\n# $depth <double>\r\n# $table <double>\r\n# $price <int64>\r\n# $x <double>\r\n# $y <double>\r\n# $z <double>\r\n# $__index_level_0__ <int64>\r\n\r\ntab$metadata\r\n\r\n# $pandas\r\n# [1] \"{\\\"index_columns\\\": [\\\"__index_level_0__\\\"], \\\"column_indexes\\\": [{\\\"name\\\": null, \\\"pandas_type\\\": \\\"string\\\", \\\"numpy_type\\\": \\\"object\\\", \\\"metadata\\\": null}], \\\"columns\\\": [{\\\"name\\\": \\\"carat\\\", \\\"pandas_type\\\": \\\"float64\\\", \\\"numpy_type\\\": \\\"float64\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"cut\\\", \\\"pandas_type\\\": \\\"unicode\\\", \\\"numpy_type\\\": \\\"object\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"color\\\", \\\"pandas_type\\\": \\\"unicode\\\", \\\"numpy_type\\\": \\\"object\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"clarity\\\", \\\"pandas_type\\\": \\\"unicode\\\", \\\"numpy_type\\\": \\\"object\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"depth\\\", \\\"pandas_type\\\": \\\"float64\\\", \\\"numpy_type\\\": \\\"float64\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"table\\\", \\\"pandas_type\\\": \\\"float64\\\", \\\"numpy_type\\\": \\\"float64\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"price\\\", \\\"pandas_type\\\": \\\"int64\\\", \\\"numpy_type\\\": \\\"int64\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"x\\\", \\\"pandas_type\\\": \\\"float64\\\", \\\"numpy_type\\\": \\\"float64\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"y\\\", \\\"pandas_type\\\": \\\"float64\\\", \\\"numpy_type\\\": \\\"float64\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"z\\\", \\\"pandas_type\\\": \\\"float64\\\", \\\"numpy_type\\\": \\\"float64\\\", \\\"metadata\\\": null}, {\\\"name\\\": \\\"__index_level_0__\\\", \\\"pandas_type\\\": \\\"int64\\\", \\\"numpy_type\\\": \\\"int64\\\", \\\"metadata\\\": null}], \\\"pandas_version\\\": \\\"0.20.1\\\"}\"\r\n```\r\n\r\nWe should do something similar in R: store the \"attributes\" for each column in a data.frame when we convert to Arrow, and restore those attributes when we read from Arrow. \r\n\r\nSince ARROW-8703, you could naively do this all in R, something like:\r\n\r\n```r\n\r\ntab$metadata$r <- lapply(df, attributes)\r\n```\r\n\r\non the conversion to Arrow, and in as.data.frame(), do\r\n\r\n```r\n\r\nif (!is.null(tab$metadata$r)) {\r\n  df[] <- mapply(function(col, meta) {\r\n    attributes(col) <- meta\r\n  }, col = df, meta = tab$metadata$r)\r\n}\r\n```\r\n\r\nHowever, it's trickier than this because:\r\n\r\n- `tab$metadata$r` needs to be serialized to string and deserialized on the way back. Pandas uses JSON but arrow doesn't currently have a JSON R dependency. We could `dput()` to dump the R attributes, but that could introduce risks since you have to parse/eval code to consume it. My best idea at the moment is to try `rawToChar(serialize(x, ascii = TRUE))` on the way out (ascii = TRUE doesn't mean it requires ASCII inputs, it's about how it serializes) and `unserialize(charToRaw(x))` on the way back. But maybe there's some lower-level way to do this better.\n- We'll need to do the same for all places where Tables and RecordBatches are created/converted\n- We'll need to make sure that nested types (structs) get the same coverage\n- This metadata only is attached to Schemas, meaning that Arrays/ChunkedArrays don't have a place to store extra metadata. So we probably want to attach to the R6 (Chunked)Array objects a metadata/attributes field so that if we convert an R vector to array, or if we extract an array out of a record batch, we don't lose the attributes.\n  \n  Doing this should resolve ARROW-4390 and make ARROW-8867 trivial as well.\n  \n  Finally, a note about this custom metadata vs. extension types. Extension types can be defined by [adding metadata to a Field](https://arrow.apache.org/docs/format/Columnar.html#extension-types) (in a Schema). I think this is out of scope here because we're only concerned with R roundtrip fidelity. If there were a type that (for example) R and Pandas both had that Arrow did not, we could define an extension type so that we could share that across the implementations. But unless/until there is value in establishing that extension type standard, let's not worry with it. (In other words, in R we should ignore pandas metadata; if there's anything that pandas wants to share with R, it will define it somewhere else.)",
        "created_at": "2020-05-22T22:07:27.000Z",
        "updated_at": "2020-06-30T15:17:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-06-30T15:17:53.000Z"
    },
    "comments": [
        {
            "created_at": "2020-06-30T15:17:53.811Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8899?focusedCommentId=17148765) by Neal Richardson (npr):*\nIssue resolved by pull request 7524\n<https://github.com/apache/arrow/pull/7524>"
        }
    ]
}