{
    "issue": {
        "title": "[Java] Improve JDBC adapter performance & add benchmark",
        "body": "***Note**: This issue was originally created as [ARROW-6601](https://issues.apache.org/jira/browse/ARROW-6601). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAdd a performance test as well to get a baseline number, to avoid performance regression when we change related code.\r\n\r\n\u00a0",
        "created_at": "2019-09-18T15:00:59.000Z",
        "updated_at": "2019-09-24T06:17:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2019-09-24T06:17:10.000Z"
    },
    "comments": [
        {
            "created_at": "2019-09-23T07:58:16.939Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6601?focusedCommentId=16935613) by Ji Liu (tianchen92):*\nWhen working with Jdbc adapter benchmark, I found the jmh result is very worse (about 1680000 ns/op), and I finally found that when we initialize a VectorSchemaRoot, when call JdbcToArrowUtils#allocateVectors which is time consuming, and this is not necessary since we use setSafe API in consumers. After remove this, the jmh result is about 2000ns/op (3 coulumns with valueCount = 3000).\r\n\r\nI think this one should merged into 0.15 release."
        },
        {
            "created_at": "2019-09-24T06:17:10.822Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6601?focusedCommentId=16936439) by Micah Kornfield (emkornfield@gmail.com):*\nIssue resolved by pull request 5472\n<https://github.com/apache/arrow/pull/5472>"
        }
    ]
}