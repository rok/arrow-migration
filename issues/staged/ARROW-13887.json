{
    "issue": {
        "title": "[R] Capture error produced when reading in CSV file with headers and using a schema, and add suggestion",
        "body": "***Note**: This issue was originally created as [ARROW-13887](https://issues.apache.org/jira/browse/ARROW-13887). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen reading in a CSV with headers, and also using a schema, we get an error as the code tries to read in the header as a line of data.\r\n```java\n\r\nshare_data <- tibble::tibble(\r\n  company = c(\"AMZN\", \"GOOG\", \"BKNG\", \"TSLA\"),\r\n  price = c(3463.12, 2884.38, 2300.46, 732.39)\r\n)\r\n\r\nreadr::write_csv(share_data, file = \"share_data.csv\")\r\n\r\nshare_schema <- schema(\r\n  company = utf8(),\r\n  price = float64()\r\n)\r\n\r\nread_csv_arrow(\"share_data.csv\", schema = share_schema)\r\n\r\n```\r\n```java\n\r\nError: Invalid: In CSV column #1: CSV conversion error to double: invalid value 'price'\r\n/home/nic2/arrow/cpp/src/arrow/csv/converter.cc:492 decoder_.Decode(data, size, quoted, &value)\r\n/home/nic2/arrow/cpp/src/arrow/csv/parser.h:84 status\r\n/home/nic2/arrow/cpp/src/arrow/csv/converter.cc:496 parser.VisitColumn(col_index, visit) \n```\r\nThe correct thing here would have been for the user to supply the argument `skip=1` to `read_csv_arrow()` but this is not immediately obvious from the error message returned from C++.\u00a0 We should capture the error and instead supply our own error message using `rlang::abort` which informs the user of the error and then suggests what they can do to prevent it.\r\n\r\n\u00a0\r\n\r\nFor similar examples (and their associated PRs) see <font color=\"#1d1c1d\">ARROW-11766, and ARROW-12791</font>",
        "created_at": "2021-09-03T10:49:15.000Z",
        "updated_at": "2021-11-02T21:16:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-11-01T20:42:43.000Z"
    },
    "comments": [
        {
            "created_at": "2021-10-01T19:17:10.102Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17423401) by Weston Pace (westonpace):*\nCan we fix the error message in C++ instead?  The criteria could be:\r\n\r\n \\* If there is a parse error\r\n \\* The error happens on the first line\r\n \\* A list of column names has been provided to the reader\r\n\r\nAdd to the error message, \"If the data has a header it must be explicitly skipped since column names were provided\""
        },
        {
            "created_at": "2021-10-02T00:00:23.879Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17423443) by Nicola Crane (thisisnic):*\n`[~westonpace]` How about \"as well as\" rather than \"instead\"? I think it'd still be helpful to include the R-specific suggestion, as per https://style.tidyverse.org/error-messages.html#hints"
        },
        {
            "created_at": "2021-10-02T00:54:31.300Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17423445) by Weston Pace (westonpace):*\nI'm happy with \"as well as\".  If someone takes this JIRA and doesn't want to do the C++ part (it might be a bit tricky identifying those conditions) then we can file a separate JIRA at that point."
        },
        {
            "created_at": "2021-10-06T14:27:41.296Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17425014) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nI think there might be a bit more than meets the eye to this issue, to the point that it becomes a different conversation (about the API of the function).\u00a0\r\n Both `col_types` and `schema` arguments accept a `Schema` object, but the way they treat it are a bit different:\r\n \\* `schema` errors if the CSV file has column headers, while\r\n \\* `col_types` ignores it the column names. (although the documentation states that the names in the object and in the column headers **must**\u00a0match, nothing happens if they don't)\r\n\r\nA slightly modified example:\r\n```java\n\r\nlibrary(arrow)\r\nshare_data <- tibble::tibble(\r\n  company = c(\"AMZN\", \"GOOG\", \"BKNG\", \"TSLA\"),\r\n  price = c(3463.12, 2884.38, 2300.46, 732.39)\r\n)\r\n\r\ntf <- tempfile()\r\n\r\nwrite.csv(share_data, tf, row.names = FALSE)\r\n\r\nshare_schema <- schema(\r\n  company = utf8(),\r\n  price = float64()\r\n)\r\n\r\n# this errors\r\nread_csv_arrow(tf, schema = share_schema)\r\n\r\n# this works\r\nread_csv_arrow(tf, col_types = share_schema)\r\n\r\nconflict_col_names_schema <- schema(\r\n  company_test = utf8(),\r\n  price = float64()\r\n)\r\n# this works, but as per the current documentation it should error, but \r\n# read_csv_arrow() simply ignores the mismatched column names \r\n# (Schema object vs CSV file)\r\nread_csv_arrow(tf, col_types = conflict_col_names_schema)\r\nunlink(tf)\n```"
        },
        {
            "created_at": "2021-10-06T14:38:21.166Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17425018) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\n`[~npr]` \u00a0suggested this might not be solved in time for the 6.0.0 release."
        },
        {
            "created_at": "2021-10-08T15:11:08.323Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17426224) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nThere is a suggestion from\u00a0 `[~westonpace]` to still address this issue - i.e. capture the error and give some useful information to the reader. \r\nWe can then create a separate issue for future on the schema vs col_types issue. FWIW I'm happy with his suggestion. Until we solve the underlying issues a more informative message might be useful.\r\nWhat do you think `[~npr]` `[~jonkeane]` `[~thisisnic]`?"
        },
        {
            "created_at": "2021-10-13T21:52:52.679Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17428516) by Krisztian Szucs (kszucs):*\n`[~npr]` shall we postpone it to 7.0?"
        },
        {
            "created_at": "2021-10-14T12:32:43.261Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17428789) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nThe error is a caught because there is a type mismatch between the desired column type (as indicated in the schema) and values in the file. Note that, in the example in **Description**, for the first column **company** where there isn't a type mismatch between the column name (string) and column type (utf8()) we do not get an error message from C++. \r\n\r\nThis implies we cannot rely on capturing the C++ error message and offering a more informative option in R as sometimes the error might not be triggered (in the case of a CSV where all the columns are strings / characters).\r\n\r\nThe solution might be to somehow assess whether the CSV file has headers or not - which I do not think it is possible. \r\n\r\nIn the example below (where all columns are strings), a C++ error is not triggered, and we get the CSV row headers as values in the R data frame.\r\n```r\n\r\nshare_data2 <- tibble::tibble(\r\n  company = c(\"AMZN\", \"GOOG\", \"BKNG\", \"TSLA\"),\r\n  another_string = c(\"AMZN\", \"GOOG\", \"BKNG\", \"TSLA\")\r\n)\r\n\r\nreadr::write_csv(share_data2, file = \"share_data2.csv\")\r\n\r\nshare_schema2 <- schema(\r\n  col1 = utf8(),\r\n  col2 = utf8()\r\n)\r\n\r\nread_csv_arrow(\"share_data2.csv\", schema = share_schema2)\r\n```\r\n```r\n\r\n# A tibble: 5 \u00d7 2\r\n  col1    col2          \r\n  <chr>   <chr>         \r\n1 company another_string\r\n2 AMZN    AMZN          \r\n3 GOOG    GOOG          \r\n4 BKNG    BKNG          \r\n5 TSLA    TSLA   \r\n```"
        },
        {
            "created_at": "2021-10-14T13:02:07.833Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17428796) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nAnother option might be to detect if the user is somehow passing col_names and print a message letting them know they should check the CSV does not have headers. \r\n\r\nread::read_csv() has a similar issue, the difference being that in the case of a mismatch they coerce the output column to string. \r\n\r\n```r\n\r\nread_csv(\"share_data2.csv\", \r\n         col_names = c(\"col1\", \"col2\"))\r\n```\r\n```r\n\r\nRows: 5 Columns: 2                                                                                                     \r\n\u2500\u2500 Column specification \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\nDelimiter: \",\"\r\nchr (2): col1, col2\r\n\r\n\u2139 Use `spec()` to retrieve the full column specification for this data.\r\n\u2139 Specify the column types or set `show_col_types = FALSE` to quiet this message.\r\n# A tibble: 5 \u00d7 2\r\n  col1    col2          \r\n  <chr>   <chr>         \r\n1 company another_string\r\n2 AMZN    AMZN          \r\n3 GOOG    GOOG          \r\n4 BKNG    BKNG          \r\n5 TSLA    TSLA   \r\n```\r\n\r\n```r\n\r\nread_csv(\"share_data.csv\",\r\n         col_names = c(\"col1\", \"col2\"))\r\n```\r\n\r\n```r\n\r\nRows: 5 Columns: 2                                                                                                     \r\n\u2500\u2500 Column specification \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\nDelimiter: \",\"\r\nchr (2): col1, col2\r\n\r\n\u2139 Use `spec()` to retrieve the full column specification for this data.\r\n\u2139 Specify the column types or set `show_col_types = FALSE` to quiet this message.\r\n# A tibble: 5 \u00d7 2\r\n  col1    col2   \r\n  <chr>   <chr>  \r\n1 company price  \r\n2 AMZN    3463.12\r\n3 GOOG    2884.38\r\n4 BKNG    2300.46\r\n5 TSLA    732.39 \r\n```\r\n\r\nWhen we specifically ask for a numeric column, but the file has headers, the cell that doesn't match the indicated type is read in as NA and a _warning_ is displayed.\r\n\r\n```r\n\r\nread_csv(\"share_data.csv\",\r\n         col_names = c(\"col1\", \"col2\"),\r\n         col_types = \"cn\")\r\n```\r\n\r\n```r\n\r\n# A tibble: 5 \u00d7 2                                                                                                      \r\n  col1     col2\r\n  <chr>   <dbl>\r\n1 company   NA \r\n2 AMZN    3463.\r\n3 GOOG    2884.\r\n4 BKNG    2300.\r\n5 TSLA     732.\r\nWarning message:\r\nOne or more parsing issues, see `problems()` for details \r\n```"
        },
        {
            "created_at": "2021-10-14T18:14:34.218Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17428958) by Weston Pace (westonpace):*\n> This implies we cannot rely on capturing the C++ error message and offering a more informative option in R as sometimes the error might not be triggered (in the case of a CSV where all the columns are strings / characters).\r\n>\r\n> The solution might be to somehow assess whether the CSV file has headers or not - which I do not think it is possible. \r\n\r\nI agree this case is probably inevitable.  I'm not sure we should stress too much about it.  FYI, in pandas:\r\n\r\n```\n\r\n>>> x = \"books,authors\\ncirce,miller\"\r\n>>> pd.read_csv(io.StringIO(x))\r\n   books authors\r\n0  circe  miller\r\n>>> pd.read_csv(io.StringIO(x), names=['books', 'authors'])\r\n   books  authors\r\n0  books  authors\r\n1  circe   miller\r\n```\r\n\r\nPandas' read_csv method offers up this long, complicated parameter as a solution:\r\n\r\n```\n\r\nheader - int, list of int, default \u2018infer\u2019\r\n\r\n    Row number(s) to use as the column names, and the start of the data.\r\nDefault behavior is to infer the column names: if no names are passed the behavior is\r\nidentical to header=0 and column names are inferred from the first line of the file, if\r\ncolumn names are passed explicitly then the behavior is identical to header=None.\r\nExplicitly pass header=0 to be able to replace existing names. The header can be a list of\r\nintegers that specify row locations for a multi-index on the columns e.g. [0,1,3]. Intervening\r\nrows that are not specified will be skipped (e.g. 2 in this example is skipped). Note that this\r\nparameter ignores commented lines and empty lines if skip_blank_lines=True, so header=0\r\ndenotes the first line of data rather than the first line of the file.\r\n```"
        },
        {
            "created_at": "2021-10-14T18:53:11.676Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17428973) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nI think the direction for this is is to handle it in a similar way to [handle_parquet_io_error](https://github.com/apache/arrow/blob/00c27417a754befc2c6efc8ecef8505439400df1/r/R/util.R#L124-L135), namely capture the C++ error, offer it back to the user with an additional suggestion to check for headers in their CSV file. \r\n\r\nTechnically this can still be done in time for 6.0.0 release"
        },
        {
            "created_at": "2021-11-01T20:42:43.844Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13887?focusedCommentId=17437018) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 11432\n<https://github.com/apache/arrow/pull/11432>"
        }
    ]
}