{
    "issue": {
        "title": "[C++] Implement alternative DictionaryBuilder that always yields int32 indices",
        "body": "***Note**: This issue was originally created as [ARROW-6042](https://issues.apache.org/jira/browse/ARROW-6042). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nOne problem with the current `DictionaryBuilder<T>` in some applications is that, if it is used to produce a series of arrays to form a ChunkedArray, it may yield constituent chunks having different index widths. For example:\r\n\r\n```Java\n\r\nchunk 0: int8 indices\r\nchunk 1: int16 indices\r\nchunk 2: int16 indices\r\nchunk 3: int32 indices\r\nchunk 4: int32 indices\r\nchunk 5: int32 indices\r\nchunk 6: int32 indices\r\n```\r\n\r\nObviously this is problematic for these applications. I'm running into this issue in the context of ARROW-3772 where we are looking to decode Parquet data directly to `DictionaryArray` without stepping through an intermediate dense decoded stage. \r\n\r\nI'm not sure what to call the class, whether `DictionaryInt32Builder` or something similar, but this would be the same API more or less as `DictionaryBuilder` but instead use `Int32Builder` for the indices rather than `AdaptiveIntBuilder`.",
        "created_at": "2019-07-25T20:35:27.000Z",
        "updated_at": "2019-08-01T23:01:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-07-29T14:42:15.000Z"
    },
    "comments": [
        {
            "created_at": "2019-07-29T14:42:15.765Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6042?focusedCommentId=16895310) by Wes McKinney (wesm):*\nIssue resolved by pull request 4956\n<https://github.com/apache/arrow/pull/4956>"
        }
    ]
}