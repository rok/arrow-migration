{
    "issue": {
        "title": "[C++] Arrow Substrait test fails with SIGSEGV, possibly due to gtest 1.11.0",
        "body": "***Note**: This issue was originally created as [ARROW-16770](https://issues.apache.org/jira/browse/ARROW-16770). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI built Arrow using the instructions in the Python development page, under the pyarrow-dev environment, and found that `arrow-substrait-substrait-test` fails with SIGSEGV - see gdb session below. The same Arrow builds and runs correctly on my system, outside of pyarrow-dev. I suspect this is due to something different about gtest 1.11.0 as compared to gtest 1.10.0 based on the following observations:\r\n1. The backtrace in the gdb session shows gtest 1.11.0 is used.\n1. The backtrace also shows the error is deep inside gtest, working on an `UnorderedElementsAre` expectation.\n1. My system, outside pyarrow-dev, uses gtest 1.10.0.\n   \n   \u00a0\n   {noformat}\n   $ gdb --args ./release/arrow-substrait-substrait-test \n   GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2\n   Copyright (C) 2020 Free Software Foundation, Inc.\n   License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n   This is free software: you are free to change and redistribute it.\n   There is NO WARRANTY, to the extent permitted by law.\n   Type \"show copying\" and \"show warranty\" for details.\n   This GDB was configured as \"x86_64-linux-gnu\".\n   Type \"show configuration\" for configuration details.\n   For bug reporting instructions, please see:\n   <http://www.gnu.org/software/gdb/bugs/>.\n   Find the GDB manual and other documentation resources online at:\n   \u00a0 \u00a0 <http://www.gnu.org/software/gdb/documentation/>.\n   For help, type \"help\".\n   Type \"apropos word\" to search for commands related to \"word\"...\n   Reading symbols from ./release/arrow-substrait-substrait-test...\n   (gdb) run\n   Starting program: /mnt/user1/tscontract/github/rtpsw/arrow/cpp/build/debug/release/arrow-substrait-substrait-test\u00a0\n   [Thread debugging using libthread_db enabled]\n   Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n   [New Thread 0x7ffff41ff700 (LWP 115128)]\n   Running main() from /home/conda/feedstock_root/build_artifacts/gtest_1647154636757/work/googletest/src/gtest_main.cc\n   [==========] Running 33 tests from 3 test suites.\n   [----------] Global test environment set-up.\n   [----------] 4 tests from ExtensionIdRegistryTest\n   [ RUN \u00a0 \u00a0 \u00a0] ExtensionIdRegistryTest.RegisterTempTypes\n   [ \u00a0 \u00a0 \u00a0 OK ] ExtensionIdRegistryTest.RegisterTempTypes (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] ExtensionIdRegistryTest.RegisterTempFunctions\n   [ \u00a0 \u00a0 \u00a0 OK ] ExtensionIdRegistryTest.RegisterTempFunctions (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] ExtensionIdRegistryTest.RegisterNestedTypes\n   [ \u00a0 \u00a0 \u00a0 OK ] ExtensionIdRegistryTest.RegisterNestedTypes (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] ExtensionIdRegistryTest.RegisterNestedFunctions\n   [ \u00a0 \u00a0 \u00a0 OK ] ExtensionIdRegistryTest.RegisterNestedFunctions (0 ms)\n   [----------] 4 tests from ExtensionIdRegistryTest (0 ms total)\n   [----------] 21 tests from Substrait\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.SupportedTypes\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.SupportedTypes (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.SupportedExtensionTypes\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.SupportedExtensionTypes (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.NamedStruct\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.NamedStruct (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.NoEquivalentArrowType\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.NoEquivalentArrowType (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.NoEquivalentSubstraitType\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.NoEquivalentSubstraitType (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.SupportedLiterals\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.SupportedLiterals (1 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.CannotDeserializeLiteral\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.CannotDeserializeLiteral (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.FieldRefRoundTrip\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.FieldRefRoundTrip (1 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.RecursiveFieldRef\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.RecursiveFieldRef (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.FieldRefsInExpressions\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.FieldRefsInExpressions (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.CallSpecialCaseRoundTrip\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.CallSpecialCaseRoundTrip (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.CallExtensionFunction\n   [ \u00a0 \u00a0 \u00a0 OK ] Substrait.CallExtensionFunction (0 ms)\n   [ RUN \u00a0 \u00a0 \u00a0] Substrait.ReadRel\n   Thread 1 \"arrow-substrait\" received signal SIGSEGV, Segmentation fault.\n   0x00005555555b02e6 in testing::internal::MatcherBase<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::MatchAndExplain (listener=0x7fffffffb3a0, x=...,\u00a0\n   \u00a0 \u00a0 this=<optimized out>) at /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/shared_ptr_base.h:1324\n   1324 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0get() const noexcept\n   (gdb) bt\n#0 \u00a00x00005555555b02e6 in testing::internal::MatcherBase<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::MatchAndExplain (listener=0x7fffffffb3a0, x=...,\u00a0\r\n\u00a0 \u00a0 this=<optimized out>) at /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/shared_ptr_base.h:1324\r\n#1 \u00a0testing::internal::UnorderedElementsAreMatcherImpl<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&>::AnalyzeElements<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const\\*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > (listener=0x7fffffffb640,\u00a0\r\n\u00a0 \u00a0 element_printouts=0x7fffffffb3b0, elem_last=..., elem_first=..., this=0x555555765610) at /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/include/gmock/gmock-matchers.h:3504\r\n#2 \u00a0testing::internal::UnorderedElementsAreMatcherImpl<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&>::MatchAndExplain (this=0x555555765610, container=..., listener=0x7fffffffb640)\r\n\u00a0 \u00a0 at /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/include/gmock/gmock-matchers.h:3464\r\n#3 \u00a00x00005555555af714 in testing::internal::MatcherBase<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&>::MatchAndExplain (listener=0x7fffffffb640, x=..., this=0x7fffffffb620)\r\n\u00a0 \u00a0 at /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/shared_ptr_base.h:1324\r\n#4 \u00a0testing::internal::MatcherBase<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&>::Matches (x=..., this=0x7fffffffb620) at /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/include/gtest/gtest-matchers.h:270\r\n#5 \u00a0testing::internal::PredicateFormatterFromMatcher<testing::internal::UnorderedElementsAreMatcher<std::tuple<char const\\*, char const\\*> > >::operator()<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > (this=this@entry=0x7fffffffbae0,\u00a0\r\n\u00a0 \u00a0 value_text=value_text@entry=0x5555555b79f1 \"dataset.files()\", x=...) at /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/include/gmock/gmock-matchers.h:1544\r\n#6 \u00a00x0000555555598a2b in arrow::engine::Substrait_ReadRel_Test::TestBody (this=<optimized out>) at /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/include/gmock/gmock-matchers.h:3533\r\n#7 \u00a00x00007ffff7c20d3e in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test\\*, void (testing::Test::**)(), char const**) ()\r\n\u00a0 \u00a0from /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/lib/libgtest.so.1.11.0\r\n#8 \u00a00x00007ffff7c21011 in testing::Test::Run() () from /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/lib/libgtest.so.1.11.0\r\n#9 \u00a00x00007ffff7c213a7 in testing::TestInfo::Run() () from /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/lib/libgtest.so.1.11.0\r\n#10 0x00007ffff7c21abc in testing::TestSuite::Run() () from /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/lib/libgtest.so.1.11.0\r\n#11 0x00007ffff7c2228e in testing::internal::UnitTestImpl::RunAllTests() () from /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/lib/libgtest.so.1.11.0\r\n#12 0x00007ffff7c216ae in testing::UnitTest::Run() () from /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/lib/libgtest.so.1.11.0\r\n#13 0x00007ffff7c3f06f in main () from /mnt/soft1/tscontract/pkg/miniconda3/envs/pyarrow-dev/lib/libgtest_main.so.1.11.0\r\n#14 0x00007ffff5b840b3 in __libc_start_main (main=0x7ffff7c3f030 <main>, argc=1, argv=0x7fffffffc0d8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffc0c8)\r\n\u00a0 \u00a0 at ../csu/libc-start.c:308\r\n#15 0x00005555555780f1 in _start () at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/sr\r\n{noformat}\r\n\u00a0",
        "created_at": "2022-06-07T12:48:53.000Z",
        "updated_at": "2022-06-16T20:19:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-06-12T14:33:07.130Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16770?focusedCommentId=17553274) by Yaron Gvili (rtpsw):*\n`[~lidavidm]`, making sure this is noticed. I'm not sure who would be a good person to take this."
        },
        {
            "created_at": "2022-06-12T15:10:00.761Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16770?focusedCommentId=17553277) by David Li (lidavidm):*\nCC `[~vibhatha]` and `[~westonpace]` though I think they are going to be occupied over the next week\r\n\r\nbut you might just try removing gtest/gmock from your Conda environment and instead using `-DGTest_SOURCE=BUNDLED`\r\n\r\nif your CMake configuration log shows something like \"Building gtest from source\" likely you've mixed up GTest 1.10 and 1.11 (this has affected a few CI configurations in the past)"
        },
        {
            "created_at": "2022-06-16T19:18:02.608Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16770?focusedCommentId=17555265) by Weston Pace (westonpace):*\nI don't know if it's possible but can you confirm the gmock library in pyarrow-dev matches your gtest version?"
        },
        {
            "created_at": "2022-06-16T20:19:23.629Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16770?focusedCommentId=17555283) by Yaron Gvili (rtpsw):*\nTo make sure we're on the same page, my interpretation of this issue is that it shows there exist a non-contrived setup (which is whatever I happen to have and work with for some time now) where a normal Arrow test invocation leads to a not-so-trivial SIGSEGV. My intentions in filing this issue are to save time for whoever may run into this in the future and to try to find someone who knows how to fix it.\r\n\r\n`[~lidavidm]`, `[~westonpace]`: yes, as noted in the description, there is a mixup in my setup of GTest 1.10 and 1.11 (I think one was installed by pyarrow-dev and another by Ubuntu's apt) yet the point is I didn't do anything contrived to reach this setup, so it could happen to others.\r\n\r\nSince this issue is currently not a blocker for me and I'm occupied with a large project, I'm fine with this staying on hold for the time being."
        }
    ]
}