{
    "issue": {
        "title": "[C++] Implement Not Between ternary kernel",
        "body": "***Note**: This issue was originally created as [ARROW-15223](https://issues.apache.org/jira/browse/ARROW-15223). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAdd a specialized `not_between(arr, left_bound, right_bound)` kernel analogous to `between()` in ARROW-9843.",
        "created_at": "2021-12-30T16:48:37.000Z",
        "updated_at": "2022-01-13T22:50:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-01-13T22:50:19.000Z"
    },
    "comments": [
        {
            "created_at": "2021-12-30T16:51:03.738Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15223?focusedCommentId=17466941) by Eduardo Ponce (edponce):*\ncc `[~baksmj]`"
        },
        {
            "created_at": "2022-01-10T10:09:15.427Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15223?focusedCommentId=17471831) by Joris Van den Bossche (jorisvandenbossche):*\nIs a specialized `not_between` needed? Would it be significantly more efficient than inversing the result of `between` (so a combination of two kernels)? \r\n(it's true that we also have \"not_equal\" in addition to \"equal\", for example)"
        },
        {
            "created_at": "2022-01-10T11:05:23.887Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15223?focusedCommentId=17471879) by Eduardo Ponce (edponce):*\n`[~jorisvandenbossche]` There are differences when comparing the approach for the logical compare functions:\r\n \\* The binary and ternary logical comparisons are functionally different. In binary comparisons, the complement operation can be performed by [exchanging/flipping](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_compare.cc#L314) the operands. This is not the case for ternary kernels (and `{}equal/not_equal{`}).\r\n \\* Since `equal/not_equal` are trivial, specializing them is faster than having one kernel invoke the other one.\r\n\r\nThe `not_between` would be implemented as a kernel that simply negates the result from `between` because there is some complexity. There are kernel specializations based on `{}BetweenOptions{`}, so duplicating them is not appealing for a probably negligible performance gain. [The `not_between` kernel would be implemented something like this](https://github.com/bkmgit/arrow/pull/8#issuecomment-1003458024)."
        },
        {
            "created_at": "2022-01-10T11:16:11.781Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15223?focusedCommentId=17471889) by Joris Van den Bossche (jorisvandenbossche):*\nIf you don't plan to implement a specialized version of \"not_between\" (i.e. basically doing something like the \"between\" implementation but using different compare operations, like \"val < left || val > rightl\" instead of \"left <= val && val <= right\"), but just treat it as a composition of \"not\" and \"between\" under the hood, that seems like an additional reason to not implement \"not_between\" as a separate kernel? \r\n\r\n(the user can do this composition themselves. For example, we also don't have a \"not is_in\")"
        },
        {
            "created_at": "2022-01-10T11:53:20.379Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15223?focusedCommentId=17471905) by Eduardo Ponce (edponce):*\nAhh, now I understand your point. So basically any logical kernel where there is a duality based on negation, should only have the positive kernel implementation and allow the use of composition for its complement. Then if this is the case, the description of `between` could maybe state how to obtain its complement to be clear to the user.\r\n\r\nI am ok with this approach. I simply created this issue based on the assumption of `{}equal/not_equal{`}. Should I close this issue then?"
        },
        {
            "created_at": "2022-01-10T11:58:15.957Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15223?focusedCommentId=17471923) by Eduardo Ponce (edponce):*\nBut there is definitely a performance implication when comparing a single kernel processing data versus two serialized kernels."
        },
        {
            "created_at": "2022-01-13T22:50:19.942Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15223?focusedCommentId=17475817) by Eduardo Ponce (edponce):*\nClosing this issue because based on discussion, the \"not between\" behavior can be obtained by combining existing kernels."
        }
    ]
}