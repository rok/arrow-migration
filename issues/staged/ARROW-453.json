{
    "issue": {
        "title": "[C++] Add filesystem implementation for Amazon S3",
        "body": "***Note**: This issue was originally created as [ARROW-453](https://issues.apache.org/jira/browse/ARROW-453). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe BSD-licensed C++ code in SFrame (https://github.com/turi-code/SFrame/tree/master/oss_src/fileio) may provide some inspiration. ",
        "created_at": "2017-01-02T23:27:59.000Z",
        "updated_at": "2019-11-20T20:59:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-08-29T14:36:04.000Z"
    },
    "comments": [
        {
            "created_at": "2017-01-10T19:51:22.862Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=15815990) by Wes McKinney (wesm):*\nWe might also look at Impala's C++ S3 implementation"
        },
        {
            "created_at": "2017-07-17T17:50:45.236Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16090167) by Wes McKinney (wesm):*\nSee also https://github.com/tensorflow/tensorflow/pull/11089"
        },
        {
            "created_at": "2019-08-14T17:05:38.013Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907451) by Antoine Pitrou (apitrou):*\nI'm trying to use [MinIO](https://min.io/) for automated tests. It seems to have a rather delicate protocol implementation..."
        },
        {
            "created_at": "2019-08-14T17:08:43.371Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907458) by Antoine Pitrou (apitrou):*\nGeneral question: should the S3 filesystem be anchored on a specific bucket (meaning \"path/to/file\" is a key inside the bucket) or not (meaning \"bucket/path/to/file\" gets divided into bucket name and key string)?\r\n\r\nBoth are possible, and I notice that the Python projects [s3fs](https://s3fs.readthedocs.io/en/latest/) and [fs-s3fs](https://fs-s3fs.readthedocs.io/en/latest/) took different decisions here.\r\n\r\n`[~mdurant]` What's your opinion?"
        },
        {
            "created_at": "2019-08-14T19:38:19.711Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907571) by Martin Durant (mdurant):*\nObviously, I choose to do this one particular way, so you cannot count me as unbiased. To the particular question, I think that a URL like \"s3://bucket/path/file\" is very convenient at pinpointing a particular object without further qualification.\r\n\r\nHowever, fsspec creates pyarrow-compatible instances for any of the implementations it references (including s3fs and gcsfs), so who do you need to do anything? You are talking about C-land?\u00a0I'm not sure I am behind repeating all the work and coming up with new file-system standards yet again. Of course, I am a python-first kind of person."
        },
        {
            "created_at": "2019-08-14T19:45:39.266Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907577) by Antoine Pitrou (apitrou):*\nAs the title says, this is a C++ issue. We want to be able to read data from remote filesystems directly in C++ without going through Python calls (or even relying on the presence of a Python interpreter), hence why are reimplementing a filesystem layer in C++.\r\n"
        },
        {
            "created_at": "2019-08-14T19:48:02.413Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907579) by Wes McKinney (wesm):*\nRight, we're implementing things in C++ so that we can use a common implementation in Python, R, Ruby, MATLAB, and any other language that builds bindings to the core Arrow library. "
        },
        {
            "created_at": "2019-08-14T19:49:11.912Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907582) by Martin Durant (mdurant):*\nCan you **please** follow the fsspec model? I think it's a good model and, although young, centralises and codifies a number of FS-related concepts. If you were to rewrite all the implementations there in C++, that would be all to the good, and shouldn't require too much effort on each individual one.\u00a0"
        },
        {
            "created_at": "2019-08-14T19:56:01.502Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907587) by Antoine Pitrou (apitrou):*\nWhich part of the model do you suggest we follow? The filesystem class API? If I look at https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem , there are a lot of methods there and we don't know which ones we'll need.\r\n\r\nOr are there any particular gotchas or design points that you want to illuminate us about?\r\n\r\nAlso you can find our current abstract API here: https://github.com/apache/arrow/blob/master/cpp/src/arrow/filesystem/filesystem.h#L53"
        },
        {
            "created_at": "2019-08-14T19:59:45.459Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907589) by Martin Durant (mdurant):*\nYes, I mean the whole spec, so that you make general-purpose file-system interfaces, rather than just the small part of the API that the internal arrow functions need. That might be part of the arrow mission, to open up data sources local and remote. Otherwise, users would need to use their own language implementations in addition to arrow, when they want to do any management of the remote files (copying, permissions, etc.)."
        },
        {
            "created_at": "2019-08-14T20:00:48.441Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907590) by Wes McKinney (wesm):*\n`[~pitrou]` one consideration is that data might be spread across multiple buckets with the same credentials, am I understanding that right? As some other data points, TensorFlow's implementation seems to treat the bucket as part of the file path\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/platform/s3/s3_file_system_test.cc\r\n\r\nTuri Create (formerly Dato Create) accepts fully qualified URLs including even AWS keys, bucket name, and object name\r\n\r\nhttps://github.com/apple/turicreate/blob/master/src/core/storage/fileio/s3_api.hpp#L177"
        },
        {
            "created_at": "2019-08-14T20:02:38.053Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907591) by Wes McKinney (wesm):*\n`[~mdurant]` that may be a longer-term aspirational goal but I think we are currently pretty scope-limited to the features we need to be able to read and write datasets in these systems. Maybe later when we have a bigger developer and maintainer community we can fill some of the feature gaps as a one-stop-shop filesystem interface "
        },
        {
            "created_at": "2019-08-14T20:05:27.831Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907592) by Martin Durant (mdurant):*\n>\u00a0Turi Create (formerly Dato Create) accepts fully qualified URLs including even AWS keys, bucket name, and object name\r\n\r\nfsspec also allows this, like s3://key:secret@bucket/path/file, which is rare for s3, but more common with ssh or hdfs. Users should probably **not** be putting their credentials into URLs in the general case."
        },
        {
            "created_at": "2019-08-14T20:08:34.269Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16907594) by Antoine Pitrou (apitrou):*\nTo be clear, for now I am not putting a URI layer in the filesystem. This can be added separately."
        },
        {
            "created_at": "2019-08-29T14:36:04.645Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-453?focusedCommentId=16918668) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 5167\n<https://github.com/apache/arrow/pull/5167>"
        }
    ]
}