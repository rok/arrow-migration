{
    "issue": {
        "title": "C++: add hash table classes for fixed-byte-width and variable-length primitive arrays",
        "body": "***Note**: This issue was originally created as [ARROW-32](https://issues.apache.org/jira/browse/ARROW-32). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSome of the most important in-memory analytical routines are:\n\n- unique\n- contains / is-in\n- match (see base::match in R or pandas.match)\n- dictionary-encode (aka \"factorize\" as I call it)\n- frequency-table (unique + observed frequencies)\n\nAt their lowest level these all involve either iterative hash table construction or construct-then-sweep (for the routines involving multiple arrays, e.g. contains/match). \n\nHashing more complex Arrow structures (e.g. structs or lists-of-structs) will require some more thought, but performing these operations on fixed-byte-width types and lists thereof (e.g. strings as List<UInt8>) is fairly straightforward and can be used to craft more complex hash-table based routines. ",
        "created_at": "2016-03-02T20:31:05.000Z",
        "updated_at": "2018-11-22T19:59:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-11-22T19:59:34.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-22T19:59:34.312Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-32?focusedCommentId=16696233) by Wes McKinney (wesm):*\nThis issue is a bit ill-defined, so I'm closing. We have a lot of what I was intending in March 2016 now, see also https://github.com/apache/arrow/commit/eaf8d32e5f292dca0aa5b5508041d5d39406224d"
        }
    ]
}