{
    "issue": {
        "title": "[Packaging][wheel] Could NOT Find LLVM_DIR Error when Building with Gandiva",
        "body": "***Note**: This issue was originally created as [ARROW-9533](https://issues.apache.org/jira/browse/ARROW-9533). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe error mentioned in https://issues.apache.org/jira/browse/ARROW-3874 appears when trying to build with Gandiva on macOS, Amazon Linux and Ubuntu 18.04. After running docker-compose run -e PYTHON_VERSION=\"3.7\" centos-python-manylinux1 I get the error\r\n\r\n```\n\r\nCMake Error at /opt/_internal/cpython-3.7.6/lib/python3.7/site-packages/cmake/data/share/cmake-3.17/Modules/FindPackageHandleStandardArgs.cmake:164 (message):\r\n  Could NOT find LLVMAlt (missing: LLVM_PACKAGE_VERSION CLANG_EXECUTABLE\r\n  LLVM_FOUND LLVM_LINK_EXECUTABLE)\r\n Call Stack (most recent call first):\r\n  /opt/_internal/cpython-3.7.6/lib/python3.7/site-packages/cmake/data/share/cmake-3.17/Modules/FindPackageHandleStandardArgs.cmake:445 (_FPHSA_FAILURE_MESSAGE)\r\n  cmake_modules/FindLLVMAlt.cmake:71 (find_package_handle_standard_args)\r\n  src/gandiva/CMakeLists.txt:28 (find_package)\r\n```\r\n\u00a0\r\n\r\nAttempting to set LLVM_DIR using export LLVM_DIR does not work. Also, setting the -DLLVM_DIR flag for CMAKE by changing the build_arrow.sh file does not seem to work either. Interesting to note is that there was a patch given for a file called FindLLVM.cmake which does not exist and there is only FindLLVMAlt.cmake now.\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2020-07-20T17:43:45.000Z",
        "updated_at": "2020-07-24T22:34:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Gandiva",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-07-20T21:47:17.047Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17161564) by Kouhei Sutou (kou):*\nCould you attach the full log of your `docker-compose run -e PYTHON_VERSION=\"3.7\" centos-python-manylinux1`?"
        },
        {
            "created_at": "2020-07-21T09:27:52.090Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17161896) by Nolo Ogbirner (Lachrymatory):*\n`[~kou]` Attached!"
        },
        {
            "created_at": "2020-07-21T20:51:29.502Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17162331) by Kouhei Sutou (kou):*\nThanks!\r\nCould you run `docker-compose build centos-python-manylinux1` and try `docker-compose run -e PYTHON_VERSION=\"3.7\" centos-python-manylinux1` again?\r\nCould you also attach the full log of `docker-compose build centos-python-manylinux1`?"
        },
        {
            "created_at": "2020-07-22T10:51:42.177Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17162701) by Nolo Ogbirner (Lachrymatory):*\n`[~kou]` I've attached most of the logs of the build process. The same error persists when doing run after. It seems that \"[Warning] One or more build-args [llvm] were not consumed\" when building may be the problem.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-07-22T20:29:12.830Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17163059) by Kouhei Sutou (kou):*\nThanks but did you really run `docker-compose build ... ...-manylinux1`?\r\nIt seems that you used `...-manylinux2014`:\r\n\r\n> Successfully tagged apache/arrow-dev:amd64-centos-7.7-python-manylinux2014"
        },
        {
            "created_at": "2020-07-22T20:34:30.369Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17163065) by Kouhei Sutou (kou):*\nBTW, we don't build Gandiva in the `centos-python-manylinux1` image: https://github.com/apache/arrow/blob/master/python/manylinux1/build_arrow.sh#L88\r\n\r\nSo finding LLVM itself is strange. Do you use the `master` branch? Or the `apache-arrow-0.17.1` tag?\r\n\r\n"
        },
        {
            "created_at": "2020-07-23T10:32:50.351Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17163410) by Nolo Ogbirner (Lachrymatory):*\n`[~kou]` I have tried both manylinux-2014 and manylinux1. Both give the same error. I think changing the branch helped as I no longer get the (llvm) argument not consumed error. This is one step forward. However, after specifying this on macOs, I get further but get this error below (also attached log). It seems that it is trying to curl from <https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1/cfe-10.0.1.src.tar.xz> which is a 404 address. After more investigation, it seems that version 10.0.1 does not include a cfe.x.y.src.tar.xz file which is in the build_llvm.script whereas the 8.0.1 version does have one of those files. <https://github.com/llvm/llvm-project/releases/tag/llvmorg-8.0.1> .\r\n\r\n<font color=\"#de350b\">+ popd</font>\r\n <font color=\"#de350b\">+ rm -rf llvm-10.0.1.src.tar.xz llvm-10.0.1.src.tar llvm-10.0.1.src</font>\r\n <font color=\"#de350b\">+ curl -sL <https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1/cfe-10.0.1.src.tar.xz> -o cfe-10.0.1.src.tar.xz</font>\r\n <font color=\"#de350b\">+ unxz cfe-10.0.1.src.tar.xz</font>\r\n <font color=\"#de350b\">unxz: cfe-10.0.1.src.tar.xz: File format not recognized</font>\r\n\r\n<font color=\"#de350b\">ERROR: Service 'centos-python-manylinux2014' failed to build: The command '/bin/sh -c /build_llvm.sh ${llvm}' returned a non-zero code: 1</font>"
        },
        {
            "created_at": "2020-07-23T10:34:05.580Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17163412) by Nolo Ogbirner (Lachrymatory):*\n`[~kou]` Yes, I have changed the build_arrow.sh file to build with Gandiva as I want to build with Gandiva and remove other dependencies that were enabled by default. It seems that the 0.17.x has the Gandiva flags sets whereas the Master doesn't. But I can change these as I wish right to get a custom build?\r\n\r\n\u00a0\r\n\r\nAnother notable thing is that the manylinux1 docs say that you should run docker-compose build python-manylinux1 but there is no such image: ERROR: No such service: python-manylinux1"
        },
        {
            "created_at": "2020-07-23T11:53:24.018Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17163476) by Nolo Ogbirner (Lachrymatory):*\n`[~kou]` The docker-compose build process for manylinux2014 works when specifying docker-compose build --build-arg llvm=8 centos-python-manylinux2014. It seems that this solved the issue.\r\n\r\n\u00a0\r\n\r\nHowever, I have a problem now that my built versions get a\r\n\r\nModuleNotFoundError: No module named 'pyarrow.lib' when trying to import pyarrow.csv. What is this due to?"
        },
        {
            "created_at": "2020-07-23T21:01:30.388Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17163949) by Kouhei Sutou (kou):*\nWe removed LLVM (and Gandiva) by ARROW-5082 because it increases .whl size.\r\nAnd we removed LLVM from our .whl build images by ARROW-9094.\r\n\r\nWe added support for LLVM 10 by ARROW-9004 but it's not used because we don't use LLVM now.\r\n\r\n> the manylinux1 docs\r\n\r\nCould you show the URL of the manylinux1 docs?\r\n\r\nI think that custom .whl isn't a good approach for you. It'll be difficult to maintain. Could you show assumed user environment of your custom .whl?\r\n\r\nBTW, `LLVM=8 docker-compose ....` is recommended than `docker-compose build --build-arg llvm=8 ...`."
        },
        {
            "created_at": "2020-07-24T08:03:06.406Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17164242) by Nolo Ogbirner (Lachrymatory):*\n`[~kou]` Under usage\u00a0 <https://github.com/apache/arrow/blob/maint-0.17.x/python/manylinux1/build_arrow.sh> there is the name of the image that fails. I understand the history now, thanks. The problem is that on 0.17.x if you don't specify LLVM 8 it pulls the latest version from the github release info of LLVM (which is 10) and then proceeds to fail, which means that the default arguments to the build fails which is quite confusing.\r\n\r\nYes, I understand that custom .whl is difficult to maintain and I would prefer not having to do this. I am planning to run my application in a serverless cloud application where I am limited to 250 MB of packages. I need Gandiva, pyarrow.csv and pyarrow.fs.S3FileSystem for my application. To my knowledge, there isn't a small whl that has all these components out right now?\r\n\r\nAlso, would you be able to point me to what flags dictate to not get a \"no module named pyarrow.lib\" error? Is there any documentation for this? It seems I can not import anything without getting this error.\r\n\r\nThanks for the help!"
        },
        {
            "created_at": "2020-07-24T11:42:14.525Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17164389) by Nolo Ogbirner (Lachrymatory):*\n`[~kou]` \u00a0 I've attached my build_arrow.sh file that is causing the fail to import pyarrow.lib."
        },
        {
            "created_at": "2020-07-24T22:34:28.123Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9533?focusedCommentId=17164663) by Kouhei Sutou (kou):*\nDoes pyarrow package https://anaconda.org/conda-forge/pyarrow (and arrrow-cpp package https://anaconda.org/conda-forge/arrow-cpp ) on conda-forge satisfy your use case?\r\nThey include Gandiva and S3 support."
        }
    ]
}