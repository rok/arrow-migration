{
    "issue": {
        "title": "[C++][Dataset] Ability to read/subset a ParquetFileFragment with given set of row group ids",
        "body": "***Note**: This issue was originally created as [ARROW-10100](https://issues.apache.org/jira/browse/ARROW-10100). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFrom discussion at https://github.com/dask/dask/pull/6534#issuecomment-698723009 (dask using the dataset API in their parquet reader), it might be useful to somehow \"subset\" or read a subset of a ParquetFileFragment for a specific set of row group ids.\r\n\r\nUse cases:\r\n\r\n- Read only a set of row groups ids (this is similar as `ParquetFile.read_row_groups`), eg because you want to control the size of the resulting table by reading subsets of row groups\n- Get a ParquetFileFragment with a subset of row groups (eg based on a filter) to then eg get the statistics of only those row groups\n  \n  The first case could for example be solved by adding a `row_groups` keyword to `ParquetFileFragment.to_table` (but, this is then a keyword specific to the parquet format, and we should then probably also add it to `scan` et al).\n  \n  The second case is something you can in principle do yourself manually by recreating a fragment with `fragment.format.make_fragment(fragment.path, ..., row_groups=[...])`. However, this is a) a bit cumbersome and b) statistics might need to be parsed again?  \n  The statistics of a set of filtered row groups could also be obtained by using `split_by_row_group(filter)` (and then get the statistics of each of the fragments), but if you then want a single fragment, you need to recreate a fragment with the obtained row group ids.\n  \n  So one idea I have now (but mostly brainstorming here). Would it be useful to have a method to create a \"subsetted\" ParquetFileFragment, either based on a list of row group ids (`fragment.subset(row_groups=[...])` or either based on a filter (`fragment.subset(filter=...)`, which would be equivalent as split_by_row_group+recombining into a single fragment) ?\n  \n  cc `[~bkietz]` `[~rjzamora]`\n  \n",
        "created_at": "2020-09-25T19:51:53.000Z",
        "updated_at": "2020-10-10T19:29:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-10-10T19:29:04.000Z"
    },
    "comments": [
        {
            "created_at": "2020-10-01T14:06:00.293Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10100?focusedCommentId=17205540) by Joris Van den Bossche (jorisvandenbossche):*\nA design question: what should be returned if the filter result in 0 row groups or if the list of ids is empty? Should we \"allow\" / return a FileFragment with 0 row groups? I am not sure we should actually do that ..  \r\nIn the Python interface for it, we could for example return None in that case, and then it would be up to the caller to check for None returns.\r\n\r\n`[~bkietz]` is there some way in C++ (with Result) to indicate \"no return value\" (like returning None in Python)"
        },
        {
            "created_at": "2020-10-07T15:34:03.855Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10100?focusedCommentId=17209624) by Joris Van den Bossche (jorisvandenbossche):*\n`[~bkietz]` thoughts on the return value for an empty set of row groups?"
        },
        {
            "created_at": "2020-10-10T19:29:04.295Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10100?focusedCommentId=17211784) by Krisztian Szucs (kszucs):*\nIssue resolved by pull request 8301\n<https://github.com/apache/arrow/pull/8301>"
        }
    ]
}