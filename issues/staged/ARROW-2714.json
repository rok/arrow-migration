{
    "issue": {
        "title": "[C++/Python] Variable step size slicing for arrays",
        "body": "***Note**: This issue was originally created as [ARROW-2714](https://issues.apache.org/jira/browse/ARROW-2714). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nArray slicing should support variable step sizes\r\n\r\nThe current behavior raises an `IndexError`, e.g.\r\n```Java\n\r\nIn [8]: import pyarrow as pa\r\nIn [9]: pa.array([1, 2, 3])[::-1]\r\n---------------------------------------------------------------------------\r\nIndexError Traceback (most recent call last)\r\n<ipython-input-9-20da5f9ab67a> in <module>()\r\n----> 1 pa.array([1, 2, 3])[::-1]\r\n\r\narray.pxi in pyarrow.lib.Array.__getitem__()\r\n\r\narray.pxi in pyarrow.lib._normalize_slice()\r\n\r\nIndexError: only slices with step 1 supported\r\n```",
        "created_at": "2018-06-15T13:39:36.000Z",
        "updated_at": "2020-04-21T15:37:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-04-21T15:37:41.000Z"
    },
    "comments": [
        {
            "created_at": "2018-06-20T15:23:09.830Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2714?focusedCommentId=16518263) by Antoine Pitrou (apitrou):*\nI'm not sure how that would work. Do you expect a copy? A tensor? Or should we allow for non-contiguous arrays?"
        },
        {
            "created_at": "2018-06-21T09:29:44.691Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2714?focusedCommentId=16519123) by Wes McKinney (wesm):*\nThe only option would be to produce a copy. That makes this a somewhat complex task (writing a new computational kernel, in essence)"
        },
        {
            "created_at": "2018-06-21T09:31:23.852Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2714?focusedCommentId=16519126) by Antoine Pitrou (apitrou):*\nHmm, then I think it can be counter-intuitive for users (who would generally expect slices to be zero-copy views, but suddently get a copy with a non-unit step)."
        },
        {
            "created_at": "2018-06-21T09:36:04.290Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2714?focusedCommentId=16519130) by Wes McKinney (wesm):*\nOnly if they're using NumPy, though. With Python lists it's a copy, right? I don't think we should burden ourselves by inheriting too many semantics from NumPy.\r\n\r\nPersonally I would rather have an explicit `reverse` function to do `[::-1]` and continue to disallow slicing with any step but 1"
        },
        {
            "created_at": "2018-06-21T09:39:52.117Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2714?focusedCommentId=16519136) by Antoine Pitrou (apitrou):*\nYes... but then our arrays would do zero-copy slices in some cases and not in other cases. So it's confusing (and can hide bugs).\r\n\r\n+1 for an explicit reversal function / kernel.\r\n\r\n(also, what's the status of the Tensor API? it does have a strides)"
        },
        {
            "created_at": "2018-06-21T09:56:40.807Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2714?focusedCommentId=16519174) by Wes McKinney (wesm):*\nThe Tensor classes are independent from the columnar data structures, though they reuse pieces of metadata, metadata serialization, memory management, and IPC. \r\n\r\nThe purpose of adding these to the library was to have in-memory data structures for handling Tensor/ndarray data and metadata that \"plug in\" to the rest of the Arrow C++ system (Plasma store, IO subsystem, memory pools, buffers, etc.). \r\n\r\nTheoretically you could return a Tensor when creating a non-contiguous slice of an Array; in light of the above, I don't think that would be intuitive. \r\n\r\nWhen we started the project, our focus was creating an open standard for in-memory columnar data, a hitherto unsolved problem. The project's scope has expanded into peripheral problems in the same domain in the meantime (with the mantra of creating interoperable components, a use-what-you-need development platform for system developers). I think this aspect of the project could be better documented / advertised, since the project's initial focus on the columnar standard has given some the mistaken impression that we are not interested in any work outside of that. "
        },
        {
            "created_at": "2020-04-10T16:02:38.051Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2714?focusedCommentId=17080599) by Wes McKinney (wesm):*\nSeems like we can implement this using `Array.take`"
        },
        {
            "created_at": "2020-04-21T15:37:41.896Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2714?focusedCommentId=17088792) by Wes McKinney (wesm):*\nIssue resolved by pull request 6970\n<https://github.com/apache/arrow/pull/6970>"
        }
    ]
}