{
    "issue": {
        "title": "[Python] duckdb helper functions",
        "body": "***Note**: This issue was originally created as [ARROW-14740](https://issues.apache.org/jira/browse/ARROW-14740). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn the R package, [we have an integration with DuckDB](https://github.com/apache/arrow/blob/master/r/R/duckdb.R) that uses the C-Data and C-Stream interface, we include a handful of helper functions that handle the conversion for end users (including setting up the DuckDB connection, registering the arrow data, etc.)\r\n\r\nShould we also have some helper functions in pyarrow?\r\n\r\n",
        "created_at": "2021-11-17T16:23:32.000Z",
        "updated_at": "2021-11-18T17:21:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-11-17T16:32:22.035Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14740?focusedCommentId=17445346) by Antoine Pitrou (apitrou):*\nThat sounds like a good idea. I suppose it would interact with the Python DuckDB module ( https://pypi.org/project/duckdb/ )?"
        },
        {
            "created_at": "2021-11-18T07:53:18.184Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14740?focusedCommentId=17445715) by Joris Van den Bossche (jorisvandenbossche):*\nDoesn't that already exist in the python package of duckdb itself? For example I think they have a `con.register_arrow(..)` method to register an Arrow table as a duckdb table. Or were you thinking about something else?"
        },
        {
            "created_at": "2021-11-18T07:58:34.301Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14740?focusedCommentId=17445716) by Joris Van den Bossche (jorisvandenbossche):*\nLooking at the R code you linked to now, I see that also for R you are indeed calling the register method of the R duckdb package itself: https://github.com/apache/arrow/blob/641554b0bcce587549bfcfd0cde3cb4bc23054aa/r/R/duckdb.R#L55-L75\r\n\r\nBut in R you have some additional logic to eg add the group variables, which is something that doesn't exist in Python. So in Python it  might simpler and boil down to:\r\n\r\n```python\n\r\ndef to_duckdb(table, con, table_name):\r\n    con.register_arrow(table_name, table)\r\n```\r\n\r\nEDIT: I see the R version also provides defaults for `con` and `table_name`.\r\n\r\nThe `auto_disconnect` logic you have in R, is that something relevant for Python as well?\r\n"
        },
        {
            "created_at": "2021-11-18T17:21:35.575Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14740?focusedCommentId=17446057) by Jonathan Keane (jonkeane):*\nYeah, this helper would be relatively lightweight. What you mention about the R helpers is accurate, it's basically:\r\n\r\n- handles creating/using an already created connection (unless it's given in `con`)\n- handles naming (unless it's given)\n- auto-cleanup \n- do the actual duckdb registration\n  \n  The auto cleanup would be nice, but is not strictly necessary. It was (relatively) easy to wire up in R, so I did, though I did need to use a slightly different route than normal: see https://github.com/duckdb/duckdb/issues/2237 and https://github.com/duckdb/duckdb/pull/2408 which might need to also be exposed in Python to do it\n  \n  \n"
        }
    ]
}