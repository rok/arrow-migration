{
    "issue": {
        "title": "[C++] Status performance optimization from Impala/Kudu",
        "body": "***Note**: This issue was originally created as [ARROW-3051](https://issues.apache.org/jira/browse/ARROW-3051). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nJust saw this patch, worth investigating: https://github.com/apache/impala/commit/ea615d1d8026dbe1cda3f5c2b048d210b2df435b",
        "created_at": "2018-08-14T13:12:43.000Z",
        "updated_at": "2018-09-10T17:34:44.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-09-10T17:34:40.000Z"
    },
    "comments": [
        {
            "created_at": "2018-08-14T17:41:39.829Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3051?focusedCommentId=16580138) by Antoine Pitrou (apitrou):*\nI don't really buy the \"small optimization\" - where is a copy constructor involved? At least I'd like to see some benchmark numbers. `[~cpcloud]`"
        },
        {
            "created_at": "2018-08-14T18:29:58.844Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3051?focusedCommentId=16580232) by Dimitri Vorona (alendit):*\nIf I understand it correctly, there is an abseil tip of the week about exact same thing: https://abseil.io/tips/101\n\nTL;DR Modern compilers will apply RVO, so there isn't any performance difference. "
        },
        {
            "created_at": "2018-08-14T18:48:09.173Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3051?focusedCommentId=16580258) by Wes McKinney (wesm):*\nThe issue is explained in the commit message. In most normal uses RVO should avoid any calls to the copy constructor. However if we did:\r\n\r\n```Java\n\r\nStatus s = $CODE;\r\n// Inspect s in some way\r\nRETURN_NOT_OK(s);\r\n```\r\n\r\nIn such case, `s` would be copied"
        },
        {
            "created_at": "2018-08-14T20:18:52.952Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3051?focusedCommentId=16580379) by Dimitri Vorona (alendit):*\nIn that case copy-elision won't work\u00a0even with the change \u00a0<http://cpp.sh/3x25h>\u00a0. Even worse: while using const reference with temporary gives a correct behaviour, it disables RVO, since it isn't specified to work on references (see returnNoisy[2-4]).\r\n\r\nEDIT: OTOH, if we return a new Status::OK() in the end of the function, which is common, RVO won't work anyway, and we save ourselves a copy in the most common case (i.e. when status is ok).\r\n\r\nOK Status copy being virtually free, I doubt we could produce any numbers showing the difference, but I can't think of any reasonable example, were it could make things worse."
        },
        {
            "created_at": "2018-09-10T17:34:40.840Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3051?focusedCommentId=16609559) by Wes McKinney (wesm):*\nWon't fix for now; we can investigate more another time"
        }
    ]
}