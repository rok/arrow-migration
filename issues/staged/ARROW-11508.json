{
    "issue": {
        "title": "[C++][Compute] Add support for generic conversions to Function::DispatchBest",
        "body": "***Note**: This issue was originally created as [ARROW-11508](https://issues.apache.org/jira/browse/ARROW-11508). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nARROW-8919 adds support for execution with implicit casts to any function which overrides DispatchBest, allowing functions to specify conversions which make sense in that function's context. For example \"add\" can promote its arguments if their types disagree. By contrast, some conversions are more generic and could be applicable to any function's arguments. For example if any datum is dictionary encoded, a kernel which accepts the decoded type should be usable with an implicit decoding cast:\r\n```java\n\r\nimport pyarrow as pa\r\nimport pyarrow.compute as pc\r\n\r\narr = pa.array('hello ' * 10)\r\nenc = arr.dictionary_encode()\r\n\r\n# result should not depend on encoding:\r\nassert pc.ascii_is_alnum(arr) == pc.ascii_is_alnum(enc)\r\n\r\n# currently raises:\r\n# ArrowNotImplementedError: Function ascii_is_alnum has no kernel matching\r\n#    input types (array[dictionary<values=string, indices=int32, ordered=0>])\r\n```",
        "created_at": "2021-02-05T18:56:40.000Z",
        "updated_at": "2022-07-12T14:04:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-04-20T06:07:18.033Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11508?focusedCommentId=17325496) by Eduardo Ponce (edponce):*\nA possible solution is establish rules for converting to a \"base/operational\" form each generic datum and define them as method\u00a0_to_base/operational_form()_. When an operation's inputs are of different non-primitive types and have the conversion methods, then convert them to their conformant \"base/operational\" form, and then apply the operation. The following are aspects to consider:\r\n \\* Each generic datum should implement _to_base/operational_form()_\r\n \\* What type should the result be? (Only applicable to operations that return a result of a similar type).\r\n \\* Transforming to the \"base/operational\" form may have performance implications, so the invoking code should be aware of this.\r\n \\* How to implement the rules of conversion?\r\n \\* For cases where the operation is applied to independent data, there is no direct method of inferring which datum to promote or demote."
        },
        {
            "created_at": "2022-07-12T14:04:53.104Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11508?focusedCommentId=17565817) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}