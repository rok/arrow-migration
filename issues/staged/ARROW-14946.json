{
    "issue": {
        "title": "[C++][Python] An operator for finding indices of a value ",
        "body": "***Note**: This issue was originally created as [ARROW-14946](https://issues.apache.org/jira/browse/ARROW-14946). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs discussed in this mail thread [1], it would be nice to have a search operator returning the indices of a Value. \r\n\r\nex:\r\n```java\n\r\nvalues = pa.array([1, 2, 2, 3, 4, 1])\r\nindices = find_indices(values, 1) # \u00a0expected = [0, 5]\n```\r\ncurrently there is an option to get the \"first index\" of a value using aggregates.index method. This would be a binary vector kernel IMO. \r\n\r\n\r\nThis is somewhat similar to `numpy.where` [2] but without a `y` input. \r\n\r\n\u00a0\r\n\r\n[1] <https://lists.apache.org/thread/o8d4m905fxswcg0qjjx7gj3ql2d582k4>\r\n\r\n\r\n[2] https://numpy.org/doc/stable/reference/generated/numpy.where.html",
        "created_at": "2021-12-01T16:30:14.000Z",
        "updated_at": "2021-12-02T16:28:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-12-02T14:25:54.315Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14946?focusedCommentId=17452435) by Joris Van den Bossche (jorisvandenbossche):*\nThis is also related to numpy's `nonzero` in combination with an equality comparison:\r\n\r\n```Java\n\r\nIn [66]: values = np.array([1, 2, 2, 3, 4, 1])\r\n\r\nIn [67]: np.nonzero(values == 1)\r\nOut[67]: (array([0, 5]),)\r\n```\r\n\r\nwhich is also being discussed in ARROW-13035.  \r\nAlthough for this case having to go through a boolean array to only find the indices might give an additional overhead (this might be worth experimenting with).\r\n\r\n\u2014\r\n\r\n> This would be a binary vector kernel IMO.\r\n\r\nFor a scalar right-value (as in your example above), the expected behaviour is clear. But would it be limited to scalars? (the expected behaviour for non-scalars is not really obvious to me)"
        },
        {
            "created_at": "2021-12-02T16:28:54.522Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14946?focusedCommentId=17452496) by Niranda Perera (niranda):*\n`[~jorisvandenbossche]` actually my initial use case was to search indices of a given array of values. Ex:\r\n```java\n\r\nindices = find_indices(values, [1, 2, 1]) # \u00a0expected = [0, 5, 1, 2, 0, 5] \n```\r\nBut it looked a like a niche use case.\r\n\r\nIINM `[~amol-]` also mentioned about returning a boolean array matching a given value, which could in-turn be used for a filter function. In that case, we could relax this to a scalar kernel as well. Personally, I think that would be an overkill."
        }
    ]
}