{
    "issue": {
        "title": "[C++] Support casting from storage type to extension type",
        "body": "***Note**: This issue was originally created as [ARROW-14500](https://issues.apache.org/jira/browse/ARROW-14500). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe already support casting an extension array to its storage type (ARROW-7858):\r\n\r\n```Java\n\r\n>>> from pyarrow.tests.test_extension_type import IntegerType\r\n>>> arr = pa.array([1, 2, 3], pa.int64())\r\n>>> arr_ext = pa.ExtensionArray.from_storage(IntegerType(), arr)\r\n>>> arr_ext.cast(arr.type)\r\nOut[29]: \r\n<pyarrow.lib.Int64Array object at 0x7f7b0d4739a0>\r\n[\r\n  1,\r\n  2,\r\n  3\r\n]\r\n```\r\n\r\nbut we don't support the cast the other way around from storage type to extension type:\r\n\r\n```Java\n\r\n>>> arr.cast(arr_ext.type)\r\n...\r\nArrowNotImplementedError: Unsupported cast from int64 to extension<arrow.py_extension_type<IntegerType>> (no available cast function for target type)\r\n../src/arrow/compute/cast.cc:119  GetCastFunctionInternal(cast_options->to_type, args[0].type().get())\r\n```\r\n",
        "created_at": "2021-10-28T10:51:19.000Z",
        "updated_at": "2022-10-11T08:16:07.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-10-11T08:16:07.000Z"
    },
    "comments": [
        {
            "created_at": "2022-01-07T02:02:32.101Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14500?focusedCommentId=17470291) by Will Ayd (willayd):*\nDid a little research here. I see the casting from an extension type is handled here:\r\n\r\n<https://github.com/apache/arrow/blob/e64480db51fc9622d02613f3ec60bac34d765092/cpp/src/arrow/compute/kernels/scalar_cast_internal.cc#L190>\r\n\r\nSo the other way around could be pretty similar. However, I'm wondering if a cast to an extension type is truly possible? When coming from an extension type the built-in type can be cast from the extension's physical storage. But would going the other way around would require a creation of a new ExtensionArray instance that populates some of the additional methods?"
        },
        {
            "created_at": "2022-01-10T13:49:44.564Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14500?focusedCommentId=17472007) by Joris Van den Bossche (jorisvandenbossche):*\n> require a creation of a new ExtensionArray instance that populates some of the additional methods?\r\n\r\nThe ExtensionType instance can create such an array, see eg https://github.com/apache/arrow/blob/e64480db51fc9622d02613f3ec60bac34d765092/cpp/src/arrow/extension_type.h#L87-L89 (ExtensionType::MakeArray is a required method for extension authors to implement)"
        },
        {
            "created_at": "2022-09-27T09:57:50.114Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14500?focusedCommentId=17609941) by Joris Van den Bossche (jorisvandenbossche):*\nThis is being addressed in https://github.com/apache/arrow/pull/14106"
        },
        {
            "created_at": "2022-10-11T08:16:07.273Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14500?focusedCommentId=17615587) by Joris Van den Bossche (jorisvandenbossche):*\nResolved by https://github.com/apache/arrow/pull/14106"
        }
    ]
}