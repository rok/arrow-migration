{
    "issue": {
        "title": "Python: Deterministic position of libarrow in manylinux1 wheels",
        "body": "***Note**: This issue was originally created as [ARROW-566](https://issues.apache.org/jira/browse/ARROW-566). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nTo link other Python wheels to the `pyarrow`, the position and name of all shared libraries should be deterministic. Currently using `libarrow` in other Python packages is only possible using the conda packaging stack, via pip installable paths.",
        "created_at": "2017-02-18T08:46:34.000Z",
        "updated_at": "2017-03-26T16:21:37.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-03-07T23:04:33.000Z"
    },
    "comments": [
        {
            "created_at": "2017-02-18T13:36:08.923Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-566?focusedCommentId=15873163) by Wes McKinney (wesm):*\nWell, the shared libraries need to end up effectively in `$LD_LIBRARY_PATH` or loaded dynamically \u2013 conda works as a tool for building a LD_LIBRARY_PATH for the libarrow shared libraries. One option you can use is to load the `libpyarrow.so` using ctypes based on the absolute module path of `pyarrow` (this is similar to how NumPy's C-level interoperability works). I presume you're statically-linking the dependencies in pyarrow? "
        },
        {
            "created_at": "2017-02-20T18:18:39.496Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-566?focusedCommentId=15874905) by Uwe Korn (uwe):*\n`libarrow*` and `libparquet*` are dynamically linked currently in the wheels. The correct `RPATH` is set via `auditwheel` but also a hash is appended at the end of the libname so that different wheels can have different versions of the same library. As `pyarrow` is the main authority for `libarrow` in a pip-based setup, there should be no need for the hash-based suffix. The main things to tackle in this issue are:\n\n \\* Set the correct RPATHs in `libpyarrow`\u00a0and `libparquet_arrow`\n \\* Bundle the above shared libraries in `pyarrow`.\n\nMy main intention is to build `turbodbc` wheels based upon `pyarrow`\u00a0wheels but this should also be needed for any python package consuming both the C++ and Python API of Arrow."
        },
        {
            "created_at": "2017-03-05T19:24:16.896Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-566?focusedCommentId=15896496) by Uwe Korn (uwe):*\nPR: https://github.com/apache/arrow/pull/360"
        },
        {
            "created_at": "2017-03-07T23:04:33.704Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-566?focusedCommentId=15900355) by Wes McKinney (wesm):*\nIssue resolved by pull request 360\n<https://github.com/apache/arrow/pull/360>"
        }
    ]
}