{
    "issue": {
        "title": "[Java] Is there a bug in flight AddWritableBuffer",
        "body": "***Note**: This issue was originally created as [ARROW-11066](https://issues.apache.org/jira/browse/ARROW-11066). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n<https://github.com/apache/arrow/blob/9bab12f03ac486bb8270f031b83f0a0411766b3e/java/flight/flight-core/src/main/java/org/apache/arrow/flight/grpc/AddWritableBuffer.java#L94>\r\n\r\nbuf.readBytes(stream, buf.readableBytes());\r\n\r\nis this line redundant\r\nIn my perf.svg, this will copy the data from buf to OutputStream, which can not realize zero-copy.",
        "created_at": "2020-12-29T15:27:05.000Z",
        "updated_at": "2021-03-17T18:57:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: FlightRPC",
            "Component: Java",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-03-17T18:57:54.000Z"
    },
    "comments": [
        {
            "created_at": "2021-01-23T00:25:34.476Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11066?focusedCommentId=17270500) by David Li (lidavidm):*\nIndeed, you seem to be right, and furthermore, that line seems to defeat the optimization the method purports to implement in the first place! The error seems to have been present since the original Flight implementation. I'd surmise it was maybe a bad refactor or half-completed attempt at making `AddWriteableBuffer#add` handle the fallback path for you."
        },
        {
            "created_at": "2021-02-01T13:59:32.653Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11066?focusedCommentId=17276338) by David Li (lidavidm):*\nFixing the optimization exposes a SIGSEGV. It looks like in some cases, the buffer is freed before gRPC/Netty get a chance to copy it.\r\n```\n\r\nStack: [0x00007f41987e3000,0x00007f41988e4000],  sp=0x00007f41988e0238,  free space=1012k\r\nNative frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)\r\nV  [libjvm.so+0xa486f0]\r\nJ 1792  jdk.internal.misc.Unsafe.copyMemory0(Ljava/lang/Object;JLjava/lang/Object;JJ)V java.base@11.0.8 (0 bytes) @ 0x00007f41d0475534 [0x00007f41d0475440+0x00000000000000f4]\r\nJ 1790 c1 jdk.internal.misc.Unsafe.copyMemory(Ljava/lang/Object;JLjava/lang/Object;JJ)V java.base@11.0.8 (33 bytes) @ 0x00007f41c916f1ac [0x00007f41c916e960+0x000000000000084c]\r\nJ 2427 c1 io.netty.util.internal.PlatformDependent.copyMemory(JJJ)V (8 bytes) @ 0x00007f41c9274604 [0x00007f41c9274480+0x0000000000000184]\r\nj  io.netty.buffer.UnsafeByteBufUtil.getBytes(Lio/netty/buffer/AbstractByteBuf;JILio/netty/buffer/ByteBuf;II)V+79\r\nj  io.netty.buffer.UnpooledUnsafeDirectByteBuf.getBytes(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;+11\r\nj  io.netty.buffer.CompositeByteBuf.getBytes(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/CompositeByteBuf;+69\r\nj  io.netty.buffer.CompositeByteBuf.getBytes(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;+6\r\nj  io.netty.buffer.AbstractUnpooledSlicedByteBuf.getBytes(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;+20\r\nj  io.netty.buffer.UnsafeByteBufUtil.setBytes(Lio/netty/buffer/AbstractByteBuf;JILio/netty/buffer/ByteBuf;II)V+129\r\nj  io.netty.buffer.PooledUnsafeDirectByteBuf.setBytes(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;+11\r\nj  io.netty.buffer.AbstractByteBuf.writeBytes(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;+14\r\nj  io.netty.channel.epoll.AbstractEpollChannel.newDirectBuffer0(Ljava/lang/Object;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBufAllocator;I)Lio/netty/buffer/ByteBuf;+17\r\nj  io.netty.channel.epoll.AbstractEpollChannel.newDirectBuffer(Ljava/lang/Object;Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;+39\r\nj  io.netty.channel.epoll.AbstractEpollChannel.newDirectBuffer(Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;+3\r\nj  io.netty.channel.epoll.AbstractEpollStreamChannel.filterOutboundMessage(Ljava/lang/Object;)Ljava/lang/Object;+21\r\nj  io.netty.channel.AbstractChannel$AbstractUnsafe.write(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V+40\r\nJ 2392 c1 io.netty.channel.DefaultChannelPipeline$HeadContext.write(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V (12 bytes) @ 0x00007f41c9263d84 [0x00007f41c9263c40+0x0000000000000144]\r\nJ 2408 c1 io.netty.channel.AbstractChannelHandlerContext.write(Ljava/lang/Object;ZLio/netty/channel/ChannelPromise;)V (146 bytes) @ 0x00007f41c926f75c [0x00007f41c926da20+0x0000000000001d3c]\r\nj  io.netty.channel.AbstractChannelHandlerContext.write(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;+4\r\nj  io.netty.handler.codec.http2.DefaultHttp2FrameWriter.writeData(Lio/netty/channel/ChannelHandlerContext;ILio/netty/buffer/ByteBuf;IZLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;+134\r\nj  io.netty.handler.codec.http2.Http2OutboundFrameLogger.writeData(Lio/netty/channel/ChannelHandlerContext;ILio/netty/buffer/ByteBuf;IZLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;+30\r\nj  io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeData(Lio/netty/channel/ChannelHandlerContext;ILio/netty/buffer/ByteBuf;IZLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;+13\r\nj  io.grpc.netty.NettyServerHandler$WriteMonitoringFrameWriter.writeData(Lio/netty/channel/ChannelHandlerContext;ILio/netty/buffer/ByteBuf;IZLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;+17\r\nj  io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledData.write(Lio/netty/channel/ChannelHandlerContext;I)V+192\r\nj  io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState.writeAllocatedBytes(I)I+106\r\nj  io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor.write(Lio/netty/handler/codec/http2/Http2Stream;I)V+9\r\nj  io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State.write(ILio/netty/handler/codec/http2/StreamByteDistributor$Writer;)V+27\r\nj  io.netty.handler.codec.http2.WeightedFairQueueByteDistributor.distribute(ILio/netty/handler/codec/http2/StreamByteDistributor$Writer;Lio/netty/handler/codec/http2/WeightedFairQueueByteDistributor$State;)I+21\r\nj  io.netty.handler.codec.http2.WeightedFairQueueByteDistributor.distributeToChildren(ILio/netty/handler/codec/http2/StreamByteDistributor$Writer;Lio/netty/handler/codec/http2/WeightedFairQueueByteDistributor$State;)I+174\r\nj  io.netty.handler.codec.http2.WeightedFairQueueByteDistributor.distribute(ILio/netty/handler/codec/http2/StreamByteDistributor$Writer;)Z+28\r\nj  io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor.writePendingBytes()V+30\r\nj  io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController.writePendingBytes()V+4\r\nj  io.netty.handler.codec.http2.Http2ConnectionHandler.flush(Lio/netty/channel/ChannelHandlerContext;)V+9\r\nj  io.netty.handler.codec.http2.Http2ConnectionHandler.channelWritabilityChanged(Lio/netty/channel/ChannelHandlerContext;)V+16\r\nj  io.netty.channel.AbstractChannelHandlerContext.invokeChannelWritabilityChanged()V+15\r\nj  io.netty.channel.AbstractChannelHandlerContext.invokeChannelWritabilityChanged(Lio/netty/channel/AbstractChannelHandlerContext;)V+15\r\nj  io.netty.channel.AbstractChannelHandlerContext.fireChannelWritabilityChanged()Lio/netty/channel/ChannelHandlerContext;+7\r\nj  io.netty.channel.DefaultChannelPipeline$HeadContext.channelWritabilityChanged(Lio/netty/channel/ChannelHandlerContext;)V+1\r\nj  io.netty.channel.AbstractChannelHandlerContext.invokeChannelWritabilityChanged()V+15\r\nj  io.netty.channel.AbstractChannelHandlerContext.invokeChannelWritabilityChanged(Lio/netty/channel/AbstractChannelHandlerContext;)V+15\r\nj  io.netty.channel.DefaultChannelPipeline.fireChannelWritabilityChanged()Lio/netty/channel/ChannelPipeline;+4\r\nj  io.netty.channel.ChannelOutboundBuffer.fireChannelWritabilityChanged(Z)V+57\r\nj  io.netty.channel.ChannelOutboundBuffer.setWritable(Z)V+32\r\nJ 2360 c1 io.netty.channel.ChannelOutboundBuffer.decrementPendingOutboundBytes(JZZ)V (50 bytes) @ 0x00007f41c9257aa4 [0x00007f41c92575a0+0x0000000000000504]\r\nJ 2393 c1 io.netty.channel.ChannelOutboundBuffer.remove()Z (66 bytes) @ 0x00007f41c926694c [0x00007f41c9264ea0+0x0000000000001aac]\r\nj  io.netty.channel.ChannelOutboundBuffer.removeBytes(J)V+83\r\nj  io.netty.channel.epoll.AbstractEpollStreamChannel.writeBytesMultiple(Lio/netty/channel/ChannelOutboundBuffer;Lio/netty/channel/unix/IovArray;)I+87\r\nj  io.netty.channel.epoll.AbstractEpollStreamChannel.doWriteMultiple(Lio/netty/channel/ChannelOutboundBuffer;)I+45\r\nj  io.netty.channel.epoll.AbstractEpollStreamChannel.doWrite(Lio/netty/channel/ChannelOutboundBuffer;)V+31\r\nj  io.netty.channel.AbstractChannel$AbstractUnsafe.flush0()V+103\r\nj  io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.flush0()V+14\r\nj  io.netty.channel.AbstractChannel$AbstractUnsafe.flush()V+19\r\nj  io.netty.channel.DefaultChannelPipeline$HeadContext.flush(Lio/netty/channel/ChannelHandlerContext;)V+4\r\nj  io.netty.channel.AbstractChannelHandlerContext.invokeFlush0()V+8\r\nj  io.netty.channel.AbstractChannelHandlerContext.invokeFlush()V+8\r\n \n```"
        },
        {
            "created_at": "2021-02-03T23:02:47.776Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11066?focusedCommentId=17278408) by David Li (lidavidm):*\nIssue resolved by pull request 9387\n<https://github.com/apache/arrow/pull/9387>"
        },
        {
            "created_at": "2021-02-04T15:05:33.927Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11066?focusedCommentId=17278894) by David Li (lidavidm):*\nReverted again due to finding a test failure."
        },
        {
            "created_at": "2021-02-04T15:17:26.893Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11066?focusedCommentId=17278902) by David Li (lidavidm):*\nAha - because we now zero-copy the buffers, the application can't ever reuse buffers (since then it might overwrite data that hasn't yet been sent). So I think we'll need a few things:\r\n \\* The zero-copy-read and zero-copy-write need separate flags.\r\n \\* Zero-copy-write needs to be somehow enabled per-client or per-call so that application code has full control over it."
        },
        {
            "created_at": "2021-03-17T18:57:54.675Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11066?focusedCommentId=17303661) by Micah Kornfield (emkornfield):*\nIssue resolved by pull request 9421\n<https://github.com/apache/arrow/pull/9421>"
        }
    ]
}