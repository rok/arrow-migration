{
    "issue": {
        "title": "[Rust] Mark methods that do not perform bounds checking as unsafe",
        "body": "***Note**: This issue was originally created as [ARROW-3776](https://issues.apache.org/jira/browse/ARROW-3776). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n",
        "created_at": "2018-11-13T01:37:32.000Z",
        "updated_at": "2021-04-26T11:06:56.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T11:06:56.000Z"
    },
    "comments": [
        {
            "created_at": "2019-01-24T00:13:03.622Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3776?focusedCommentId=16750569) by Paul Kernfeld (paulkernfeld):*\nI'm interested in working on this, although there could be a lot of downstream effects. A good example of a tricky function is arrow::array::PrimitiveArray::value, which appears to be used in a couple dozen places. A few possible strategies are:\r\n1. Add in bounds checking so that we don't need to deal with unsafe at all.\n1. Propagate the unsafes up through the code.\n1. Maintain a safe and unsafe version of each function that is currently unsafe.\n   \n   Personally I'm a fan of #1 because I think that reducing unsafe code will help developers and users avoid mistakes (I [accidentally wrote](https://github.com/apache/arrow/pull/3448) a nondeterministic unit test earlier this week). However, I'm new to the project so I'm happy to do what others think is best."
        },
        {
            "created_at": "2019-01-24T01:35:09.674Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3776?focusedCommentId=16750606) by Paddy Horan (paddyhoran):*\nI was actually thinking we would need #3.\u00a0 Taking `value` as an example I would be in favor of adding bounds checking to `value` and having a `value_unchecked` that does no bounds checking and is unsafe.\r\n\r\nI think that we need to provide the unsafe versions for maximum performance due to Arrow often being described as a development platform rather than a front end API.\u00a0 i.e. people will use it as the foundation of other higher level libraries and so developers will want the option to avoid bounds checking for performance reasons.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-04-26T10:52:32.742Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3776?focusedCommentId=17332002) by Andrew Lamb (alamb):*\nMigrated to github: https://api.github.com/repos/apache/arrow-rs/issues/28"
        },
        {
            "created_at": "2021-04-26T10:54:56.406Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3776?focusedCommentId=17332003) by Andrew Lamb (alamb):*\nhttps://github.com/apache/arrow-rs/issues/28"
        },
        {
            "created_at": "2021-04-26T11:05:26.331Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3776?focusedCommentId=17332010) by Andrew Lamb (alamb):*\nTesting automated script to migrate issues, trying again"
        },
        {
            "created_at": "2021-04-26T11:06:54.444Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3776?focusedCommentId=17332012) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/29"
        }
    ]
}