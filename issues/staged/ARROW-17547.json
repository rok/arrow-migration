{
    "issue": {
        "title": "[C++] Adopt C++17 idioms and features for maintainability",
        "body": "***Note**: This issue was originally created as [ARROW-17547](https://issues.apache.org/jira/browse/ARROW-17547). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA first version of this task was attempted one year ago in https://github.com/apache/arrow/pull/10414\r\n\r\nPossible idioms to look for:\r\n- `if constexpr` to replace SFINAE hackery\n- `std::from_chars` and `std::to_chars` to replace locale-dependent number parsing/formatting\n- lambda capture move-construction\n  \n  Possibly sub-tasks:\n- regenerate Flatbuffers files for C++17 (see `build-support/update-flatbuffers.sh`)\n- update `build-support/cpplint.py` to newer upstream version",
        "created_at": "2022-08-29T12:23:26.000Z",
        "updated_at": "2022-11-17T17:28:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-09-21T13:13:13.569Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17547?focusedCommentId=17607745) by Jin Shang (jinshang):*\nAnother possible C++17 idiom is the [[nodiscard]] attribute. Clang-tidy has this check (<https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-use-nodiscard.html>) and can be used to apply it automatically."
        },
        {
            "created_at": "2022-09-21T13:15:41.847Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17547?focusedCommentId=17607747) by Jin Shang (jinshang):*\nAh, and also std::make_unique, if C++14 idioms count."
        },
        {
            "created_at": "2022-09-21T13:16:05.787Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17547?focusedCommentId=17607748) by Antoine Pitrou (apitrou):*\nYes, C++14 idioms do count :-)"
        },
        {
            "created_at": "2022-09-21T13:17:53.583Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17547?focusedCommentId=17607751) by Antoine Pitrou (apitrou):*\nGood point about [[nodiscard]], thanks!"
        },
        {
            "created_at": "2022-09-21T14:23:11.479Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17547?focusedCommentId=17607783) by Antoine Pitrou (apitrou):*\nHmm, unfortunately GCC has parser bugs that prohibit the use of [[discard]] with other attributes such as `\\_\\_attribute\\_\\_` or `\\_\\_declspec`. For example here is a failure on MinGW:\r\n\r\n```Java\n\r\n\r\nD:/a/arrow/arrow/cpp/src/arrow/status.h:132:20: error: expected identifier before '[' token\r\n  132 | class ARROW_EXPORT [[nodiscard]] Status : public util::EqualityComparable<Status>,\r\n      |                    ^\r\nD:/a/arrow/arrow/cpp/src/arrow/status.h:132:41: error: expected initializer before ':' token\r\n  132 | class ARROW_EXPORT [[nodiscard]] Status : public util::EqualityComparable<Status>,\r\n      |                                         ^\r\nD:/a/arrow/arrow/cpp/src/arrow/status.h:376:32: error: invalid use of incomplete type 'class arrow::Status'\r\n  376 | void Status::MoveFrom(Status& s) {\r\n      |                                ^\r\n```\r\n"
        },
        {
            "created_at": "2022-09-21T14:27:15.821Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17547?focusedCommentId=17607786) by Jin Shang (jinshang):*\nI see. Clang-tidy would only add it to member functions, not class declarations though."
        }
    ]
}