{
    "issue": {
        "title": "[C++] Use the CMake's standard find features",
        "body": "***Note**: This issue was originally created as [ARROW-4383](https://issues.apache.org/jira/browse/ARROW-4383). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFrom https://github.com/apache/arrow/pull/3469#discussion_r250862542\r\n\r\nWe implement our custom find codes to find libraries by `find_library()`/`find_path()` with `NO_DEFAULT_PATH`. So we need to handle `lib64/` (on Red Hat) and `lib/x86_64-linux-gnu/` (on Debian) paths manually.\r\n\r\nIf we use the CMake's standard find features such as `CMAKE_PREFIX_PATH` https://cmake.org/cmake/help/v3.13/variable/CMAKE_PREFIX_PATH.html#variable:CMAKE_PREFIX_PATH , we can remove our custom find codes.\r\n\r\nCMake has package specific find path feature by `<PackageName}_ROOT` since 3.12. It's equivalent of our `<PackageName}_HOME`.\r\n\r\nhttps://cmake.org/cmake/help/v3.12/command/find_library.html\r\n\r\n> If called from within a find module loaded by `find_package(<PackageName>)`, search prefixes unique to the current package being found. Specifically look in the `<PackageName>_ROOT` CMake variable and the `<PackageName>_ROOT` environment variable. The package root variables are maintained as a stack so if called from nested find modules, root paths from the parent\u2019s find module will be searched after paths from the current module, i.e. `<CurrentPackage>_ROOT`, `ENV\\{<CurrentPackage>_ROOT`}, `<ParentPackage>_ROOT`, `ENV\\{<ParentPackage>_ROOT`}, etc.\r\n\r\n",
        "created_at": "2019-01-26T22:47:47.000Z",
        "updated_at": "2019-03-14T15:11:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-03-14T15:11:53.000Z"
    },
    "comments": [
        {
            "created_at": "2019-02-06T01:33:16.594Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4383?focusedCommentId=16761354) by Wes McKinney (wesm):*\nWhat do you think about trying to find the `cmake/package-config.cmake` file in our FindPACKAGE.cmake files and then fall back on the existing logic if the cmake files are not found? We are already using these for double-conversion, for example, but it would be good to do so consistently. "
        },
        {
            "created_at": "2019-02-07T00:58:20.631Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4383?focusedCommentId=16762272) by Kouhei Sutou (kou):*\nI agree with the idea that we use `find_package()` with `CONFIGS` as the first try.\r\n\r\nThis is not a scope of this issue but I want to change the current vendored strategy. I want to change to use the system libraries by default and vendored libraries as fallback (and option). Now, we use vendored libraries by default. (e.g.: double-conversion)\r\nIf we can use the system libraries by default, users don't need to build existing libraries by default."
        },
        {
            "created_at": "2019-03-12T21:07:45.727Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4383?focusedCommentId=16791012) by Wes McKinney (wesm):*\nI suggest we address this more comprehensively after ARROW-4611 is in"
        },
        {
            "created_at": "2019-03-13T00:47:12.387Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4383?focusedCommentId=16791153) by Kouhei Sutou (kou):*\nI think that ARROW-4611 will resolve this too.\r\nI'll check this again after ARROW-4611 is merged."
        },
        {
            "created_at": "2019-03-14T15:11:53.364Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4383?focusedCommentId=16792768) by Uwe Korn (uwe):*\nResolved by PR\u00a0https://github.com/apache/arrow/pull/3688"
        }
    ]
}