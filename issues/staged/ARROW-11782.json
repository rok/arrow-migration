{
    "issue": {
        "title": "[GLib][Ruby][Dataset] Remove bindings for internal classes",
        "body": "***Note**: This issue was originally created as [ARROW-11782](https://issues.apache.org/jira/browse/ARROW-11782). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nGLib and ruby include bindings for internal classes such as ScanOptions, ScanContext, InMemoryScanTask, ScanTask, ... These are probably unnecessary and should be removed to present a simpler interface less prone to breakage under refactoring of the wrapped classes https://github.com/apache/arrow/pull/9532/checks?check_run_id=1974229719#step:8:2071",
        "created_at": "2021-02-25T14:32:31.000Z",
        "updated_at": "2021-06-16T05:03:52.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: GLib",
            "Component: Ruby",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-06-16T05:03:43.000Z"
    },
    "comments": [
        {
            "created_at": "2021-02-25T14:32:43.844Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17290945) by Ben Kietzman (bkietz):*\n`[~mrkn]`"
        },
        {
            "created_at": "2021-02-25T17:43:16.586Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291076) by Weston Pace (westonpace):*\nThis may be an issue for ARROW-7001.\u00a0 ScanTask is changing to use some of the internal async utilities which I do not believe we are not exposing yet (AsyncGenerator, Future, etc.)"
        },
        {
            "created_at": "2021-02-25T21:46:12.829Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291240) by Kouhei Sutou (kou):*\nIt seems that pyarrow also has bindings of `ScanTask`, .... Should we also remove them from pyarrow?"
        },
        {
            "created_at": "2021-02-25T21:49:54.200Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291241) by Kouhei Sutou (kou):*\nR also has `ScanTask` bindings."
        },
        {
            "created_at": "2021-02-26T06:39:13.393Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291419) by Weston Pace (westonpace):*\nThanks for pointing this out.\u00a0 I think we can't get rid of ScanTask.\u00a0 I will create a ScanTaskInternal (or some similar name) for the work I'm doing and leave ScanTask's interface as is.\r\n\r\nIn the future though it might be better to change Scanner::Scan to return a RecordBatchIterator instead of ScanTaskIterator.\u00a0 Otherwise we're putting the burden on the user to manage how many files are loaded concurrently.\u00a0 I think that should either be hidden completely or controlled by some option (MaxConcurrentFiles or, better yet, MaxAllocatedBytes)"
        },
        {
            "created_at": "2021-02-26T15:08:42.133Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291698) by Ben Kietzman (bkietz):*\nIIUC, python and R only use ScanTasks when materializing a stream of RecordBatches instead of using Scanner::ToTable. That functionality could easily be moved upstream into C++ by providing Scanner::GetRecordBatches or similar, which would be easier to consume from bindings in any case. Therefore I'd say the wrappers for ScanTask could also be removed from Python and R.\r\n\r\nIf that's not acceptable, I'd think that ARROW-7001 should prefer to add `ScanTask::ExecuteAsync` and refactor `ScanTask::Execute` to be a backwards compatible wrapper.\r\n\r\n`[~jorisvandenbossche]` `[~npr]` `[~westonpace]`"
        },
        {
            "created_at": "2021-02-26T15:29:35.382Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291706) by Neal Richardson (npr):*\nI would love to delete ScanTask from the R bindings. The reason they're exposed there is to support a (hacky, experimental) attempt to do computations on the stream of record batches so that it's possible to compute things that we couldn't do otherwise because we can't hold the whole Table in memory. So Scanner::ToBatches doesn't work in that case because everything would be materialized.\r\n\r\nWhat I _really_ want is to be able to essentially pass a function/lambda to something like ToTable or ToBatches and have that function be applied to every record batch in the stream. I don't want to manage consuming the ScanTasks/RecordBatchIterators, I'd prefer to have the C++ library handle that. (In my current hacky use of ScanTasks, it's actually prohibitively slow because it has to consume the iterators single-threaded.)"
        },
        {
            "created_at": "2021-02-26T15:35:39.948Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291711) by Ben Kietzman (bkietz):*\nWe could certainly provide Scanner::VisitBatches instead of/in addition to Scanner::ToBatches. I'll open a JIRA for both methods and make a PR today, so that everyone here can see if it accomodates their use cases"
        },
        {
            "created_at": "2021-02-26T17:48:50.076Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291831) by Ben Kietzman (bkietz):*\nhttps://issues.apache.org/jira/browse/ARROW-11797"
        },
        {
            "created_at": "2021-02-26T21:52:58.303Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17291931) by Kouhei Sutou (kou):*\nThanks. I understand.\r\n\r\nI agree with removing GLib bindings of them."
        },
        {
            "created_at": "2021-06-16T05:03:43.878Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11782?focusedCommentId=17364057) by Kouhei Sutou (kou):*\nIssue resolved by pull request 10533\n<https://github.com/apache/arrow/pull/10533>"
        }
    ]
}