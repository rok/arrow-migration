{
    "issue": {
        "title": "[Python] Segfault in pandas version 1.0.1, read_parquet after creating a clickhouse odbc connection",
        "body": "***Note**: This issue was originally created as [ARROW-7873](https://issues.apache.org/jira/browse/ARROW-7873). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n[I posted this issue to the pandas github\\|[https://github.com/pandas-dev/pandas/issues/31981]].\r\n\r\nWe get a segfault when making a call to pd.read_parquet after having made a connection to clickhouse via odbc. Like so,\r\n\r\n```python\n\r\nimport pyodbc\r\nimport pandas as pd\r\n\r\ncon_str = f\"Driver=libclickhouseodbc.so;url=http://clickhouse/query;timeout=600\"\r\nwith pyodbc.connect(con_str, autocommit=True) as con:\r\n    pass\r\n\r\ndf = pd.DataFrame({'A': [1,1,1], 'B': ['a', 'b', 'c']})\r\ndf.to_parquet('/tmp/foo.pq')\r\n# This line core dumps:\r\npd.read_parquet('/tmp/foo.pq')\r\n```\r\n\r\nThis happens with pandas version 1.0.1 but not with pandas 0.25.3. Here's a stacktrace:\r\n\r\n\r\n```java\n\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51\r\n#1  0x00007ffff7a24801 in __GI_abort () at abort.c:79\r\n#2  0x00007ffff63c1957 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#3  0x00007ffff63c7ab6 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#4  0x00007ffff63c7af1 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#5  0x00007ffff63c7d24 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#6  0x00007ffff63c6a52 in __cxa_bad_cast () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#7  0x00007ffff64131ec in std::__cxx11::collate<char> const& std::use_facet<std::__cxx11::collate<char> >(std::locale const&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#8  0x00007fffbe4b8279 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::__cxx11::regex_traits<char>::transform_primary<char const*>(char const*, char const*) const () from /usr/local/lib/libparquet.so.100\r\n#9  0x00007fffbe4bd71c in std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>::_M_ready() () from /usr/local/lib/libparquet.so.100\r\n#10 0x00007fffbe4bda9e in void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_character_class_matcher<false, false>() () from /usr/local/lib/libparquet.so.100\r\n#11 0x00007fffbe4c0569 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_atom() () from /usr/local/lib/libparquet.so.100\r\n#12 0x00007fffbe4c0ad8 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_alternative() () from /usr/local/lib/libparquet.so.100\r\n#13 0x00007fffbe4c0a43 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_alternative() () from /usr/local/lib/libparquet.so.100\r\n#14 0x00007fffbe4c0d1c in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_disjunction() () from /usr/local/lib/libparquet.so.100\r\n#15 0x00007fffbe4c1469 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_Compiler(char const*, char const*, std::locale const&, std::regex_constants::syntax_option_type) () from /usr/local/lib/libparquet.so.100\r\n#16 0x00007fffbe4a93d1 in parquet::ApplicationVersion::ApplicationVersion(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /usr/local/lib/libparquet.so.100\r\n#17 0x00007fffbe4c1c03 in parquet::FileMetaData::FileMetaDataImpl::FileMetaDataImpl(void const*, unsigned int*, std::shared_ptr<parquet::Decryptor> const&) () from /usr/local/lib/libparquet.so.100\r\n#18 0x00007fffbe4a9e62 in parquet::FileMetaData::FileMetaData(void const*, unsigned int*, std::shared_ptr<parquet::Decryptor> const&) () from /usr/local/lib/libparquet.so.100\r\n#19 0x00007fffbe4a9ec2 in parquet::FileMetaData::Make(void const*, unsigned int*, std::shared_ptr<parquet::Decryptor> const&) () from /usr/local/lib/libparquet.so.100\r\n#20 0x00007fffbe48acaf in parquet::SerializedFile::ParseUnencryptedFileMetadata(std::shared_ptr<arrow::Buffer> const&, long, long, std::shared_ptr<arrow::Buffer>*, unsigned int*, unsigned int*) () from /usr/local/lib/libparquet.so.100\r\n#21 0x00007fffbe492d75 in parquet::SerializedFile::ParseMetaData() () from /usr/local/lib/libparquet.so.100\r\n#22 0x00007fffbe48d8f8 in parquet::ParquetFileReader::Contents::Open(std::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::shared_ptr<parquet::FileMetaData>) () from /usr/local/lib/libparquet.so.100\r\n#23 0x00007fffbe48e598 in parquet::ParquetFileReader::Open(std::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::shared_ptr<parquet::FileMetaData>) () from /usr/local/lib/libparquet.so.100\r\n#24 0x00007fffbe3a89bd in parquet::arrow::FileReaderBuilder::Open(std::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::shared_ptr<parquet::FileMetaData>) () from /usr/local/lib/libparquet.so.100\r\n#25 0x00007fffbe7dc348 in __pyx_pf_7pyarrow_8_parquet_13ParquetReader_2open(__pyx_obj_7pyarrow_8_parquet_ParquetReader*, _object*, int, _object*, __pyx_obj_7pyarrow_8_parquet_FileMetaData*, int) ()\r\n   from /usr/local/lib/python3.6/dist-packages/pyarrow-0.15.1.dev539+g8cf0c8e0a-py3.6-linux-x86_64.egg/pyarrow/_parquet.cpython-36m-x86_64-linux-gnu.so\r\n#26 0x00007fffbe7dcbc9 in __pyx_pw_7pyarrow_8_parquet_13ParquetReader_3open(_object*, _object*, _object*) () from /usr/local/lib/python3.6/dist-packages/pyarrow-0.15.1.dev539+g8cf0c8e0a-py3.6-linux-x86_64.egg/pyarrow/_parquet.cpython-36m-x86_64-linux-gnu.so\r\n#27 0x000000000050ac25 in _PyCFunction_FastCallDict (kwargs=<optimized out>, nargs=<optimized out>, args=<optimized out>, func_obj=<built-in method open of pyarrow._parquet.ParquetReader object at remote 0x7fffbfc6b938>) at ../Objects/methodobject.c:231\r\n#28 _PyCFunction_FastCallKeywords (kwnames=<optimized out>, nargs=<optimized out>, stack=<optimized out>, func=<optimized out>) at ../Objects/methodobject.c:294\r\n#29 call_function.lto_priv () at ../Python/ceval.c:4851\r\n#30 0x000000000050d390 in _PyEval_EvalFrameDefault () at ../Python/ceval.c:3351\r\n#31 0x0000000000508245 in PyEval_EvalFrameEx (throwflag=0, f=\r\n    Frame 0x142a818, for file /usr/local/lib/python3.6/dist-packages/pyarrow-0.15.1.dev539+g8cf0c8e0a-py3.6-linux-x86_64.egg/pyarrow/parquet.py, line 137, in __init__ (self=<ParquetFile(reader=<pyarrow._parquet.ParquetReader at remote 0x7fffbfc6b938>) at remote 0x7fffc4b68cc0>, source='/tmp/foo.pq', metadata=None, common_metadata=None, read_dictionary=None, memory_map=False, buffer_size=0)) at ../Python/ceval.c:754\r\n#32 _PyEval_EvalCodeWithName.lto_priv.1836 () at ../Python/ceval.c:4166\r\n#33 0x0000000000509642 in _PyFunction_FastCallDict () at ../Python/ceval.c:5075\r\n#34 0x0000000000595311 in _PyObject_FastCallDict (kwargs={'metadata': None, 'memory_map': False, 'read_dictionary': None, 'common_metadata': None, 'buffer_size': 0}, nargs=2, args=0x7fffffffc430, func=<function at remote 0x7fffbfc5e378>)\r\n    at ../Objects/abstract.c:2310\r\n#35 _PyObject_Call_Prepend (kwargs={'metadata': None, 'memory_map': False, 'read_dictionary': None, 'common_metadata': None, 'buffer_size': 0}, args=<optimized out>, obj=<optimized out>, func=<function at remote 0x7fffbfc5e378>) at ../Objects/abstract.c:2373\r\n#36 method_call.lto_priv () at ../Objects/classobject.c:314\r\n#37 0x000000000054a6ff in PyObject_Call (kwargs={'metadata': None, 'memory_map': False, 'read_dictionary': None, 'common_metadata': None, 'buffer_size': 0}, args=('/tmp/foo.pq',), func=<method at remote 0x7ffff7f67fc8>) at ../Objects/abstract.c:2261\r\n#38 slot_tp_init () at ../Objects/typeobject.c:6420\r\n#39 0x0000000000551b81 in type_call.lto_priv () at ../Objects/typeobject.c:915\r\n---Type <return> to continue, or q <return> to quit---\r\n```\r\n",
        "created_at": "2020-02-18T13:18:14.000Z",
        "updated_at": "2020-04-27T18:52:45.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-02-18T17:10:27.053Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17039252) by Wes McKinney (wesm):*\nCan you share a foo.pq that exhibits the problem?"
        },
        {
            "created_at": "2020-02-18T18:19:47.296Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17039320) by Matt Calder (mvcalder):*\nI attached an example of foo.pq. In case it isn't clear from my description of the problem, it is necessary to make the odbc connection in order to trigger the error. Just reading the parquet file works in both 0.25.3 and 1.0.1. Only when the odbc connection is made does the reading lead to a segfault, and only in pandas 1.0.1. I wrote foo.pq using both 0.25.3 and 1.0.1 and in both cases I saw the segfault in 1.0.1 and not in 0.25.3, long winded way of saying I think it is the read not the write that is the problem. That said, the files do differ:\r\n\r\n```\n\r\nxbk@499e30e4f63f:~$ diff foo_101.pq foo_25.pq \r\nBinary files foo_101.pq and foo_25.pq differ\r\n```\r\n"
        },
        {
            "created_at": "2020-02-18T18:21:25.341Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17039323) by Matt Calder (mvcalder):*\nIf it would help, I can build pyarrow with debugging symbols and get a more detailed stack trace."
        },
        {
            "created_at": "2020-02-18T20:36:56.795Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17039443) by Wes McKinney (wesm):*\nThat would help. If you can provide a pickle of the offending DataFrame prior to be written to Parquet that would also help"
        },
        {
            "created_at": "2020-02-18T21:07:31.715Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17039462) by Matt Calder (mvcalder):*\nI added a pickle of the dataframe, as created in 1.0.1."
        },
        {
            "created_at": "2020-02-19T12:46:57.749Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17039981) by Matt Calder (mvcalder):*\nI rebuilt pyarrow with debug symbols and now the backtrace has line numbers. I'm only pasting the first 28 levels of the stack below. The last point in arrow code is:\r\n\r\n```java\n\r\nIn arrow/cpp/src/parquet/metadata.cc:792\r\nApplicationVersion::ApplicationVersion(const std::string& created_by) {\r\n  regex app_regex{ApplicationVersion::APPLICATION_FORMAT};\r\n```\r\n\r\nHere is the stacktrace:\r\n\r\n```java\n\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51\r\n#1  0x00007ffff7a24801 in __GI_abort () at abort.c:79\r\n#2  0x00007ffff63c1957 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#3  0x00007ffff63c7ab6 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#4  0x00007ffff63c7af1 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#5  0x00007ffff63c7d24 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#6  0x00007ffff63c6a52 in __cxa_bad_cast () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#7  0x00007ffff64131ec in std::__cxx11::collate<char> const& std::use_facet<std::__cxx11::collate<char> >(std::locale const&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#8  0x00007fffb7bedd4e in std::__cxx11::regex_traits<char>::transform<char*> (this=0x12c7570, __first=0x10e36c0 \"\", __last=0x10e36c1 \"\\203\\024\\001\") at /usr/include/c++/7/bits/regex.h:233\r\n#9  0x00007fffb7beb6b7 in std::__cxx11::regex_traits<char>::transform_primary<char const*> (this=0x12c7570, __first=0x7fffffffacb8 \"\", __last=0x7fffffffacb9 \"\") at /usr/include/c++/7/bits/regex.h:266\r\n#10 0x00007fffb7be6c14 in std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>::_M_apply(char, std::integral_constant<bool, false>) const::{lambda()#1}::operator()() const (\r\n    __closure=0x7fffffffacb0) at /usr/include/c++/7/bits/regex_compiler.tcc:626\r\n#11 0x00007fffb7be6da7 in std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>::_M_apply (this=0x7fffffffae10, __ch=0 '\\000')\r\n    at /usr/include/c++/7/bits/regex_compiler.tcc:634\r\n#12 0x00007fffb7be21be in std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>::_M_make_cache (this=0x7fffffffae10) at /usr/include/c++/7/bits/regex_compiler.h:556\r\n#13 0x00007fffb7bddeb5 in std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>::_M_ready (this=0x7fffffffae10) at /usr/include/c++/7/bits/regex_compiler.h:525\r\n#14 0x00007fffb7bda724 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_character_class_matcher<false, false> (this=0x7fffffffb250)\r\n    at /usr/include/c++/7/bits/regex_compiler.tcc:414\r\n#15 0x00007fffb7bd6687 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_atom (this=0x7fffffffb250) at /usr/include/c++/7/bits/regex_compiler.tcc:327\r\n#16 0x00007fffb7bd3775 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_term (this=0x7fffffffb250) at /usr/include/c++/7/bits/regex_compiler.tcc:139\r\n#17 0x00007fffb7bd0c36 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_alternative (this=0x7fffffffb250) at /usr/include/c++/7/bits/regex_compiler.tcc:121\r\n#18 0x00007fffb7bd0c59 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_alternative (this=0x7fffffffb250) at /usr/include/c++/7/bits/regex_compiler.tcc:124\r\n#19 0x00007fffb7bce50e in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_disjunction (this=0x7fffffffb250) at /usr/include/c++/7/bits/regex_compiler.tcc:97\r\n#20 0x00007fffb7bcc0f9 in std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_Compiler (this=0x7fffffffb250, \r\n    __b=0x7fffb7c92c70 \"(.*?)\\\\s*(?:(version\\\\s*(?:([^(]*?)\\\\s*(?:\\\\(\\\\s*build\\\\s*([^)]*?)\\\\s*\\\\))?)?)?)\", __e=0x7fffb7c92cb8 \"\", __loc=..., __flags=(unknown: 16))\r\n    at /usr/include/c++/7/bits/regex_compiler.tcc:82\r\n#21 0x00007fffb7bc98bc in std::__detail::__compile_nfa<char const*, std::__cxx11::regex_traits<char> > (\r\n    __first=0x7fffb7c92c70 \"(.*?)\\\\s*(?:(version\\\\s*(?:([^(]*?)\\\\s*(?:\\\\(\\\\s*build\\\\s*([^)]*?)\\\\s*\\\\))?)?)?)\", __last=0x7fffb7c92cb8 \"\", __loc=..., __flags=(unknown: 16))\r\n    at /usr/include/c++/7/bits/regex_compiler.h:203\r\n#22 0x00007fffb7bc62e4 in std::__cxx11::basic_regex<char, std::__cxx11::regex_traits<char> >::basic_regex<char const*> (this=0x7fffffffb510, \r\n    __first=0x7fffb7c92c70 \"(.*?)\\\\s*(?:(version\\\\s*(?:([^(]*?)\\\\s*(?:\\\\(\\\\s*build\\\\s*([^)]*?)\\\\s*\\\\))?)?)?)\", __last=0x7fffb7c92cb8 \"\", __loc=..., __f=(unknown: 16))\r\n    at /usr/include/c++/7/bits/regex.h:767\r\n#23 0x00007fffb7bc1abb in std::__cxx11::basic_regex<char, std::__cxx11::regex_traits<char> >::basic_regex<char const*> (this=0x7fffffffb510, \r\n    __first=0x7fffb7c92c70 \"(.*?)\\\\s*(?:(version\\\\s*(?:([^(]*?)\\\\s*(?:\\\\(\\\\s*build\\\\s*([^)]*?)\\\\s*\\\\))?)?)?)\", __last=0x7fffb7c92cb8 \"\", __f=(unknown: 16)) at /usr/include/c++/7/bits/regex.h:512\r\n#24 0x00007fffb7bbcd66 in std::__cxx11::basic_regex<char, std::__cxx11::regex_traits<char> >::basic_regex (this=0x7fffffffb510, \r\n    __p=0x7fffb7c92c70 \"(.*?)\\\\s*(?:(version\\\\s*(?:([^(]*?)\\\\s*(?:\\\\(\\\\s*build\\\\s*([^)]*?)\\\\s*\\\\))?)?)?)\", __f=(unknown: 16)) at /usr/include/c++/7/bits/regex.h:445\r\n#25 0x00007fffb7bb200f in parquet::ApplicationVersion::ApplicationVersion (this=0x7fffffffb750, created_by=\"parquet-cpp version 1.5.1-SNAPSHOT\") at /repos/arrow/cpp/src/parquet/metadata.cc:792\r\n#26 0x00007fffb7bb6be0 in parquet::FileMetaData::FileMetaDataImpl::FileMetaDataImpl (this=0xec6df0, metadata=0x7fffbd63d120, metadata_len=0x7fffffffbb04, \r\n    decryptor=std::shared_ptr<parquet::Decryptor> (empty) = {...}) at /repos/arrow/cpp/src/parquet/metadata.cc:462\r\n#27 0x00007fffb7bb1449 in parquet::FileMetaData::FileMetaData (this=0xed8c40, metadata=0x7fffbd63d120, metadata_len=0x7fffffffbb04, decryptor=std::shared_ptr<parquet::Decryptor> (empty) = {...})\r\n    at /repos/arrow/cpp/src/parquet/metadata.cc:651\r\n```\r\n"
        },
        {
            "created_at": "2020-02-19T13:34:34.033Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040040) by Wes McKinney (wesm):*\nCertainly strange, thanks. cc `[~apitrou]` `[~fsaintjacques]`"
        },
        {
            "created_at": "2020-02-19T13:45:50.937Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040047) by Antoine Pitrou (apitrou):*\nHow did you compile pyodbc? I'm surprised about the following output (from GH bug you linked to):\r\n```Java\n\r\n        linux-vdso.so.1 (0x00007ffe02bee000)\r\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f246c269000)\r\n        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f246c061000)\r\n        libltdl.so.7 => /usr/lib/x86_64-linux-gnu/libltdl.so.7 (0x00007f246be57000)\r\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f246ba66000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f246cd89000)\r\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f246b862000)\r\n```"
        },
        {
            "created_at": "2020-02-19T13:47:02.993Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040049) by Antoine Pitrou (apitrou):*\nHere I'm getting the following output:\r\n```Java\n\r\n$ ldd venv-3.7/lib/python3.7/site-packages/pyodbc.cpython-37m-x86_64-linux-gnu.so \r\n\tlinux-vdso.so.1 (0x00007ffc0001f000)\r\n\tlibodbc.so.2 => /usr/lib/x86_64-linux-gnu/libodbc.so.2 (0x00007efbff044000)\r\n\tlibstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007efbfecbb000)\r\n\tlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007efbfe91d000)\r\n\tlibgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007efbfe705000)\r\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007efbfe314000)\r\n\tlibltdl.so.7 => /usr/lib/x86_64-linux-gnu/libltdl.so.7 (0x00007efbfe10a000)\r\n\tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007efbfdeeb000)\r\n\t/lib64/ld-linux-x86-64.so.2 (0x00007efbff4d7000)\r\n\tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007efbfdce7000)\r\n```"
        },
        {
            "created_at": "2020-02-19T13:59:54.034Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040070) by Matt Calder (mvcalder):*\n`[~apitrou]` I install pyodbc using pip. Those libraries are the ones used specifically by the clickhouse-odbc driver. Btw, I looked through the clickhouse-odbc driver source and it never uses regex. The connection between calling the odbc connection and the subsequent segfault in the regex library really is odd."
        },
        {
            "created_at": "2020-02-19T14:05:40.092Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040075) by Antoine Pitrou (apitrou):*\n`[~mvcalder]` ok, and how did you install Arrow?"
        },
        {
            "created_at": "2020-02-19T14:21:11.346Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040087) by Francois Saint-Jacques (fsaintjacques):*\nFeels like libstdc++ link mismatch we had with tensorflow."
        },
        {
            "created_at": "2020-02-19T14:41:05.346Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040104) by Wes McKinney (wesm):*\nSeems so. Perhaps clickhouse-odbc has some statically linked libstdc++ stuff that is causing a problem?"
        },
        {
            "created_at": "2020-02-19T15:00:33.037Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040132) by Matt Calder (mvcalder):*\nI build arrow from source and install pyarrow as part of that. I also build clickhouse-odbc from source. Maybe relevant, they are built on different dcker images. I'll try isolating the build process to a single container with minimal dependencies."
        },
        {
            "created_at": "2020-02-19T16:35:20.351Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17040216) by Antoine Pitrou (apitrou):*\nIf you build Arrow and clickhouse-odbc from source, you may also want to build pyodbc from source."
        },
        {
            "created_at": "2020-04-27T02:59:48.326Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17092959) by Wes McKinney (wesm):*\n`[~mvcalder]` were you able to resolve this?"
        },
        {
            "created_at": "2020-04-27T18:52:45.643Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7873?focusedCommentId=17093843) by Matt Calder (mcalder):*\nNo, we have so far kept pandas at version 0.25.3. We're transitioning away from the odbc driver and to our own in-house version so the issue may be moot for us.\r\n\r\n\u00a0\r\n\r\nMatt"
        }
    ]
}