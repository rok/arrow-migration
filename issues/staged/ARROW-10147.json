{
    "issue": {
        "title": "[Python] Constructing pandas metadata fails if an Index name is not JSON-serializable by default",
        "body": "***Note**: This issue was originally created as [ARROW-10147](https://issues.apache.org/jira/browse/ARROW-10147). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\noriginally reported in https://github.com/apache/arrow/issues/8270\r\n\r\nhere's a minimal reproduction:\r\n\r\n```Java\n\r\nIn [24]: idx = pd.RangeIndex(0, 4, name=np.int64(6))                                               \r\n\r\nIn [25]: df = pd.DataFrame(index=idx)                                                              \r\n\r\nIn [26]: pa.table(df)                                                                              \r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-26-957dcd80b415> in <module>\r\n----> 1 pa.table(df)\r\n\r\n~/code/arrow/python/pyarrow/table.pxi in pyarrow.lib.table()\r\n\r\n~/code/arrow/python/pyarrow/table.pxi in pyarrow.lib.Table.from_pandas()\r\n\r\n~/code/arrow/python/pyarrow/pandas_compat.py in dataframe_to_arrays(df, schema, preserve_index, nthreads, columns, safe)\r\n    604     pandas_metadata = construct_metadata(df, column_names, index_columns,\r\n    605                                          index_descriptors, preserve_index,\r\n--> 606                                          types)\r\n    607     metadata = deepcopy(schema.metadata) if schema.metadata else dict()\r\n    608     metadata.update(pandas_metadata)\r\n\r\n~/code/arrow/python/pyarrow/pandas_compat.py in construct_metadata(df, column_names, index_levels, index_descriptors, preserve_index, types)\r\n    243                 'version': pa.__version__\r\n    244             },\r\n--> 245             'pandas_version': _pandas_api.version\r\n    246         }).encode('utf8')\r\n    247     }\r\n\r\n~/miniconda/envs/arrow-3.7/lib/python3.7/json/__init__.py in dumps(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)\r\n    229         cls is None and indent is None and separators is None and\r\n    230         default is None and not sort_keys and not kw):\r\n--> 231         return _default_encoder.encode(obj)\r\n    232     if cls is None:\r\n    233         cls = JSONEncoder\r\n\r\n~/miniconda/envs/arrow-3.7/lib/python3.7/json/encoder.py in encode(self, o)\r\n    197         # exceptions aren't as detailed.  The list call should be roughly\r\n    198         # equivalent to the PySequence_Fast that ''.join() would do.\r\n--> 199         chunks = self.iterencode(o, _one_shot=True)\r\n    200         if not isinstance(chunks, (list, tuple)):\r\n    201             chunks = list(chunks)\r\n\r\n~/miniconda/envs/arrow-3.7/lib/python3.7/json/encoder.py in iterencode(self, o, _one_shot)\r\n    255                 self.key_separator, self.item_separator, self.sort_keys,\r\n    256                 self.skipkeys, _one_shot)\r\n--> 257         return _iterencode(o, 0)\r\n    258 \r\n    259 def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,\r\n\r\n~/miniconda/envs/arrow-3.7/lib/python3.7/json/encoder.py in default(self, o)\r\n    177 \r\n    178         \"\"\"\r\n--> 179         raise TypeError(f'Object of type {o.__class__.__name__} '\r\n    180                         f'is not JSON serializable')\r\n    181 \r\n\r\nTypeError: Object of type int64 is not JSON serializable\r\n```",
        "created_at": "2020-09-30T18:02:04.000Z",
        "updated_at": "2020-10-05T22:21:52.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-10-05T22:21:40.000Z"
    },
    "comments": [
        {
            "created_at": "2020-10-05T22:21:40.512Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10147?focusedCommentId=17208376) by Wes McKinney (wesm):*\nIssue resolved by pull request 8314\n<https://github.com/apache/arrow/pull/8314>"
        }
    ]
}