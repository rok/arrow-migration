{
    "issue": {
        "title": "[Python] Datetimes from non-DateTimeIndex cannot be deserialized",
        "body": "***Note**: This issue was originally created as [ARROW-3651](https://issues.apache.org/jira/browse/ARROW-3651). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nGiven an index which contains datetimes but is no DateTimeIndex writing the file works but reading back fails.\r\n```python\n\r\ndf = pd.DataFrame(1, index=pd.MultiIndex.from_arrays([[1,2],[3,4]]), columns=[pd.to_datetime(\"2018/01/01\")])\r\n\r\n# columns index is no DateTimeIndex anymore\r\ndf = df.reset_index().set_index(['level_0', 'level_1'])\r\n\r\ntable = pa.Table.from_pandas(df)\r\npq.write_table(table, 'test.parquet')\r\n\r\npq.read_pandas('test.parquet').to_pandas()\r\n```\r\n\r\nresults in \r\n```Java\n\r\nKeyError                                  Traceback (most recent call last)\r\n~/venv/mpptool/lib/python3.7/site-packages/pyarrow/pandas_compat.py in _pandas_type_to_numpy_type(pandas_type)\r\n    676     try:\r\n--> 677         return _pandas_logical_type_map[pandas_type]\r\n    678     except KeyError:\r\n\r\nKeyError: 'datetime'\r\n```\r\n\r\nThe created schema:\r\n\r\n```Java\n\r\n2018-01-01 00:00:00: int64\r\nlevel_0: int64\r\nlevel_1: int64\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"index_columns\": [\"level_0\", \"level_1\"], \"column_indexes\": [{\"n'\r\n            b'ame\": null, \"field_name\": null, \"pandas_type\": \"datetime\", \"nump'\r\n            b'y_type\": \"object\", \"metadata\": null}], \"columns\": [{\"name\": \"201'\r\n            b'8-01-01 00:00:00\", \"field_name\": \"2018-01-01 00:00:00\", \"pandas_'\r\n            b'type\": \"int64\", \"numpy_type\": \"int64\", \"metadata\": null}, {\"name'\r\n            b'\": \"level_0\", \"field_name\": \"level_0\", \"pandas_type\": \"int64\", \"'\r\n            b'numpy_type\": \"int64\", \"metadata\": null}, {\"name\": \"level_1\", \"fi'\r\n            b'eld_name\": \"level_1\", \"pandas_type\": \"int64\", \"numpy_type\": \"int'\r\n            b'64\", \"metadata\": null}], \"pandas_version\": \"0.23.4\"}'}\r\n```",
        "created_at": "2018-10-30T09:23:46.000Z",
        "updated_at": "2019-09-10T01:23:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-09-10T01:23:10.000Z"
    },
    "comments": [
        {
            "created_at": "2018-10-30T09:43:27.406Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3651?focusedCommentId=16668434) by Armin Berres (aberres):*\nNot sure but maybe Pandas should behave different in this case as well and create a `DateTimeIndex` index in this case as the complete index consists of `Timestamp` objects?\r\n\r\n`df.columns = pd.to_datetime(df.columns)` in the code above mitigates the problem.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2019-09-10T01:23:10.366Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3651?focusedCommentId=16926231) by Wes McKinney (wesm):*\nIssue resolved by pull request 5311\n<https://github.com/apache/arrow/pull/5311>"
        }
    ]
}