{
    "issue": {
        "title": "[C++] Raw data equality in arrays vs. semantic value equality",
        "body": "***Note**: This issue was originally created as [ARROW-6359](https://issues.apache.org/jira/browse/ARROW-6359). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI have observed a conflict in requirements / expectations in our `Equals` functions. The initial implementations of these functions would compare the raw bytes found in non-null data slots, in addition to the validity bitmaps in each array, and their respective children, taken slice offsets and so forth into account. \r\n\r\nRecently we have been adding type-specific value comparison semantics to these comparisons, notably propagating `NaN != NaN`. This has led to such issues as ARROW-6043. \r\n\r\nRather than creating \"one true way\" to compare array contents, I would suggest introducing functions that perform slightly different comparisons:\r\n\r\n- Raw data comparison, skipping masked null values\n- Raw data comparison, comparing all buffer contents (up to the semantic \"extent\" of an array \u2013 so ignoring the contents of padding, or excess buffer contents when dealing with slices)\n  \n  thoughts? ",
        "created_at": "2019-08-26T15:27:27.000Z",
        "updated_at": "2019-08-27T04:42:45.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-08-26T16:08:35.035Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6359?focusedCommentId=16915914) by Ben Kietzman (bkietz):*\nComparing values under an unset bit in the null bitmask seems like an antipattern. Specifically that sounds like that will lead to an expanding set of APIs to provide guarantees about what will be in a null slot.\r\n\r\nIs there a use case for this other than `NaN == NaN` vs `NaN != NaN`?"
        },
        {
            "created_at": "2019-08-26T17:21:38.031Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6359?focusedCommentId=16915968) by Francois Saint-Jacques (fsaintjacques):*\nWe have to be careful about un-initialized memory, as it is considered an undefined behavior to read from it."
        },
        {
            "created_at": "2019-08-26T17:32:44.233Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6359?focusedCommentId=16915990) by Antoine Pitrou (apitrou):*\nI think `Array::Equals` should compare the logical values.\r\n\r\nI'm not sure about the use case for comparing the raw values. Also, how far should it go? Should offsets be considered significant?"
        },
        {
            "created_at": "2019-08-27T04:42:45.266Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6359?focusedCommentId=16916363) by Kenta Murata (mrkn):*\nI agree with `[~pitrou]`. `Array::Equals` should behave appropriately as its own logical data structure. Comparing the contents of raw memory isn't appropriate for the feature. The reason is that it depends on physical representation of values in arrays, and it can be different from the logical equality of the values.\r\n\r\nIf there are reasonable use cases of raw comparison, we can add a specific function like `Array::RawMemoryEquals`."
        }
    ]
}