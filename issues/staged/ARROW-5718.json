{
    "issue": {
        "title": "[R] auto splice data frames in record_batch() and table()",
        "body": "***Note**: This issue was originally created as [ARROW-5718](https://issues.apache.org/jira/browse/ARROW-5718). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nARROW-3814 /\u00a0<https://github.com/apache/arrow/pull/3565/files#diff-95ad459e0128bfecf0d72ebd6d6ee8aaR94>\u00a0changed the API of `record_batch()` and `arrow::table()` such that you could no longer pass in a data.frame to the function, not without [massaging it yourself](https://github.com/apache/arrow/pull/3565/files#diff-09c05d1a6ff41bed094fbccfa76395a6R27). That broke sparklyr integration tests with an opaque `cannot infer type from data` error, and it's unfortunate that there's no longer a direct way to go from a data.frame to a record batch, which sounds like a common need.\r\n\r\nIn order to follow best practices (cf. the [tibble](https://tibble.tidyverse.org/)\u00a0package, for example), we should\u00a0(1) add an `as_record_batch`\u00a0function, which the data.frame method is probably just `as_record_batch.data.frame <- function(x) record_batch(!!!x)`; and (2) if a user supplies a single, unnamed data.frame as the argument to `record_batch()`, raise an error that says to use `as_record_batch()`. We may later decide that we should automatically call as_record_batch(), but in case that is too magical and prevents some legitimate use case, let's hold off for now. It's easier to add magic than remove it.\r\n\r\nOnce this function exists, sparklyr tests can try to use `as_record_batch`, and if that function doesn't exist, fall back to `record_batch` (because that means it has an older released version of arrow that doesn't have as_record_batch, so record_batch(df) should work).\r\n\r\ncc `[~javierluraschi]`",
        "created_at": "2019-06-24T23:48:26.000Z",
        "updated_at": "2019-06-27T19:53:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-06-27T19:53:13.000Z"
    },
    "comments": [
        {
            "created_at": "2019-06-24T23:53:25.268Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5718?focusedCommentId=16871884) by Wes McKinney (wesm):*\nIs there a link to the related discussion or some other cross-reference?"
        },
        {
            "created_at": "2019-06-25T11:42:54.320Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5718?focusedCommentId=16872287) by Romain Francois (romainfrancois):*\nI think it's fine if we were to auto splice, i.e.:\u00a0\r\n\r\n```r\n\r\nrecord_batch(mtcars)\r\n```\r\n\r\nwould be the same as \r\n\r\n```r\n\r\nrecord_batch(!!!mtcars)\r\n```\r\n\r\nbecause unnamed, this is the direction we'll take in. dplyr too for e.g. summarise and mutate. \r\n\r\nHowever, something like : \r\n\r\n```r\n\r\nrecord_batch(x = mtcars)\r\n```\r\n\r\nwill create a struct array, aka a data frame column. \r\n"
        },
        {
            "created_at": "2019-06-25T16:25:03.649Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5718?focusedCommentId=16872497) by Neal Richardson (npr):*\nMakes sense to me."
        }
    ]
}