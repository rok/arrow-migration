{
    "issue": {
        "title": "[Python]\u00a0Basic Join functionality in PyArrow",
        "body": "***Note**: This issue was originally created as [ARROW-14293](https://issues.apache.org/jira/browse/ARROW-14293). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe want to expose a `Table.join` and `Dataset.join` functionalities in PyArrow which can leverage our join feature from the ExecPlan to expose.\r\n\r\nThe `Table.join` can easily return a new `Table`, questions about what `Dataset.join`\u00a0might return are more complex as it probably doesn't make much sense to return a new `Dataset` given that the result won't map to any files on disk",
        "created_at": "2021-10-12T08:26:17.000Z",
        "updated_at": "2022-04-20T15:31:37.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-04-20T15:31:37.000Z"
    },
    "comments": [
        {
            "created_at": "2021-10-12T15:00:42.711Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14293?focusedCommentId=17427748) by Alessandro Molina (amol-):*\nWe might expose an iterator as the result of `Dataset.join`,  `[~westonpace]` `[~leedm777]` do you have any suggestion on how we can best tackle this?\r\n\r\n\u2014 Note from Antoine \u2014\r\nRegarding the join ExecPlan in PyArrow, it seems like the rough idea should be to have a simple \"sink\" node (see SinkNodeOptions) and then wrap the output generator using MakeGeneratorReader to get a regular RecordBatchReader than can be turned into a Python iterator."
        },
        {
            "created_at": "2021-10-12T18:11:24.768Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14293?focusedCommentId=17427853) by Weston Pace (westonpace):*\nWrapping the output of an ExecPlan in a python iterator is already done in the scanner.  The tricky part is constructing an ExecPlan from the user's wishes.\r\n\r\nI'm a little hesitant to turn the datasets API into a full relational frontend.  At some point, as queries get more complicated, would it make more sense to expose the API via SQL -> IR -> ExecPlan, bypassing datasets?\r\n\r\nAlso, wrong David :)  `[~lidavidm]`"
        },
        {
            "created_at": "2021-10-12T19:18:44.993Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14293?focusedCommentId=17427883) by David Li (lidavidm):*\nDataset.join returning an iterator makes sense to me.\r\n\r\nBacking up though, is there a higher level plan for what sorts of functionality we're trying to expose? Are we targeting a subset of Pandas, perhaps? Obviously full Pandas compatibility is not feasible or necessarily desirable, but it might be worth considering the API as a whole before building out the parts. (Apologies if this is already considered somewhere and this ticket is merely the result of that.)\r\n\r\nI agree with Weston's point since then I think natural questions might include things like, we can do a filter and then a join, but how do we filter after a join? (Collect into a table, then treat as a Dataset? This gets awkward/verbose fast)"
        }
    ]
}