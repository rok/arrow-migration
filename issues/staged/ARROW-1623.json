{
    "issue": {
        "title": "[C++] Add convenience method to construct Buffer from a string that owns its memory",
        "body": "***Note**: This issue was originally created as [ARROW-1623](https://issues.apache.org/jira/browse/ARROW-1623). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe memory would need to be allocated from a memory pool / buffer allocator",
        "created_at": "2017-09-29T15:56:40.000Z",
        "updated_at": "2018-02-01T17:14:58.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-02-01T17:14:54.000Z"
    },
    "comments": [
        {
            "created_at": "2018-01-22T18:13:17.587Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1623?focusedCommentId=16334660) by Panchen Xue (1xuepanchen1):*\nIs this for base class Buffer or derived PoolBuffer?"
        },
        {
            "created_at": "2018-01-22T18:19:06.216Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1623?focusedCommentId=16334674) by Uwe Korn (uwe):*\nThis is for the base class `Buffer`. `PoolBuffer` owns it's memory directly where the method to be implemented here will use memory that is owned by a `string` instance."
        },
        {
            "created_at": "2018-01-22T18:33:13.268Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1623?focusedCommentId=16334705) by Wes McKinney (wesm):*\nThe API would be something like\r\n\r\n`Status Buffer::FromString(const std::string& value, MemoryPool* pool, std::shared_ptr<Buffer>* out)`"
        },
        {
            "created_at": "2018-01-23T23:37:35.752Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1623?focusedCommentId=16336553) by Panchen Xue (1xuepanchen1):*\nMy understanding is:\r\n```Java\n\r\nStatus Buffer::FromString(const std::string& data, MemoryPool* pool, std::shared_ptr<Buffer>* out) const {\r\n\u00a0 auto new_buffer = std::make_shared<PoolBuffer>(pool);\r\n\u00a0 auto size = static_cast<int64_t>(data.size());\r\n\u00a0 auto str = reinterpret_cast<const uint8_t*>(data.c_str());\r\n\r\n\u00a0 RETURN_NOT_OK(new_buffer->Resize(size));\r\n\u00a0 std::memcpy(new_buffer->mutable_data(), str, size);\r\n\r\n\u00a0 *out = new_buffer;\r\n\u00a0 return Status::OK();\r\n}\r\n```\r\nIs it correct? Or shall we change the calling object?"
        },
        {
            "created_at": "2018-01-23T23:51:50.693Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1623?focusedCommentId=16336578) by Wes McKinney (wesm):*\nYes, a static member function would be fine. You can use `AllocateBuffer` to save a line of code"
        },
        {
            "created_at": "2018-02-01T17:14:54.196Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1623?focusedCommentId=16348933) by Wes McKinney (wesm):*\nIssue resolved by pull request 1518\n<https://github.com/apache/arrow/pull/1518>"
        }
    ]
}