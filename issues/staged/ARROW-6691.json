{
    "issue": {
        "title": "[Rust] [DataFusion] Use tokio and Futures instead of spawning threads",
        "body": "***Note**: This issue was originally created as [ARROW-6691](https://issues.apache.org/jira/browse/ARROW-6691). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe current implementation of the physical query plan uses \"thread::spawn\" which is expensive. We should switch to using Futures, async!/await!, and tokio so that we are launching tasks in a thread pool instead and writing idiomatic Rust code with futures combinators to chain actions together.",
        "created_at": "2019-09-25T13:59:35.000Z",
        "updated_at": "2020-05-12T14:57:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2020-05-12T14:16:39.000Z"
    },
    "comments": [
        {
            "created_at": "2019-12-07T16:56:29.969Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6691?focusedCommentId=16990549) by Adam Lippai (alippai):*\nI've tried to add this feature, but I didn't mange to get all the types right in merge.rs. I still need more experience in Rust :). Notes:\u00a0\r\n\r\n![image-2019-12-07-17-54-57-862.png](https://issues.apache.org/jira/secure/attachment/12987834/image-2019-12-07-17-54-57-862.png)"
        },
        {
            "created_at": "2020-01-27T07:41:49.544Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6691?focusedCommentId=17024131) by Ben Sully (sd2k):*\nMy hunch is also that `rayon` would be better suited to this part ('working' on lots of things in a threadpool, rather than 'waiting' for lots of things) than tokio + async/await, although it does sound like doing IO using gRPC might be well suited to tokio. I'm not familiar with the Datafusion codebase at all unfortunately, how approachable would this issue be for a first time Arrow contributor? :D"
        },
        {
            "created_at": "2020-02-07T00:23:25.730Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6691?focusedCommentId=17032035) by Andy Grove (andygrove):*\n`[~sd2k]` You might be right, but given that we now have a flight server example using tokio, it seems ideal to use tokio all the way through to query execution to have a complete async implementation? I agree that this is perhaps not an ideal issue to try to take on for a new contributor though!"
        },
        {
            "created_at": "2020-05-12T14:16:39.893Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6691?focusedCommentId=17105470) by Andy Grove (andygrove):*\nI spent a little time working on a PoC of this [1] but the advice from the Tokio team is that we are better off just using dedicated threads for file io and just use tokio for network io, which we already do in the flight server (thanks to Tonic) so I am closing this.\r\n\r\n\u00a0\r\n\r\n\u00a0[1] https://github.com/andygrove/async-query/blob/master/src/main.rs"
        },
        {
            "created_at": "2020-05-12T14:33:17.963Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6691?focusedCommentId=17105493) by Adam Lippai (alippai):*\n`[~andygrove]` Skipping Tokio can be reasonable, but we still need a threadpool or limiting the number of opened files somehow. Currently it opens and read all the files in parallel, then it does all the computation in parallel (and AFAIK reading a lot of files concurrently won't produce optimal performance on linux).\u00a0"
        },
        {
            "created_at": "2020-05-12T14:57:00.107Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6691?focusedCommentId=17105509) by Andy Grove (andygrove):*\nThanks. yes. I've been looking at Rayon and threadpool so far this morning.\nI think it might be worth me creating a Google doc for some collaboration\non a design here.\n\nI also created a new JIRA: https://issues.apache.org/jira/browse/ARROW-8774\n\n\n"
        }
    ]
}