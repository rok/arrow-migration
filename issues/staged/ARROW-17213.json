{
    "issue": {
        "title": "[C++] Compute kernel change introduced test-r-linux-valgrind failure",
        "body": "***Note**: This issue was originally created as [ARROW-17213](https://issues.apache.org/jira/browse/ARROW-17213). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt looks like a change in ARROW-17135 may have introduced a test-r-linux-valgrind nightly failure where (valgrind thinks) uninitialized values are somehow being used when comparing two arrays (the R call is `identical()`):\r\n\r\nThe build log is here: https://dev.azure.com/ursacomputing/crossbow/_build/results?buildId=30075&view=logs&j=0da5d1d9-276d-5173-c4c4-9d4d4ed14fdb&t=d9b15392-e4ce-5e4c-0c8c-b69645229181&l=25758\r\n\r\nThe relevant (I think) sample of the valgrind output:\r\n\r\n```Java\n\r\n==5249== Conditional jump or move depends on uninitialised value(s)\r\n==5249==    at 0x485207E: bcmp (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==5249==    by 0x49E831E: R_compute_identical (identical.c:233)\r\n==5249==    by 0x49E7B8E: do_identical (identical.c:94)\r\n==5249==    by 0x49B24EC: bcEval (eval.c:7126)\r\n==5249==    by 0x499DB93: Rf_eval (eval.c:748)\r\n==5249==    by 0x49A0902: R_execClosure (eval.c:1918)\r\n==5249==    by 0x49A05B5: Rf_applyClosure (eval.c:1844)\r\n==5249==    by 0x49B2120: bcEval (eval.c:7094)\r\n==5249==    by 0x499DB93: Rf_eval (eval.c:748)\r\n==5249==    by 0x49A0902: R_execClosure (eval.c:1918)\r\n==5249==    by 0x49A05B5: Rf_applyClosure (eval.c:1844)\r\n==5249==    by 0x49B2120: bcEval (eval.c:7094)\r\n==5249==  Uninitialised value was created by a heap allocation\r\n==5249==    at 0x484DE30: memalign (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==5249==    by 0x484DF92: posix_memalign (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==5249==    by 0xFF7D27F: arrow::(anonymous namespace)::SystemAllocator::AllocateAligned(long, unsigned char**) (memory_pool.cc:318)\r\n==5249==    by 0xFF7D3F9: arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::SystemAllocator>::Allocate(long, unsigned char**) (memory_pool.cc:458)\r\n==5249==    by 0xFB31A46: GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1}::operator()() const (memorypool.cpp:27)\r\n==5249==    by 0xFB31E10: arrow::Status GcMemoryPool::GcAndTryAgain<GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1}>(GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1} const&) (memorypool.cpp:45)\r\n==5249==    by 0xFB31ABB: GcMemoryPool::Allocate(long, unsigned char**) (memorypool.cpp:27)\r\n==5249==    by 0xFF81A97: arrow::PoolBuffer::Reserve(long) (memory_pool.cc:806)\r\n==5249==    by 0xFF81B6D: arrow::PoolBuffer::Resize(long, bool) (memory_pool.cc:830)\r\n==5249==    by 0xFF80D94: ResizePoolBuffer<std::unique_ptr<arrow::ResizableBuffer>, std::unique_ptr<arrow::PoolBuffer> > (memory_pool.cc:869)\r\n==5249==    by 0xFF80D94: arrow::AllocateResizableBuffer(long, arrow::MemoryPool*) (memory_pool.cc:882)\r\n==5249==    by 0x1022D197: arrow::compute::KernelContext::Allocate(long) (kernel.cc:48)\r\n==5249==    by 0x10584C80: arrow::compute::internal::(anonymous namespace)::CompareKernel<arrow::Int32Type>::Exec(arrow::compute::KernelContext*, arrow::compute::ExecSpan const&, arrow::compute::ExecResult*) (scalar_compare.cc:274)\r\n==5249== \r\n```\r\n\r\nPossible reprex for R code that triggered this. I can't run valgrind at this second but it's this test that triggered the failure (running this code after starting R with `R -d valgrind` should replicate the failure).\r\n\r\n```R\n\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\nlibrary(testthat, warn.conflicts = FALSE)\r\n\r\nexpect_type_equal <- function(object, expected, ...) {\r\n  if (inherits(object, c(\"Array\", \"ChunkedArray\"))) {\r\n    object <- object$type\r\n  }\r\n  if (inherits(expected, c(\"Array\", \"ChunkedArray\"))) {\r\n    expected <- expected$type\r\n  }\r\n  expect_equal(object, expected, ...)\r\n}\r\n\r\nexpect_r6_class <- function(object, class) {\r\n  expect_s3_class(object, class)\r\n  expect_s3_class(object, \"R6\")\r\n}\r\n\r\nexpect_bool_function_equal <- function(array_exp, r_exp) {\r\n# Assert that the Array operation returns a boolean array\r\n# and that its contents are equal to expected\r\n  expect_r6_class(array_exp, \"ArrowDatum\")\r\n  expect_type_equal(array_exp, bool())\r\n  expect_identical(as.vector(array_exp), r_exp)\r\n}\r\n\r\nexpect_array_compares <- function(x, compared_to) {\r\n  r_values <- as.vector(x)\r\n  r_compared_to <- as.vector(compared_to)\r\n# Iterate over all comparison functions\r\n  expect_bool_function_equal(x == compared_to, r_values == r_compared_to)\r\n  expect_bool_function_equal(x != compared_to, r_values != r_compared_to)\r\n  expect_bool_function_equal(x > compared_to, r_values > r_compared_to)\r\n  expect_bool_function_equal(x >= compared_to, r_values >= r_compared_to)\r\n  expect_bool_function_equal(x < compared_to, r_values < r_compared_to)\r\n  expect_bool_function_equal(x <= compared_to, r_values <= r_compared_to)\r\n}\r\n\r\nexpect_array_compares(ChunkedArray$create(1:3, 4:5), 4L)\r\n```\r\n\r\n",
        "created_at": "2022-07-26T15:03:43.000Z",
        "updated_at": "2022-07-27T04:51:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-07-27T02:12:46.000Z"
    },
    "comments": [
        {
            "created_at": "2022-07-26T16:08:07.494Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17213?focusedCommentId=17571520) by Wes McKinney (wesm):*\nI tried to reproduce this locally on the master branch (Ubuntu 18.04) but was not able. I had to comment out `expect_type_equal(array_exp, bool())` which failed with\r\n\r\n```Java\n\r\nError: `object` (`actual`) not equal to `expected` (`expected`).\r\n\r\n`actual$.:xp:.` is <pointer: 0x5454dc00>\r\n`expected$.:xp:.` is <pointer: 0x5454dd40>\r\n```"
        },
        {
            "created_at": "2022-07-26T16:15:19.199Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17213?focusedCommentId=17571525) by Jacob Wujciak-Jens (assignUser):*\nI made this a blocker as it will break the CRAN submission."
        },
        {
            "created_at": "2022-07-27T02:12:46.833Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17213?focusedCommentId=17571696) by Wes McKinney (wesm):*\nIssue resolved by pull request 13715\n<https://github.com/apache/arrow/pull/13715>"
        }
    ]
}