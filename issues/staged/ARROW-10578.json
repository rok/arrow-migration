{
    "issue": {
        "title": "[C++] Comparison kernels crashing for string array with null string scalar",
        "body": "***Note**: This issue was originally created as [ARROW-10578](https://issues.apache.org/jira/browse/ARROW-10578). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nComparing a string array with a string scalar works:\r\n```java\n\r\nIn [1]: import pyarrow.compute as pc\r\n\r\nIn [2]: pc.equal(pa.array([\"a\", None, \"b\"]), pa.scalar(\"a\", type=\"string\"))\r\nOut[2]: \r\n<pyarrow.lib.BooleanArray object at 0x7f38d56e23a8>\r\n[\r\n  true,\r\n  null,\r\n  false\r\n]\r\n```\r\nbut if the scalar is a null (from the proper string type), it crashes:\r\n```java\n\r\nIn [4]: pc.equal(pa.array([\"a\", None, \"b\"]), pa.scalar(None, type=\"string\"))\r\nSegmentation fault (core dumped)\r\n```\r\n(and not even debug messages ..)",
        "created_at": "2020-11-13T09:19:34.000Z",
        "updated_at": "2021-01-05T09:21:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-01-05T09:21:21.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-13T09:31:29.694Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10578?focusedCommentId=17231316) by Joris Van den Bossche (jorisvandenbossche):*\nWith gdb I get this:\r\n\r\n```Java\n\r\n>>> pc.not_equal(pa.array([\"a\", None, \"b\"]), pa.scalar(None, type=\"string\", from_pandas=True))\r\n[Thread 0x7fbdb87fc700 (LWP 11192) exited]\r\n[Thread 0x7fbdb7ffb700 (LWP 11193) exited]\r\n[Thread 0x7fbdbaffd700 (LWP 11191) exited]\r\n[Thread 0x7fbdbf7fe700 (LWP 11190) exited]\r\n[Thread 0x7fbdbffff700 (LWP 11189) exited]\r\n[Thread 0x7fbdc8fbc700 (LWP 11188) exited]\r\n[Thread 0x7fbdc97bd700 (LWP 11187) exited]\r\n[Detaching after fork from child process 11201]\r\n[Detaching after fork from child process 11206]\r\n\r\nThread 1 \"python\" received signal SIGSEGV, Segmentation fault.\r\n0x00007fbdce798223 in arrow::Buffer::operator nonstd::sv_lite::basic_string_view<char, std::char_traits<char> > (this=0x0) at ../src/arrow/buffer.h:175\r\n175\t    return util::string_view(reinterpret_cast<const char*>(data_), size_);\r\n(gdb) bt\r\n#0  0x00007fbdce798223 in arrow::Buffer::operator nonstd::sv_lite::basic_string_view<char, std::char_traits<char> > (this=0x0) at ../src/arrow/buffer.h:175\r\n#1  0x00007fbdcebc9511 in arrow::compute::internal::UnboxScalar<arrow::BinaryType, void>::Unbox (val=...) at ../src/arrow/compute/kernels/codegen_internal.h:275\r\n#2  0x00007fbdcec625e6 in arrow::compute::internal::applicator::ScalarBinary<arrow::BooleanType, arrow::BinaryType, arrow::BinaryType, arrow::compute::internal::(anonymous namespace)::NotEqual>::ArrayScalar (\r\n    ctx=0x7fff74cc7620, arg0=..., arg1=..., out=0x7fff74cc7420) at ../src/arrow/compute/kernels/codegen_internal.h:697\r\n#3  0x00007fbdcec58c5e in arrow::compute::internal::applicator::ScalarBinary<arrow::BooleanType, arrow::BinaryType, arrow::BinaryType, arrow::compute::internal::(anonymous namespace)::NotEqual>::Exec (\r\n    ctx=0x7fff74cc7620, batch=..., out=0x7fff74cc7420) at ../src/arrow/compute/kernels/codegen_internal.h:727\r\n#4  0x00007fbdceb66e31 in std::_Function_handler<void (arrow::compute::KernelContext*, arrow::compute::ExecBatch const&, arrow::Datum*), void (*)(arrow::compute::KernelContext*, arrow::compute::ExecBatch const&, arrow::Datum*)>::_M_invoke(std::_Any_data const&, arrow::compute::KernelContext*&&, arrow::compute::ExecBatch const&, arrow::Datum*&&) (__functor=..., __args#0=@0x7fff74cc73a0: 0x7fff74cc7620, __args#1=..., \r\n    __args#2=@0x7fff74cc7390: 0x7fff74cc7420) at /home/joris/miniconda3/envs/arrow-dev/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/std_function.h:316\r\n#5  0x00007fbdceabda82 in std::function<void (arrow::compute::KernelContext*, arrow::compute::ExecBatch const&, arrow::Datum*)>::operator()(arrow::compute::KernelContext*, arrow::compute::ExecBatch const&, arrow::Datum*) const (this=0x55dacf413718, __args#0=0x7fff74cc7620, __args#1=..., __args#2=0x7fff74cc7420)\r\n    at /home/joris/miniconda3/envs/arrow-dev/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/std_function.h:706\r\n#6  0x00007fbdceab9458 in arrow::compute::detail::(anonymous namespace)::ScalarExecutor::ExecuteBatch (this=0x55dacf712020, batch=..., listener=0x55dacf772a30) at ../src/arrow/compute/exec.cc:578\r\n#7  0x00007fbdceab8afa in arrow::compute::detail::(anonymous namespace)::ScalarExecutor::Execute (this=0x55dacf712020, args=..., listener=0x55dacf772a30) at ../src/arrow/compute/exec.cc:516\r\n#8  0x00007fbdceac8b7f in arrow::compute::Function::Execute (this=0x55dacf411640, args=..., options=0x0, ctx=0x7fff74cc7850) at ../src/arrow/compute/function.cc:146\r\n#9  0x00007fbdb360749c in __pyx_pf_7pyarrow_8_compute_8Function_6call(__pyx_obj_7pyarrow_8_compute_Function*, _object*, __pyx_obj_7pyarrow_8_compute_FunctionOptions*, __pyx_obj_7pyarrow_3lib_MemoryPool*) [clone .isra.501] () from /home/joris/scipy/repos/arrow/python/pyarrow/_compute.cpython-37m-x86_64-linux-gnu.so\r\n#\r\n```\r\n"
        },
        {
            "created_at": "2020-12-29T17:16:53.682Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10578?focusedCommentId=17256068) by Kirill Lykov (klykov):*\nProblem is still reproducible. It happens only for type==string\r\n\r\nI don't see cpp tests for this use case: <https://github.com/apache/arrow/blob/52d615dc2cd64fbdbc10f2aeeb3b43ad5e879f3b/cpp/src/arrow/compute/kernels/scalar_compare_test.cc#L537>\r\n\r\nLet me know if I look into the wrong place.\r\nI will try to add unit test for this particular case.\r\n\r\nI also think it makes sense to add test on pyarrow. Something similar to <https://github.com/apache/arrow/blob/64f9b3fbe9ef4c718449a735435b53ab992ca852/python/pyarrow/tests/test_compute.py#L769>\r\n\r\n\r\nThe problem is that the scalar is invalid (`datum->is_valid == false`): see [https://github.com/apache/arrow/blob/ca685a0c08bb41f43a80e5605e4cc8f9efb77cca/cpp/src/arrow/compute/kernels/codegen_internal.h#L713\u00a0\r\n](https://github.com/apache/arrow/blob/ca685a0c08bb41f43a80e5605e4cc8f9efb77cca/cpp/src/arrow/compute/kernels/codegen_internal.h#L713)But we deference val at codegen_internal.h:275 and trying to create string_view from data_ which has address 0x10.\r\n\r\nTo fix the bug, I guess some additional checks should be added to\u00a0https://github.com/apache/arrow/blame/ca685a0c08bb41f43a80e5605e4cc8f9efb77cca/cpp/src/arrow/compute/kernels/codegen_internal.h#L273\r\nSomething like if scalar is invalid, return default string_view.\r\n\r\n\r\n\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-12-31T14:39:11.275Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10578?focusedCommentId=17257013) by Kirill Lykov (klykov):*\nwill post PR soon"
        },
        {
            "created_at": "2021-01-05T09:21:21.139Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10578?focusedCommentId=17258775) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 9079\n<https://github.com/apache/arrow/pull/9079>"
        }
    ]
}