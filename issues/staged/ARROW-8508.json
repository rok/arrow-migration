{
    "issue": {
        "title": "[Rust] ListBuilder of FixedSizeListBuilder creates wrong offsets",
        "body": "***Note**: This issue was originally created as [ARROW-8508](https://issues.apache.org/jira/browse/ARROW-8508). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI created an example of storing multi points with Arrow.\r\n1. A coordinate consists of two floats (Float64Builder)\n1. A multi point consists of one or more coordinates (FixedSizeListBuilder)\n1. A list of multi points consists of multiple multi points (ListBuilder)\n   \n   This is the corresponding code snippet:\n   ```java\n   \n   let float_builder = arrow::array::Float64Builder::new(0);\n   let coordinate_builder = arrow::array::FixedSizeListBuilder::new(float_builder, 2);\n   let mut multi_point_builder = arrow::array::ListBuilder::new(coordinate_builder);\n   \n   multi_point_builder\n       .values()\n       .values()\n       .append_slice(&[0.0, 0.1])\n       .unwrap();\n   multi_point_builder.values().append(true).unwrap();\n   multi_point_builder\n       .values()\n       .values()\n       .append_slice(&[1.0, 1.1])\n       .unwrap();\n   multi_point_builder.values().append(true).unwrap();\n   \n   multi_point_builder.append(true).unwrap(); // first multi point\n   \n   multi_point_builder\n       .values()\n       .values()\n       .append_slice(&[2.0, 2.1])\n       .unwrap();\n   multi_point_builder.values().append(true).unwrap();\n   multi_point_builder\n       .values()\n       .values()\n       .append_slice(&[3.0, 3.1])\n       .unwrap();\n   multi_point_builder.values().append(true).unwrap();\n   multi_point_builder\n       .values()\n       .values()\n       .append_slice(&[4.0, 4.1])\n       .unwrap();\n   multi_point_builder.values().append(true).unwrap();\n   \n   multi_point_builder.append(true).unwrap(); // second multi point\n   \n   let multi_point = dbg!(multi_point_builder.finish());\n   \n   let first_multi_point_ref = multi_point.value(0);\n   let first_multi_point: &arrow::array::FixedSizeListArray = first_multi_point_ref.as_any().downcast_ref().unwrap();\n   let coordinates_ref = first_multi_point.values();\n   let coordinates: &Float64Array = coordinates_ref.as_any().downcast_ref().unwrap();\n   \n   assert_eq!(coordinates.value_slice(0, 2 * 2), &[0.0, 0.1, 1.0, 1.1]);\n   \n   let second_multi_point_ref = multi_point.value(1);\n   let second_multi_point: &arrow::array::FixedSizeListArray = second_multi_point_ref.as_any().downcast_ref().unwrap();\n   let coordinates_ref = second_multi_point.values();\n   let coordinates: &Float64Array = coordinates_ref.as_any().downcast_ref().unwrap();\n   \n   assert_eq!(coordinates.value_slice(0, 2 * 3), &[2.0, 2.1, 3.0, 3.1, 4.0, 4.1]);\n   ```\n   The second assertion fails and the output is `[0.0, 0.1, 1.0, 1.1, 2.0, 2.1]`.\n   \n   Moreover, the debug output produced from `dbg!` confirms this:\n   ```\n   \n   [\n     FixedSizeListArray<2>\n   [\n     PrimitiveArray<Float64>\n   [\n     0.0,\n     0.1,\n   ],\n     PrimitiveArray<Float64>\n   [\n     1.0,\n     1.1,\n   ],\n   ],\n     FixedSizeListArray<2>\n   [\n     PrimitiveArray<Float64>\n   [\n     0.0,\n     0.1,\n   ],\n     PrimitiveArray<Float64>\n   [\n     1.0,\n     1.1,\n   ],\n     PrimitiveArray<Float64>\n   [\n     2.0,\n     2.1,\n   ],\n   ],\n   ]\n   ```\n   The second list should contain the values 2-4.\n   \n   \u00a0\n   \n   So either I am using the builder wrong or there is a bug with the offsets. I used `0.16` as well as the current `master` from GitHub.",
        "created_at": "2020-04-18T10:42:21.000Z",
        "updated_at": "2020-04-23T18:56:45.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-04-23T18:56:45.000Z"
    },
    "comments": [
        {
            "created_at": "2020-04-22T01:44:32.820Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8508?focusedCommentId=17089198) by Mark Hildreth (markhildreth):*\nI believe there are a few things going on here:\r\n\r\n1.) I wouldn't consider myself an expert on these APIs, but it seems like the builders are being used correctly.\r\n\r\n2.) The debug output definitely appears broken. I opened a [PR to fix this](https://github.com/apache/arrow/pull/7006), which puts it more in line with how the non-fixed size **ListArray** works. This should fix the **value()** method on the FixedSizeListArray to properly take the offset into the child array into account.\r\n\r\n3.) As for the asserts that fail, this I'm less certain on. The values from these asserts are taken from the **values()** method, which seems to just return the underlying array without taking offsets into account. This seems to be similar to how other arrays work (including primitives), so my guess it is by design. I don't have an explanation for a better way of using the API, so maybe someone else can provide input."
        },
        {
            "created_at": "2020-04-22T07:01:16.955Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8508?focusedCommentId=17089356) by Christian Beilschmidt (fyaa):*\nAs an addition, you can extend the assertion checks:\r\n```java\n\r\n\u2026\r\n\r\nlet multi_point = dbg!(multi_point_builder.finish());\r\n\r\n// test first multi point\r\n\r\nlet first_multi_point_ref = multi_point.value(0);\r\nlet first_multi_point: &arrow::array::FixedSizeListArray = first_multi_point_ref.as_any().downcast_ref().unwrap();\r\n\r\nassert_eq!(first_multi_point.len(), 2);\r\n\r\nlet coordinate_0_ref = first_multi_point.value(0);\r\nlet coordinate_0: &Float64Array = coordinate_0_ref.as_any().downcast_ref().unwrap();\r\n\r\nassert_eq!(coordinate_0.len(), 2);\r\nassert_eq!(coordinate_0.value_slice(0, 2), &[0.0, 0.1]);\r\n\r\nlet coordinate_1_ref = first_multi_point.value(1);\r\nlet coordinate_1: &Float64Array = coordinate_1_ref.as_any().downcast_ref().unwrap();\r\n\r\nassert_eq!(coordinate_1.len(), 2);\r\nassert_eq!(coordinate_1.value_slice(0, 2), &[1.0, 1.1]);\r\n\r\n// test second multi point\r\n\r\nlet second_multi_point_ref = multi_point.value(1);\r\nlet second_multi_point: &arrow::array::FixedSizeListArray = second_multi_point_ref.as_any().downcast_ref().unwrap();\r\n\r\nassert_eq!(second_multi_point.len(), 3);\r\n\r\nlet coordinate_2_ref = second_multi_point.value(0);\r\nlet coordinate_2: &Float64Array = coordinate_2_ref.as_any().downcast_ref().unwrap();\r\n\r\nassert_eq!(coordinate_2.len(), 2);\r\nassert_eq!(coordinate_2.value_slice(0, 2), &[2.0, 2.1]);\r\n\r\nlet coordinate_3_ref = second_multi_point.value(1);\r\nlet coordinate_3: &Float64Array = coordinate_3_ref.as_any().downcast_ref().unwrap();\r\n\r\nassert_eq!(coordinate_3.len(), 2);\r\nassert_eq!(coordinate_3.value_slice(0, 2), &[3.0, 3.1]);\r\n\r\nlet coordinate_4_ref = second_multi_point.value(2);\r\nlet coordinate_4: &Float64Array = coordinate_4_ref.as_any().downcast_ref().unwrap();\r\n\r\nassert_eq!(coordinate_4.len(), 2);\r\nassert_eq!(coordinate_4.value_slice(0, 2), &[4.0, 4.1]);\r\n```\r\nIt fails with\r\n```\n\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `[0.0, 0.1]`,\r\n right: `[2.0, 2.1]`', src/main.rs:76:5\n```\r\nwhich corresponds to `assert_eq!(coordinate_2.value_slice(0, 2), &[2.0, 2.1]);`\r\n\r\n\u00a0\r\n\r\nI tried your PR and it runs through just fine! (y)"
        },
        {
            "created_at": "2020-04-23T18:56:45.943Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8508?focusedCommentId=17090847) by Andy Grove (andygrove):*\nIssue resolved by pull request 7006\n<https://github.com/apache/arrow/pull/7006>"
        }
    ]
}