{
    "issue": {
        "title": "[Go] Panic when appending zero slices after initializing a builder",
        "body": "***Note**: This issue was originally created as [ARROW-5117](https://issues.apache.org/jira/browse/ARROW-5117). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```java\n\r\narray.NewInt8Builder(memory.DefaultAllocator).AppendValues([]int8{}, []bool{})\n```\r\nresults in a panic\r\n```java\n\r\n=== RUN TestArrowPanic\r\n--- FAIL: TestArrowPanic (0.00s)\r\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\r\n panic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x414f6fd]goroutine 5 [running]:\r\ntesting.tRunner.func1(0xc000492a00)\r\n /usr/local/Cellar/go/1.11.5/libexec/src/testing/testing.go:792 +0x387\r\npanic(0x4cd1fe0, 0x5bb3fb0)\r\n /usr/local/Cellar/go/1.11.5/libexec/src/runtime/panic.go:513 +0x1b9\r\ngithub.com/cockroachdb/cockroach/vendor/github.com/apache/arrow/go/arrow/memory.(*Buffer).Bytes(...)\r\n /Users/asubiotto/go/src/github.com/cockroachdb/cockroach/vendor/github.com/apache/arrow/go/arrow/memory/buffer.go:67\r\ngithub.com/cockroachdb/cockroach/vendor/github.com/apache/arrow/go/arrow/array.(*builder).unsafeSetValid(0xc000382a80, 0x0)\r\n /Users/asubiotto/go/src/github.com/cockroachdb/cockroach/vendor/github.com/apache/arrow/go/arrow/array/builder.go:184 +0x6d\r\ngithub.com/cockroachdb/cockroach/vendor/github.com/apache/arrow/go/arrow/array.(*builder).unsafeAppendBoolsToBitmap(0xc000382a80, 0xc00040df88, 0x0, 0x0, 0x0)\r\n /Users/asubiotto/go/src/github.com/cockroachdb/cockroach/vendor/github.com/apache/arrow/go/arrow/array/builder.go:146 +0x17a\r\ngithub.com/cockroachdb/cockroach/vendor/github.com/apache/arrow/go/arrow/array.(*Int8Builder).AppendValues(0xc000382a80, 0xc00040df88, 0x0, 0x0, 0xc00040df88, 0x0, 0x0)\r\n /Users/asubiotto/go/src/github.com/cockroachdb/cockroach/vendor/github.com/apache/arrow/go/arrow/array/numericbuilder.gen.go:1168 +0xcb\r\ngithub.com/cockroachdb/cockroach/pkg/util/arrow_test.TestArrowPanic(0xc000492a00)\r\n /Users/asubiotto/go/src/github.com/cockroachdb/cockroach/pkg/util/arrow/record_batch_test.go:273 +0x9a\r\ntesting.tRunner(0xc000492a00, 0x4ec5370)\r\n /usr/local/Cellar/go/1.11.5/libexec/src/testing/testing.go:827 +0xbf\r\ncreated by testing.(*T).Run\r\n /usr/local/Cellar/go/1.11.5/libexec/src/testing/testing.go:878 +0x35cProcess finished with exit code 1\n```\r\ndue to the underlying null bitmap never being initialized. I believe the expectation is for `Resize` to initialize this bitmap. This never happens because a length of 0 (elements in this block) fails this check:\r\n```java\n\r\nfunc (b *builder) reserve(elements int, resize func(int)) {\r\n\u00a0 \u00a0 if b.length+elements > b.capacity {\r\n\u00a0 \u00a0 \u00a0 \u00a0 newCap := bitutil.NextPowerOf2(b.length + elements)\r\n\u00a0 \u00a0 \u00a0 \u00a0 resize(newCap)\r\n\u00a0 \u00a0 }\r\n}\n```\r\nAs far as I can tell the arguments to AppendValues are valid. I'd be happy to submit a patch but I can see several ways of fixing this so would prefer someone familiar with the code to take a look and define expectations in this case.",
        "created_at": "2019-04-04T12:50:08.000Z",
        "updated_at": "2019-04-26T09:44:21.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Go",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-04-26T09:44:12.000Z"
    },
    "comments": [
        {
            "created_at": "2019-04-26T09:44:12.300Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5117?focusedCommentId=16826822) by Sebastien Binet (sbinet):*\nIssue resolved by pull request 4131\n<https://github.com/apache/arrow/pull/4131>"
        }
    ]
}