{
    "issue": {
        "title": "[Python] Scalar constructors should be callable",
        "body": "***Note**: This issue was originally created as [ARROW-16254](https://issues.apache.org/jira/browse/ARROW-16254). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, to create a Scalar instance you must call the `pa.scalar` factory function. This works fine for the simplest types, but not for more elaborate ones.\r\n\r\nFor example, in C++ it is trivial to create a `ListScalar` from the embedded `std::shared_ptr<Array>`. But not in Python:\r\n```python\n\r\n>>> arr = pa.array([\"abc\", \"def\", \"ghi\"])\r\n>>> pa.ListScalar(arr)\r\nTraceback (most recent call last):\r\n  Input In [7] in <cell line: 1>\r\n    pa.ListScalar(arr)\r\nTypeError: __init__() takes exactly 0 positional arguments (1 given)\r\n```\r\n\r\nThere is a clumsy workaround that creates an intermediate `ListArray` with trivial offsets:\r\n```python\n\r\n>>> list_arr = pa.ListArray.from_arrays([0, len(arr)], arr)\r\n>>> list_arr[0]\r\n<pyarrow.ListScalar: ['abc', 'def', 'ghi']>\r\n```\r\n",
        "created_at": "2022-04-20T12:08:52.000Z",
        "updated_at": "2022-07-04T17:41:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-04-20T12:09:07.741Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16254?focusedCommentId=17524932) by Antoine Pitrou (apitrou):*\ncc `[~alenkaf]` `[~raulcd]`"
        },
        {
            "created_at": "2022-04-21T09:15:34.189Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16254?focusedCommentId=17525576) by Joris Van den Bossche (jorisvandenbossche):*\nFor this specific example, the `pa.scalar(..)` factory function also seems to work?\r\n\r\n```Java\n\r\nIn [32]: pa.scalar([\"abc\", \"def\", \"ghi\"])\r\nOut[32]: <pyarrow.ListScalar: ['abc', 'def', 'ghi']>\r\n```\r\n\r\n"
        },
        {
            "created_at": "2022-04-21T09:19:27.347Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16254?focusedCommentId=17525580) by Antoine Pitrou (apitrou):*\nIt does not if you pass an existing PyArrow array:\r\n```Java\n\r\n>>> arr = pa.array([\"abc\", \"def\", \"ghi\"])\r\n>>> pa.scalar(arr)\r\nTraceback (most recent call last):\r\n  ...\r\nArrowInvalid: Could not convert <pyarrow.lib.StringArray object at 0x7f79ab490880>\r\n[\r\n  \"abc\",\r\n  \"def\",\r\n  \"ghi\"\r\n] with type pyarrow.lib.StringArray: did not recognize Python value type when inferring an Arrow data type\r\n>>> pa.scalar(arr, type=pa.list_(arr.type))\r\nTraceback (most recent call last):\r\n  ...\r\nArrowTypeError: Expected bytes, got a 'pyarrow.lib.StringScalar' object\r\n```"
        },
        {
            "created_at": "2022-04-21T18:23:53.317Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16254?focusedCommentId=17525941) by Joris Van den Bossche (jorisvandenbossche):*\nAh, yes. Now, that relates to the issue that `pa.array(..)` also does not accept pyarrow arrays as scalars, see ARROW-5295"
        }
    ]
}