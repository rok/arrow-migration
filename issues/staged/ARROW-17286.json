{
    "issue": {
        "title": "[C++][Docs] Plan Getting Started Section",
        "body": "***Note**: This issue was originally created as [ARROW-17286](https://issues.apache.org/jira/browse/ARROW-17286). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe C++ library documentation currently needs to be more focused in each of its sections, and currently does not have enough sections to accomplish that. Furthermore, the new user experience is difficult, partially due to not having an intro tutorial for the C++ library. \r\n\r\nThus, there needs to be the addition of a \"Getting Started\" section to the C++ library documentation to enable new users to flourish, and the documentation as a whole to evolve further.\r\n\r\nIt is necessary to first determine what are fitting topics for this section, then implement them.",
        "created_at": "2022-08-02T17:55:03.000Z",
        "updated_at": "2022-08-10T18:28:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2022-08-10T18:28:19.000Z"
    },
    "comments": [
        {
            "created_at": "2022-08-02T18:01:15.234Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17286?focusedCommentId=17574351) by Kae Suarez (ksuarez):*\nBefore just writing code + prose, we need to figure out what sort of sections should be in a preliminary implementation. Coming from the Python docs, it appears we at least need how to install Arrow, then how to initialize data structures by hand and from files, how to do computations, and how to work with large data. However, the Python Getting Started is a bit terse, and we can afford to be more verbose to have a stronger tutorial experience.\r\n\r\nIn these comments, I'd like to discuss what a potential Getting Started ToC would look like, and we can definitely move to a different platform like Google Docs if that would be more useful.\r\n\r\n\u00a0\r\n\r\nFurthermore, `[~octalene]` had this comment yesterday on the parent issue:\r\n\r\n\u00a0\r\nI think a getting started section sounds great.\r\n\r\nIn my mind, it would be a nice place to put sub-sections such as:\r\n \\* \"getting data into Arrow\"\r\n \\* \"ways to process Arrow data\"\r\n\r\nI think as sub-sections these could introduce some concepts, how they relate, and point to places in the docs that describe them in more detail. IMO, a nice \"getting started\" also helps bootstrap enough knowledge to navigate the docs."
        },
        {
            "created_at": "2022-08-02T18:38:02.149Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17286?focusedCommentId=17574360) by Matthew Topol (zeroshade):*\n`[~ksuarez]` I assume we're not going to need a section on actually installing the Arrow libraries / building them from source as those are already covered elsewhere in the documentation? A section that just points to those relevant portions of the documentation might still be useful for anyone Getting Started as far as setting up their development environment so they can link against the Arrow libraries.\r\n\r\nI think another reasonable thing we should cover in this Getting Started section might be a breakdown of the different dynamic libraries that are installed/built by Arrow so that a user knows which ones they should link against and why (or at least know what they should pass to `pkg-config` when getting their compile/link flags). While we might be explicit in any tutorial sections about what to link against (adding in libarrow_dataset/libarrow_flight/etc as necessary) it would still be helpful to have just a flat breakdown of what is in which .so file.\r\n\r\nAfter that, bootstrapping with handling \"Getting Data Into Arrow\" - links to docs on reading CSV/parquet/<insert format here> files including links to the Dataset libraries. followed by \"ways to process arrow data\" -links to the compute libraries and other cookbook examples.\r\n\r\nThoughts?"
        },
        {
            "created_at": "2022-08-02T18:48:53.624Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17286?focusedCommentId=17574361) by Kae Suarez (ksuarez):*\n`[~zeroshade]` Currently, we do already link to building from source for the current \"using in your project\" page, but the installing not from source doesn't even have a link \u2013 of course, we can just add one over the \"using a package manager\" text: <https://arrow.apache.org/docs/cpp/build_system.html>\r\n\r\nI agree that we definitely need to include what to link against \u2013 right now, it isn't immediately clear things like libarrow_dataset is needed until you try to use it and fail \u2013 at least in CMake. All appears fine for pkg-config users, though there isn't a very good mapping of what is needed for what.\r\n\r\nI'm not perfectly sure what you mean by bootstrapping \u2013 do you mean _only_ linking to the relevant articles, or writing a single example and also linking to those? I would prefer the latter, so we have parity with documentation for other Arrow libraries, and have a good starting point for people to understand what Arrow code looks like for a given pattern before moving into the denser, specific documentation."
        },
        {
            "created_at": "2022-08-02T19:13:04.374Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17286?focusedCommentId=17574363) by Will Jones (willjones127):*\nIt might also be helpful to state what's out-of-scope for Getting Started. For example, IIUC we want to leave conceptual info (What is a datatype, array, compute kernel, etc.) for User Guide sections.\r\n\r\nLet's please move to a Google doc so we can develop an outline.\r\n\r\nBelow is by initial idea of an outline (but you probably have better ideas), which is broken up roughly by sub-library:\r\n1. Getting Started\n   1. How to install Arrow\n      1. Using system package managers (homebrew, apt, yum, etc)\n      1. Using project package managers (vcpkg, conan, etc.)\n      1. CMake External project\n   1. Getting started with Arrow\n      \n      1. A simple example with an array and calling compute function\n      1. Which headers to use\n      1. How to link to libarrow\n      1. Using ARROW_ASSIGN_OR_RAISE, Status, Result, and friends\n      1. Links to other sections about contents of libarrow: DataTypes, Arrays, so on\n   1. Getting started with Parquet\n      1. A simple example loading parquet data without Arrow (that's possible, right?)\n      1. A simple example loading parquet data into Arrow\n      1. Which headers + how to link (with and without Arrow, if possible)\n   1. Getting started with Datasets\n      1. A simple example\n      1. Headers + libraries to include\n      1. Links to further reading about datasets\n   1. Getting started with Acero\n      1. A simple example of building an exec plan\n      1. Headers + libraries to include\n      1. Links to further reading about Acero\n   1. Using Flight in your project\n      1. A minimal flight sever\n      1. Headers + libraries to include, with special notes about gRPC + Abseil linking\n      1. Links to further reading on Flight"
        },
        {
            "created_at": "2022-08-02T19:51:47.893Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17286?focusedCommentId=17574373) by Kae Suarez (ksuarez):*\n`[~willjones127]` I think this is actually a great direction to take it \u2013 we have a lot of features with a lot of interoperability, and a lot of standing alone. Dividing it up seems like a fantastic way to get an early break-down of some concepts, which we can explore more conceptually in the proper user guide sections, and in a how-to section via the cookbooks.\u00a0\r\n\r\n\u00a0However, I don't think we should include the Parquet section \u2013 mainly because Parquet has its own docs here: <https://parquet.apache.org/docs/> We only really need to treat it as the recommended file format. I think I'd want to mess with these sub-headers a bit, and add a single linear example of a full flow as a first section, \u00e0 la <https://docs.dask.org/en/stable/10-minutes-to-dask.html>.\r\n\r\nRegardless, this provides a great start that I'm eager to iterate on, perhaps here: <https://docs.google.com/document/d/1IFk6m97JWZZzFC3UIlLf3sxnXgFoL-l89nqSGl8bE28/edit?usp=sharing>"
        },
        {
            "created_at": "2022-08-10T18:28:19.074Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17286?focusedCommentId=17578105) by Kae Suarez (ksuarez):*\nChanged scope to \"planning\" the section so we can have sub-tasks moving forward that don't have to refer to this one as a pseudo-parent. Plan is made at <https://docs.google.com/document/d/1IFk6m97JWZZzFC3UIlLf3sxnXgFoL-l89nqSGl8bE28/edit?usp=sharing>, following sub-tasks will be for implementation."
        }
    ]
}