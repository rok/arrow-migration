{
    "issue": {
        "title": "[GLib] \"Nested data conversions not implemented\" through glib, but not through pyarrow",
        "body": "***Note**: This issue was originally created as [ARROW-10958](https://issues.apache.org/jira/browse/ARROW-10958). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHey all,\r\n\r\nFor some context, I am trying to use Arrow's GLib interface through Julia; I have a sense that I can speedup by pandas workflows by using Julia and Apache Arrow.\r\n\r\nI have a 1.7GB parquet file that can be read in about 20s by using pyarrow's parquet reader\r\n```java\n\r\npq.read_table(path)\r\n```\r\nI've tried to do the same thing through the GLib interface in Julia, but I see this error instead :(\r\n```python\n\r\n[parquet][arrow][file-reader][read-table]: NotImplemented: Nested data conversions not implemented for chunked array outputs\r\n```\r\n\r\nArrow was installed using `brew install apache-arrow-glib` and it installed version 2.0.0\r\n\r\nHere's my Julia code:\r\n```python\n\r\nusing Pkg\r\nPkg.add(\"Gtk\")\r\nusing Gtk.GLib\r\nusing Gtk\r\n\r\npath = \"...\" # contains columns that are lists of strings\r\n\r\nstruct _GParquetArrowFileReader\r\n    parent_instance::Cint\r\nend\r\n\r\nconst GParquetArrowFileReader = _GParquetArrowFileReaderstruct \r\n_GParquetArrowFileReaderClass\r\n    parent_class::Cint\r\nend\r\n\r\nconst GParquetArrowFileReaderClass = _GParquetArrowFileReaderClass\r\n\r\nstruct _GArrowTable\r\n    parent_instance::Cint\r\nend\r\n\r\nconst GArrowTable = _GArrowTable\r\n\r\nstruct _GArrowTableClass\r\n    parent_class::Cint\r\nend\r\n\r\nconst GArrowTableClass = _GArrowTableClass\r\n\r\nfunction parquet_arrow_file_reader_new_path(path::String)::Ptr{GParquetArrowFileReader}\r\n    ret::Ptr{GParquetArrowFileReader} = 0\r\n    GError() do error_check\r\n        ret = ccall(\r\n            (:gparquet_arrow_file_reader_new_path, \"/usr/local/Cellar/apache-arrow-glib/2.0.0/lib/libparquet-glib.200\"), \r\n            Ptr{GParquetArrowFileReader}, \r\n            (Ptr{UInt8}, Ptr{Ptr{GError}}), \r\n            Gtk.bytestring(path), error_check\r\n        )\r\n        ret != 0\r\n    end\r\n    ret\r\nend\r\n\r\nfunction parquet_arrow_file_reader_read_table(reader::Ptr{GParquetArrowFileReader})::Ptr{GArrowTable}\r\n    ret::Ptr{GArrowTable} = 0\r\n    GError() do error_check\r\n        ret = ccall(\r\n            (:gparquet_arrow_file_reader_read_table, \"/usr/local/Cellar/apache-arrow-glib/2.0.0/lib/libparquet-glib.200\"), \r\n            Ptr{GParquetArrowFileReader}, \r\n            (Ptr{GParquetArrowFileReader}, Ptr{Ptr{GError}}), \r\n            reader, error_check\r\n        )\r\n        ret != 0\r\n    end\r\n    ret\r\nend\r\n\r\nreader = parquet_arrow_file_reader_new_path(path)\r\ntbl = parquet_arrow_file_reader_read_table(reader)\r\n```\r\nAm I doing something wrong or is there a behavior discrepancy between pyarrow and glib?",
        "created_at": "2020-12-18T11:26:31.000Z",
        "updated_at": "2021-07-17T22:29:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: GLib",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-07-17T22:29:33.000Z"
    },
    "comments": [
        {
            "created_at": "2020-12-18T20:47:13.521Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10958?focusedCommentId=17252000) by Kouhei Sutou (kou):*\nWe have 2 interfaces to read Parquet data in the Arrow C++ layer. Both of pyarrow and Arrow GLib use Arrow C++.\r\n\r\n1. Using Parquet C++ (like you did)\r\n2. Using Arrow Dataset (like pyarrow does)\r\n\r\n1. doesn't support reading Parquet data that has a chunked column (row group in Parquet term) of List/Struct as a table yet. But 1. can read each row group as a table separately. We can combine multiple tables to one table by `garrow_table_concatenate()`.\r\n\r\nThe following code (sorry for using C) will work with 1.:\r\n\r\n```\n\r\ngint n_row_groups = gparquet_arrow_file_reader_get_n_row_groups(reader);\r\ngint i;\r\nGList *tables = NULL;\r\nfor (i = 0; i < n_row_groups; i++) {\r\n  GArrowTable *subtable = gparquet_arrow_file_reader_read_row_group(reader, i, NULL, 0, NULL);\r\n  tables = g_list_append(tables, subtable);\r\n}\r\nGArrowTable *table = garrow_table_concatenate(tables->data, tables->next);\r\ng_list_free(tables, g_object_unref);\r\n```\r\n\r\n2. can read Parquet data as a table even when the Parquet data has a chunked column of List/Struct. Unfortunately, Arrow GLib doesn't support this feature yet. (I'll work on it.)"
        },
        {
            "created_at": "2020-12-19T12:48:59.146Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10958?focusedCommentId=17252178) by Samay Kapadia (s-kap):*\nAh okay, that makes sense. For a file without nested data structures pyarrow seemed to be faster that the code I had written up top and I was wondering how that could be.\r\n\r\nBut it makes sense that pyarrow is using a different API. \r\n\r\nThanks for the answer!"
        },
        {
            "created_at": "2021-07-17T22:29:33.249Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10958?focusedCommentId=17382679) by Kouhei Sutou (kou):*\nWe can use Arrow Dataset API via Arrow GLib by ARROW-11205 and ARROW-11782.\r\n\r\nThe following code will work:\r\n\r\n```c\n\r\nGADatasetParquetFileFormat *file_format =\r\n  gadataset_parquet_file_format_new();\r\nGADatasetFileSystemDatasetFactory *factory =\r\n  gadataset_file_system_dataset_factory_new(GADATASET_FILE_FORMAT(file_format));\r\ng_object_unref(file_format);\r\nGError *error = NULL; \r\ngadataset_file_system_dataset_factory_set_file_system_uri(factory, \"file:///tmp/a.parquet\", &error);\r\nGADataset *dataset =\r\n  gadataset_dataset_factory_finish(GADATASET_DATASET_FACTORY(factory));\r\ng_object_unref(factory);\r\nGArrowTable *table = gadataset_dataset_to_table(dataset, &error);\r\ng_object_urnef(dataset);\r\n```\r\n"
        }
    ]
}