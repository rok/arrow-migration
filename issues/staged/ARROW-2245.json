{
    "issue": {
        "title": "[Python] Revert static linkage of parquet-cpp in manylinux1 wheel",
        "body": "***Note**: This issue was originally created as [ARROW-2245](https://issues.apache.org/jira/browse/ARROW-2245). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAlthough we are not in a theoretical way the authoritative source of parquet-cpp with the pyarrow manylinux1 wheel, in practical way we actually are this and statically linking parquet-cpp can introduce some problems that dynamically linking it does not (e.g. duplicate unloading of the library if you include it in a Python wheel and in the process that creates the Python interpreter).\u00a0",
        "created_at": "2018-03-02T14:00:51.000Z",
        "updated_at": "2018-03-04T19:45:48.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-03-04T19:45:48.000Z"
    },
    "comments": [
        {
            "created_at": "2018-03-02T15:39:26.453Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2245?focusedCommentId=16383702) by Uwe Korn (uwe):*\nSwitching the linkage back to dynamic makes the import of `pyarrow.parquet` segfault:\r\n```java\n\r\n#0 0x00007f4906e32928 in std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::basic_string<char, std::char_traits<char>,\r\nstd::allocator<char> > const&) () from /usr/lib64/libstdc++.so.6\r\n(gdb) bt\r\n#0 0x00007f4906e32928 in std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::basic_string<char, std::char_traits<char>,\r\nstd::allocator<char> > const&) () from /usr/lib64/libstdc++.so.6\r\n#1 0x00007f49074555bc in boost::re_detail_106501::cpp_regex_traits_char_layer<char>::init() () from /arrow/python/pyarrow/libparquet.so.1\r\n#2 0x00007f4907446ed3 in boost::object_cache<boost::re_detail_106501::cpp_regex_traits_base<char>, boost::re_detail_106501::cpp_regex_traits_implementation<c\r\nhar> >::do_get(boost::re_detail_106501::cpp_regex_traits_base<char> const&, unsigned long) () from /arrow/python/pyarrow/libparquet.so.1\r\n#3 0x00007f4907453663 in boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::do_assign(char const*, char const*, unsigned i\r\nnt) () from /arrow/python/pyarrow/libparquet.so.1\r\n#4 0x00007f49073e8e5d in parquet::ApplicationVersion::ApplicationVersion(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) ()\r\nfrom /arrow/python/pyarrow/libparquet.so.1\r\n#5 0x00007f490735fa00 in _GLOBAL__sub_I_metadata.cc () from /arrow/python/pyarrow/libparquet.so.1\r\n#6 0x00007f490ff7d4f3 in call_init () from /lib64/ld-linux-x86-64.so.2\r\n#7 0x00007f490ff7d5b5 in _dl_init_internal () from /lib64/ld-linux-x86-64.so.2\r\n#8 0x00007f490ff81054 in dl_open_worker () from /lib64/ld-linux-x86-64.so.2\r\n#9 0x00007f490ff7d136 in _dl_catch_error () from /lib64/ld-linux-x86-64.so.2\r\n#10 0x00007f490ff808bc in _dl_open () from /lib64/ld-linux-x86-64.so.2\r\n#11 0x00007f490fb50f9a in dlopen_doit () from /lib64/libdl.so.2\r\n#12 0x00007f490ff7d136 in _dl_catch_error () from /lib64/ld-linux-x86-64.so.2\r\n#13 0x00007f490fb5150d in _dlerror_run () from /lib64/libdl.so.2\r\n#14 0x00007f490fb50f11 in dlopen@@GLIBC_2.2.5 () from /lib64/libdl.so.2\r\n#15 0x00000000004faf6c in _PyImport_GetDynLoadFunc ()\r\n#16 0x00000000004d4b7e in _PyImport_LoadDynamicModule ()\r\n#17 0x00000000004d2227 in ?? ()\r\n#18 0x00000000004d332e in PyImport_ImportModuleLevel ()\r\n#19 0x00000000004af4db in ?? ()\r\n#20 0x0000000000422f8a in PyObject_Call ()\r\n#21 0x00000000004b547b in PyEval_EvalFrameEx ()\r\n#22 0x00000000004ba978 in PyEval_EvalCodeEx ()\r\n#23 0x00000000004baaa2 in PyEval_EvalCode ()\r\n#24 0x00000000004d1048 in PyImport_ExecCodeModuleEx ()\r\n#25 0x00000000004d1396 in ?? ()\n```"
        },
        {
            "created_at": "2018-03-02T15:40:50.862Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2245?focusedCommentId=16383705) by Uwe Korn (uwe):*\nI'm wondering a bit why this is an issue in the `manylinux1` setting but not in the conda packages."
        },
        {
            "created_at": "2018-03-02T21:04:51.090Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2245?focusedCommentId=16384149) by Wes McKinney (wesm):*\nIt looks like this is the same underlying issue as ARROW-2247. "
        },
        {
            "created_at": "2018-03-02T21:07:27.989Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2245?focusedCommentId=16384152) by Wes McKinney (wesm):*\nMight sound crazy but we might want to bundle Boost shared library dependencies in the wheels to avoid the static linking issues"
        },
        {
            "created_at": "2018-03-02T21:32:58.002Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2245?focusedCommentId=16384184) by Uwe Korn (uwe):*\nAlready working on that, including the namespacing of boost inside the wheel so that it doesn't collide with other Boost installations "
        },
        {
            "created_at": "2018-03-04T19:45:48.201Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2245?focusedCommentId=16385319) by Wes McKinney (wesm):*\nIssue resolved by pull request 1692\n<https://github.com/apache/arrow/pull/1692>"
        }
    ]
}