{
    "issue": {
        "title": "[C++][Python] cannot cast float64 array to int64",
        "body": "***Note**: This issue was originally created as [ARROW-12387](https://issues.apache.org/jira/browse/ARROW-12387). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n\u00a0\r\n```java\n\r\n>>> arr = [0.992133801741256, 0.993103448275862]\r\n>>> a = pa.scalar(arr[0], pa.float64())\r\n>>> pc.multiply(a, 1e8).cast(pa.int64())\r\n<pyarrow.Int64Scalar: 99213380>\r\n>>> b = pa.array(arr, pa.float64())\r\n>>> pc.multiply(b, 1e8).cast(pa.int64())\r\nTraceback (most recent call last):\r\n File \"<stdin>\", line 1, in <module>\r\n File \"pyarrow/array.pxi\", line 810, in pyarrow.lib.Array.cast\r\n File \"/usr/local/lib/python3.6/dist-packages/pyarrow/compute.py\", line 281, in cast\r\n return call_function(\"cast\", [arr], options)\r\n File \"pyarrow/_compute.pyx\", line 465, in pyarrow._compute.call_function\r\n File \"pyarrow/_compute.pyx\", line 294, in pyarrow._compute.Function.call\r\n File \"pyarrow/error.pxi\", line 122, in pyarrow.lib.pyarrow_internal_check_status\r\n File \"pyarrow/error.pxi\", line 84, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowInvalid: Float value 9.92134e+07 was truncated converting toint64\r\n```\r\n\u00a0",
        "created_at": "2021-04-14T18:56:36.000Z",
        "updated_at": "2021-05-12T11:07:01.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-05-12T11:07:01.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-15T08:42:24.985Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12387?focusedCommentId=17322011) by Joris Van den Bossche (jorisvandenbossche):*\n`[~ktaras]` for arrays, the default is to use a safe cast, but you can override that by passing `safe=False`:\r\n\r\n```python\n\r\n>>> b = pa.array(arr, pa.float64())\r\n>>> pc.multiply(b, 1e8).cast(pa.int64(), safe=False)\r\n<pyarrow.lib.Int64Array object at 0x7f167414ba00>\r\n[\r\n  99213380,\r\n  99310344\r\n]\r\n```\r\n\r\nNow, that the scalar version does an unsafe cast by default is a bit inconsistent. That's something we should probably fix."
        },
        {
            "created_at": "2021-04-15T11:51:45.522Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12387?focusedCommentId=17322119) by Taras Kuzyo (ktaras):*\n`[~jorisvandenbossche]`, Thank you!\r\n\r\nApparently, I have overlooked the `safe=False` option."
        },
        {
            "created_at": "2021-05-12T11:07:01.145Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12387?focusedCommentId=17343177) by Antoine Pitrou (apitrou):*\nClosing since this is by design and can circumvented."
        }
    ]
}