{
    "issue": {
        "title": "[C++] Generalize thread pool to allow for different queuing strategies / worker loops",
        "body": "***Note**: This issue was originally created as [ARROW-12878](https://issues.apache.org/jira/browse/ARROW-12878). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nRather than duplicate everything in arrow::internal::ThreadPool when creating a work stealing thread pool we should make arrow::internal::ThreadPool a base class that can be extended by specific strategies.\r\n\r\nThis PR is simply to split the thread pool into a base class and a \"SimpleThreadPool\" implementation which uses a single queue of tasks and locks (i.e. what we have today).",
        "created_at": "2021-05-25T23:01:48.000Z",
        "updated_at": "2022-07-12T14:04:27.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-12T14:04:27.540Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12878?focusedCommentId=17565624) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}