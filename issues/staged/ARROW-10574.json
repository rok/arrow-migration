{
    "issue": {
        "title": "[Python][Parquet] Allow collections for 'in' / 'not in' filter (in addition to sets)",
        "body": "***Note**: This issue was originally created as [ARROW-10574](https://issues.apache.org/jira/browse/ARROW-10574). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI would like to enhance partition filters in methods such as:\r\n\r\n`pyarrow.parquet.ParquetDataset(path, filters)`\r\n\r\nI am proposing the below enhancements:\r\n1. for operator \"in\", \"not in\", the value should be any typing.Iteratable (also a container). But currently only set\u00a0is supported while other iteratable, such as list, tuple cannot function correctly. I would like to change it to accept any iteratable.\n1. Enhance the documents about the partition filters.\n   \n   I see there is a new version implemented with\u00a0\n    _ParquetDatasetV2 which already accepts an iterable. So the documentation update is fine for the new version as well.\n    \u00a0",
        "created_at": "2020-11-13T00:45:37.000Z",
        "updated_at": "2020-12-21T16:45:26.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-12-21T16:44:48.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-13T13:02:10.518Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10574?focusedCommentId=17231438) by Joris Van den Bossche (jorisvandenbossche):*\nCould you already push a branch with your changes to GitHub? Seeing the code might help in understanding what you are proposing.\r\n\r\n> for operator \"in\", \"not in\", the value currently must be a set. \r\n\r\nI would think we already support other iterable that support the \"in\" python operator. Do you have an example where it fails? \r\nBut I agree that converting it to a set might be good anyway.\r\n\r\n> I would like to add a 'like' operator which has a semantics of a sql \"like\". Alternatively, a regular expression can be used. I prefer sql like semantics for reasons to achieve sql consistency. \r\n\r\nThe ParquetDataset code is being replaced with a `pyarrow.dataset` based implementation. So any significant enhancement or new feature should probably target this new implementation. Currently, we do not yet support general filter expressions, but there is work ongoing on allowing this (I can't directly find the correct JIRA, but see eg ARROW-10305 for similar discussion)\r\n"
        },
        {
            "created_at": "2020-11-15T20:01:16.148Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10574?focusedCommentId=17232387) by Weiyang Zhao (wyzhao):*\nHi,\u00a0 `[~jorisvandenbossche]`\r\n\r\nJust saw your comments. I don't know where Jira sent me the notification email.\r\n\r\nCurrently if I pass in a filter like this:\r\n\r\n('x', 'in', ['a', 'b'])\r\n\r\nIt will not work because of line 876 in parquet.py:\r\n `if isinstance(f_value, set)`\r\n You see that it only checks 'set'.\r\n\r\nI also enhanced the documents to make it clear.\r\n\r\nI dropped the 'like' enhancement because it is not supported in the cython version and I am unfamiliar with cython.\r\n\r\nI have submitted a pull request. You can see the details there.\r\n\r\nThanks."
        },
        {
            "created_at": "2020-12-21T16:44:48.120Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10574?focusedCommentId=17252960) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 8672\n<https://github.com/apache/arrow/pull/8672>"
        }
    ]
}