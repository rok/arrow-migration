{
    "issue": {
        "title": "[C++] Investigate potential performance improvements for the filter node",
        "body": "***Note**: This issue was originally created as [ARROW-15519](https://issues.apache.org/jira/browse/ARROW-15519). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nRight now some early runs with Arrowbench and the OT PR (https://github.com/apache/arrow/pull/12100) shows that we spend a fair amount of time in TPC-H queries on filter nodes.  There are a few improvements we know could be made to our filtering approach at the moment.  I'm creating this parent issue to help categorize and track those:\r\n\r\n \\* ~~We can use a selection vector in our filters to reduce the amount of materialization needed.  While long term we may want to support a selection vector throughout the exec plan a good start would be to use it when we encounter a chain of filters to avoid excess materialization (e.g. x < 10 && x > 5 && y < 20)~~\r\n \\* If a filter if very selective then we may end up outputting a lot of very small batches.  We could probably hold onto the data at the filter node until we've accumulated enough rows for a decent sized batch.\r\n \\* The filter node is currently creating new thread tasks instead of appending its work onto an existing thread task.\r\n \\* If we have a chain of filters we could potentially use runtime selectivity statistics / estimates to reorder our filters so that the most selective filters are evaluated first.",
        "created_at": "2022-02-01T21:02:30.000Z",
        "updated_at": "2022-02-02T14:28:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}