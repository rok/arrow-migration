{
    "issue": {
        "title": "[C++] Investigate usage of madvise ",
        "body": "***Note**: This issue was originally created as [ARROW-465](https://issues.apache.org/jira/browse/ARROW-465). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn some usecases (e.g. Pandas->Arrow conversion) our main constraint is page faulting not yet accessed pages. \n\nWith `madvise`\u00a0we can indicate our planned actions to the OS and may improve the performance a bit in these cases.",
        "created_at": "2017-01-08T15:41:02.000Z",
        "updated_at": "2019-11-26T01:09:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-11-26T01:09:19.000Z"
    },
    "comments": [
        {
            "created_at": "2019-03-26T14:15:29.189Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-465?focusedCommentId=16801764) by Antoine Pitrou (apitrou):*\nWhat is the context? Memory-mapped files?\r\n\r\nWe could add something more generic. For example:\r\n \\* a `Advise(offset, length, kind)` method to `RandomAccessFile`\r\n \\* a `ReadAhead(length)` method to `InputStream`\r\n\r\n(sidenote: I'm a bit unsatisfied with the `ReadaheadSpooler` facility and would gladly fold it into such a more generic facility)\r\n\r\nThough it doesn't help that we have multiple idioms for reading (return a buffer, read into a user-supplied pointer).\r\n"
        },
        {
            "created_at": "2019-03-30T22:06:10.345Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-465?focusedCommentId=16806002) by Wes McKinney (wesm):*\nWe would need to have a benchmark that exhibits the page faulting behavior. Since this issue was over 2 years ago it is a bit stale"
        },
        {
            "created_at": "2019-03-31T17:11:04.593Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-465?focusedCommentId=16806204) by Uwe Korn (uwe):*\nThe context of this ticket was that I was browsing the `jemalloc` source code and performance traces. We spent a lot time during the builders with repeately allocating new pages when writing to a newly allocated memory segment. With specifying `MADV_WILLNEED` we might reduce the time we wait for new pages. In the end, I want to the OS to allocate all pages I have requested with `(je_)malloc` immediately and not every page on first access (when a TLB miss occurs)."
        },
        {
            "created_at": "2019-03-31T17:15:36.476Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-465?focusedCommentId=16806206) by Antoine Pitrou (apitrou):*\nDoes the OS make the allocation in the background using a separate thread? Otherwise, it seems you're just moving the latency around without hiding it."
        },
        {
            "created_at": "2019-11-26T01:09:19.909Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-465?focusedCommentId=16982022) by Wes McKinney (wesm):*\nClosing for now, can be taken up in future performance explorations"
        }
    ]
}