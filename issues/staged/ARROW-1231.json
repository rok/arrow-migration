{
    "issue": {
        "title": "[C++] Add filesystem / IO implementation for Google Cloud Storage",
        "body": "***Note**: This issue was originally created as [ARROW-1231](https://issues.apache.org/jira/browse/ARROW-1231). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSee example jumping off point\n\nhttps://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/platform/cloud",
        "created_at": "2017-07-17T18:06:19.000Z",
        "updated_at": "2022-02-08T12:53:44.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-02-08T12:51:41.000Z"
    },
    "comments": [
        {
            "created_at": "2019-08-29T12:59:41.999Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=16918592) by Antoine Pitrou (apitrou):*\nJSON API:\r\nhttps://cloud.google.com/storage/docs/json_api/v1/\r\n\r\nC++ Client library:\r\nhttps://googleapis.github.io/google-cloud-cpp/\r\nhttps://googleapis.dev/cpp/google-cloud-storage/latest/\r\n"
        },
        {
            "created_at": "2019-08-29T13:08:14.020Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=16918602) by Antoine Pitrou (apitrou):*\nIt doesn't look like there are any locally-running GCS-compatible servers, or at least I haven't found any..."
        },
        {
            "created_at": "2019-08-29T21:56:44.593Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=16918979) by Wes McKinney (wesm):*\nAh I'm really glad there's an official C++ library now\r\n\r\nhttps://github.com/googleapis/google-cloud-cpp\r\n\r\nNote that this library began after I opened this issue originally so it's good that we waited\r\n\r\nhttps://github.com/googleapis/google-cloud-cpp/graphs/contributors\r\n\r\nProbably this will need to be added to conda-forge. We'll have to have libcurl in our build toolchain also..."
        },
        {
            "created_at": "2020-03-05T20:35:02.745Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17052499) by Lei (Eddy) Xu (eddyxu):*\nHey `[~wesm]` , do we  have plan to implement this now?\r\n\r\nWe are very interested into this feature. "
        },
        {
            "created_at": "2020-03-05T21:01:10.534Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17052520) by Wes McKinney (wesm):*\nI think we need some information about what is the recommended way (fastest, most robust) in C++ to use GCS. `[~brillsp]` or `[~emkornfield]` do you know what is the current state of the art (is it google-cloud-cpp?)"
        },
        {
            "created_at": "2020-03-05T21:28:13.788Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17052531) by Zhuo Peng (brillsp):*\nI don't work on related stuff, but looking at our internal site, google-cloud-cpp seems to be right choice.\r\n\r\nMicah might know more.\r\n\r\n\u00a0\r\n\r\n<https://googleapis.dev/cpp/google-cloud-storage/latest/>\u00a0seems to be the documentation for\u00a0<https://googleapis.github.io/google-cloud-cpp/>\u00a0?"
        },
        {
            "created_at": "2020-03-06T04:16:36.681Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17052739) by Micah Kornfield (emkornfield@gmail.com):*\nI think Zhuo is correct.\u00a0 I've reached out internally to the person I believe to be the owner to confirm."
        },
        {
            "created_at": "2020-03-06T04:26:26.050Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17052756) by Frank Natividad (coderfrank):*\nHi folks,\r\n\r\nI'm confirming that the Cloud Storage library in <https://github.com/googleapis/google-cloud-cpp>\u00a0is the current state of the art.\r\n\r\n\u00a0\r\n\r\nCheers"
        },
        {
            "created_at": "2020-03-06T09:00:42.790Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17053179) by Antoine Pitrou (apitrou):*\nDoes it provide better performance than the S3 endpoint?"
        },
        {
            "created_at": "2020-03-06T21:54:42.933Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17053772) by Frank Natividad (coderfrank):*\nHi Antoine, could you clarify what you mean by better performance than the S3 endpoint?\u00a0"
        },
        {
            "created_at": "2020-03-07T09:15:58.763Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17053954) by Antoine Pitrou (apitrou):*\nDoesn't GCS provide a S3-compatible endpoint? Is it detrimental to use the AWS SDK as opposed to the native GCS APIs?"
        },
        {
            "created_at": "2020-03-07T14:30:20.682Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17054094) by Wes McKinney (wesm):*\nEven if the performance of uploads and downloads is equivalent, I would guess that the SDK provided by the GCP development team will provide the most comprehensive access to GCS's features. And there are utilities (such as parallel uploading [1]) developed with GCS's particular characteristics in mind\r\n\r\n[1]: https://github.com/googleapis/google-cloud-cpp/blob/master/google/cloud/storage/parallel_upload.h#L1131"
        },
        {
            "created_at": "2020-03-10T07:14:38.588Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17055656) by Frank Natividad (coderfrank):*\nThe XML API does exist and compatibility with S3 SDK is available but not for all operations. Not exhaustive, but three things I think about when telling you this:\r\n \\* Permission management with IAM isn't available through the XML API and S3 SDK would need to rely on ACL management. The GCS team aligned with GCP permission management by supporting IAM policies at the Organization/Project/Bucket level. IAM policies is the canonical way to manage permissions on GCP. For example, Uniform Bucket Level Access was introduced to disable ACLs at Bucket and Object level and is required to support Conditional permission policies (IAM Conditions). ACL are still supported but not the canonical permission management and very specific to GCS.\r\n \\* S3 API isn't fully supported through the XML API, for example, S3 multi-part uploads are not supported. Moreover, you'd need to develop around these limitations when you hit them.\r\n \\* The GCS C++ library was design based on experience from user friction from existing libraries in other languages in mind.\r\n\r\nIn this case, I would recommend the GCS C++ library if you're using C++ and Cloud Storage API over the S3 SDK.\r\n\r\nHTH"
        },
        {
            "created_at": "2020-03-10T10:55:13.961Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17055813) by Antoine Pitrou (apitrou):*\nThank you for the explanation. I agree we should use the GCS C++ SDK.\r\nNote to self: there's a standalone GCS-compatible server at https://github.com/fsouza/fake-gcs-server, should be useful for testing."
        },
        {
            "created_at": "2020-03-18T01:41:36.510Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17061300) by Clark Zinzow (clarkzinzow):*\nWhere does this fit in y'all's priority queue at the moment? `[~apitrou]` \u00a0are you planning to take this on?\u00a0 I saw that you did the S3 implementation.\r\n\r\nI'm mostly interested in realizing the benefits of\u00a0ARROW-8031\u00a0in Ray, but if no one plans on taking this issue in the next few weeks, I could try to find a few spare cycles to take on this issue (following the patterns set by Antoine's S3 implementation) and 8031 thereafter."
        },
        {
            "created_at": "2020-03-18T11:16:28.103Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17061636) by Antoine Pitrou (apitrou):*\n`[~clarkzinzow]` You're welcome to take a look."
        },
        {
            "created_at": "2020-03-18T15:56:40.742Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17061849) by Wes McKinney (wesm):*\n`[~clarkzinzow]` note that google-cloud-cpp does not seem to be available in conda-forge yet, so I'm opening a child issue about dealing with that. I don't know anyone else for whom this is a short term priority until later this year so we are happy to help and give advice / code review"
        },
        {
            "created_at": "2020-03-18T18:57:28.814Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17061994) by Clark Zinzow (clarkzinzow):*\n`[~apitrou]` `[~wesm]` \u00a0Great, thanks! Is it safe to say that adding the google-cloud-cpp conda-forge recipe and adding google-cloud-cpp to ThirdPartyToolchain are the only true blockers for adding the GCS external store implementation for Plasma? If that's the case and if this issue isn't of high priority for anyone ATM, then I would probably prefer to work on ARROW-8031\u00a0instead of this issue after ARROW-8147 and ARROW-8148\u00a0are done, if that's acceptable."
        },
        {
            "created_at": "2020-03-18T23:15:39.784Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17062123) by Wes McKinney (wesm):*\n`[~clarkzinzow]` well, adding the thirdparty dependencies is a necessary condition to be able to add a Filesystem implementation that wraps google-cloud-cpp, like \r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/filesystem/s3fs.cc\r\n\r\nIf you want to work on a filesystem implementation for GCS without dealing with the packaging / toolchain issues, you are welcome to do that also. At some point all of this work (the filesystem wrapper and thirdparty toolchain support) has to be done properly so that we can package and deploy the software all the places it needs to go."
        },
        {
            "created_at": "2020-03-19T00:17:14.576Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17062166) by Clark Zinzow (clarkzinzow):*\n`[~wesm]` \u00a0Ah I don't think I was very clear, sorry about that. I'm mostly interested (as an Arrow user) in being able to use GCS as an external store for Plasma, ARROW-8031; I was offering to work on the GCS filesystem implementation issue since I thought that it was a prerequisite for the Plasma external store issue. AFAICT, the only real blockers for working on the external store implementation for Plasma is adding a google-cloud-cpp conda-forge recipe and adding google-cloud-cpp to ThirdPartyToolchain,\u00a0ARROW-8147\u00a0and ARROW-8148; i.e., if those packaging/toolchain issues are broken out as separate from the GCS filesystem issue, then this GCS filesystem implementation is\u00a0_not_ a prerequisite for the external store implementation for Plasma.\r\n\r\nIf that is the case, I'm asking if I (or someone else, if they are interested) could take on the packaging/toolchain issues ARROW-8147\u00a0and ARROW-8148, and once those are finished, I could work on the GCS external store implementation for Plasma.\u00a0 This would leave the much larger effort around the GCS filesystem implementation for later.\r\n\r\nDoes that make sense?\u00a0 And is my judgement of the actual GCS filesystem implementation\u00a0_not_ being a prerequisite for the GCS external store implementation for Plasma correct?"
        },
        {
            "created_at": "2020-03-19T00:39:56.005Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17062175) by Wes McKinney (wesm):*\nPerhaps I'm not understanding ARROW-8031. Are you proposing to use the generic Filesystem API (instead of a GCS implementation thereof) to offload objects from Plasma? If that's the case then I agree. Otherwise if you need to read/write to GCS in particular, without this issue being resolved I'm not sure how you can proceed. "
        },
        {
            "created_at": "2020-03-19T00:56:26.053Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17062188) by Clark Zinzow (clarkzinzow):*\nMaybe I don't have a correct understanding of the external store interface and semantics.\u00a0 It was my impression after looking at the [interface](https://github.com/apache/arrow/blob/master/cpp/src/plasma/external_store.h) and the\u00a0[first pass at an S3 external store implementation\\|#diff-c17d56d3503f18faacf739e160958f6e]\u00a0that essentially only a put and get interface has to be implemented, where the Plasma objects can be put/get to/from GCS buckets as opaque blobs using the C++ GCS client.\u00a0 Am I understanding that correctly?"
        },
        {
            "created_at": "2020-03-19T01:02:47.858Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17062191) by Wes McKinney (wesm):*\nI guess we may be talking past each other. The Arrow C++ build system needs to be informed about how to build and/or link to the Google C++ client libraries. In other words, adding an option to the build system like `-DARROW_GCS=ON` like we currently have `-DARROW_S3=ON`. You are welcome to tackle the problem in any order you wish. I will wait for your pull requests"
        },
        {
            "created_at": "2020-03-19T01:22:10.597Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17062197) by Clark Zinzow (clarkzinzow):*\nSorry for the confusion.\u00a0 My current plan is to tackle the packaging/toolchain issues ARROW-8147\u00a0and ARROW-8148, along with anything else required for the Arrow C++ build system to be able to build and link against the GCP C++ sdk.\u00a0 Once that is working, I'm planning on developing an external store GCS implementation for Plasma, ARROW-8031,\u00a0so that objects can be evicted to GCS.\u00a0 AFAICT, this shouldn't involve much more than implementing the `Put` and `Get` interfaces using the C++ GCS client `WriteObject` and `ReadObject` APIs, respectively."
        },
        {
            "created_at": "2020-04-09T18:03:54.876Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17079627) by Antoine Pitrou (apitrou):*\nLooks like the Python GCS client is unusable for non-default endpoints:\r\nhttps://github.com/googleapis/python-storage/issues/102\r\n"
        },
        {
            "created_at": "2020-05-06T00:35:23.368Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17100358) by Wes McKinney (wesm):*\nI see that TileDB (MIT license) has built a wrapper for GCS that may be a helpful resource whenever this gets implemented in the future\r\n\r\nhttps://github.com/TileDB-Inc/TileDB/blob/dev/tiledb/sm/filesystem/gcs.cc"
        },
        {
            "created_at": "2020-08-09T03:54:27.166Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17173741) by Wenbing Bai (wenbing-bai):*\nHi `[~wesm]` \u00a0is there any plan to support this?"
        },
        {
            "created_at": "2020-08-15T21:28:01.307Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17178381) by Wes McKinney (wesm):*\nWe need a volunteer to build the GCS C++ Filesystem implementation (and associated unit tests). Here's another wrapper which could be used to aid development int his project\r\n\r\nhttps://github.com/BlazingDB/blazingsql/blob/branch-0.15/io/src/FileSystem/private/GoogleCloudStorage_p.cpp"
        },
        {
            "created_at": "2021-09-27T20:12:25.988Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17421006) by Carlos O'Ryan (coryan):*\nHi, by way of introduction, I am the lead [developer](https://github.com/coryan)\u00a0for the GCS C++ SDK (<https://github.com/googleapis/google-cloud-cpp/graphs/contributors>).\r\n\r\n\u00a0\r\n\r\nI am interested in helping with the GCS C++ Filesystem implementation.\u00a0 I will start going through the documentation on how to contribute to the project, that may take me a few days. If there are questions or suggestions in the interim, please do not hesitate to ask.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-09-27T20:46:53.401Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17421022) by Micah Kornfield (emkornfield):*\nHi Carlos, I've added you as a contributor in\u00a0JIRA and assigned the issue to you.\u00a0 Note there is a open pull request for adding CMake dependencies to the project, you might want to check in to see if the author has any intentions on finishing it (they haven't been too responsive) to avoid duplicate work."
        },
        {
            "created_at": "2021-09-28T07:32:19.575Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17421225) by Antoine Pitrou (apitrou):*\n`[~coryan]` Great news! Don't hesitate to ask questions here."
        },
        {
            "created_at": "2021-09-30T13:55:50.220Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17422801) by Carlos O'Ryan (coryan):*\nThanks for the welcome. Here are a few questions:\r\n\r\n- I would prefer to break down this work into smaller PRs. For example, one PR could create the `GCSFileSystem` class but leave most of the functions returning `Status::Unimplemented()`.  I think that makes it easier to review the code. Is that acceptable?\n- Is there a good place for me to read about how to add this new (optional) component to your CI systems?  I assume we would want to test this on a variety of platforms, but so far I have been stumbling through your scripts and I am not sure which ones I should change to test with `ARROW_GCS` enabled, and which ones I should leave alone.\n- It seems that we would want to run an emulator or testbench to verify this filesystem works.  I know of two ([fsouza/fake-gcs-server](https://github.com/fsouza/fake-gcs-server) is mentioned above, we also use [googleapis/storage-testbench](https://github.com/googleapis/storage-testbench)).  Any preference on which one I should use? \n- GCS does not have directories or folders. Maybe confusingly, some of Google's own tools [pretend](https://cloud.google.com/storage/docs/folders) that it does.  Should I try to emulate directories in the filesystem?  Some things are easy to emulate (listing all the objects with a common prefix for example), some things are impossible (the equivalent of `stat(2)` cannot be done as directions are simply \"common prefixes\").  My preference would be to **not** emulate them.\n"
        },
        {
            "created_at": "2021-09-30T14:48:53.248Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17422823) by Antoine Pitrou (apitrou):*\nThanks for the questions.\r\n- Yes, it sounds good to break this down.\n- Hmm, we can help on that once you have the tests working locally :-)\n- Which one is the lightest/easiest to deply and work with? (as an example, we use Minio for S3 testing)\n- Is there a convention for emulating directories? We already do this for S3, as other tools also do."
        },
        {
            "created_at": "2021-09-30T15:20:28.029Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17422845) by Carlos O'Ryan (coryan):*\n> - Yes, it sounds good to break this down.\n> - Hmm, we can help on that once you have the tests working locally\r\n\r\nThanks, I will proceed accordingly.\r\n\r\n> - Which one is the lightest/easiest to deply and work with? (as an example, we use Minio for S3 testing)\r\n\r\nI write `googleapis/storage-testbench` so take what I say with a pinch of salt:\r\n\r\n- `googleapis/storage-testbench` supports both the JSON API and the parts of the XML API that the C++ client library uses.\n- We (the team that maintains the GCS C++ client library) use `googleapis/storage-testbench`.\n- To use `fsouza/fake-gcs-server` we would need to disable the XML API which is a bit uncomfortable.\n- `fsouza/fake-gcs-server` can persist data, `googleapis/storage-testbench` keeps all its data in memory.\n- I imagine both are easy to install and run.  `googleapis/storage-testbench` is Python and can be installed via pip. `fsouza/fake-gcs-server` is golang, it has binaries for several platforms and docker images.\n  \n  I would prefer to use `googleapis/storage-testbench`.\n  \n  > - Is there a convention for emulating directories? We already do this for S3, as other tools also do.\n  \n  I think there is more than one convention.  The most common thing is to pretend that prefixes are directories, separated by `/`. You can ask GCS to list all the objects that start with `foo/bar`, and to only list the prefix for `foo/bar/baz/` if there are multiple objects named `foo/bar/baz/*`.  Where this breaks down is non-recursive listing, this can be surprisingly slow, while recursive listing takes about the same time (basically GCS scans its metadata and skips over the \"subdirectories\", but skipping can take a long time).  It breaks down when you try to `stat(2)` a prefix that does not have a backing object.  Some folks create sentinel objects to represent the directory, but there is no guarantee that reading some dataset created by another tool would contain those sentinels.\n"
        },
        {
            "created_at": "2021-09-30T16:23:16.000Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17422892) by Antoine Pitrou (apitrou):*\n> I would prefer to use googleapis/storage-testbench.\r\n\r\nNo objection from me :-)\r\n\r\n> I think there is more than one convention. The most common thing is to pretend that prefixes are directories, separated by /.\r\n\r\nThis is what we do in our S3 filesystem implementation (and is a common convention there too), so we should probably do the same here.\r\n\r\nI'll add that handling directories is pretty much mandatory for Arrow, otherwise the dataset layer won't be able to read/write partitioned datasets.\r\n\r\n"
        },
        {
            "created_at": "2021-09-30T18:42:09.090Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17422971) by Weston Pace (westonpace):*\nFor directory handling the closest equivalent we have to `stat(2)` is FileInfo and all that we require to be set there is the name of the file.  I imagine a common-prefix implementation would run into trouble with something like CreateDir (which would be a no-op) followed by GetFileInfo on the dir name (which would fail).  For S3 in this case we create an empty object.  If GCS supports empty objects then a common prefix + empty objects pattern might be pretty much the same as what we have for S3.\r\n\r\nNon-recursive listing is, unfortunately, a possibility.  This would be a FIleSelector with recursive set to false.  I don't think we ever do it ourselves but we do allow users to use any arbitrary FileSelector when defining a dataset.  So a user could ask us to read all of the files from the /foo directory non-recursively as a dataset.  I think though that non-recursive directory listing is probably a rarity for dataset implementations.  An inefficient implementation would be a fine starting point (and likely would be fine for quite a while).\r\n\r\nThe most common \"read dataset\" directory operations are \"read a directory recursively\" (using FileSelector from the user).\r\n\r\nFor \"write dataset\" we have to \"read a directory recursively\" (via FileSelector with recursive true), \"delete a directory recursively\" (via DeleteDirContents), and \"create a directory\" (but a no-op here is fine as far as datasets is concerned).\r\n\r\n"
        },
        {
            "created_at": "2021-10-01T07:56:35.330Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17423170) by Sergey Serebryakov (megaserg):*\nHi `[~coryan]`, I have been working on the native GCS implementation as well as of a few months ago. To my understanding, my previous employer is successfully using that implementation internally (probably with a few extra fixes), but it is far from being thoroughly tested. It is based on Arrow 3.0.0 and has only the \"read\" part of the API implemented (so no uploads or deletes).\u00a0I've used fake-gcs-server for the testing and relied on libgoogle_cloud_storage being pre-installed in the system. The implementation also includes the flags like `-DARROW_GCS=ON`\u00a0which I added by full-text search for \"S3\" \ud83d\ude05\r\n\r\nPlease see if you find it useful: <https://github.com/megaserg/arrow/tree/megaserg/add-gcs>\u00a0\r\n\r\nHappy to help with anything!"
        },
        {
            "created_at": "2022-02-08T12:51:08.173Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17488824) by Carlos O'Ryan (coryan):*\nAFAICT, this is now done.  I am going to close this issue, if I missed something, or there is a bug, please feel free to ping me (`@coryan` on GitHub is best) "
        },
        {
            "created_at": "2022-02-08T12:53:28.118Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1231?focusedCommentId=17488826) by Antoine Pitrou (apitrou):*\nThank you `[~coryan]` . Do you have some time to answer the question I asked on https://issues.apache.org/jira/browse/ARROW-12509 ?"
        }
    ]
}