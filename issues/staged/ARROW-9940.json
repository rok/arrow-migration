{
    "issue": {
        "title": "[Rust][DataFusion] Generic \"extension package\" mechanism",
        "body": "***Note**: This issue was originally created as [ARROW-9940](https://issues.apache.org/jira/browse/ARROW-9940). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis came from `[~jorgecarleitao]`'s suggestion on this PR: \r\n https://github.com/apache/arrow/pull/8097/files#r482968858\r\n\r\nThe high level idea is to design and implement an upgrade/ improvement to the DataFusion APIs which allows registering composeable sets of UserDefinedLogicalNode, Logical planning rules and Physical Planning rules for some functionality.\r\n\r\n## The use case:\r\n\r\nYou publish the TopK extension as a (library) crate called datafusion-topk, and I publish a crate datafusion-s3 with another extension.\r\n\r\nA user wants to use both extensions. It installs them by:\r\n\r\n1. adding each crate to Cargo.toml\n1. initialize the default planner with both of them\n1. plan them\n1. execute them\n   I.e. freaking easy!\n   \n   Broadly speaking, this allows the existence of an ecosystem of extensions/user-defined plans: people can share hand-crafted plans and plans can be added as dependencies to the crate and registered to the planner to be used by other people. \ud83e\udd2f\n   \n   This also reduces the pressure of placing everything in DataFusion's codebase: if we offer an API to extend DataFusion in this way, people can just distribute libraries with the extension/user-defined plan without having to go through the decision process of whether X is part of DataFusion's core or not (e.g. a scan of format Y, or a scan over protocol Z).\n   \n   For me, this use case does require an easy way to achieve 2. initialize the default planner with both of them. But again, this PR is definitely a major step in this direction!",
        "created_at": "2020-09-08T10:54:26.000Z",
        "updated_at": "2021-12-16T16:59:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}