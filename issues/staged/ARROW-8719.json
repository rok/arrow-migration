{
    "issue": {
        "title": "Stream data easily- function to convert record batch to streamable format",
        "body": "***Note**: This issue was originally created as [ARROW-8719](https://issues.apache.org/jira/browse/ARROW-8719). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI am currently working on a project that\u00a0 need to send the data in different processes. Instead of storing it in a file, I am using the IPC stream method, storing it into a buffer. When I try to send the data(bytes) through a socket, I loose the data in the client side. ( Which gives me the idea that when i leave the function(create buffer in the server side folder), I loose acces to that data. Can there be an example that explains this. \r\n\r\nAlso, can you implement a function that convert the record batch into the format that can be sent through the socket directly.\r\n\r\n\u00a0\r\n\r\nThe code are in the attachment, one for the server side code and the other for the client side code.\r\n\r\nThank you",
        "created_at": "2020-05-06T17:09:37.000Z",
        "updated_at": "2020-05-06T20:59:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-05-06T20:59:51.000Z"
    },
    "comments": [
        {
            "created_at": "2020-05-06T20:49:53.786Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8719?focusedCommentId=17101183) by Wes McKinney (wesm):*\nJust looking at the client code\r\n\r\n```Java\n\r\n\tint sock;\r\n\tsock = socket(AF_INET, SOCK_STREAM, 0);\r\n\r\n\t//setup an address\r\n  struct sockaddr_in server_address;\r\n\tserver_address.sin_family = AF_INET;\r\n\tserver_address.sin_port = htons(9002);\r\n\tserver_address.sin_addr.s_addr = INADDR_ANY;\r\n\r\n\tconnect(sock, (struct sockaddr *) &server_address, sizeof(server_address));\r\n\r\n\t//send(sock, request, sizeof(request), 0);\r\n\r\n\tGArrowResizableBuffer *data = NULL;\r\n\trecv(sock, &data, garrow_buffer_get_size(GARROW_BUFFER(data)), 0);\r\n\r\n\tgsize data_size = sizeof(data);\r\n\tdisplay_arrow_buffer(GARROW_BUFFER(data), data_size);\r\n```\r\n\r\nThese lines won't do what you want:\r\n\r\n```Java\n\r\nGArrowResizableBuffer *data = NULL;\r\nrecv(sock, &data, garrow_buffer_get_size(GARROW_BUFFER(data)), 0);\r\n```\r\n\r\nYou need to allocate memory before you use `recv` to write data into it. Consider using `garrow_resizable_buffer_new` (you will need to send a buffer size or something from the server so the client knows how much memory to allocate)"
        },
        {
            "created_at": "2020-05-06T20:50:26.690Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8719?focusedCommentId=17101184) by Wes McKinney (wesm):*\nI'm inclined to close this issue because we don't do user support on JIRA, can you please write to user@arrow.apache.org instead? "
        }
    ]
}