{
    "issue": {
        "title": "[C++] Remove ARROW_MEMORY_POOL_DEFAULT macro",
        "body": "***Note**: This issue was originally created as [ARROW-7256](https://issues.apache.org/jira/browse/ARROW-7256). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs mentioned elsewhere in a JIRA I recall, we aren't testing adequately the CMake option for \"no default memory pool\", so it would either be better to require explicit memory pools or pass the default, rather than having a build-time option to set whether a default will be passed",
        "created_at": "2019-11-26T02:22:29.000Z",
        "updated_at": "2020-06-03T15:58:52.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-04-08T22:15:52.000Z"
    },
    "comments": [
        {
            "created_at": "2019-12-04T19:52:10.187Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7256?focusedCommentId=16988157) by Antoine Pitrou (apitrou):*\n`[~emkornfield]` What do you think?"
        },
        {
            "created_at": "2019-12-12T07:55:18.104Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7256?focusedCommentId=16994352) by Micah Kornfield (emkornfield@gmail.com):*\nI'm not sure I have a strong preference.\u00a0 The purist in me, would like to see no default passed, but I feel like that is potentially too big of a breaking change, so maybe convert the macro to always pass a default?"
        },
        {
            "created_at": "2019-12-12T22:45:43.841Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7256?focusedCommentId=16995173) by Wes McKinney (wesm):*\nProbably the easiest thing would be to simply substitute `= default_memory_pool()` where there is currently this macro"
        },
        {
            "created_at": "2020-01-15T03:15:03.616Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7256?focusedCommentId=17015593) by Wes McKinney (wesm):*\nThis was done in https://github.com/apache/arrow/commit/df613bcb6a44a3f7be53faf8d368bf529436c50a"
        },
        {
            "created_at": "2020-04-08T22:15:52.127Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7256?focusedCommentId=17078764) by Krisztian Szucs (kszucs):*\nIssue resolved by pull request 6877\n<https://github.com/apache/arrow/pull/6877>"
        },
        {
            "created_at": "2020-06-03T15:05:04.464Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7256?focusedCommentId=17125034) by Simon Watts (sawatts):*\nCan I just add that we are finding places where the `MemoryPool` is not being propagated to sub-components, due to default constructors created when using `default_memory_pool()`.\r\n\r\nWhile we are currently building against 0.15 we can disable `ARROW_MEMORY_POOL_DEFAULT` (setting it to empty, `-DARROW_MEMORY_POOL_DEFAULT=\"\"`) to find these in header files.\u00a0 Although that by itself is problematic as it leads to default constructors being created - these cannot (easily) be avoided with just `ARROW_MEMORY_POOL_DEFAULT` to pre-process on.\r\n\r\nA better approach has been to replace `default_memory_pool()` for test purposes with an implementation which returns a `MemoryPool`\u00a0which throws when asked to allocate or release memory (and logs a back-trace).\r\n\r\n\u00a0\r\n\r\nOur use-case is to ensure that we can use a custom\u00a0`MemoryPool` which is more performant in our performance critical workflows.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-06-03T15:58:52.979Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7256?focusedCommentId=17125072) by Wes McKinney (wesm):*\nWe have removed this macro. If you want to propose other changes can you please open a new JIRA issue?"
        }
    ]
}