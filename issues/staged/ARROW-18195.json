{
    "issue": {
        "title": "[R][C++] Final value returned by case_when is NA when input has 64 or more values and 1 or more NAs",
        "body": "***Note**: This issue was originally created as [ARROW-18195](https://issues.apache.org/jira/browse/ARROW-18195). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere appears to be a bug when processing an Arrow table with NA values and using `dplyr::case_when`. A reproducible example is below: the output from arrow table processing does not match the output when processing a tibble. If the NA's are removed from the dataframe, then the outputs match.\r\n\r\n\r\n```\n\r\n``` r\r\nlibrary(dplyr)\r\n#> \r\n#> Attaching package: 'dplyr'\r\n#> The following objects are masked from 'package:stats':\r\n#> \r\n#>     filter, lag\r\n#> The following objects are masked from 'package:base':\r\n#> \r\n#>     intersect, setdiff, setequal, union\r\nlibrary(arrow)\r\n#> \r\n#> Attaching package: 'arrow'\r\n#> The following object is masked from 'package:utils':\r\n#> \r\n#>     timestamp\r\nlibrary(assertthat)\r\n\r\nplay_results = c('single', 'double', 'triple', 'home_run')\r\n\r\nnrows = 1000\r\n\r\n# Change frac_na to 0, and the result error disappears.\r\nfrac_na = 0.05\r\n\r\n# Create a test dataframe with NA values\r\ntest_df = tibble(\r\n        play_result = sample(play_results, nrows, replace = TRUE)\r\n    ) %>%\r\n    mutate(\r\n        play_result = ifelse(runif(nrows) < frac_na, NA_character_, play_result)\r\n    )\r\n    \r\n\r\ntest_arrow = arrow_table(test_df)\r\n\r\nprocess_plays = function(df) {\r\n    df %>%\r\n        mutate(\r\n            avg = case_when(\r\n                play_result == 'single' ~ 1,\r\n                play_result == 'double' ~ 1,\r\n                play_result == 'triple' ~ 1,\r\n                play_result == 'home_run' ~ 1,\r\n                is.na(play_result) ~ NA_real_,\r\n                TRUE ~ 0\r\n            )\r\n        ) %>%\r\n        count(play_result, avg) %>%\r\n        arrange(play_result)\r\n}\r\n\r\n# Compare arrow_table reuslt to tibble result\r\nresult_tibble = process_plays(test_df)\r\nresult_arrow = process_plays(test_arrow) %>% collect()\r\nassertthat::assert_that(identical(result_tibble, result_arrow))\r\n#> Error: result_tibble not identical to result_arrow\r\n```\r\n\r\n<sup>Created on 2022-10-29 with [reprex v2.0.2](https://reprex.tidyverse.org)</sup>\r\n```\r\n\r\nI have reproduced this issue both on Mac OS and Ubuntu 20.04.\r\n\r\n\u00a0\r\n```\n\r\n```\r\nr$> sessionInfo()\r\nR version 4.2.1 (2022-06-23)\r\nPlatform: aarch64-apple-darwin21.5.0 (64-bit)\r\nRunning under: macOS Monterey 12.5.1\r\n\r\nMatrix products: default\r\nBLAS: \u00a0 /opt/homebrew/Cellar/openblas/0.3.20/lib/libopenblasp-r0.3.20.dylib\r\nLAPACK: /opt/homebrew/Cellar/r/4.2.1/lib/R/lib/libRlapack.dylib\r\n\r\nlocale:\r\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\r\n\r\nattached base packages:\r\n[1] stats \u00a0 \u00a0 graphics \u00a0grDevices datasets \u00a0utils \u00a0 \u00a0 methods \u00a0 base\r\n\r\nother attached packages:\r\n[1] assertthat_0.2.1 arrow_10.0.0 \u00a0 \u00a0 dplyr_1.0.10\r\n\r\nloaded via a namespace (and not attached):\r\n\u00a0[1] compiler_4.2.1 \u00a0 \u00a0pillar_1.8.1 \u00a0 \u00a0 \u00a0highr_0.9 \u00a0 \u00a0 \u00a0 \u00a0 R.methodsS3_1.8.2 R.utils_2.12.0 \u00a0 \u00a0tools_4.2.1 \u00a0 \u00a0 \u00a0 bit_4.0.4 \u00a0 \u00a0 \u00a0 \u00a0 digest_0.6.29\r\n\u00a0[9] evaluate_0.15 \u00a0 \u00a0 lifecycle_1.0.1 \u00a0 tibble_3.1.8 \u00a0 \u00a0 \u00a0R.cache_0.16.0 \u00a0 \u00a0pkgconfig_2.0.3 \u00a0 rlang_1.0.5 \u00a0 \u00a0 \u00a0 reprex_2.0.2 \u00a0 \u00a0 \u00a0DBI_1.1.2\r\n[17] cli_3.3.0 \u00a0 \u00a0 \u00a0 \u00a0 rstudioapi_0.13 \u00a0 yaml_2.3.5 \u00a0 \u00a0 \u00a0 \u00a0xfun_0.31 \u00a0 \u00a0 \u00a0 \u00a0 fastmap_1.1.0 \u00a0 \u00a0 withr_2.5.0 \u00a0 \u00a0 \u00a0 styler_1.8.0 \u00a0 \u00a0 \u00a0knitr_1.39\r\n[25] generics_0.1.3 \u00a0 \u00a0fs_1.5.2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0vctrs_0.4.1 \u00a0 \u00a0 \u00a0 bit64_4.0.5 \u00a0 \u00a0 \u00a0 tidyselect_1.1.2 \u00a0glue_1.6.2 \u00a0 \u00a0 \u00a0 \u00a0R6_2.5.1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0processx_3.5.3\r\n[33] fansi_1.0.3 \u00a0 \u00a0 \u00a0 rmarkdown_2.14 \u00a0 \u00a0purrr_0.3.4 \u00a0 \u00a0 \u00a0 callr_3.7.0 \u00a0 \u00a0 \u00a0 clipr_0.8.0 \u00a0 \u00a0 \u00a0 magrittr_2.0.3 \u00a0 \u00a0ellipsis_0.3.2 \u00a0 \u00a0ps_1.7.0\r\n[41] htmltools_0.5.3 \u00a0 renv_0.16.0 \u00a0 \u00a0 \u00a0 utf8_1.2.2 \u00a0 \u00a0 \u00a0 \u00a0R.oo_1.25.0\r\n```\r\n```",
        "created_at": "2022-10-29T15:50:35.000Z",
        "updated_at": "2022-10-31T11:06:11.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: R",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-31T11:04:57.926Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18195?focusedCommentId=17626531) by Nicola Crane (thisisnic):*\nThanks for reporting this `[~LMendy]`!  I can confirm that this is reproducible, and I've added an extended reprex below.  It appears that is happens in some very specific circumstances: when there are 65 or more total values on the input column, and at least 1 is an NA value.\r\n\r\n\r\n```r\n\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\n\r\n# Specific conditions where this happens: a table with one NA and 64 or more non-NA values\r\ntest_df = tibble::tibble(x = c(NA, rep(\"foo\", 64)))\r\ntest_arrow = arrow_table(test_df)\r\n\r\n# the non-arrow version; all the final values are 1\r\ntest_df %>%\r\n  mutate(y = case_when(x == 'foo' ~ 1, is.na(x) ~ NA_real_)) %>%\r\n  tail()\r\n#> # A tibble: 6 \u00d7 2\r\n#>   x         y\r\n#>   <chr> <dbl>\r\n#> 1 foo       1\r\n#> 2 foo       1\r\n#> 3 foo       1\r\n#> 4 foo       1\r\n#> 5 foo       1\r\n#> 6 foo       1\r\n\r\n# the arrow version; the final values is NA\r\ntest_arrow %>%\r\n  mutate(y = case_when(x == 'foo' ~ 1, is.na(x) ~ NA_real_)) %>%\r\n  collect() %>%\r\n  tail()\r\n#> # A tibble: 6 \u00d7 2\r\n#>   x         y\r\n#>   <chr> <dbl>\r\n#> 1 foo       1\r\n#> 2 foo       1\r\n#> 3 foo       1\r\n#> 4 foo       1\r\n#> 5 foo       1\r\n#> 6 foo      NA\r\n\r\n# it's fine if there are less than 65 values in the table (i.e. but still contains an NA)\r\ntest_arrow[1:64,] %>%\r\n  mutate(y = case_when(x == 'foo' ~ 1, is.na(x) ~ NA_real_)) %>%\r\n  collect() %>%\r\n  tail()\r\n#> # A tibble: 6 \u00d7 2\r\n#>   x         y\r\n#>   <chr> <dbl>\r\n#> 1 foo       1\r\n#> 2 foo       1\r\n#> 3 foo       1\r\n#> 4 foo       1\r\n#> 5 foo       1\r\n#> 6 foo       1\r\n\r\n# everything is fine when the comparison is being done on doubles and return value is char\r\ntest_df2 = tibble::tibble(x = c(NA, rep(1, 64)))\r\ntest_arrow2 = arrow_table(test_df2)\r\ntest_arrow2 %>%\r\n  mutate(y = case_when(x == 1 ~ \"winning\", is.na(x) ~ NA_character_)) %>%\r\n  collect() %>%\r\n  tail()\r\n#> # A tibble: 6 \u00d7 2\r\n#>       x y      \r\n#>   <dbl> <chr>  \r\n#> 1     1 winning\r\n#> 2     1 winning\r\n#> 3     1 winning\r\n#> 4     1 winning\r\n#> 5     1 winning\r\n#> 6     1 winning\r\n\r\n# also breaks when source value is boolean and target value is double\r\ntest_df3 = tibble::tibble(x = c(NA, rep(TRUE, 64)))\r\ntest_arrow3 = arrow_table(test_df3)\r\ntest_arrow3 %>%\r\n  mutate(y = case_when(x == TRUE ~ 1, is.na(x) ~ NA_real_)) %>%\r\n  collect() %>%\r\n  tail()\r\n#> # A tibble: 6 \u00d7 2\r\n#>   x         y\r\n#>   <lgl> <dbl>\r\n#> 1 TRUE      1\r\n#> 2 TRUE      1\r\n#> 3 TRUE      1\r\n#> 4 TRUE      1\r\n#> 5 TRUE      1\r\n#> 6 TRUE     NA\r\n\r\n# also broken for when target is integer\r\ntest_df4 = tibble::tibble(x = c(NA, rep(TRUE, 64)))\r\ntest_arrow4 = arrow_table(test_df4)\r\ntest_arrow4 %>%\r\n  mutate(y = case_when(x == TRUE ~ 1L, is.na(x) ~ 2L)) %>%\r\n  collect() %>%\r\n  tail()\r\n#> # A tibble: 6 \u00d7 2\r\n#>   x         y\r\n#>   <lgl> <int>\r\n#> 1 TRUE      1\r\n#> 2 TRUE      1\r\n#> 3 TRUE      1\r\n#> 4 TRUE      1\r\n#> 5 TRUE      1\r\n#> 6 TRUE     NA\r\n\r\n# broken for logical to logical\r\ntest_df5 = tibble::tibble(x = c(NA, rep(TRUE, 64)))\r\ntest_arrow5 = arrow_table(test_df5)\r\ntest_arrow5 %>%\r\n  mutate(y = case_when(x == TRUE ~ TRUE, is.na(x) ~ FALSE)) %>%\r\n  collect() %>%\r\n  tail()\r\n#> # A tibble: 6 \u00d7 2\r\n#>   x     y    \r\n#>   <lgl> <lgl>\r\n#> 1 TRUE  TRUE \r\n#> 2 TRUE  TRUE \r\n#> 3 TRUE  TRUE \r\n#> 4 TRUE  TRUE \r\n#> 5 TRUE  TRUE \r\n#> 6 TRUE  NA\r\n```\r\n\r\nCC `[~westonpace]`"
        }
    ]
}