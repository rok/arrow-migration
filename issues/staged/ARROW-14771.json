{
    "issue": {
        "title": "[C++][FlightRPC] Consider exposing Protobuf types",
        "body": "***Note**: This issue was originally created as [ARROW-14771](https://issues.apache.org/jira/browse/ARROW-14771). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor applications working with both Flight and gRPC, where the gRPC service wishes to use Flight types, currently you'll run into conflicts at link time or runtime: libarrow_flight doesn't appear to expose (some?) Protobuf symbols (and our headers don't expose Protobuf definitions), but still registers the definitions in Flight.proto at runtime. Hence, an application that also tries to include and use Flight.proto will run into a runtime conflict. But excluding the application's generated code for Flight.proto leads to a link-time error when some symbols can't be found.\r\n\r\nWe should consider exposing the Protobuf header/symbols from Flight so an application can mix and match. As with some of the other gRPC customization hooks exposed, we should make it clear that this may compromise future compatibility, that you will need to compile & link in a particular manner, and that Flight still isn't declared stable.",
        "created_at": "2021-11-18T18:19:04.000Z",
        "updated_at": "2022-06-24T18:14:32.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: FlightRPC",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-06-24T18:14:32.000Z"
    },
    "comments": [
        {
            "created_at": "2021-12-01T22:29:14.747Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14771?focusedCommentId=17452049) by David Li (lidavidm):*\nSome notes:\r\n \\* The symbol that needs to be exported is `{}descriptor_table_Flight_2eproto{`}, unfortunately adding `\\_\\_attribute\\_\\_((visibility(\"default\")))` and/or adjusting the linker script doesn't help (nm still shows that the resulting symbol is private).\r\n \\* The symbol name is dependent on the import path, i.e. you must import Flight.proto as `{}import \"Flight.proto\"{`}.\r\n \\* How will this work with generators like buf? We need to document how to configure the generator such that it uses Flight.proto for imports but does not generate code for it.\r\n \\* We need to install Flight.pb.h which is a problem\u2026we may have to adjust the import path so the header gets exposed under a reasonable path."
        },
        {
            "created_at": "2022-06-24T18:14:32.458Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14771?focusedCommentId=17558641) by David Li (lidavidm):*\nIssue resolved by pull request 13387\n<https://github.com/apache/arrow/pull/13387>"
        }
    ]
}