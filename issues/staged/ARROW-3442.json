{
    "issue": {
        "title": "[C++] Use dynamic linking for unit tests, ensure coverage working properly with clang",
        "body": "***Note**: This issue was originally created as [ARROW-3442](https://issues.apache.org/jira/browse/ARROW-3442). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSee experience around this in Apache Kudu\r\nhttps://github.com/apache/kudu/commit/48799d3fed53c79a5163fd9c4cd9cbae80a9f2d6",
        "created_at": "2018-10-04T17:18:25.000Z",
        "updated_at": "2018-10-11T21:24:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-10-11T21:24:09.000Z"
    },
    "comments": [
        {
            "created_at": "2018-10-09T15:02:15.186Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3442?focusedCommentId=16643581) by Antoine Pitrou (apitrou):*\nI started looking into this.\r\n- with a modern gcc (gcc 7.3.0 on Ubuntu 18.04), coverage info is generated properly through .so files (but perhaps the gcc version on Travis is too old?)\n- collecting coverage generated with clang needs a small hack: http://logan.tw/posts/2015/04/28/check-code-coverage-with-clang-and-lcov/\n"
        },
        {
            "created_at": "2018-10-09T15:41:29.785Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3442?focusedCommentId=16643651) by Antoine Pitrou (apitrou):*\nOk, it seems coverage works fine with the gcc version on Travis too. See example stats here:\r\nhttps://travis-ci.org/pitrou/arrow/jobs/439186839#L3865\r\n\r\nI think the reference in CMakeLists.txt to https://stackoverflow.com/questions/28164543/using-gcov-flush-within-a-library-doesnt-force-the-other-modules-to-yield-gc is a red herring: that SO question is about the case where you want to cover a daemon that gets abruptly killed. When a test file exits gracefully, coverage info seems flushed properly for all compilation units."
        },
        {
            "created_at": "2018-10-09T15:57:03.462Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3442?focusedCommentId=16643670) by Wes McKinney (wesm):*\nSee the llvm gcov wrapper in Kudu https://github.com/apache/kudu/blob/master/build-support/llvm-gcov-wrapper. I think we should use clang for the coverage, since Clang also gives us higher quality warning checks"
        },
        {
            "created_at": "2018-10-09T15:59:26.636Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3442?focusedCommentId=16643672) by Antoine Pitrou (apitrou):*\nWe already use clang in another CI matrix entries, though, so we may keep gcc for coverage if it works."
        },
        {
            "created_at": "2018-10-09T17:39:17.712Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3442?focusedCommentId=16643793) by Antoine Pitrou (apitrou):*\nPARQUET-1420 will probably be a dependency for this."
        },
        {
            "created_at": "2018-10-10T13:49:01.858Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3442?focusedCommentId=16644978) by Wes McKinney (wesm):*\nI think we can use dynamic linking for all unit tests that do not require access to non-exported symbols. If there are couple unit tests that use static linking I think that's ok"
        },
        {
            "created_at": "2018-10-10T14:42:42.009Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3442?focusedCommentId=16645066) by Antoine Pitrou (apitrou):*\nI guess that's a good interim compromise, if I manage to make it succeed :)"
        },
        {
            "created_at": "2018-10-11T21:24:09.993Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3442?focusedCommentId=16647048) by Wes McKinney (wesm):*\nIssue resolved by pull request 2744\n<https://github.com/apache/arrow/pull/2744>"
        }
    ]
}