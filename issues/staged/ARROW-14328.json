{
    "issue": {
        "title": "[Java] Request for enhancements to BufferAllocator.close()",
        "body": "***Note**: This issue was originally created as [ARROW-14328](https://issues.apache.org/jira/browse/ARROW-14328). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe are using Arrow in a production environment and running into some issues with memory allocation. Specifically, we would like to be able to call `BufferAllocator.close()` and have that clean up the allocated memory even if there are existing data objects using it, rather than the method throwing an exception upon seeing that the allocator is still in use. Are there any plans to add support for releasing memory on demand?\u00a0",
        "created_at": "2021-10-14T22:07:26.000Z",
        "updated_at": "2022-04-08T12:32:48.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-10-15T04:19:06.922Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14328?focusedCommentId=17429107) by Hongze Zhang (zhztheplayer):*\nA cleanup can be done at least by caching the allocated buffers and close them manually before allocator is closed, if you want to have a solution immediately based on current Arrow version.\r\n\r\nOr I have a personal dev branch that tries to add leak detector/handler to Arrow Java, the branch includes a subfunction that clean all allocated buffers on BufferAllocator.close(). Although it works only on root allocator.\r\n\r\n<https://github.com/zhztheplayer/arrow-1/commits/wip-chunk-cleaner>\r\n\r\nSee an example UT:\r\n\r\n<https://github.com/zhztheplayer/arrow-1/blob/49bb9d39d64caef9558ef8f6879aa391e74d205a/java/memory/memory-core/src/test/java/org/apache/arrow/memory/TestMemoryChunkCleaner.java#L244-L263>"
        }
    ]
}