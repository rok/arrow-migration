{
    "issue": {
        "title": "[C++] Naive spillover implementation for join",
        "body": "***Note**: This issue was originally created as [ARROW-14163](https://issues.apache.org/jira/browse/ARROW-14163). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA join is a pipeline breaker.  I believe the proposed join operators assume that the data can fit into memory and queue all incoming batches.  For example, if I understand correctly, https://github.com/apache/arrow/pull/11150 queues the right side until the left side had finished.\r\n\r\nThere are many clever and interesting ways that this can be optimized  (divide & conquer, recursive query, prioritize reading the left side and pause the right side read).  This issue is intentionally not clever or interesting.\r\n\r\nInstead, I think it would be good to take advantage of this opportunity to start fleshing out our spillover capabilities.  A very simplistic implementation could be a standalone node which has 2 inputs and 2 outputs.  The node queues up all incoming data on the \"right\" input and lets the \"left\" input pass through.  Then, when the left input has finished the node will release the right input.\r\n\r\nThis node could then implement a basic spillover mechanism (e.g. IPC to disk) and start to flesh out the abstractions that we will eventually want to handle different spillover strategies  (abort on spill, spill to disk, and spill to s3 are all I can think of at the moment).",
        "created_at": "2021-09-29T03:53:59.000Z",
        "updated_at": "2022-05-24T03:32:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-05-24T03:32:22.000Z"
    },
    "comments": [
        {
            "created_at": "2022-05-24T03:32:22.630Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14163?focusedCommentId=17541247) by Weston Pace (westonpace):*\nIt appears this will be addressed by ARROW-16389"
        }
    ]
}