{
    "issue": {
        "title": "[Rust] Easier random access to DictionaryArray keys and values",
        "body": "***Note**: This issue was originally created as [ARROW-8383](https://issues.apache.org/jira/browse/ARROW-8383). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently it's not that clear how to acces DictionaryArray keys and values using random indices.\r\n\r\nThe `DictionaryArray::keys` method exposes an Iterator with an `nth` method, but this requires a mut reference and feels a little bit out of place compared to other methods of accessing arrow data.\r\n\r\nAnother alternative seems to be to use the `From<ArrayDataRef> for PrimitiveArray<T>` conversion like so `let keys : Int16Array = dictionary_array.data().into()`. This seems to work fine but is not easily discoverable and also needs to be done outside of any loops for performance reasons.\r\n\r\nI'd like methods on `DictionaryArray` to directly get the key at some index\r\n\r\n```\r\n pub fn key(&self, i: usize) -> &K\r\n```\r\n\r\nIdeally I'd also like an easier way to directly access values at some index, at least when those are primitive or string types.\r\n\r\n```\r\npub fn value(&self, i: usize) -> &T\r\n```\r\n\r\nI'm not sure how or if that would be possible to implement with rust generics.\r\n\r\n\u00a0",
        "created_at": "2020-04-09T14:35:30.000Z",
        "updated_at": "2020-10-01T11:56:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-08-31T14:26:38.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-26T20:11:02.384Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8383?focusedCommentId=17185450) by J\u00f6rn Horstmann (jhorstmann):*\nSo I found out that the alternative/workaround\r\n```java\n\r\nlet keys : Int16Array = dictionary_array.data().into()\r\n```\r\nDoes not really work that well because the `data_type()` function of the resulting primitive array would still return `DataType::Dictionary` which can lead to problems later on.\r\n\r\nI propose adding a function\r\n```Java\n\r\npub fn keys_array(&self) -> PrimitiveArray<K>\r\n```\r\nWhich constructs a primitive array around a ArrayData object containing the data type of the key."
        },
        {
            "created_at": "2020-08-31T14:26:38.993Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8383?focusedCommentId=17187768) by Paddy Horan (paddyhoran):*\nIssue resolved by pull request 8063\n<https://github.com/apache/arrow/pull/8063>"
        }
    ]
}