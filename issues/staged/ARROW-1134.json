{
    "issue": {
        "title": "[C++] Allow C++/CLI projects to build with Arrow\u200b",
        "body": "***Note**: This issue was originally created as [ARROW-1134](https://issues.apache.org/jira/browse/ARROW-1134). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, the inclusion of <mutex> in some of Arrow's C++ headers prevents C++/CLI code from building against it.\n\nFrom a C++/CLI project:\n\n#include <arrow/io/file.h>\n...\n\n\"#error directive: <mutex> is not supported when compiling with /clr or /clr:pure.\"\n\nThis could be patched by optionally relying on Boost's mutex/lock_guard instead of std, or not exposing the #include <mutex> publically.",
        "created_at": "2017-06-21T15:55:09.000Z",
        "updated_at": "2017-10-25T13:08:48.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-10-25T13:08:44.000Z"
    },
    "comments": [
        {
            "created_at": "2017-06-21T16:15:08.164Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16057764) by Uwe Korn (uwe):*\n`[~tobyshaw]` I would be in favour here to not expose the `#include <mutex>` publicly. This won't be straightforward as you would need to write private implementations then for some of the classes. Alternatively in some cases, we probably could implement functions without a mutex, e.g. https://github.com/apache/arrow/blob/master/cpp/src/arrow/io/memory.cc#L152 could be refactored to be lock-free. Can you make a patch for that?\n\nIs there a list showing what is disallowed in C++/CLI?"
        },
        {
            "created_at": "2017-06-21T16:38:14.808Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16057806) by Toby Shaw (tobyshaw):*\nI agree that is probably the most sensible way to fix this.\n\nAs for the list, sadly I don't believe there exists one (if there is I would love to know about it). It's a fair point that simply hiding the mutex includes might not necessarily resolve all of the restrictions on C++/CLI. Having said that, I locally resolved the mutex issue by using Boost's headers instead, and there was one complaint about a nullptr (fixed by replacing it with NULL), and after that it worked fine. Of course I haven't touched the entire Arrow API, so certainly more digging might be needed.\n\n"
        },
        {
            "created_at": "2017-06-21T18:48:47.919Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16058015) by Uwe Korn (uwe):*\nIt would be nice if we would have a compile check in our AppVeyor CI build that tests if you can use the Arrow API in C++/CLI.\nNote that you should be able to include all public Arrow headers in your code by `#include <arrow/api.h>`"
        },
        {
            "created_at": "2017-06-21T21:48:18.245Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16058315) by Wes McKinney (wesm):*\nI'm OK with hiding mutexes in private implementations where needed"
        },
        {
            "created_at": "2017-06-22T12:56:01.984Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16059300) by Toby Shaw (tobyshaw):*\n`[~xhochy]` Somewhat tangential, but I'm not sure where else to post this.\n\nYou mention all public Arrow headers can be included via #include <arrow/api.h>. Unless I'm mistaken, this doesn't seem to include arrow/io/file.h, which is included in parquet-cpp, see: <https://github.com/apache/parquet-cpp/blob/master/src/parquet/file/reader.cc#L26>. Should parquet depend on non-public Arrow headers?"
        },
        {
            "created_at": "2017-06-22T13:19:32.068Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16059341) by Wes McKinney (wesm):*\nThat's an artifact of that fact that libarrow used to be 3 libraries (libarrow/libarrow_io/libarrow_ipc). We should clean up the \"api.h\" files"
        },
        {
            "created_at": "2017-06-22T13:47:44.782Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16059417) by Toby Shaw (tobyshaw):*\nI mentioned earlier about C++ CLI complaining about nullptr usage. C++ CLI already had a nullptr keyword when C++11 introduced its own. This leads to incompatibilities when building with native projects which use nullptrs in header files.\n\nAnnoyingly, the nullptrs which exist in header files are as default arguments, which need to live in headers. The recommended fix is to use __nullptr instead of nullptr, but I'm not sure if that is valid C++ outside of Visual C++\n\n\n(All these changes also apply to parquet-cpp)"
        },
        {
            "created_at": "2017-06-22T13:53:03.216Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16059424) by Wes McKinney (wesm):*\nIs there some way to detect C++CLI with an ifdef?"
        },
        {
            "created_at": "2017-06-22T13:57:07.090Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16059432) by Toby Shaw (tobyshaw):*\n__cplusplus_cli seems to work, I'll do that."
        },
        {
            "created_at": "2017-07-17T17:36:49.751Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16090148) by Wes McKinney (wesm):*\n`[~tobyshaw]` marked for 0.6.0. Would you be able to submit a patch? "
        },
        {
            "created_at": "2017-10-25T13:08:44.461Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1134?focusedCommentId=16218587) by Wes McKinney (wesm):*\nIssue resolved by pull request 1228\n<https://github.com/apache/arrow/pull/1228>"
        }
    ]
}