{
    "issue": {
        "title": "[C++] ORC link failure related to zstd",
        "body": "***Note**: This issue was originally created as [ARROW-12582](https://issues.apache.org/jira/browse/ARROW-12582). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAfter updating to the last version of the codebase I now seem to be unable to build libarrow anymore.\r\n\r\n\r\n```java\n\r\nUndefined symbols for architecture x86_64:\r\n  \"_ZSTD_compressBound\", referenced from:\r\n      orc::ZSTDCompressionStream::estimateMaxCompressionSize() in liborc.a(Compression.cc.o)\r\n  \"_ZSTD_compressCCtx\", referenced from:\r\n      orc::ZSTDCompressionStream::doBlockCompression() in liborc.a(Compression.cc.o)\r\n  \"_ZSTD_createCCtx\", referenced from:\r\n      orc::ZSTDCompressionStream::init() in liborc.a(Compression.cc.o)\r\n  \"_ZSTD_createDCtx\", referenced from:\r\n      orc::ZSTDDecompressionStream::init() in liborc.a(Compression.cc.o)\r\n  \"_ZSTD_decompressDCtx\", referenced from:\r\n      orc::ZSTDDecompressionStream::decompress(char const*, unsigned long long, char*, unsigned long) in liborc.a(Compression.cc.o)\r\n  \"_ZSTD_freeCCtx\", referenced from:\r\n      orc::ZSTDCompressionStream::end() in liborc.a(Compression.cc.o)\r\n  \"_ZSTD_freeDCtx\", referenced from:\r\n      orc::ZSTDDecompressionStream::end() in liborc.a(Compression.cc.o)\r\nld: symbol(s) not found for architecture x86_64\r\n```\r\n\r\n\r\nFrom what I can see, `zstd` was successfully enabled and built\r\n\r\n\r\n```java\n\r\n./orc_ep-prefix/src/orc_ep-build/zstd_ep-prefix/src/zstd_ep-build/lib/libzstd.pc\r\n./orc_ep-prefix/src/orc_ep-build/zstd_ep-prefix/src/zstd_ep-build/lib/libzstd.a\r\n./orc_ep-prefix/src/orc_ep-build/zstd_ep-prefix/src/zstd_ep-build/lib/libzstd.1.dylib\r\n./orc_ep-prefix/src/orc_ep-build/zstd_ep-prefix/src/zstd_ep-build/lib/libzstd.1.4.5.dylib\r\n./orc_ep-prefix/src/orc_ep-build/zstd_ep-prefix/src/zstd_ep-build/lib/libzstd.dylib\r\n./orc_ep-prefix/src/orc_ep-build/zstd_ep-prefix/src/zstd_ep-build/zstdConfig.cmake\r\n```\r\n\r\nbut I don't see it getting linked anywhere in the command that generates that error\r\n\r\n```java\n\r\n/usr/local/bin/ccache /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -Qunused-arguments -fcolor-diagnostics -ggdb -O0  -Wall -Wno-unknown-warning-option -Wno-pass-failed -stdlib=libc++ -msse4.2  -g -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names  src/arrow/adapters/orc/CMakeFiles/arrow-orc-adapter-test.dir/adapter_test.cc.o -o build/debug/arrow-orc-adapter-test  -Wl,-rpath,/Users/amol/wrk/ursa/arrow/cpp/build/debug -Wl,-rpath,/usr/local/lib  orc_ep-install/lib/liborc.a  build/debug/libarrow_testing.500.0.0.dylib  build/debug/libarrow.500.0.0.dylib  googletest_ep-prefix/lib/libgtest_maind.dylib  googletest_ep-prefix/lib/libgtestd.dylib  /usr/local/lib/libsnappy.dylib  /usr/local/Cellar/lz4/1.9.3/lib/liblz4.dylib  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/lib/libz.tbd  orc_ep-install/lib/liborc.a  /usr/local/lib/libprotobuf.dylib  awssdk_ep-install/lib/libaws-cpp-sdk-identity-management.a  awssdk_ep-install/lib/libaws-cpp-sdk-sts.a  awssdk_ep-install/lib/libaws-cpp-sdk-cognito-identity.a  awssdk_ep-install/lib/libaws-cpp-sdk-s3.a  awssdk_ep-install/lib/libaws-cpp-sdk-core.a  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/lib/libcurl.tbd  /usr/local/opt/openssl@1.1/lib/libssl.dylib  /usr/local/opt/openssl@1.1/lib/libcrypto.dylib  awssdk_ep-install/lib/libaws-c-event-stream.a  awssdk_ep-install/lib/libaws-checksums.a  awssdk_ep-install/lib/libaws-c-common.a  -pthread  -lpthread  -framework CoreFoundation  utf8proc_ep-install/lib/libutf8proc.a  /usr/local/lib/libre2.9.0.0.dylib  jemalloc_ep-prefix/src/jemalloc_ep/dist//lib/libjemalloc_pic.a\r\n```\r\n",
        "created_at": "2021-04-28T10:05:16.000Z",
        "updated_at": "2021-05-20T09:34:13.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-05-20T09:34:13.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-28T10:09:25.195Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12582?focusedCommentId=17334630) by Alessandro Molina (amol-):*\nFYI,\r\n\r\nI was able to make it build by manually adding `orc_ep-prefix/src/orc_ep-build/zstd_ep-prefix/src/zstd_ep-build/lib/libzstd.a` to the `c++` command, which seems to confirm the lack of linking to the library."
        },
        {
            "created_at": "2021-04-28T10:14:21.649Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12582?focusedCommentId=17334634) by Alessandro Molina (amol-):*\ngot a full passing build by manually adding `libzstd.a` to `LINK_LIBRARIES` in `ninja.build` for `build/debug/arrow-orc-adapter-test` target"
        },
        {
            "created_at": "2021-05-20T09:33:55.698Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12582?focusedCommentId=17348183) by Alessandro Molina (amol-):*\nClosing issue as it has hasn't appeared anymore. In case someone faces it again we can recover the issue and PR."
        }
    ]
}