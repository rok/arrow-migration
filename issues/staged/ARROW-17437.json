{
    "issue": {
        "title": "[R][C++] Scalar UDFs don't actually deal with scalars",
        "body": "***Note**: This issue was originally created as [ARROW-17437](https://issues.apache.org/jira/browse/ARROW-17437). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nNoted while testing out UDFs in R. I was wrapping a `system()` call in a UDF to shell out and capture the stdout for each value in the data, but I ended up getting the same result for all rows. After some exploration, I figured out that the problem was that the data going into the UDF is actually a vector, so unless the R UDF function is properly vectorized, you'll get unexpected data. \r\n\r\nHere's an example that illustrates:\r\n\r\n```Java\n\r\nregister_scalar_function(\r\n  \"test\", \r\n  function(context, x) paste(x, collapse=\",\"), \r\n  utf8(), \r\n  utf8(), \r\n  auto_convert=TRUE\r\n)\r\n\r\nTable$create(x = c(\"a\", \"b\", \"c\")) |>\r\n  transmute(test(x)) |>\r\n  collect()\r\n\r\n# # A tibble: 3 \u00d7 1\r\n#   `test(x)`\r\n#   <chr>    \r\n# 1 a,b,c    \r\n# 2 a,b,c    \r\n# 3 a,b,c    \r\n```\r\n\r\nBasically, the UDF gets the chunk of data and evaluates to return a Scalar, which gets recycled for all rows.\r\n",
        "created_at": "2022-08-16T18:47:33.000Z",
        "updated_at": "2022-08-17T18:11:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: R",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-08-17T18:11:28.810Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17437?focusedCommentId=17580926) by Weston Pace (westonpace):*\nIs this a documentation problem or are you expecting different behavior?\r\n\r\nA \"scalar function\" is a stateless function that produces exactly one output for each row.  It is one categorization of functions alongside \"aggregate function\" (collection of multiple functions which work together to produce a single value for all rows), \"hash aggregate function\" (similar to aggregate but the first (maybe last?) column is the group id and it produces one value per group id), \"table function\" (produces 0-N values for each row), \"window function\" (I don't know the semantics here yet but it gets to expect a certain order to the input and is not stateless), etc.\r\n\r\nI do not like the term \"scalar function\" because at no point does a \"scalar\" (single-valued item) need to be involved.  However, this appears to be a somewhat established term in the literature:\r\n\r\nhttps://docs.snowflake.com/en/sql-reference/functions.html\r\nhttps://substrait.io/expressions/scalar_functions/\r\n\r\nEach input item might be a scalar and it might be a vector.  The input items could all be vectors.  A UDF should really be ready to handle all cases.  For example FOO(5, [1, 1, 1]) should yield the same thing as FOO([5, 5, 5], 1) and the same thing as FOO([5, 5, 5], [1, 1, 1]).\r\n\r\nIt's actually impossible for all input items to be scalars so a function doesn't technically have to handle that case.\r\n\r\nI suspect R's UDF integration could maybe simplify things here.  For example, it could do something like (python pseudocode):\r\n\r\n```\n\r\noutput = []\r\nfor row_idx in range(context.batch_length):\r\n  row = []\r\n  for arg_idx in range(args):\r\n    if is_scalar(arg_idx):\r\n      row[arg_idx] = args[arg_idx].value\r\n    else:\r\n      row[arg_idx] = args[arg_idx].values[row_idx]\r\n  output[row_idx] = user_function(row)\r\n```\r\n\r\nThis would make it very easy to write functions that are pure R but it would kill performance if the goal was instead to link to some other \"R library that wraps C++ functions that work on Arrow data\" so I think both cases will be needed."
        }
    ]
}