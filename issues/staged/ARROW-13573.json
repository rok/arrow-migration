{
    "issue": {
        "title": "[C++] Support dictionaries directly in case_when kernel",
        "body": "***Note**: This issue was originally created as [ARROW-13573](https://issues.apache.org/jira/browse/ARROW-13573). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\ncase_when (and other similar kernels) currently dictionary-decode inputs, then operate on the decoded values. This is both inefficient and unexpected. We should instead operate directly on dictionary indices.\r\n\r\nOf course, this introduces more edge cases. If the dictionaries of inputs do not match, we have the following choices:\r\n1. Raise an error.\n1. Unify the dictionaries.\n1. Use one of the dictionaries, and raise an error if an index of another dictionary cannot be mapped to an index of the chosen dictionary.\n1. Use one of the dictionaries, and emit null if an index of another dictionary cannot be mapped to an index of the chosen dictionary. (This is what base dplyr if_else does with factors.)\n   \n   All of these options are reasonable, so we should introduce an options struct. We can implement #3 and #4 at first (to cover R); #2 isn't strictly necessary, as the user can unify the dictionaries manually first, but it may be more efficient to do it this way. Similarly, #1 isn't strictly necessary.\n   \n#3 and #4 are justifiable (beyond just \"it's what R does\") since users may filter down disjoint dictionaries into a set of common values and then expect to combine the remaining values with a kernel like case_when.\r\n\r\nAs described on [GitHub](https://github.com/apache/arrow/pull/10724#discussion_r682671015).",
        "created_at": "2021-08-05T14:29:25.000Z",
        "updated_at": "2021-09-29T19:49:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-09-21T11:08:16.000Z"
    },
    "comments": [
        {
            "created_at": "2021-08-05T14:30:10.898Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13573?focusedCommentId=17394062) by David Li (lidavidm):*\nAlso, we can use the 'fast' approach for dictionaries (being able to write into slices, using preallocated outputs as implemented for numeric inputs, as opposed to the builder-based approach in ARROW-13222 for variable-width types) though we'll want to support nested dictionaries too (lists of dictionaries and such)."
        },
        {
            "created_at": "2021-09-21T11:08:16.132Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13573?focusedCommentId=17418045) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 11022\n<https://github.com/apache/arrow/pull/11022>"
        }
    ]
}