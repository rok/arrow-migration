{
    "issue": {
        "title": "[C++] Add pretty printing support for gdb",
        "body": "***Note**: This issue was originally created as [ARROW-11348](https://issues.apache.org/jira/browse/ARROW-11348). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nParsing the GDB output is error prone and can take considerable time.\u00a0 Also, some information is difficult or non-intuitive to get to (e.g. the name of a data type).\u00a0 We should add [GDB pretty printers](https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing-API.html#Pretty-Printing-API) to improve the debug workflow for developers.\u00a0 This could assist not just Arrow developers but also developers using the Arrow C++ libs.",
        "created_at": "2021-01-22T16:46:11.000Z",
        "updated_at": "2022-08-27T14:41:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-01-20T14:58:11.000Z"
    },
    "comments": [
        {
            "created_at": "2021-01-22T16:52:19.706Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11348?focusedCommentId=17270269) by Weston Pace (westonpace):*\nI've made a first pass at this which improves things considerably.\u00a0 I will keep improving upon this and adding new information / features as I debug and hopefully these scripts will be robust enough to merge at some point.\u00a0 If anyone is interested in helping develop with these they are located here: <https://github.com/westonpace/arrow/tree/feature/gdb-pretty-printers>\r\n\r\nTo use the pretty printers you will need something like this in your .gdbinit\r\n\r\n\u00a0\r\n```java\n\r\npython\r\nfrom pathlib import Pathdef load_file(gdb_dir, filename):\r\n  fullpath = str(gdb_dir / filename)\r\n  print(f'Activating pretty printer {fullpath}')\r\n  gdb.execute(f'source {fullpath}')dir_ = Path('.').absolute()\r\nwhile True:\r\n  gdb_dir = dir_ / 'dev' / 'gdb'\r\n  if gdb_dir.exists():\r\n    print(f'Activating pretty printers found at {gdb_dir}')\r\n    load_file(gdb_dir, 'find_stl.py')\r\n    load_file(gdb_dir, 'pretty_printers.py')\r\n    load_file(gdb_dir, 'commands.py')\r\n    break\r\n  if dir_ == Path('/'):\r\n    print(f'Could not locate pretty printers')\r\n    break\r\n  dir_ = dir_.parent\r\nend\r\n\r\n```\r\nThis script will find the printers as long as you are in the arrow directory or a subdirectory when you run gdb.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nThere is also a utility to try and find the STL pretty printers.\u00a0 These are found using conda so you will need to be in a conda environment with the gxx_linux-64 package installed to find them.\r\n\r\n\u00a0\r\n\r\nThere is also a utility command `parr` which takes an \"expression\" and will attempt to use one of the arrow pretty print utilities to print the result of the expression.\r\n\r\n\u00a0\r\n\r\nExample commands:\r\n\r\n\u00a0\r\n```java\n\r\np *by.data_\r\np (*(by.data())).child_data\r\np *((*(by.data())).child_data[0])\r\np (*((*(by.data())).child_data[0])).buffers\r\np *((*((*(by.data())).child_data[0])).buffers[1])\r\np *((*((*(by.data())).child_data[0])).buffers[2])\r\nparr by\r\n```\r\nOutput with pretty printers:\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n```java\n\r\n(gdb) $1 = ArrayData (type=DT(\"struct<a: string, b: int32>\") length=8 offset=0 buffers=0x555555715f68 child_data=0x555555715f80)\r\n(gdb) $2 = std::vector of length 2, capacity 2 = {std::shared_ptr<arrow::ArrayData> (use count 2, weak count 0) = {get() = 0x555555713ff0}, std::shared_ptr<arrow::ArrayData> (use count 2, weak count 0) = {\r\n    get() = 0x555555714070}}\r\n(gdb) $3 = ArrayData (type=DT(\"string\") length=8 offset=0 buffers=0x555555714018 child_data=0x555555714030)\r\n(gdb) $4 = std::vector of length 3, capacity 3 = {std::shared_ptr<arrow::Buffer> (empty) = {get() = 0x0}, std::shared_ptr<arrow::Buffer> (use count 1, weak count 0) = {get() = 0x5555556a5b00}, \r\n  std::shared_ptr<arrow::Buffer> (use count 1, weak count 0) = {get() = 0x5555556eee30}}\r\n(gdb) $5 = Buffer (size=36 capacity=64 data_addr=0x7ffff4209400 \"\") = {x00, x00, x00, x00, x02, x00, x00, x00, x04, x00, x00, x00, x07, x00, x00, x00, x09, x00, x00, x00, x0c, x00, x00, x00, x0e, x00, x00, x00, x10, \r\n  x00, x00, x00, x13, x00, x00, x00}\r\n(gdb) $6 = Buffer (size=19 capacity=64 data_addr=0x7ffff4209080 \"exexwhyexwhyexexwhy\") = {x65, x78, x65, x78, x77, x68, x79, x65, x78, x77, x68, x79, x65, x78, x65, x78, x77, x68, x79}\r\n(gdb)   -- is_valid: all not null\r\n  -- child 0 type: string\r\n    [\r\n      \"ex\",\r\n      \"ex\",\r\n      \"why\",\r\n      \"ex\",\r\n      \"why\",\r\n      \"ex\",\r\n      \"ex\",\r\n      \"why\"\r\n    ]\r\n  -- child 1 type: int32\r\n    [\r\n      0,\r\n      0,\r\n      0,\r\n      1,\r\n      0,\r\n      1,\r\n      0,\r\n      1\r\n    ]\r\n```\r\nOutput without pretty printers:\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n```java\n\r\n(gdb) $1 = (std::__shared_ptr_access<arrow::ArrayData, (__gnu_cxx::_Lock_policy)2, false, false>::element_type &) @0x555555715f10: {\r\n  type = {<std::__shared_ptr<arrow::DataType, (__gnu_cxx::_Lock_policy)2>> = {<std::__shared_ptr_access<arrow::DataType, (__gnu_cxx::_Lock_policy)2, false, false>> = {<No data fields>}, _M_ptr = \r\n    0x5555556eee70, _M_refcount = {_M_pi = 0x5555556eee60}}, <No data fields>}, length = 8, null_count = {<std::__atomic_base<long>> = {static _S_alignment = 8, _M_i = 0}, <No data fields>}, \r\n  offset = 0, buffers = {<std::_Vector_base<std::shared_ptr<arrow::Buffer>, std::allocator<std::shared_ptr<arrow::Buffer> > >> = {\r\n      _M_impl = {<std::allocator<std::shared_ptr<arrow::Buffer> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<arrow::Buffer> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<arrow::Buffer>, std::allocator<std::shared_ptr<arrow::Buffer> > >::_Vector_impl_data> = {_M_start = 0x5555557150b0, _M_finish = 0x5555557150c0, \r\n          _M_end_of_storage = 0x5555557150c0}, <No data fields>}}, <No data fields>}, \r\n  child_data = {<std::_Vector_base<std::shared_ptr<arrow::ArrayData>, std::allocator<std::shared_ptr<arrow::ArrayData> > >> = {\r\n      _M_impl = {<std::allocator<std::shared_ptr<arrow::ArrayData> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<arrow::ArrayData> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<arrow::ArrayData>, std::allocator<std::shared_ptr<arrow::ArrayData> > >::_Vector_impl_data> = {_M_start = 0x555555714580, _M_finish = 0x5555557145a0, \r\n          _M_end_of_storage = 0x5555557145a0}, <No data fields>}}, <No data fields>}, \r\n  dictionary = {<std::__shared_ptr<arrow::ArrayData, (__gnu_cxx::_Lock_policy)2>> = {<std::__shared_ptr_access<arrow::ArrayData, (__gnu_cxx::_Lock_policy)2, false, false>> = {<No data fields>}, \r\n      _M_ptr = 0x0, _M_refcount = {_M_pi = 0x0}}, <No data fields>}}\r\n(gdb) $2 = {<std::_Vector_base<std::shared_ptr<arrow::ArrayData>, std::allocator<std::shared_ptr<arrow::ArrayData> > >> = {\r\n    _M_impl = {<std::allocator<std::shared_ptr<arrow::ArrayData> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<arrow::ArrayData> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<arrow::ArrayData>, std::allocator<std::shared_ptr<arrow::ArrayData> > >::_Vector_impl_data> = {_M_start = 0x555555714580, _M_finish = 0x5555557145a0, \r\n        _M_end_of_storage = 0x5555557145a0}, <No data fields>}}, <No data fields>}\r\n(gdb) $3 = (std::__shared_ptr_access<arrow::ArrayData, (__gnu_cxx::_Lock_policy)2, false, false>::element_type &) @0x555555713fc0: {\r\n  type = {<std::__shared_ptr<arrow::DataType, (__gnu_cxx::_Lock_policy)2>> = {<std::__shared_ptr_access<arrow::DataType, (__gnu_cxx::_Lock_policy)2, false, false>> = {<No data fields>}, \r\n      _M_ptr = 0x5555556a20f0, _M_refcount = {_M_pi = 0x5555556a20e0}}, <No data fields>}, length = 8, null_count = {<std::__atomic_base<long>> = {static _S_alignment = 8, _M_i = 0}, <No data fields>}, \r\n  offset = 0, buffers = {<std::_Vector_base<std::shared_ptr<arrow::Buffer>, std::allocator<std::shared_ptr<arrow::Buffer> > >> = {\r\n      _M_impl = {<std::allocator<std::shared_ptr<arrow::Buffer> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<arrow::Buffer> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<arrow::Buffer>, std::allocator<std::shared_ptr<arrow::Buffer> > >::_Vector_impl_data> = {_M_start = 0x555555713f70, _M_finish = 0x555555713fa0, \r\n          _M_end_of_storage = 0x555555713fa0}, <No data fields>}}, <No data fields>}, \r\n  child_data = {<std::_Vector_base<std::shared_ptr<arrow::ArrayData>, std::allocator<std::shared_ptr<arrow::ArrayData> > >> = {\r\n      _M_impl = {<std::allocator<std::shared_ptr<arrow::ArrayData> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<arrow::ArrayData> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<arrow::ArrayData>, std::allocator<std::shared_ptr<arrow::ArrayData> > >::_Vector_impl_data> = {_M_start = 0x0, _M_finish = 0x0, _M_end_of_storage = 0x0}, <No data fields>}}, <No data fields>}, \r\n  dictionary = {<std::__shared_ptr<arrow::ArrayData, (__gnu_cxx::_Lock_policy)2>> = {<std::__shared_ptr_access<arrow::ArrayData, (__gnu_cxx::_Lock_policy)2, false, false>> = {<No data fields>}, \r\n      _M_ptr = 0x0, _M_refcount = {_M_pi = 0x0}}, <No data fields>}}\r\n(gdb) $4 = {<std::_Vector_base<std::shared_ptr<arrow::Buffer>, std::allocator<std::shared_ptr<arrow::Buffer> > >> = {\r\n    _M_impl = {<std::allocator<std::shared_ptr<arrow::Buffer> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<arrow::Buffer> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<arrow::Buffer>, std::allocator<std::shared_ptr<arrow::Buffer> > >::_Vector_impl_data> = {_M_start = 0x555555713f70, _M_finish = 0x555555713fa0, \r\n        _M_end_of_storage = 0x555555713fa0}, <No data fields>}}, <No data fields>}\r\n(gdb) $5 = (std::__shared_ptr_access<arrow::Buffer, (__gnu_cxx::_Lock_policy)2, false, false>::element_type &) @0x5555556a5ad0: {_vptr.Buffer = 0x7ffff751d450 <vtable for arrow::PoolBuffer+16>, \r\n  is_mutable_ = true, is_cpu_ = true, data_ = 0x7ffff4209400 \"\", mutable_data_ = 0x7ffff4209400 \"\", size_ = 36, capacity_ = 64, \r\n  parent_ = {<std::__shared_ptr<arrow::Buffer, (__gnu_cxx::_Lock_policy)2>> = {<std::__shared_ptr_access<arrow::Buffer, (__gnu_cxx::_Lock_policy)2, false, false>> = {<No data fields>}, _M_ptr = 0x0, \r\n      _M_refcount = {_M_pi = 0x0}}, <No data fields>}, \r\n  memory_manager_ = {<std::__shared_ptr<arrow::MemoryManager, (__gnu_cxx::_Lock_policy)2>> = {<std::__shared_ptr_access<arrow::MemoryManager, (__gnu_cxx::_Lock_policy)2, false, false>> = {<No data fields>}, _M_ptr = 0x555555714140, _M_refcount = {_M_pi = 0x5555556a5b30}}, <No data fields>}}\r\n(gdb) $6 = (std::__shared_ptr_access<arrow::Buffer, (__gnu_cxx::_Lock_policy)2, false, false>::element_type &) @0x5555556eee00: {_vptr.Buffer = 0x7ffff751d450 <vtable for arrow::PoolBuffer+16>, \r\n  is_mutable_ = true, is_cpu_ = true, data_ = 0x7ffff4209080 \"exexwhyexwhyexexwhy\", mutable_data_ = 0x7ffff4209080 \"exexwhyexwhyexexwhy\", size_ = 19, capacity_ = 64, \r\n  parent_ = {<std::__shared_ptr<arrow::Buffer, (__gnu_cxx::_Lock_policy)2>> = {<std::__shared_ptr_access<arrow::Buffer, (__gnu_cxx::_Lock_policy)2, false, false>> = {<No data fields>}, _M_ptr = 0x0, \r\n      _M_refcount = {_M_pi = 0x0}}, <No data fields>}, \r\n  memory_manager_ = {<std::__shared_ptr<arrow::MemoryManager, (__gnu_cxx::_Lock_policy)2>> = {<std::__shared_ptr_access<arrow::MemoryManager, (__gnu_cxx::_Lock_policy)2, false, false>> = {<No data fields>}, _M_ptr = 0x5555557152c0, _M_refcount = {_M_pi = 0x5555557141c0}}, <No data fields>}}\r\n(gdb) Undefined command: \"parr\".  Try \"help\".\r\n\r\n```\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-08-27T14:41:54.556Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11348?focusedCommentId=17585919) by @toddfarmer:*\nTransitioning issue from Resolved to Closed to based on resolution field value."
        }
    ]
}