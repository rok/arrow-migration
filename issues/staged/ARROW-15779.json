{
    "issue": {
        "title": "[Python] Create python bindings for Substrait consumer",
        "body": "***Note**: This issue was originally created as [ARROW-15779](https://issues.apache.org/jira/browse/ARROW-15779). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe will want to figure out how to expose the Substrait consumer to python.  This could be a single method that accepts a buffer of bytes and returns an iterator of record batches but we might also want a helper method that returns a table.  I'm thinking this would go in the compute namespace.",
        "created_at": "2022-02-24T16:29:28.000Z",
        "updated_at": "2022-05-21T02:20:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-05-20T23:50:26.000Z"
    },
    "comments": [
        {
            "created_at": "2022-03-04T18:33:01.262Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15779?focusedCommentId=17501471) by Weston Pace (westonpace):*\n`[~jorisvandenbossche]` `[~amol-]` Any preference on where we stick this method?  I think it will just be something like...\r\n\r\n```\n\r\nrun_query(plan: bytes): RecordBatchReader\r\n```\r\n\r\nSo do we want `pyarrow.compute.run_query`, `pyarrow.dataset.run_query`, or `pyarrow.engine.run_query`?"
        },
        {
            "created_at": "2022-03-08T16:00:50.400Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15779?focusedCommentId=17503029) by Joris Van den Bossche (jorisvandenbossche):*\nIf we follow more closely the namespace division in C++, then it would be a `pyarrow.engine` submodule? Of course, if that would contain (for now) only a single function, that might not be worth it. On the other hand, it might also grow more functionality in the future?"
        },
        {
            "created_at": "2022-03-08T17:10:58.831Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15779?focusedCommentId=17503067) by Weston Pace (westonpace):*\nThe distinction in C++ is mostly around modularity.  There are some very essential compute capabilities (casting, parsing, statistics) that make the compute module something of a required module (e.g. you can't even build parquet without compute).  We didn't want to force all of this query engine code (which may, in the future, add additional 3rd party dependencies, etc.) on users.\r\n\r\nThat's not quite as important a concern in python.  Most people are working with pypi/conda builds which are fairly complete to begin with and also it's possible to disable things at a class/function level.\r\n\r\nAs for future capabilities, my current brain dump is that we might structure this as a QueryEngine class.  We will want to make it possible to configure things like spillover (where on disk should we spillover?  How much can we fill before we abandon the query?) and scheduling (how much memory can we use for active tasks?) and reporting (progress on running queries, statistics on completed queries, etc.)  UDF registration is probably another thing that is more \"query engine\" and less \"compute\".\r\n\r\n\r\n"
        },
        {
            "created_at": "2022-05-20T23:50:26.089Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15779?focusedCommentId=17540328) by Weston Pace (westonpace):*\nIssue resolved by pull request 12672\n<https://github.com/apache/arrow/pull/12672>"
        }
    ]
}