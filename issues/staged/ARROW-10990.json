{
    "issue": {
        "title": "[Rust]: SIMD implementation of compare kernels reads out of bounds",
        "body": "***Note**: This issue was originally created as [ARROW-10990](https://issues.apache.org/jira/browse/ARROW-10990). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe simd compare kernels use the following pattern to handle the remainder that is not a multiple of the number of vector lanes:\r\n\r\n```Java\n\r\n    if rem > 0 {\r\n        let simd_left = T::load(left.value_slice(len - rem, lanes));\r\n        let simd_right = T::load(right.value_slice(len - rem, lanes));\r\n        let simd_result = op(simd_left, simd_right);\r\n        let rem_buffer_size = (rem as f32 / 8f32).ceil() as usize;\r\n        T::bitmask(&simd_result, |b| {\r\n            result.extend_from_slice(&b[0..rem_buffer_size]);\r\n        });\r\n    }\r\n```\r\n\r\nWhile this avoids writing into result out of bounds, it still reads from the `left` and `right` arrays at out of bounds indices and valgrind complains about that. I propose to rewrite the logic to use chunked iteration, with a scalar loop for the remainder, similar to the change for arithmetic kernels in ARROW-10914.",
        "created_at": "2020-12-20T12:41:12.000Z",
        "updated_at": "2021-01-01T11:05:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-01-01T11:05:21.000Z"
    },
    "comments": [
        {
            "created_at": "2021-01-01T11:05:21.906Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10990?focusedCommentId=17257173) by Andrew Lamb (alamb):*\nIssue resolved by pull request 8975\n<https://github.com/apache/arrow/pull/8975>"
        }
    ]
}