{
    "issue": {
        "title": "[C++] Split compute/kernels/scalar_string.cc",
        "body": "***Note**: This issue was originally created as [ARROW-15029](https://issues.apache.org/jira/browse/ARROW-15029). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n`compute/kernels/scalar_string.cc`, which defines scalar string kernels, is getting pretty large (and probably long-ish to compile). It would be nice to split it up thematically into 2 or 3 source files. Common utilities may be factored into a `scalar_string_internal.h` header, for example.\r\n",
        "created_at": "2021-12-08T17:46:10.000Z",
        "updated_at": "2022-01-12T09:51:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2022-01-11T06:04:11.000Z"
    },
    "comments": [
        {
            "created_at": "2022-01-04T17:03:21.562Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17468742) by Jeroen van Straten (jvanstraten):*\nI can pick this up as my first issue.\r\n\r\nLooking at the code, if it's to be split up into 2-3 files of roughly equal size it makes the most sense to me to split it up into `scalar_string_ascii.cc` for ASCII/binary and `scalar_string_utf8.cc` for UTF-8 strings, so that's what I've started doing now. Maybe someone has a better idea, though?"
        },
        {
            "created_at": "2022-01-04T17:42:51.175Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17468754) by Eduardo Ponce (edponce):*\nI agree with separating ASCII and UTF-8 string kernels for the following reasons:\r\n- The symmetric split makes sense and can make it easier to compare corresponding kernels.\n- Support for UTF-8 is controlled by CMake variable `-DARROW_WITH_UTF8PROC` so this will allow skipping `scalar_string_utf8.cc` at the CMake level and not with C++ `#ifdef` guards. Or even a single `#ifdef` guard for the entire file.\n- If additional string encodings are to be added, then they can be placed in their own source files."
        },
        {
            "created_at": "2022-01-04T19:50:35.268Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17468822) by Antoine Pitrou (apitrou):*\nWell, you'll soon find out whether this categorization makes sense :-)"
        },
        {
            "created_at": "2022-01-05T13:20:06.159Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17469305) by Jeroen van Straten (jvanstraten):*\nWith respect to `-DARROW_WITH_UTF8PROC` disabling the whole file: that's not possible without making functional changes. Some of the UTF-8 kernels don't actually depend on `utf8proc`, and are enabled regardless of whether `ARROW_WITH_UTF8PROC` is defined.\r\n\r\nI've now completed the bulk of the refactor, aside from fixing the `ARROW_WITH_UTF8PROC` `ifdefs` (I also initially assumed that all UTF-8 kernels would be disabled by it) and cleaning up the `#include` lists, and the result is 3517 lines for ASCII/binary, 1389 for UTF-8, and 498 common. So I guess it's not necessarily the most efficient split when it comes to compilation times, but it works."
        },
        {
            "created_at": "2022-01-05T13:25:04.684Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17469307) by Antoine Pitrou (apitrou):*\nYes, I don't think we'll find a meaningful splitting scheme that will result in two equal parts, so that sounds good enough. Feel free to submit a PR when you're finished with it :-)"
        },
        {
            "created_at": "2022-01-06T05:12:55.152Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17469674) by Eduardo Ponce (edponce):*\nWould this change also require to split `scalar_string_test.cc` and `scalar_string_benchmark.cc`?"
        },
        {
            "created_at": "2022-01-06T09:06:48.407Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17469784) by Antoine Pitrou (apitrou):*\nNot necessarily, no."
        },
        {
            "created_at": "2022-01-06T09:06:49.339Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17469785) by Jeroen van Straten (jvanstraten):*\nI haven't touched those files in the PR so far, so it doesn't _require_ it, but I'm sure it can be done if you want. I hadn't really thought about it."
        },
        {
            "created_at": "2022-01-06T09:11:37.743Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17469787) by Eduardo Ponce (edponce):*\nAs `[~apitrou]` states, let's not do that."
        },
        {
            "created_at": "2022-01-11T06:04:11.406Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15029?focusedCommentId=17472477) by Yibo Cai (yibocai):*\nIssue resolved by pull request 12084\n<https://github.com/apache/arrow/pull/12084>"
        }
    ]
}