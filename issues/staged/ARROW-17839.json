{
    "issue": {
        "title": "[Python] Cannot create RecordBatch with nested struct containing extension type",
        "body": "***Note**: This issue was originally created as [ARROW-17839](https://issues.apache.org/jira/browse/ARROW-17839). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm running into the following issue:\r\n```java\n\r\npyarrow.lib.ArrowNotImplementedError: Unsupported cast to extension<vast.address<AddressType>> from fixed_size_binary[16]\n```\r\nUse case: I want to create a record batch that contains this type:\r\n```java\n\r\npa.struct([(\"address\", AddressType()), (\"length\", pa.uint8())])\n```\r\nHere, `AddressType` is an extension type that models an IP address (`{}pa.binary(16){`}).\r\n\r\nPlease find attached a self-contained example that illustrates the issue.\r\n\r\n\u00a0",
        "created_at": "2022-09-25T09:30:25.000Z",
        "updated_at": "2022-10-17T05:34:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-09-27T10:34:41.857Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17839?focusedCommentId=17609968) by Joris Van den Bossche (jorisvandenbossche):*\n`[~mavam]` Thanks for the report and the nice example!\r\n\r\nSo what is missing here is the automatic cast from the storage type to the extension type. This is currently being tackled in https://github.com/apache/arrow/pull/14106 (ARROW-14500). \r\n\r\nTesting your example with the branch of https://github.com/apache/arrow/pull/14106, it works for me (with one caveat that you need to register the extension types (eg `pa.register_extension_type(subnet_type)`) to preserve them in an IPC roundtrip."
        },
        {
            "created_at": "2022-09-29T06:23:34.587Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17839?focusedCommentId=17610822) by Matthias Vallentin (mavam):*\nThanks for the point, `[~jorisvandenbossche]`. Glad to see that a fix is underway.\r\n\r\nWould you mind pointing me to instructions on how to do the test that you performed? I am using Poetry and couldn't get the branch to compile. In theory, I thought this should do the trick:\r\n```java\n\r\n[tool.poetry.dependencies]\r\n#pyarrow = \"^9.0\"\r\npyarrow = { git = \"https://github.com/milesgranger/arrow.git\", branch = \"ARROW-15545_cast-of-extension-types\", subdirectory = \"python\" }\n```\r\nBut this fails to compile due to missing dependencies. (I managed to workaround OpenSSL by providing the right env var, but now I'm stuck with Flight not being found.) I was hoping that there is some sort of dev guide that shows how to get going."
        },
        {
            "created_at": "2022-09-29T16:23:35.976Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17839?focusedCommentId=17611125) by Matthias Vallentin (mavam):*\nSince I didn't manage (yet) to try out the branch under development, I have one other issue, per the attached example. In this case I'm getting:\r\n```java\n\r\nTypeError: Incompatible storage type dictionary<values=string, indices=int8, ordered=0> for extension type extension<vast.enumeration<EnumType>>\n```\r\nI'm not sure whether that's considered a \"cast\" internally or whether I'm simply not creating an `ExtensionArray` properly from a dictionary. Any guidance would be much appreciated.\r\n\r\n[enum.py](enum.py)"
        },
        {
            "created_at": "2022-09-30T13:24:09.573Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17839?focusedCommentId=17611587) by Joris Van den Bossche (jorisvandenbossche):*\n> Would you mind pointing me to instructions on how to do the test that you performed? I am using Poetry and couldn't get the branch to compile. In theory, I thought this should do the trick:\r\n\r\nSince it is not yet merged, you would have to install pyarrow from source, and thus also build Arrow C++ from source, which won't be possible with just poetry (see https://arrow.apache.org/docs/dev/developers/guide/step_by_step/building.html and https://arrow.apache.org/docs/dev/developers/python.html). \r\nWe do have nightly packages, but so for that you will have to wait until it is merged.\r\n\r\n"
        },
        {
            "created_at": "2022-09-30T13:26:49.507Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17839?focusedCommentId=17611589) by Joris Van den Bossche (jorisvandenbossche):*\n> Since I didn't manage (yet) to try out the branch under development, I have one other issue, per the attached example. In this case I'm getting:\r\n\r\nThere is a small difference between the types. Your extension type is defined with a dictionary of uint8 indices, while the dictionary array you have as int8 indices (uint8 vs int8). At the moment this needs to be exactly the same, but so the referenced PR should also allow casting from dictionary<int8> to extension<dictionary<uint8>>."
        },
        {
            "created_at": "2022-10-01T05:11:06.446Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17839?focusedCommentId=17611823) by Matthias Vallentin (mavam):*\nThanks for the guidance, Joris!\r\n\r\nRegarding the dictionary, nowhere in the code I use `{}int8{`}. Where do I implicitly \"commit\" to `int8` without knowing it?\r\n\r\nEDIT: I think I found the issue. Going through `pa.array(..., type=dictionary_type)` is not creating indices of the type as given by `{}dictionary_type{`}. I had to go through `pa.DictionaryArray.from_arrays` with explicitly typed arrays. (The detail fix is here: https://github.com/tenzir/vast/pull/2606/files)\u00a0"
        },
        {
            "created_at": "2022-10-04T06:58:31.474Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17839?focusedCommentId=17612492) by Joris Van den Bossche (jorisvandenbossche):*\n> Going through pa.array(..., type=dictionary_type) is not creating indices of the type as given by dictionary_type\r\n\r\nThat would be a bug IMO, but I can't directly reproduce this. In the below example, I specify int8, and it does return a dictionary type using int8:\r\n\r\n```python\n\r\n>>> pa.array(['a', 'b', 'a'], pa.dictionary(pa.int8(), pa.string())).type\r\nDictionaryType(dictionary<values=string, indices=int8, ordered=0>)\r\n```"
        },
        {
            "created_at": "2022-10-17T05:34:43.676Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17839?focusedCommentId=17618654) by Matthias Vallentin (mavam):*\nCan you try any other type than `{}int8{`}? For example, `uint8` fails for me:\r\n```java\n\r\n>>> pa.array(['a', 'b', 'a'], pa.dictionary(pa.uint8(), pa.string())).type\r\nDictionaryType(dictionary<values=string, indices=int8, ordered=0>)\n```"
        }
    ]
}