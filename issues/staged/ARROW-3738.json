{
    "issue": {
        "title": "[C++] Add CSV conversion option to parse ISO8601-like timestamp strings",
        "body": "***Note**: This issue was originally created as [ARROW-3738](https://issues.apache.org/jira/browse/ARROW-3738). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSee similar functionality in other libraries. I believe pandas has a fast path for iso8601",
        "created_at": "2018-11-09T22:19:17.000Z",
        "updated_at": "2018-11-22T14:56:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-11-22T14:56:17.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-12T10:29:30.427Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3738?focusedCommentId=16683527) by Antoine Pitrou (apitrou):*\nWhat formats exactly should we allow? I'm leaning towards \"`YYYY-MM-DD`\" and \"`YYYY-MM-DD[ T]hh:mm:ss[Z]`\".\r\n\r\nAlso, what is the difference between the Arrow \"date64\" and \"timestamp\" types?\r\n"
        },
        {
            "created_at": "2018-11-12T14:45:28.250Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3738?focusedCommentId=16683886) by Wes McKinney (wesm):*\nThose sound like the right ones.\r\n\r\ndate64 does not support granularity beyond the resolution of a day. The values are supposed to be a multiple of 86400000. Some things use this millisecond-based representation of calendar dates\r\n\r\nA timestamp considers intraday point in time"
        },
        {
            "created_at": "2018-11-12T18:02:54.066Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3738?focusedCommentId=16684181) by Antoine Pitrou (apitrou):*\nTo keep things simple, I suggest we start using a date library. The following looks good (and is actually the basis for the future C++20 API): https://github.com/HowardHinnant/date\r\n\r\nWe could simply vendor the `date.h` file."
        },
        {
            "created_at": "2018-11-12T18:07:08.964Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3738?focusedCommentId=16684184) by Wes McKinney (wesm):*\nIt looks like this has already happened in https://github.com/apache/arrow/blob/master/cpp/src/gandiva/precompiled/date.h. I suggest we move `date.h` to `arrow/util`\r\n\r\n`[~pravindra]` sound ok?"
        },
        {
            "created_at": "2018-11-12T18:23:17.285Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3738?focusedCommentId=16684214) by Pindikura Ravindra (pravindra):*\nI'm fine with moving date.h to arrow/util, `[~wesmckinn]`"
        },
        {
            "created_at": "2018-11-22T14:56:17.433Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3738?focusedCommentId=16695975) by Wes McKinney (wesm):*\nIssue resolved by pull request 2952\n<https://github.com/apache/arrow/pull/2952>"
        }
    ]
}