{
    "issue": {
        "title": "[Developer][GLib] Document GLib development workflow when using conda environment on GTK-based Linux systems",
        "body": "***Note**: This issue was originally created as [ARROW-7893](https://issues.apache.org/jira/browse/ARROW-7893). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI periodically deal with annoying errors like:\r\n\r\n```Java\n\r\nchecking for GLIB - version >= 2.32.4... \r\n*** 'pkg-config --modversion glib-2.0' returned 2.58.3, but GLIB (2.56.4)\r\n*** was found! If pkg-config was correct, then it is best\r\n*** to remove the old version of GLib. You may also be able to fix the error\r\n*** by modifying your LD_LIBRARY_PATH enviroment variable, or by editing\r\n*** /etc/ld.so.conf. Make sure you have run ldconfig if that is\r\n*** required on your system.\r\n*** If pkg-config was wrong, set the environment variable PKG_CONFIG_PATH\r\n*** to point to the correct configuration files\r\nno\r\nconfigure: error: GLib isn't available\r\nmake: *** No targets specified and no makefile found.  Stop.\r\nmake: *** No rule to make target 'install'.  Stop.\r\nTraceback (most recent call last):\r\n\t2: from /home/wesm/code/arrow/c_glib/test/run-test.rb:30:in `<main>'\r\n\t1: from /usr/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require'\r\n/usr/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require': cannot load such file -- gi (LoadError)\r\n```\r\n\r\nThe problem is that I have one version of glib on my Linux system while another in the activated conda environment, it seems that there is a conflict even though `$PKG_CONFIG_PATH` is set to ignore system directories\r\n\r\nhttps://gist.github.com/wesm/e62bf4517468be78200e8dd6db0fc544",
        "created_at": "2020-02-20T14:49:31.000Z",
        "updated_at": "2022-07-12T14:04:15.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Documentation",
            "Component: GLib",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-03-31T04:29:10.404Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7893?focusedCommentId=17071454) by Wes McKinney (wesm):*\nI haven't run into this issue for a while, so I'm not clear how urgent this is"
        },
        {
            "created_at": "2020-04-29T23:21:57.135Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7893?focusedCommentId=17095966) by Wes McKinney (wesm):*\nI found out the solution to this. The problem occurs when using `pkg-config` installed by conda rather than the pkg-config provided by the host Linux system. If someone is developing using glib provided by conda then using the conda-provided pkg-config should work. \r\n\r\nSo the fact that pkg-config is in https://github.com/apache/arrow/blob/master/ci/conda_env_cpp.yml is what's causing the problem. Running `conda remove pkg-config` resolved the issue I cited above. I'm not sure what can be documented better about this but it's at least some conclusion"
        },
        {
            "created_at": "2020-06-08T21:45:33.220Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7893?focusedCommentId=17128670) by Kouhei Sutou (kou):*\n`LD_LIBRARY_PATH=${CONDA_ROOT}/lib` is needed for resolving the error.\r\nIf we don't have the `LD_LIBRARY_PATH`, the system `libglib-2.0.so` not the conda `libglib-2.0.so` is referred.\r\n\r\nNormally, do normal conda users set `LD_LIBRARY_PATH`?"
        },
        {
            "created_at": "2020-06-09T01:03:09.442Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7893?focusedCommentId=17128749) by Wes McKinney (wesm):*\nThey don't, so this may be something quirky about my personal development environment, then. "
        },
        {
            "created_at": "2020-06-09T06:10:17.153Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7893?focusedCommentId=17128898) by Uwe Korn (uwe):*\n`[~kou]` \u00a0Can you give me a pointer at which stage the library is loaded, i.e. where `LD_LIBRARY_PATH` does come into action? Then I can have a look at the conda packaging."
        },
        {
            "created_at": "2020-06-09T20:49:14.679Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7893?focusedCommentId=17129787) by Kouhei Sutou (kou):*\nSure.\r\nIt's the `configure` stage in https://github.com/apache/arrow/tree/master/c_glib#how-to-build-by-users . In `configure`, the GLib detection does the followings:\r\n\r\n1. Find GLib by `pkg-config`\r\n2. Build a program that verifies the found GLib version\r\n3. Run the program (`LD_LIBRARY_PATH` is needed here)\r\n\r\nSee also: https://gitlab.gnome.org/GNOME/glib/-/blob/master/m4macros/glib-2.0.m4#L92-165\r\n\r\nThe GLib version verification isn't ran with Meson. We don't need to set `LD_LIBRARY_PATH` with Meson.\r\nhttps://github.com/apache/arrow/tree/master/c_glib#how-to-build-by-users also describes how to build with Meson."
        },
        {
            "created_at": "2022-07-12T14:04:15.139Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7893?focusedCommentId=17565485) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}