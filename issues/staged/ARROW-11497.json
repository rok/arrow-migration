{
    "issue": {
        "title": "[Python] pyarrow parquet writer for list does not conform with Apache Parquet specification",
        "body": "***Note**: This issue was originally created as [ARROW-11497](https://issues.apache.org/jira/browse/ARROW-11497). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSorry if I don't know this feature is done deliberately, but it looks like the parquet writer for list data type does not conform to Apache Parquet list logical type specification\r\n\r\nAccording to this page: <https://github.com/apache/parquet-format/blob/master/LogicalTypes.md#lists,>\u00a0list type contains 3 level where the middle level, named\u00a0`list`, must be a repeated group with a single field named\u00a0_`element`_\r\n\r\nHowever, in the parquet file from pyarrow writer, that single field is named _item_ instead,\r\n\r\nPlease find below the example python code that produce a parquet file (I use pandas version 1.2.1 and\u00a0pyarrow version 3.0.0)\u00a0\r\n```java\n\r\nimport pandas as pd\r\n\u00a0\r\ndf = pd.DataFrame(data=[ {'studio': 'blizzard', 'games': [{'name': 'diablo', 'version': '3'}, {'name': 'star craft', 'version': '2'}]}, {'studio': 'ea', 'games': [{'name': 'fifa', 'version': '21'}]}, ])\r\ndf.to_parquet('/tmp/test.parquet', engine='pyarrow')\r\n```\r\nThen I use parquet-tools from <https://formulae.brew.sh/formula/parquet-tools>\u00a0to check the metadata of parquet file via this command\r\n\r\nparquet-tools meta /tmp/test.parquet\r\n\r\nThe full meta is included in attached, here is only an extraction of list type column\r\n\r\ngames: OPTIONAL F:1 \r\n .list: REPEATED F:1 \r\n ..item: OPTIONAL F:2 \r\n ...name: OPTIONAL BINARY L:STRING R:1 D:4\r\n ...version: OPTIONAL BINARY L:STRING R:1 D:4\r\n\r\nas can be seen, under list, it is single field named\u00a0_item_\r\n\r\nI think this should be made to be name _element_\u00a0to conform with Apache Parquet specification.",
        "created_at": "2021-02-04T13:53:02.000Z",
        "updated_at": "2021-10-01T13:46:11.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-03-24T04:09:48.000Z"
    },
    "comments": [
        {
            "created_at": "2021-02-04T15:06:19.939Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17278895) by Joris Van den Bossche (jorisvandenbossche):*\ncc `[~emkornfield]`"
        },
        {
            "created_at": "2021-02-04T19:15:31.996Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279080) by Micah Kornfield (emkornfield):*\nIs this causing a problem in practice.\u00a0 There is a C++ option <https://github.com/apache/arrow/blob/1c18706ac9e49e3e9b4998354f213a304e82d367/cpp/src/parquet/properties.h#L689>\u00a0that will write out element <https://github.com/apache/arrow/blob/9b195493409ad434cbc42b0e666603c6471a9bae/cpp/src/parquet/arrow/schema.cc#L82>\r\n\r\n\u00a0\r\n\r\nWe could expose this in python.\r\n\r\n\u00a0\r\n\r\nI think the main reason it isn't enabled by default is it breaks round trips for arrow data.\u00a0 This could potentially be fixed on the reader side as well.\u00a0 I can't find a reference but I think this might also have some impact on Pandas<->Parquet round tripping."
        },
        {
            "created_at": "2021-02-04T20:31:21.070Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279141) by Truc Lam Nguyen (trucnguyenlam):*\n`[~emkornfield]` \u00a0thanks for looking at this ticket, it is causing problem on my site as I'm having a mixture of parquet list data types\r\n \\* one are processed by parquet-mr writer, which conforms to apache parquet spec\r\n \\* the other one are produced by pyarrow, which is of the reported structure\r\n\r\nProcessing both of them is a difficulty for me. It would be really good if this option is exposed in Python.\r\n\r\nCould you also explain a bit more about how this might affect on the round tripping performance if applicable?\r\n\r\nThanks."
        },
        {
            "created_at": "2021-02-04T20:34:26.979Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279145) by Micah Kornfield (emkornfield):*\nIt isn't about round-tripping performance, its about data equality. The default element name for nested columns in arrow is \"item\" which is why it gets propagated to parquet without the flag being set."
        },
        {
            "created_at": "2021-02-04T20:37:46.421Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279149) by Antoine Pitrou (apitrou):*\nPerhaps we could convert the field name at the Arrow<->Parquet boundary."
        },
        {
            "created_at": "2021-02-04T21:09:21.055Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279166) by Truc Lam Nguyen (trucnguyenlam):*\n`[~emkornfield]`: I got the reason now\u00a0:)\r\n\r\n`[~apitrou]` \u00a0my understanding on apache arrow is not enough to suggest any technical solution but I think it might be a good idea.\r\n\r\nAlso for my use case as an end user, it would be good if we can be allowed to produce parquet files that are compliant to official\u00a0specification."
        },
        {
            "created_at": "2021-02-04T21:24:56.873Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279178) by Micah Kornfield (emkornfield):*\n> Perhaps we could convert the field name at the Arrow<->Parquet boundary.\r\nThis should be possible but it potentially needs another flag.\u00a0 I think in the short term plumbing the additional flag through to python makes sense and we can figure out a longer term solution if this becomes a larger problem."
        },
        {
            "created_at": "2021-02-04T21:37:55.714Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279186) by Truc Lam Nguyen (trucnguyenlam):*\n> I think in the short term plumbing the additional flag through to python makes sense and we can figure out a longer term solution if this becomes a larger problem.\r\n(y)\u00a0make sense\u00a0"
        },
        {
            "created_at": "2021-02-04T21:49:08.184Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279193) by Antoine Pitrou (apitrou):*\n> This should be possible but it potentially needs another flag\r\n\r\nI don't understand why that would be necessary. It should simply be the default (and obviously right) behaviour. Am I missing something?"
        },
        {
            "created_at": "2021-02-04T23:26:08.557Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17279233) by Micah Kornfield (emkornfield):*\nBackwards compatibility?\u00a0 It might be possible to make some inferences (haven't thought about it deeply).\u00a0 But I think if we were reading a conforming java produced parquet file then we would get different column names if we transformed on the border (maybe there can be some rules around Arrow metadata being present).\u00a0 I think we can make the default to be conforming behavior, but we should give users some level of control to preserve the old behavior."
        },
        {
            "created_at": "2021-02-12T14:41:12.082Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17283731) by Truc Lam Nguyen (trucnguyenlam):*\n`[~apitrou]` \u00a0 `[~emkornfield]` \u00a0I think we can make a final decision on this, I'm ok with the option that end users have some level of control to preserve the behaviour.\r\n\r\nPlease let me know your thoughts, thanks\u00a0:)"
        },
        {
            "created_at": "2021-02-13T04:56:08.801Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17284083) by Micah Kornfield (emkornfield):*\nMy thought: I think the short term we can expose the flag.\u00a0 We can figure out a longer term plan for migrating all users to a conformant writer/reader.\r\n\r\n\u00a0\r\n\r\n`[~trucnguyenlam]` \u00a0do you want to to provide a PR?"
        },
        {
            "created_at": "2021-02-13T15:42:16.497Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17284230) by Truc Lam Nguyen (trucnguyenlam):*\n`[~emkornfield]` \u00a0thanks for the confirmation, I'm working on a PR atm."
        },
        {
            "created_at": "2021-02-13T17:19:03.904Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17284263) by Truc Lam Nguyen (trucnguyenlam):*\n`[~emkornfield]` \u00a0I've made a PR\u00a0[here\\|[https://github.com/apache/arrow/pull/9489],]\u00a0please have a look at let me know if I'm missing something, I'll try to address as much as I can, thanks :)\u00a0"
        },
        {
            "created_at": "2021-03-24T04:09:48.983Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11497?focusedCommentId=17307550) by Micah Kornfield (emkornfield):*\nIssue resolved by pull request 9489\n<https://github.com/apache/arrow/pull/9489>"
        }
    ]
}