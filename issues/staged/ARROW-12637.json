{
    "issue": {
        "title": "Range type (anchored variable-length interval)",
        "body": "***Note**: This issue was originally created as [ARROW-12637](https://issues.apache.org/jira/browse/ARROW-12637). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is wish for range(interval) extension type.\r\n\r\n\u00a0\r\n\r\nType would describe range/interval with defined start and end and would have metadata\r\n\r\nwhether range is open/close/left-open/right-open.\r\n\r\n\u00a0\r\n\r\nConsiderations:\r\n \\* should it focus on integers and like or on floats as well?\r\n \\* are open/semi-open cases worth the effort? Maybe not.\r\n\r\n\u00a0\r\n\r\nThe most useful case (big low hanging fruit) might be closed range of 32bit/64bit and maybe 8bit/16bit unsigned integers packed in twice larger integer allowing usage with date/time via ordinals.\r\n\r\n\u00a0\r\n\r\nThis would allow computations like:\r\n\r\n\u00a0\r\n \\* overlap joins (see R foverlaps)\r\n \\* range algebra: unions, intersections, differences\r\n \\* classification in Allen's interval algebra\r\n \\* conversion to/from 2 columns/rows\r\n \\* exploding (see Pandas explode)\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2021-05-03T19:15:00.000Z",
        "updated_at": "2021-05-06T16:08:55.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-05-04T18:44:46.948Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12637?focusedCommentId=17339220) by Joris Van den Bossche (jorisvandenbossche):*\nFor reference, pandas defines an Arrow extension type that is used when converting a pandas Interval column to pyarrow: https://github.com/pandas-dev/pandas/blob/d0d8e10edf1724a13866f6b8ec7eb92b2fe92741/pandas/core/arrays/_arrow_utils.py#L88-L141 \r\nIt uses a `StructType<left: subtype, right: subtype>`, and puts additional information (`closed`) in the extension type metadata:\r\n\r\n```Java\n\r\nIn [78]: pd.interval_range(0, 5, 5)\r\nOut[78]: \r\nIntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\r\n              closed='right',\r\n              dtype='interval[int64]')\r\n\r\nIn [79]: arr = pa.array(pd.interval_range(0, 5, 5))\r\n\r\nIn [80]: arr.type\r\nOut[80]: ArrowIntervalType(StructType(struct<left: int64, right: int64>))\r\n```\r\n\r\n\r\n"
        },
        {
            "created_at": "2021-05-04T18:53:48.413Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12637?focusedCommentId=17339223) by Jacek Pliszka (jacek.pliszka):*\nI've just realized that what I would like to propose differs from pandas - in pandas InvervalIndex is fixed length.\r\n\r\nAnd I would like to propose flexible length like\r\n\r\n(0, 1],\u00a0 (1, 5], (7, 10]\r\n\r\nwith spaces possible in between.\r\n\r\n\u00a0\r\n\r\nThe representation would be a pair of numbers - one for left and one for right\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-05-04T19:00:23.962Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12637?focusedCommentId=17339231) by Joris Van den Bossche (jorisvandenbossche):*\nWhat do you mean with fixed length? Each interval/range having the same length? That's not a restriction in pandas, my simple example just had regular ranges (pandas stores left/right in separate arrays, very similar as a struct array)."
        },
        {
            "created_at": "2021-05-04T19:36:11.208Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12637?focusedCommentId=17339267) by Jacek Pliszka (jacek.pliszka):*\nOK, then exactly as in pandas. Indeed there is\r\n\r\n`>>> pd.IntervalIndex.from_tuples([(0, 2), (1, 7)], closed='both', dtype='interval[uint8]')`\r\n `IntervalIndex([[0, 2], [1, 7]],`\r\n\u00a0 closed='both',\r\n\u00a0 dtype='interval[uint64]')\r\n\r\n\u00a0\r\n\r\nThe only surprise is that there is no uint8/uint16/uint32 versions which would be extremely useful\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-05-06T16:08:55.158Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12637?focusedCommentId=17340280) by Jacek Pliszka (jacek.pliszka):*\nOne more - i am not sure but maybe there should 2 types of range for performance reasons.\r\n\r\n\u00a0\r\n\r\na) one with fixed (or predefined) boundedness like only closed intervals\r\n\r\nb) one allowing mixed bounds like open and closed in the same column\r\n\r\n\u00a0\r\n\r\nReason is that for a) we can efficiently pack 2 uint16s in one\u00a0 uint32 fields etc.\r\n\r\n\u00a0\r\n\r\nFor b) we need another 2 bits - leading to 2 options again\r\n\r\n\u00a0\r\n\r\nFrom my point of view all I need is a) - memory and CPU efficient so 2 uint8 packed in 1 uint16 etc.\r\n\r\nThis would be for me the main use - allowing for time intervals operations/joins.\r\n\r\n\u00a0\r\n\r\n\u00a0"
        }
    ]
}