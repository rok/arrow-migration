{
    "issue": {
        "title": "[R] open_dataset() error when `schema` argument supplied, but `column_names` not supplied to `CSVReadOptions`",
        "body": "***Note**: This issue was originally created as [ARROW-14744](https://issues.apache.org/jira/browse/ARROW-14744). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nNote: this occurs regardless of whether the data has a header or not\r\n\r\n```r\n\r\ntd <- tempfile()\r\ndir.create(td)\r\n\r\nreadr::write_csv(ggplot2::diamonds, file=file.path(td, 'diamonds.csv'), col_names=FALSE)\r\nreadLines(file.path(td, \"diamonds.csv\"), n = 2)\r\n\r\nopen_dataset(\r\n  td,\r\n  format = 'csv',\r\n  schema = diamond_schema,\r\n  partitioning = NULL,\r\n  skip_rows = 1,\r\n  unify_schemas = FALSE,\r\n  read_options = arrow::CsvReadOptions$create(\r\n    skip_rows = 1,\r\n    column_names = names(diamond_schema)\r\n  )\r\n) %>%\r\n  collect()\r\n# # A tibble: 53,939 \u00d7 10\r\n#    carat cut       color clarity depth table price     x     y     z\r\n#    <dbl> <chr>     <chr> <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n#  1  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\r\n#  2  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\r\n#  3  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\r\n#  4  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\r\n#  5  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\r\n#  6  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\r\n#  7  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\r\n#  8  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\r\n#  9  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\r\n# 10  0.3  Good      J     SI1      64      55   339  4.25  4.28  2.73\r\n# # \u2026 with 53,929 more rows\r\n\r\n\r\nopen_dataset(\r\n  td,\r\n  format='csv',\r\n  schema = diamond_schema,\r\n  skip_rows = 1,\r\n  read_options=arrow::CsvReadOptions$create(skip_rows=1)) %>%\r\n  collect()\r\n\r\n# # A tibble: 53,938 \u00d7 10\r\n#    carat cut   color clarity depth table price     x     y     z\r\n#    <dbl> <chr> <chr> <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n#  1    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n#  2    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n#  3    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n#  4    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n#  5    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n#  6    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n#  7    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n#  8    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n#  9    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n# 10    NA NA    NA    NA         NA    NA    NA    NA    NA    NA\r\n# # \u2026 with 53,928 more rows\r\n```",
        "created_at": "2021-11-17T22:31:59.000Z",
        "updated_at": "2022-01-29T03:21:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-01-27T16:35:56.000Z"
    },
    "comments": [
        {
            "created_at": "2021-12-17T15:21:59.525Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14744?focusedCommentId=17461512) by Dewey Dunnington (paleolimbot):*\nFull reprex:\r\n\r\n```R\n\r\nlibrary(arrow, warn.conflicts = FALSE)\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\n\r\ndiamond_schema <- Table$create(\r\n  ggplot2::diamonds %>% mutate_if(is.factor, as.character)\r\n)$schema\r\n\r\ntd <- tempfile()\r\ndir.create(td)\r\n\r\nreadr::write_csv(\r\n  ggplot2::diamonds, file=file.path(td, 'diamonds.csv'),\r\n  col_names = FALSE\r\n)\r\n\r\nopen_dataset(\r\n  td,\r\n  format='csv',\r\n  schema = diamond_schema,\r\n  skip_rows = 1,\r\n  read_options=arrow::CsvReadOptions$create(\r\n    skip_rows = 1\r\n# ..and no column_names\r\n  )\r\n) %>%\r\n  collect()\r\n#> # A tibble: 53,938 \u00d7 10\r\n#>    carat cut   color clarity depth table price     x     y     z\r\n#>    <dbl> <chr> <chr> <chr>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\r\n#>  1    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#>  2    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#>  3    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#>  4    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#>  5    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#>  6    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#>  7    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#>  8    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#>  9    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#> 10    NA <NA>  <NA>  <NA>       NA    NA    NA    NA    NA    NA\r\n#> # \u2026 with 53,928 more rows\r\n\r\n# ...but works with column_names exists\r\nopen_dataset(\r\n  td,\r\n  format = 'csv',\r\n  schema = diamond_schema,\r\n  partitioning = NULL,\r\n  skip_rows = 1,\r\n  unify_schemas = FALSE,\r\n  read_options = arrow::CsvReadOptions$create(\r\n    skip_rows = 1,\r\n    column_names = names(diamond_schema)\r\n  )\r\n) %>%\r\n  collect()\r\n#> # A tibble: 53,939 \u00d7 10\r\n#>    carat cut       color clarity depth table price     x     y     z\r\n#>    <dbl> <chr>     <chr> <chr>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\r\n#>  1  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\r\n#>  2  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\r\n#>  3  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\r\n#>  4  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\r\n#>  5  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\r\n#>  6  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\r\n#>  7  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\r\n#>  8  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\r\n#>  9  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\r\n#> 10  0.3  Good      J     SI1      64      55   339  4.25  4.28  2.73\r\n#> # \u2026 with 53,929 more rows\r\n```\r\n"
        },
        {
            "created_at": "2022-01-02T09:26:56.479Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14744?focusedCommentId=17467575) by Topias Pyykk\u00f6nen (toppyy):*\nI could try to make a pull request for this if it\u2019s up for grabs.\r\n\r\nHad a look at it and it seems that the function _csv_file_format_read_opts_ tries to set column names from the schema for the CSV read options. However, that function is never called by _CsvFileFormat$create_ when the read_options -parameter is set (as function-call is the default argument).\r\n\r\nSo at the moment, the column_names are not retrieved from the schema if any read_options are given (like skip_rows=1 in the example). At least two solutions come to mind:\r\n1. Supplement the read_options with column names from schema in _CsvFileFormat$create_ if they are not set\n1. Rename read_options-parameter in _CsvFileFormat$create_ and create a column_name-supplemented copy of read_options in csv_file_format_read_opts\n   \n   Any thoughts on which way to proceed (or should I consider something else)?"
        },
        {
            "created_at": "2022-01-03T20:09:36.931Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14744?focusedCommentId=17468181) by Dewey Dunnington (paleolimbot):*\nAt this point, you're the one who's looked into this the most, so I'd suggest you give whichever one you think is best a shot! `[~thisisnic]` has spend the most time here and may have a suggestion. Both solutions sound reasonable on paper but I find that it isn't until things are implemented (at least partially) that a clearest path emerges. Go for it! If you run into problems getting an Arrow development setup feel free to post here and we'll see what we can do."
        },
        {
            "created_at": "2022-01-04T11:53:20.067Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14744?focusedCommentId=17468591) by Nicola Crane (thisisnic):*\nHi `[~toppyy]` - thanks for working this out!  I think the first option is the better one as it avoids making breaking changes to the API for that function.  As `[~paleolimbot]` says, give us a shout if you need anything!"
        },
        {
            "created_at": "2022-01-04T18:02:51.741Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14744?focusedCommentId=17468761) by Topias Pyykk\u00f6nen (toppyy):*\nGreat, thanks for the comments! \r\n\r\nI made a first draft: <https://github.com/toppyy/arrow/blob/master/r/R/dataset-format.R#L126>\r\n\r\nIt basically just calls _csv_file_format_read_opts_ again if column_names are not set. \r\n\r\nI did, however, run into trouble. Say, for example, the user has set skip_rows-option like this:\r\nread_options=arrow::CsvReadOptions$create(skip_rows=1))\r\nI image we'd like to keep whatever options the user has set when we re-create the CsvReadOptions-object\u00a0 with column names from the schema. The problem is that I cannot access skip_rows in the object after it's created, so I cannot use that information to create another instance of CsvReadOptions that has both the column_names and skip rows set (plus any other options).\r\n\r\nAny thoughts? Is there a way to access skip_rows and other attributes that I'm unaware of? Of course, one solution is to change class declaration of CsvReadOptions to have access to these attributes."
        },
        {
            "created_at": "2022-01-05T11:42:52.457Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14744?focusedCommentId=17469234) by Nicola Crane (thisisnic):*\nThat's fantastic, thanks for that quick initial draft!  Just had a thought - what do you think to the idea of opening a draft pull request?  It'll make it easier to skim through your changes and work out what we can do about the problem you ran into.\r\n\r\n"
        },
        {
            "created_at": "2022-01-05T15:38:56.306Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14744?focusedCommentId=17469387) by Topias Pyykk\u00f6nen (toppyy):*\nOk, that makes sense! Here's a link to the PR: <https://github.com/apache/arrow/pull/12083>\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-01-27T16:35:56.853Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14744?focusedCommentId=17483258) by Nicola Crane (thisisnic):*\nIssue resolved by pull request 12083\n<https://github.com/apache/arrow/pull/12083>"
        }
    ]
}