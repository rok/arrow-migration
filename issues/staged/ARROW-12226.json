{
    "issue": {
        "title": "[C++] ASAN error in s3fs_test.cc",
        "body": "***Note**: This issue was originally created as [ARROW-12226](https://issues.apache.org/jira/browse/ARROW-12226). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI get this locally:\r\n\r\n```Java\n\r\n[ RUN      ] TestS3FS.OpenOutputStreamBackgroundWrites\r\nAttempting encryption of all config, IAM users and policies on MinIO backend\r\n=================================================================\r\n==145714==ERROR: AddressSanitizer: heap-use-after-free on address 0x6190001df758 at pc 0x7f4fd4035e5b bp 0x7ffcf2e8cbc0 sp 0x7ffcf2e8cbb8\r\nREAD of size 1 at 0x6190001df758 thread T0\r\n    #0 0x7f4fd4035e5a in UploadPart ../src/arrow/filesystem/s3fs.cc:970\r\n    #1 0x7f4fd4034a40 in UploadPart ../src/arrow/filesystem/s3fs.cc:958\r\n    #2 0x7f4fd403474a in CommitCurrentPart ../src/arrow/filesystem/s3fs.cc:954\r\n    #3 0x7f4fd4030899 in Close ../src/arrow/filesystem/s3fs.cc:851\r\n    #4 0x563844f07905 in arrow::fs::TestS3FS::TestOpenOutputStream() ../src/arrow/filesystem/s3fs_test.cc:468\r\n    #5 0x563844ec69e7 in arrow::fs::TestS3FS_OpenOutputStreamBackgroundWrites_Test::TestBody() ../src/arrow/filesystem/s3fs_test.cc:853\r\n    #6 0x7f4fca6eb98d in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest.so+0x4c98d)\r\n    #7 0x7f4fca6ebbe0 in testing::Test::Run() (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest.so+0x4cbe0)\r\n    #8 0x7f4fca6ebf0e in testing::TestInfo::Run() (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest.so+0x4cf0e)\r\n    #9 0x7f4fca6ec035 in testing::TestSuite::Run() (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest.so+0x4d035)\r\n    #10 0x7f4fca6ec5eb in testing::internal::UnitTestImpl::RunAllTests() (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest.so+0x4d5eb)\r\n    #11 0x7f4fca6ec858 in testing::UnitTest::Run() (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest.so+0x4d858)\r\n    #12 0x7f4fca72807e in main (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest_main.so+0x107e)\r\n    #13 0x7f4fc999f0b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\r\n    #14 0x563844e7c57d in _start (/home/antoine/arrow/dev/cpp/build-test/debug/arrow-s3fs-test+0x22757d)\r\n\r\n0x6190001df758 is located 216 bytes inside of 936-byte region [0x6190001df680,0x6190001dfa28)\r\nfreed by thread T0 here:\r\n    #0 0x7f4fdeaea78c in operator delete(void*) /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:165\r\n    #1 0x7f4fd40c6ba7 in std::default_delete<arrow::fs::S3FileSystem::Impl>::operator()(arrow::fs::S3FileSystem::Impl*) const /usr/include/c++/9/bits/unique_ptr.h:81\r\n    #2 0x7f4fd40aeeb8 in std::unique_ptr<arrow::fs::S3FileSystem::Impl, std::default_delete<arrow::fs::S3FileSystem::Impl> >::~unique_ptr() /usr/include/c++/9/bits/unique_ptr.h:292\r\n    #3 0x7f4fd40418f0 in arrow::fs::S3FileSystem::~S3FileSystem() ../src/arrow/filesystem/s3fs.cc:1665\r\n    #4 0x7f4fd4041961 in arrow::fs::S3FileSystem::~S3FileSystem() ../src/arrow/filesystem/s3fs.cc:1665\r\n    #5 0x7f4fd4119874 in std::_Sp_counted_ptr<arrow::fs::S3FileSystem*, (__gnu_cxx::_Lock_policy)2>::_M_dispose() /usr/include/c++/9/bits/shared_ptr_base.h:377\r\n    #6 0x563844f34ea9 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() /usr/include/c++/9/bits/shared_ptr_base.h:155\r\n    #7 0x563844f1a19b in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() /usr/include/c++/9/bits/shared_ptr_base.h:730\r\n    #8 0x563844ef8202 in std::__shared_ptr<arrow::fs::S3FileSystem, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() /usr/include/c++/9/bits/shared_ptr_base.h:1169\r\n    #9 0x563844f2c02b in std::__shared_ptr<arrow::fs::S3FileSystem, (__gnu_cxx::_Lock_policy)2>::reset() /usr/include/c++/9/bits/shared_ptr_base.h:1287\r\n    #10 0x563844f0725e in arrow::fs::TestS3FS::TestOpenOutputStream() ../src/arrow/filesystem/s3fs_test.cc:466\r\n    #11 0x563844ec69e7 in arrow::fs::TestS3FS_OpenOutputStreamBackgroundWrites_Test::TestBody() ../src/arrow/filesystem/s3fs_test.cc:853\r\n    #12 0x7f4fca6eb98d in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest.so+0x4c98d)\r\n\r\npreviously allocated by thread T0 here:\r\n    #0 0x7f4fdeae9b5e in operator new(unsigned long) /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:104\r\n    #1 0x7f4fd40414e6 in arrow::fs::S3FileSystem::S3FileSystem(arrow::fs::S3Options const&, arrow::io::IOContext const&) ../src/arrow/filesystem/s3fs.cc:1661\r\n    #2 0x7f4fd4041cf0 in arrow::fs::S3FileSystem::Make(arrow::fs::S3Options const&, arrow::io::IOContext const&) ../src/arrow/filesystem/s3fs.cc:1671\r\n    #3 0x563844efdaf3 in arrow::fs::TestS3FS::MakeFileSystem() ../src/arrow/filesystem/s3fs_test.cc:405\r\n    #4 0x563844efa8a4 in arrow::fs::TestS3FS::SetUp() ../src/arrow/filesystem/s3fs_test.cc:376\r\n    #5 0x7f4fca6eb98d in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/antoine/miniconda3/envs/pyarrow/lib/libgtest.so+0x4c98d)\r\n\r\nSUMMARY: AddressSanitizer: heap-use-after-free ../src/arrow/filesystem/s3fs.cc:970 in UploadPart\r\nShadow bytes around the buggy address:\r\n  0x0c3280033e90: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c3280033ea0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c3280033eb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c3280033ec0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c3280033ed0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n=>0x0c3280033ee0: fd fd fd fd fd fd fd fd fd fd fd[fd]fd fd fd fd\r\n  0x0c3280033ef0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c3280033f00: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c3280033f10: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c3280033f20: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c3280033f30: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n  Shadow gap:              cc\r\n```\r\n",
        "created_at": "2021-04-06T12:46:50.000Z",
        "updated_at": "2021-04-06T19:11:09.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-04-06T19:11:03.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-06T19:11:03.294Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12226?focusedCommentId=17315793) by David Li (lidavidm):*\nIssue resolved by pull request 9908\n<https://github.com/apache/arrow/pull/9908>"
        }
    ]
}