{
    "issue": {
        "title": "[C++] Parquet pushdown filtering fails if the filter expression uses numeric field references",
        "body": "***Note**: This issue was originally created as [ARROW-15658](https://issues.apache.org/jira/browse/ARROW-15658). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe can refer to a field by name (e.g. `compute::field_ref(\"foo\")`) or by index (e.g. `compute::field_ref(0)`).\r\n\r\nThe latter is not supported when doing parquet projection.  A test can demonstrating this can be found here: https://github.com/westonpace/arrow/commit/2f92ed0764cf2e1388dac053aeb4e1b923c6872e\r\n\r\nCopied here for posterity (this would go in the dataset fixture mixin):\r\n\r\n```Java\n\r\n  void TestScanWithFieldPathFilter() {\r\n    auto i32 = field(\"i32\", int32());\r\n    auto i64 = field(\"i64\", int64());\r\n    this->opts_->dataset_schema = schema({i32, i64});\r\n    this->Project({\"i64\"});\r\n    // This should be the column i32\r\n    this->SetFilter(equal(field_ref(0), literal(0)));\r\n    auto expected_schema = schema({i64});\r\n    auto reader = this->GetRecordBatchReader(opts_->dataset_schema);\r\n    auto source = this->GetFileSource(reader.get());\r\n    auto fragment = this->MakeFragment(*source);\r\n\r\n    int64_t row_count = 0;\r\n\r\n    for (auto maybe_batch : PhysicalBatches(fragment)) {\r\n      ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\r\n      row_count += batch->num_rows();\r\n      AssertSchemaEqual(*batch->schema(), *expected_schema,\r\n                        /*check_metadata=*/false);\r\n    }\r\n\r\n    ASSERT_EQ(row_count, expected_rows());\r\n  }\r\n```\r\n\r\nI would expect this to work.  Instead I get the error:\r\n\r\n```\n\r\n/home/pace/dev/arrow/cpp/src/arrow/dataset/test_util.h:840: Failure\r\nFailed\r\n'_error_or_value83.status()' failed with NotImplemented: Inferring column projection from FieldRef FieldRef.FieldPath(0)\r\n/home/pace/dev/arrow/cpp/src/arrow/dataset/file_parquet.cc:262  ResolveOneFieldRef(manifest, ref, field_lookup, duplicate_fields, &columns_selection)\r\n/home/pace/dev/arrow/cpp/src/arrow/dataset/file_parquet.cc:437  InferColumnProjection(*reader, *options)\r\n/home/pace/dev/arrow/cpp/src/arrow/util/iterator.h:152  value_.status()\r\n```",
        "created_at": "2022-02-11T02:37:32.000Z",
        "updated_at": "2022-07-12T14:04:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-02-11T13:45:46.393Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15658?focusedCommentId=17490930) by David Li (lidavidm):*\nI think in general we don't support using indices. We probably could add the support. "
        },
        {
            "created_at": "2022-03-18T09:03:08.065Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15658?focusedCommentId=17508660) by Vibhatha Lakmal Abeykoon (vibhatha):*\n`[~westonpace]` `[~lidavidm]` \u00a0I made a draft PR with a simple fix. But I am not entirely sure if I have convered all the basis as far as `FieldPath` usage or nested refs taken into account. Would appreciate your feedback on this.\u00a0"
        },
        {
            "created_at": "2022-03-18T09:42:42.969Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15658?focusedCommentId=17508675) by Vibhatha Lakmal Abeykoon (vibhatha):*\nThe test cases are failing for some of the github workflows, I am looking into it.\u00a0"
        },
        {
            "created_at": "2022-07-12T14:04:49.025Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15658?focusedCommentId=17565766) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}