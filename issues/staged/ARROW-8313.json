{
    "issue": {
        "title": "[Gandiva][UDF] Solutions to register new UDFs dynamically without checking it into arrow repo.",
        "body": "***Note**: This issue was originally created as [ARROW-8313](https://issues.apache.org/jira/browse/ARROW-8313). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHi there,\r\n\r\nRecently I'm studying on gandiva and trying to add some UDF. I noted that it's needed to check the UDF implementation into the arrow repo, register the UDF and then build the UDF into precompiled_bitcode lib, right? I'm just wandering that is it possible to register new UDFs dynamically? Say I have the UDF implementation code locally which is not built into the gandiva lib yet, am I able to call some function or other solutions provided by gandiva officially to register and implement it. Thanks in advance.",
        "created_at": "2020-04-02T08:44:52.000Z",
        "updated_at": "2022-03-03T16:15:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: C++ - Gandiva",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-04-03T07:07:40.319Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8313?focusedCommentId=17074329) by Pindikura Ravindra (pravindra):*\nThis functionality is not supported yet and I'm not aware of anyone working on it.\r\n \u00a0\r\n However, I think it shouldn't be very hard to support this. There are two places where gandiva interacts with functions :\r\n1. \u00a0Function registry\n    \\*\\* the gandiva code looks for fns based on a signature (includes name & input types) in a [function registry](https://github.com/apache/arrow/blob/master/cpp/src/gandiva/function_registry.h). The lookup function returns the name of the pre-compiled function\n    \\*\\* This can be enhanced to support multiple registries - allow for registration of additional registried in addition to the static one.\n1. Loading pre-compiled modules\n    \\*\\* At the time of building the module, the [engine loads the pre-compiled IR](https://github.com/apache/arrow/blob/master/cpp/src/gandiva/engine.cc#L159). This will need to also load other registered libraries (either as a string or a file).\n    \u00a0\u00a0\n    \u00a0\n    And, we will need to come up with some scheme to avoid name conflicts - both the names in the registry & the names of the functions."
        },
        {
            "created_at": "2020-04-10T10:39:00.339Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8313?focusedCommentId=17080407) by ZMZ91 (ZMZ91):*\nThanks `[~pravindra]`. So do you guys have any plan to support it? Or any way that I can contribute it?"
        },
        {
            "created_at": "2020-04-14T12:49:01.943Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8313?focusedCommentId=17083180) by Praveen Kumar (praveenbingo):*\n`[~ZMZ91]` As of now, we do not plan to actively work on adding this support. Please go ahead if you want to implement this, we will help out in case of road\u00a0 blocks."
        },
        {
            "created_at": "2020-04-18T03:11:48.999Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8313?focusedCommentId=17086244) by ZMZ91 (ZMZ91):*\nThanks for your info `[~praveenbingo]`."
        }
    ]
}