{
    "issue": {
        "title": "libarrow.a is not linked against boost libraries when compiled with -DARROW_BOOST_USE_SHARED=off",
        "body": "***Note**: This issue was originally created as [ARROW-1368](https://issues.apache.org/jira/browse/ARROW-1368). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen I build arrow with `-DARROW_BOOST_USE_SHARED=off` and then inspect `libarrow.a` with `nm -g libarrow.a`, some boost symbols are undefined.\n\nThe problem can be reproduced on Ubuntu 16.04 as follows.\n\nFirst compile boost with -fPIC.\n\n```Java\ncd ~\nwget --no-check-certificate http://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.gz -O ~/boost_1_60_0.tar.gz\ntar xf boost_1_60_0.tar.gz\ncd boost_1_60_0/\n./bootstrap.sh\n./bjam cxxflags=-fPIC cflags=-fPIC --prefix=../boost --with-filesystem --with-date_time --with-system --with-regex install\ncd ..\n```\n\nThen compile Arrow.\n\n```Java\ncd ~\ngit clone https://github.com/apache/arrow\nmkdir -p ~/arrow/cpp/build\ncd ~/arrow/cpp/build\nBOOST_ROOT=~/boost \\\ncmake -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_C_FLAGS=\"-g -O3\" \\\n      -DCMAKE_CXX_FLAGS=\"-g -O3\" \\\n      -DARROW_BUILD_TESTS=off \\\n      -DARROW_HDFS=on \\\n      -DARROW_BOOST_USE_SHARED=off \\\n      -DARROW_PYTHON=on \\\n      -DARROW_PLASMA=on \\\n      -DPLASMA_PYTHON=on \\\n      -DARROW_JEMALLOC=off \\\n      -DARROW_WITH_BROTLI=off \\\n      -DARROW_WITH_LZ4=off \\\n      -DARROW_WITH_SNAPPY=off \\\n      -DARROW_WITH_ZLIB=off \\\n      -DARROW_WITH_ZSTD=off \\\n      ..\n\nmake VERBOSE=1 -j8\n```\n\nThe cmake command finds the recently compiled boost and prints the following.\n\n```Java\n-- [ /usr/share/cmake-3.5/Modules/FindBoost.cmake:1516 ] Boost_FOUND = 1\n-- Boost version: 1.60.0\n-- Found the following Boost libraries:\n--   system\n--   filesystem\n-- Boost include dir: /home/ubuntu/boost/include\n-- Boost libraries: /home/ubuntu/boost/lib/libboost_system.a/home/ubuntu/boost/lib/libboost_filesystem.a\nAdded static library dependency boost_system: /home/ubuntu/boost/lib/libboost_system.a\nAdded static library dependency boost_filesystem: /home/ubuntu/boost/lib/libboost_filesystem.a\n```\n\nCompilation does not appear to link `libarrow.a` against the boost libraries (though `libarrow.so` is handled properly).\n\nFor `libarrow.a` (not linked against boost)\n\n```Java\n/usr/bin/ar qc release/libarrow.a  CMakeFiles/arrow_objlib.dir/src/arrow/array.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/buffer.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/builder.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/compare.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/memory_pool.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/pretty_print.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/status.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/table.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/tensor.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/type.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/visitor.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/file.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/interfaces.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/memory.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/bit-util.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/compression.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/cpu-info.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/decimal.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/key_value_metadata.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/hdfs.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/hdfs-internal.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/feather.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/json.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/json-internal.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/metadata.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/reader.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/writer.cc.o\n```\n\nFor `libarrow.so` (linked against boost)\n\n```Java\n/usr/bin/c++  -fPIC -g -O3 -O3 -DNDEBUG -Wall -std=c++11 -msse3  -O3 -DNDEBUG -Wl,--version-script=/home/ubuntu/arrow/cpp/src/arrow/symbols.map -shared -Wl,-soname,libarrow.so.0 -o release/libarrow.so.0.0.0 CMakeFiles/arrow_objlib.dir/src/arrow/array.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/buffer.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/builder.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/compare.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/memory_pool.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/pretty_print.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/status.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/table.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/tensor.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/type.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/visitor.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/file.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/interfaces.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/memory.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/bit-util.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/compression.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/cpu-info.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/decimal.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/util/key_value_metadata.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/hdfs.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/io/hdfs-internal.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/feather.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/json.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/json-internal.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/metadata.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/reader.cc.o CMakeFiles/arrow_objlib.dir/src/arrow/ipc/writer.cc.o -ldl -lpthread /home/ubuntu/boost/lib/libboost_system.a /home/ubuntu/boost/lib/libboost_filesystem.a \n```\n\nThen `nm -g release/libarrow.a` contains the following line (for example).\n\n```Java\n                 U _ZN5boost6system15system_categoryEv\n```\n\nThe file `arrow/cpp/CMakeLists.txt` contains the block\n\n```Java\nADD_ARROW_LIB(arrow\n  SOURCES ${ARROW_ALL_SRCS}\n  DEPENDENCIES arrow_dependencies\n  SHARED_LINK_FLAGS ${ARROW_SHARED_LINK_FLAGS}\n  SHARED_LINK_LIBS ${ARROW_LINK_LIBS}\n  SHARED_PRIVATE_LINK_LIBS ${ARROW_SHARED_PRIVATE_LINK_LIBS}\n  STATIC_LINK_LIBS ${ARROW_STATIC_LINK_LIBS}\n  STATIC_PRIVATE_LINK_LIBS ${ARROW_STATIC_PRIVATE_LINK_LIBS}\n)\n```\n\nPrinting `ARROW_STATIC_PRIVATE_LINK_LIBS` shows that the variable equals `boost_system_static;boost_filesystem_static`, which seems right.\n\nLet me know if you have any thoughts about this.",
        "created_at": "2017-08-16T23:49:30.000Z",
        "updated_at": "2017-08-17T00:29:13.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2017-08-17T00:29:13.000Z"
    },
    "comments": [
        {
            "created_at": "2017-08-16T23:57:36.563Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1368?focusedCommentId=16129644) by Wes McKinney (wesm):*\nThis is as expected with static libraries; it is simply the result of calling `ar` on the object code that is part of the library, and does not include transitive dependencies. The easiest thing is to include the transitive dependencies in your downstream build system if you want to statically link. \n\nThere may be some way to create a \"super archive\" containing the Boost static libraries, but I am not sure how to do that. We were discussing it not long ago in the Parquet C++ library (because moving the compression libraries to Arrow introduced a transitive dependency for static linkers of libparquet.a)"
        },
        {
            "created_at": "2017-08-17T00:28:50.208Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1368?focusedCommentId=16129678) by Robert Nishihara (robertnishihara):*\nThanks! Including the dependencies in the downstream build seems to work."
        }
    ]
}