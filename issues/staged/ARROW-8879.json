{
    "issue": {
        "title": "[FlightRPC][Java] FlightStream should unwrap ExecutionExceptions",
        "body": "***Note**: This issue was originally created as [ARROW-8879](https://issues.apache.org/jira/browse/ARROW-8879). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently FlightStream bubbles a lot of exceptions as RuntimeException or ExecutionException, or just wraps them with CallStatus.INTERNAL. For RuntimeException, we should always check if it's a gRPC StatusRuntimeException and convert to the equivalent Flight exception; for ExecutionException, we should check if the _cause_ is a gRPC exception and convert.\r\n\r\nExample: on master, FlightStream#getDescriptor reports all errors as CallStatus.INTERNAL, but we should inspect ExecutionException#getCause instead.\r\n\r\nThis is needed so that errors get properly reported, e.g. if a service sends a PERMISSION_DENIED error, the client should get that and not a RuntimeException, ExecutionException, or INTERNAL error.",
        "created_at": "2020-05-21T12:19:25.000Z",
        "updated_at": "2020-08-18T14:26:58.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: FlightRPC",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-08-18T14:26:58.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-18T14:26:58.853Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8879?focusedCommentId=17179651) by David Li (lidavidm):*\nThis was already fixed in 1.0.0 when FlightStream was refactored for DoExchange."
        }
    ]
}