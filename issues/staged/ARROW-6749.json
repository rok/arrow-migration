{
    "issue": {
        "title": "[Python] Conversion of non-ns timestamp array to numpy gives wrong values",
        "body": "***Note**: This issue was originally created as [ARROW-6749](https://issues.apache.org/jira/browse/ARROW-6749). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```Java\n\r\nIn [25]: np_arr = np.arange(\"2012-01-01\", \"2012-01-06\", int(1e6)*60*60*24, dtype=\"datetime64[us]\")                                                                                                                 \r\n\r\nIn [26]: np_arr                                                                                                                                                                                                    \r\nOut[26]: \r\narray(['2012-01-01T00:00:00.000000', '2012-01-02T00:00:00.000000',\r\n       '2012-01-03T00:00:00.000000', '2012-01-04T00:00:00.000000',\r\n       '2012-01-05T00:00:00.000000'], dtype='datetime64[us]')\r\n\r\nIn [27]: arr = pa.array(np_arr)                                                                                                                                                                                    \r\n\r\nIn [28]: arr                                                                                                                                                                                                       \r\nOut[28]: \r\n<pyarrow.lib.TimestampArray object at 0x7f0b2ef07ee8>\r\n[\r\n  2012-01-01 00:00:00.000000,\r\n  2012-01-02 00:00:00.000000,\r\n  2012-01-03 00:00:00.000000,\r\n  2012-01-04 00:00:00.000000,\r\n  2012-01-05 00:00:00.000000\r\n]\r\n\r\nIn [29]: arr.type                                                                                                                                                                                                  \r\nOut[29]: TimestampType(timestamp[us])\r\n\r\nIn [30]: arr.to_numpy()                                                                                                                                                                                            \r\nOut[30]: \r\narray(['1970-01-16T08:09:36.000000000', '1970-01-16T08:11:02.400000000',\r\n       '1970-01-16T08:12:28.800000000', '1970-01-16T08:13:55.200000000',\r\n       '1970-01-16T08:15:21.600000000'], dtype='datetime64[ns]')\r\n```\r\n\r\nSo it seems to simply interpret the integer microsecond values as nanoseconds when converting to numpy.",
        "created_at": "2019-10-01T10:07:48.000Z",
        "updated_at": "2021-02-17T16:30:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-11-14T17:19:01.000Z"
    },
    "comments": [
        {
            "created_at": "2019-10-01T10:32:25.490Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6749?focusedCommentId=16941724) by Joris Van den Bossche (jorisvandenbossche):*\nSo the reason for this is that we are taking a view on the buffer using `dtype=self.type.to_pandas_dtype()`, which returns the \"wrong\" thing:\r\n\r\n```Java\n\r\nIn [48]: arr.type                                                                                                                                                                                                  \r\nOut[48]: TimestampType(timestamp[us])\r\n\r\nIn [49]: arr.type.to_pandas_dtype()                                                                                                                                                                                \r\nOut[49]: dtype('<M8[ns]')\r\n```\r\n\r\nI am putting \"wrong\" in quotes as it is correct that this is the dtype that pandas will use to store such values in a pandas dataframe (but, it will then convert the values of course). But if you use it here to construct a numpy array like that, it is of course the wrong dtype.\r\n\r\nJust to note here: this is only for `to_numpy`. The `np.(as)array(..)` (using `\\_\\_array\\_\\_`) works fine (this uses the `ConvertArrayToPandas` C++ functionality, which handles this correctly)."
        },
        {
            "created_at": "2019-10-01T10:36:57.465Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6749?focusedCommentId=16941725) by Joris Van den Bossche (jorisvandenbossche):*\nWe seem to explicitly test this right now that an arrow non-ns timestamp type gives datetime64[ns] in to_pandas_dtype .."
        },
        {
            "created_at": "2019-11-14T17:19:01.792Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6749?focusedCommentId=16974462) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 5718\n<https://github.com/apache/arrow/pull/5718>"
        }
    ]
}