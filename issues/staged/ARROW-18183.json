{
    "issue": {
        "title": "[C++] cpp-micro benchmarks are failing on mac arm machine",
        "body": "***Note**: This issue was originally created as [ARROW-18183](https://issues.apache.org/jira/browse/ARROW-18183). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n",
        "created_at": "2022-10-27T23:00:46.000Z",
        "updated_at": "2022-11-03T07:42:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Benchmarking",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-11-02T21:41:58.000Z"
    },
    "comments": [
        {
            "created_at": "2022-10-27T23:02:25.630Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18183?focusedCommentId=17625352) by Elena Henderson (elena@ursacomputing.com):*\ncpp-micro benchmarks started failing on `test-mac-arm` since this change: <https://github.com/apache/arrow/commit/ec579df631deaa8f6186208ed2a4ebec00581dfa>\r\n\r\nFirst failed build: <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1628>\r\n\r\n\u00a0\r\n\r\nSteps to reproduce:\r\n\r\n1. Run benchmarks for commit <https://github.com/apache/arrow/commit/89c0214fa43f8d1bf2e19e3bae0fc3009df51e15>, which was made right before\u00a0\r\n<https://github.com/apache/arrow/commit/ec579df631deaa8f6186208ed2a4ebec00581dfa>\r\n```java\n\r\ncd ~\r\nrm -rf arrow\r\ngit clone https://github.com/apache/arrow.git\r\ncd arrow\r\ngit checkout 89c0214fa43f8d1bf2e19e3bae0fc3009df51e15\r\nconda create -y -n arrow-commit -c conda-forge \\\r\n\u00a0 --file ci/conda_env_unix.txt \\\r\n\u00a0 --file ci/conda_env_cpp.txt \\\r\n\u00a0 --file ci/conda_env_python.txt \\\r\n\u00a0 compilers \\\r\n\u00a0 python=3.8 \\\r\n\u00a0 pandas\r\nconda activate arrow-commit\r\npip install -r python/requirements-build.txt -r python/requirements-test.txt\r\nsource dev/conbench_envs/hooks.sh set_arrow_build_and_run_env_vars\r\nexport RANLIB=`which $RANLIB`\r\nexport AR=`which $AR`\r\nexport ARROW_JEMALLOC=OFF\r\npip install -e dev/archery\r\narchery benchmark run\r\n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nNote benchmarks are NOT failing!\r\n\r\n\u00a0\r\n\r\n2. Run benchmarks for <https://github.com/apache/arrow/commit/ec579df631deaa8f6186208ed2a4ebec00581dfa> when cpp-micro benchmarks started failing:\r\n\r\n\u00a0\r\n```java\n\r\ncd ~\r\nrm -rf arrow\r\ngit clone https://github.com/apache/arrow.git\r\ncd arrow\r\ngit checkout ec579df631deaa8f6186208ed2a4ebec00581dfa\r\nconda create -y -n arrow-commit -c conda-forge \\\r\n\u00a0 --file ci/conda_env_unix.txt \\\r\n\u00a0 --file ci/conda_env_cpp.txt \\\r\n\u00a0 --file ci/conda_env_python.txt \\\r\n\u00a0 compilers \\\r\n\u00a0 python=3.8 \\\r\n\u00a0 pandas\r\nconda activate arrow-commit\r\npip install -r python/requirements-build.txt -r python/requirements-test.txt\r\nsource dev/conbench_envs/hooks.sh set_arrow_build_and_run_env_vars\r\nexport RANLIB=`which $RANLIB`\r\nexport AR=`which $AR`\r\nexport ARROW_JEMALLOC=OFF\r\npip install -e dev/archery\r\narchery benchmark run\r\n```\r\n\u00a0\r\n\r\n\r\nNote benchmarks stop running:\r\n\r\n\u00a0\r\n```java\n\r\n...\r\nCoalesceScalarStringBench/6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6174977 ns\u00a0 \u00a0 \u00a0 6174982 ns\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 111 bytes_per_second=664.007M/s items_per_second=169.81M/s length=1048.58k null%=99 num_args=2\r\nChooseBench64/1048576/0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6787276 ns\u00a0 \u00a0 \u00a0 6787272 ns\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 103 bytes_per_second=1.15105G/s items_per_second=154.492M/s\r\nChooseBench64/1048576/99\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6722603 ns\u00a0 \u00a0 \u00a0 6722606 ns\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 104 bytes_per_second=1.16201G/s items_per_second=155.963M/s\r\n/Users/voltrondata/arrow/cpp/src/arrow/memory_pool.cc:113: Unsupported backend 'mimalloc' specified in ARROW_DEFAULT_MEMORY_POOL (supported backends are 'system')\r\nUnable to determine clock rate from sysctl: hw.cpufrequency: No such file or directory\r\nThis does not affect benchmark measurements, only the metadata output.\r\n2022-10-27T18:58:59-04:00\r\nRunning /var/folders/d9/n0lbzbf16nvgt7b83xhcssm80000gn/T/arrow-archery-18pv4wou/WORKSPACE/build/release/arrow-dataset-scanner-benchmark\r\nRun on (8 X 24.2407 MHz CPU s)\r\nCPU Caches:\r\n\u00a0 L1 Data 64 KiB\r\n\u00a0 L1 Instruction 128 KiB\r\n\u00a0 L2 Unified 4096 KiB (x8)\r\nLoad Average: 15.79, 15.29, 10.64\r\n---------------------------------------------------------------------------------------------------------------------------------------------------\r\nBenchmark \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Time \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CPU \u00a0 Iterations UserCounters...\r\n---------------------------------------------------------------------------------------------------------------------------------------------------\r\nMinimalEndToEndBench/num_batches:1000/batch_size:10/scan_alg:0/iterations:10/real_time \u00a0 \u00a0 23472042 ns\u00a0 \u00a0 \u00a0 5977400 ns \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10 bytes_per_second=2.03151M/s items_per_second=42.6039k/s\r\nTraceback (most recent call last):\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/bin/archery\", line 33, in <module>\r\n\u00a0 \u00a0 sys.exit(load_entry_point('archery', 'console_scripts', 'archery')())\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/site-packages/click/core.py\", line 1130, in _call_\r\n\u00a0 \u00a0 return self.main(*args, **kwargs)\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/site-packages/click/core.py\", line 1055, in main\r\n\u00a0 \u00a0 rv = self.invoke(ctx)\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/site-packages/click/core.py\", line 1657, in invoke\r\n\u00a0 \u00a0 return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/site-packages/click/core.py\", line 1657, in invoke\r\n\u00a0 \u00a0 return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/site-packages/click/core.py\", line 1404, in invoke\r\n\u00a0 \u00a0 return ctx.invoke(self.callback, **ctx.params)\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/site-packages/click/core.py\", line 760, in invoke\r\n\u00a0 \u00a0 return __callback(*args, **kwargs)\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/site-packages/click/decorators.py\", line 26, in new_func\r\n\u00a0 \u00a0 return f(get_current_context(), *args, **kwargs)\r\n\u00a0 File \"/Users/voltrondata/arrow/dev/archery/archery/cli.py\", line 515, in benchmark_run\r\n\u00a0 \u00a0 json_out = json.dumps(runner_base, cls=JsonEncoder)\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/json/_init_.py\", line 234, in dumps\r\n\u00a0 \u00a0 return cls(\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/json/encoder.py\", line 199, in encode\r\n\u00a0 \u00a0 chunks = self.iterencode(o, _one_shot=True)\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/json/encoder.py\", line 257, in iterencode\r\n\u00a0 \u00a0 return _iterencode(o, 0)\r\n\u00a0 File \"/Users/voltrondata/arrow/dev/archery/archery/benchmark/codec.py\", line 35, in default\r\n\u00a0 \u00a0 return BenchmarkRunnerCodec.encode(o)\r\n\u00a0 File \"/Users/voltrondata/arrow/dev/archery/archery/benchmark/codec.py\", line 79, in encode\r\n\u00a0 \u00a0 return {\"suites\": [BenchmarkSuiteCodec.encode(s) for s in br.suites]}\r\n\u00a0 File \"/Users/voltrondata/arrow/dev/archery/archery/benchmark/codec.py\", line 79, in <listcomp>\r\n\u00a0 \u00a0 return {\"suites\": [BenchmarkSuiteCodec.encode(s) for s in br.suites]}\r\n\u00a0 File \"/Users/voltrondata/arrow/dev/archery/archery/benchmark/runner.py\", line 176, in suites\r\n\u00a0 \u00a0 suite = self.suite(suite_name, suite_bin)\r\n\u00a0 File \"/Users/voltrondata/arrow/dev/archery/archery/benchmark/runner.py\", line 152, in suite\r\n\u00a0 \u00a0 results = suite_cmd.results(repetitions=self.repetitions)\r\n\u00a0 File \"/Users/voltrondata/arrow/dev/archery/archery/benchmark/google.py\", line 63, in results\r\n\u00a0 \u00a0 self.run(*argv, check=True)\r\n\u00a0 File \"/Users/voltrondata/arrow/dev/archery/archery/utils/command.py\", line 78, in run\r\n\u00a0 \u00a0 return subprocess.run(invocation, **kwargs)\r\n\u00a0 File \"/Users/voltrondata/miniconda3/envs/arrow-commit/lib/python3.8/subprocess.py\", line 516, in run\r\n\u00a0 \u00a0 raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['/var/folders/d9/n0lbzbf16nvgt7b83xhcssm80000gn/T/arrow-archery-18pv4wou/WORKSPACE/build/release/arrow-dataset-scanner-benchmark', '--benchmark_repetitions=1', '--benchmark_out=/var/folders/d9/n0lbzbf16nvgt7b83xhcssm80000gn/T/tmpzwwjwb94', '--benchmark_out_format=json']' died with <Signals.SIGBUS: 10>.\r\n```\r\n\u00a0"
        },
        {
            "created_at": "2022-11-01T09:17:44.239Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18183?focusedCommentId=17627030) by Yibo Cai (yibocai):*\nTested on M1, all \"arrow-dataset-scanner-benchmark/scan_alg=1\" tests failed with SIGBUS. \"scan_alg=0\" tests are okay.\r\nStack depth is approaching 4000 from the backtrace. Looks there are a call loop among \\{future,async_util\\}.\\{h,cc\\}.\r\nASAN identified stack overflow, logs attached.\r\ncc `[~westonpace]`\r\n\r\n```bash\n\r\n# all scan_alg:0 tests are okay, all scan_alg:1 tests cause sigbus\r\n% debug/arrow-dataset-scanner-benchmark --benchmark_filter=\".*scan_alg:1.*\" \r\n\r\n/Users/linux/cyb/arrow/cpp/src/arrow/memory_pool.cc:113: Unsupported backend 'mimalloc' specified in ARROW_DEFAULT_MEMORY_POOL (supported backends are 'jemalloc', 'system')\r\nUnable to determine clock rate from sysctl: hw.cpufrequency: No such file or directory\r\nThis does not affect benchmark measurements, only the metadata output.\r\n2022-11-01T17:02:15+08:00\r\nRunning debug/arrow-dataset-scanner-benchmark\r\nRun on (8 X 24.2408 MHz CPU s)\r\nCPU Caches:\r\n  L1 Data 64 KiB\r\n  L1 Instruction 128 KiB\r\n  L2 Unified 4096 KiB (x8)\r\nLoad Average: 2.06, 2.81, 2.72\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==75674==ERROR: AddressSanitizer: stack-overflow on address 0x00016b9b3fc0 (pc 0x000106b4b3b4 bp 0x000106b4b3a0 sp 0x00016b9b3fa0 T1)\r\n    #0 0x106b4b3b4 in __sanitizer::StackDepotBase<__sanitizer::StackDepotNode, 1, 20>::Put(__sanitizer::StackTrace, bool*)+0x4 (libclang_rt.asan_osx_dynamic.dylib:arm64+0x5f3b4)\r\n\r\nSUMMARY: AddressSanitizer: stack-overflow (libclang_rt.asan_osx_dynamic.dylib:arm64+0x5f3b4) in __sanitizer::StackDepotBase<__sanitizer::StackDepotNode, 1, 20>::Put(__sanitizer::StackTrace, bool*)+0x4\r\nThread T1 created by T0 here:\r\n    #0 0x106b2680c in wrap_pthread_create+0x50 (libclang_rt.asan_osx_dynamic.dylib:arm64+0x3a80c)\r\n    #1 0x113b7a408 in std::__1::__libcpp_thread_create(_opaque_pthread_t**, void* (*)(void*), void*) __threading_support:375\r\n    #2 0x113b7a128 in std::__1::thread::thread<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3, void>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3&&) thread:309\r\n    #3 0x113b67e94 in std::__1::thread::thread<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3, void>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3&&) thread:301\r\n    #4 0x113b66794 in arrow::internal::ThreadPool::LaunchWorkersUnlocked(int) thread_pool.cc:412\r\n    #5 0x113b68444 in arrow::internal::ThreadPool::SpawnReal(arrow::internal::TaskHints, arrow::internal::FnOnce<void ()>, arrow::StopToken, arrow::internal::FnOnce<void (arrow::Status const&)>&&) thread_pool.cc:448\r\n    #6 0x10488dfd8 in arrow::Result<arrow::Future<std::__1::shared_ptr<arrow::Iterator<std::__1::shared_ptr<arrow::dataset::Fragment> > > > > arrow::internal::Executor::Submit<arrow::dataset::(anonymous namespace)::GetFragments(arrow::dataset::Dataset*, arrow::compute::Expression)::$_0, arrow::Future<std::__1::shared_ptr<arrow::Iterator<std::__1::shared_ptr<arrow::dataset::Fragment> > > > >(arrow::internal::TaskHints, arrow::StopToken, arrow::dataset::(anonymous namespace)::GetFragments(arrow::dataset::Dataset*, arrow::compute::Expression)::$_0&&) thread_pool.h:167\r\n    #7 0x10488be74 in arrow::Result<arrow::Future<std::__1::shared_ptr<arrow::Iterator<std::__1::shared_ptr<arrow::dataset::Fragment> > > > > arrow::internal::Executor::Submit<arrow::dataset::(anonymous namespace)::GetFragments(arrow::dataset::Dataset*, arrow::compute::Expression)::$_0, arrow::Future<std::__1::shared_ptr<arrow::Iterator<std::__1::shared_ptr<arrow::dataset::Fragment> > > > >(arrow::dataset::(anonymous namespace)::GetFragments(arrow::dataset::Dataset*, arrow::compute::Expression)::$_0&&) thread_pool.h:193\r\n    #8 0x10488ac0c in arrow::dataset::(anonymous namespace)::GetFragments(arrow::dataset::Dataset*, arrow::compute::Expression) scan_node.cc:64\r\n    #9 0x10488a010 in arrow::dataset::(anonymous namespace)::ScanNode::StartProducing() scan_node.cc:318\r\n    #10 0x113fc43e0 in arrow::compute::(anonymous namespace)::ExecPlanImpl::StartProducing() exec_plan.cc:183\r\n    #11 0x113fc362c in arrow::compute::ExecPlan::StartProducing() exec_plan.cc:400\r\n    #12 0x104462260 in arrow::dataset::MinimalEndToEndScan(unsigned long, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::function<arrow::Result<std::__1::shared_ptr<arrow::compute::ExecNodeOptions> > (unsigned long, unsigned long)>) scanner_benchmark.cc:159\r\n    #13 0x104468ebc in arrow::dataset::MinimalEndToEndBench(benchmark::State&) scanner_benchmark.cc:272\r\n    #14 0x1055dbc8c in benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0x44 (libbenchmark.1.7.0.dylib:arm64+0xbc8c)\r\n    #15 0x1055ed708 in benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x58 (libbenchmark.1.7.0.dylib:arm64+0x1d708)\r\n    #16 0x1055ed2c8 in benchmark::internal::BenchmarkRunner::DoNIterations()+0x2c0 (libbenchmark.1.7.0.dylib:arm64+0x1d2c8)\r\n    #17 0x1055edfec in benchmark::internal::BenchmarkRunner::DoOneRepetition()+0xb0 (libbenchmark.1.7.0.dylib:arm64+0x1dfec)\r\n    #18 0x1055d4fb8 in benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)+0x9f0 (libbenchmark.1.7.0.dylib:arm64+0x4fb8)\r\n    #19 0x1055d4564 in benchmark::RunSpecifiedBenchmarks()+0x3c (libbenchmark.1.7.0.dylib:arm64+0x4564)\r\n    #20 0x10556becc in main+0x50 (libbenchmark_main.1.7.0.dylib:arm64+0x3ecc)\r\n    #21 0x10562d0f0 in start+0x204 (dyld:arm64+0x50f0)\r\n    #22 0xa25d7ffffffffffc  (<unknown module>)\r\n\r\n==75674==ABORTING\r\nzsh: abort      debug/arrow-dataset-scanner-benchmark --benchmark_filter=\".*scan_alg:1.*\"\r\n```"
        },
        {
            "created_at": "2022-11-01T09:21:28.616Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18183?focusedCommentId=17627037) by Yibo Cai (yibocai):*\nI tried setting ARROW_DEFAULT_MEMORY_POOL to \"jemalloc\" and \"system\", same error happens."
        },
        {
            "created_at": "2022-11-01T13:58:53.668Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18183?focusedCommentId=17627172) by Weston Pace (westonpace):*\nThank you.  I will look at this today."
        },
        {
            "created_at": "2022-11-02T21:41:58.129Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18183?focusedCommentId=17627995) by Weston Pace (westonpace):*\nIssue resolved by pull request 14562\n<https://github.com/apache/arrow/pull/14562>"
        }
    ]
}