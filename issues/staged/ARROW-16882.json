{
    "issue": {
        "title": "[Python] Allow to pick comparison function for joins",
        "body": "***Note**: This issue was originally created as [ARROW-16882](https://issues.apache.org/jira/browse/ARROW-16882). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSee https://github.com/apache/arrow/issues/13408\r\n\r\nWe probably want to allow end users to pick `JoinKeyCmp::EQ` or `JoinKeyCmp::IS` to perform the comparison",
        "created_at": "2022-06-22T19:24:02.000Z",
        "updated_at": "2022-10-04T08:06:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-06-22T20:00:04.997Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16882?focusedCommentId=17557673) by Ian Cook (icook):*\nTo clarify: Do you want the ability for null values in the key column of the left table to match null values in the key column of the right table in a join?\r\n\r\nThe way that some SQL databases deal with this is by using the `IS NOT DISTINCT FROM` operator in join conditions:\r\n```java\n\r\nx IS NOT DISTINCT FROM y\n```\r\nThere is also a shorthand for this:\r\n```java\n\r\nx <=> y \n```"
        },
        {
            "created_at": "2022-06-23T10:09:32.456Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16882?focusedCommentId=17557979) by Alessandro Molina (amol-):*\nCorrect, but the join in Acero don't accept a custom join condition as far as I know. So even if we had it as a comparison kernel there would be no way for the user to rely on it in joins.\r\n\r\nOn the other side the `HashJoinNode` has the `key_cmp` option ( https://github.com/apache/arrow/blob/8f0ddc785dd72e950b570f3bc380deb15c124c45/cpp/src/arrow/compute/exec/options.h#L375-L377 ) which can be used to drive `NULLs` behaviour"
        },
        {
            "created_at": "2022-06-27T15:14:22.620Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16882?focusedCommentId=17559220) by Weston Pace (westonpace):*\nYou're both right.  When mapping from Substrait we expect the join expression to be either a call to `equal` (which we map to `JoinKeyCmp::EQ`) or a call to `is_not_distinct_from` (which maps to `JoinKeyCmp::IS`).  Any other expression is an error."
        },
        {
            "created_at": "2022-06-27T15:17:42.137Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16882?focusedCommentId=17559221) by Weston Pace (westonpace):*\nAlso, this is not closely related to ARROW-16718.  The hash-join node does not use the compute registry for its equality testing (equality testing happens in the row-major hash-table which is a very different format for the data than a column-major array).  So we already have support for \"is_not_distinct_from\" in the hash-join node even though we don't have support for it in the function registry."
        }
    ]
}