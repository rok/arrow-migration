{
    "issue": {
        "title": "[Python] dictionary_encode() of a slice gives wrong result",
        "body": "***Note**: This issue was originally created as [ARROW-7266](https://issues.apache.org/jira/browse/ARROW-7266). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSteps to reproduce:\r\n\r\n```python\n\r\nimport pyarrow as pa\r\narr = pa.array([\"a\", \"b\", \"b\", \"b\"])[1:]\r\narr.dictionary_encode()\r\n```\r\n\r\nExpected results:\r\n\r\n```Java\n\r\n-- dictionary:\r\n  [\r\n    \"b\"\r\n  ]\r\n-- indices:\r\n  [\r\n    0,\r\n    0,\r\n    0\r\n  ]\r\n```\r\n\r\nActual results:\r\n\r\n```Java\n\r\n-- dictionary:\r\n  [\r\n    \"b\",\r\n    \"\"\r\n  ]\r\n-- indices:\r\n  [\r\n    0,\r\n    0,\r\n    1\r\n  ]\r\n```\r\n\r\nI don't know a workaround. Converting to pylist and back is too slow. Is there a way to copy the slice to a new offset-0 StringArray that I could then dictionary-encode? Otherwise, I'm considering building buffers by hand....",
        "created_at": "2019-11-26T14:34:06.000Z",
        "updated_at": "2019-12-19T06:44:32.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-12-19T06:44:32.000Z"
    },
    "comments": [
        {
            "created_at": "2019-11-26T14:36:32.154Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7266?focusedCommentId=16982544) by Adam Hooper (adamhooper):*\nAh, found a workaround that should be good enough for now: `pa.serialize(arr).deserialize().dictionary_encode()`"
        },
        {
            "created_at": "2019-11-27T14:16:41.032Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7266?focusedCommentId=16983548) by Joris Van den Bossche (jorisvandenbossche):*\n`[~adamhooper]` Thanks of the report!\r\n\r\nThis seems to be specific to the string type, as I don't see a similar bug for integer type:\r\n\r\n```Java\n\r\nIn [7]: a = pa.array(['a', 'b', 'c', 'b'])                                                                                                                                                                         \r\n\r\nIn [9]: a[1:].dictionary_encode()                                                                                                                                                                                  \r\nOut[9]: \r\n<pyarrow.lib.DictionaryArray object at 0x7f677975e128>\r\n\r\n-- dictionary:\r\n  [\r\n    \"c\",\r\n    \"b\",\r\n    \"\"\r\n  ]\r\n-- indices:\r\n  [\r\n    0,\r\n    1,\r\n    2\r\n  ]\r\n\r\nIn [10]: a = pa.array([1, 2, 3, 2])                                                                                                                                                                                \r\n\r\nIn [12]: a[1:].dictionary_encode()                                                                                                                                                                                 \r\nOut[12]: \r\n<pyarrow.lib.DictionaryArray object at 0x7f6776f5f208>\r\n\r\n-- dictionary:\r\n  [\r\n    2,\r\n    3\r\n  ]\r\n-- indices:\r\n  [\r\n    0,\r\n    1,\r\n    0\r\n  ]\r\n\r\n```\r\n\r\n\r\n>  Is there a way to copy the slice to a new offset-0 StringArray that I could then dictionary-encode? \r\n\r\nAt least in the current pyarrow API, I don't think such a functionality is exposed (apart from getting buffers, slicing/copying, and recreating an array)"
        },
        {
            "created_at": "2019-12-19T06:44:32.129Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7266?focusedCommentId=16999781) by Kouhei Sutou (kou):*\nIssue resolved by pull request 6061\n<https://github.com/apache/arrow/pull/6061>"
        }
    ]
}