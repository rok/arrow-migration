{
    "issue": {
        "title": "[Rust] [Parquet] Use IntoIter trait for write_batch/write_mini_batch",
        "body": "***Note**: This issue was originally created as [ARROW-5153](https://issues.apache.org/jira/browse/ARROW-5153). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWriting data to a parquet file requires a lot of copying and intermediate Vec creation. Take a record struct like:\r\n\r\n`struct MyData {``\u00a0 name: String,``\u00a0 address: Option<String>```}\r\n\r\nOver the course of working sets of this data, you'll have the bulk data Vec<MyData>,\u00a0 the names column in a Vec<&String>, the address column in a Vec<Option<String>>. This puts extra memory pressure on the system, at the minimum we have to allocate a Vec the same size as the bulk data even if we are using references.\r\n\r\nWhat I'm proposing is to use an IntoIter style. This will maintain backward compat as a slice automatically implements IntoIter. Where ColumnWriterImpl#write_batch goes from \"values: &[T::T]\"to values \"values: IntoIter<Item=T::T>\". Then you can do things like\r\n\r\n`\u00a0 write_batch(bulk.iter().map(|x| x.name), None, None)``\u00a0 write_batch(bulk.iter().map(|x| x.address), Some(bulk.iter().map(|x| x.is_some())), None)`\r\n\r\nand you can see there's no need for an intermediate Vec, so no short-term allocations to write out the data.\r\n\r\nI am writing data with many columns and I think this would really help to speed things up.",
        "created_at": "2019-04-09T19:16:01.000Z",
        "updated_at": "2021-04-26T11:23:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T11:23:40.000Z"
    },
    "comments": [
        {
            "created_at": "2019-04-09T19:22:29.534Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5153?focusedCommentId=16813735) by Xavier Lange (xrl):*\n`[~csun]` `[~sadikovi]` what do you think of this potentially breaking change? I need to confirm the backwards compatibility but I think it might still be a useful change."
        },
        {
            "created_at": "2019-04-09T19:33:52.271Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5153?focusedCommentId=16813751) by Ivan Sadikov (sadikovi):*\n`[~xrl]` Yes, sure. I will be happy to review if you open a PR with changes. We can create a new method \"write_batch_iter\", which implements new API and make \"write_batch\" to call the new method, since as you pointed out slice implements IntoIter."
        },
        {
            "created_at": "2021-04-26T11:23:39.422Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5153?focusedCommentId=17332027) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/43"
        }
    ]
}