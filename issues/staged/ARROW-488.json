{
    "issue": {
        "title": "[Python] Implement conversion between integer coded as floating points with NaN to an Arrow integer type",
        "body": "***Note**: This issue was originally created as [ARROW-488](https://issues.apache.org/jira/browse/ARROW-488). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFor example: if pandas has casted integer data to float, this would enable the integer data to be recovered (so long as the values fall in the ~2^53 floating point range for exact integer representation)",
        "created_at": "2017-01-17T01:51:23.000Z",
        "updated_at": "2021-05-11T04:59:12.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2017-03-09T15:19:21.933Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=15903199) by Miki Tebeka (tebeka):*\nIs the dtype still integer? I see that Pandas changes the dtype once you add a nan:\n\n```\nIn [1]: import pandas as pd\n\nIn [2]: import numpy as np\n\nIn [3]: s = pd.Series([1,2,3])\n\nIn [4]: s\nOut[4]: \n0    1\n1    2\n2    3\ndtype: int64\n\nIn [5]: s[1] = np.nan\n\nIn [6]: s\nOut[6]: \n0    1.0\n1    NaN\n2    3.0\ndtype: float64\n```"
        },
        {
            "created_at": "2017-03-09T15:46:16.076Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=15903242) by Wes McKinney (wesm):*\n`[~tebeka]` the pandas behavior is the motivation for this JIRA\n\nBecause pandas implicitly converts from integer to float when introducing null values, the task in this JIRA is to convert (safely) from floating point with NaNs to Arrow integer types with proper nulls\n\n```Java\nIn [2]: pyarrow.Array.from_list([1, 2, None, 4, None])\nOut[2]: \n<pyarrow.array.Int64Array object at 0x7fb24fe97bd8>\n[\n  1,\n  2,\n  NA,\n  4,\n  NA\n]\n```"
        },
        {
            "created_at": "2017-03-16T22:00:38.282Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=15928987) by Wes McKinney (wesm):*\nAfter ARROW-618, this functionality should be more easily achievable through syntax like\n\n```Java\nArray.from_pandas(float_data, type=int64())\n```\n\nThis would raise an exception on any values that are not safe to case (absolute value exceeding 2^53)"
        },
        {
            "created_at": "2017-09-08T02:40:05.194Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=16158043) by Wes McKinney (wesm):*\nThis seems like it could simply be a casting option for floating point to integer conversions"
        },
        {
            "created_at": "2018-03-01T18:08:51.334Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=16382404) by Antoine Pitrou (apitrou):*\nIs this the same as ARROW-2135, or am I missing something here?"
        },
        {
            "created_at": "2018-03-01T23:41:01.377Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=16382883) by Wes McKinney (wesm):*\nAs currently scoped, yes. This functionality is not available in `arrow::compute::Cast` though, so perhaps we can repurpose this JIRA to add this functionality, which may be a bit more complicated (since `Cast` is not yet able to deal with any null sentinels at all)"
        },
        {
            "created_at": "2018-07-09T18:00:36.119Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=16537337) by Wes McKinney (wesm):*\nIt would be good to have an explicit cast option for this, like `arr.cast(int64(), nan_as_null=True)`. The `safe=False/True` option does not provide enough control"
        },
        {
            "created_at": "2020-03-14T22:42:11.238Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=17059509) by Wes McKinney (wesm):*\nCircling back on this some time later. I think it would be better to implement this as a separate function (whenever someone needs it) instead of adding complexity to Cast"
        },
        {
            "created_at": "2020-05-25T14:01:57.985Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-488?focusedCommentId=17116039) by Wes McKinney (wesm):*\nThis could be implemented as a standalone function in the new kernels framework"
        }
    ]
}