{
    "issue": {
        "title": "[Java] Add option for ValueVector to allocate buffers with actual size",
        "body": "***Note**: This issue was originally created as [ARROW-5259](https://issues.apache.org/jira/browse/ARROW-5259). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently in _BaseValueVector#computeCombinedBufferSize_, it calculates the buffer size with _valueCount_ and _typeWidth_ as inputs and then allocates memory for dataBuffer and validityBuffer. However, it always allocate memory greater than the actual size, because of the invoke of\u00a0_BaseAllocator.nextPowerOfTwo(bufferSize)_.\r\n\r\nFor example, IntVector will allocate buffers with size 8192 with valueCount = 1025, memory usage is almost double what it actually is. So in some cases, there have enough memory for actual use but throws OOM when the allocated memory is increased to next power of 2 and I think this problem is absolutely avoidable.\r\n\r\nIs it feasible to add option for ValueVector to allocate actual buffer size rather than make it next power of 2 to reduce memory allocation?",
        "created_at": "2019-05-05T03:51:14.000Z",
        "updated_at": "2019-07-08T04:37:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-07-08T04:37:04.000Z"
    },
    "comments": []
}