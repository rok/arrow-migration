{
    "issue": {
        "title": "[C++] Failing to build the C++ Lib with tests",
        "body": "***Note**: This issue was originally created as [ARROW-17406](https://issues.apache.org/jira/browse/ARROW-17406). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen I followed the build guidelines as suggested on <https://arrow.apache.org/docs/dev/developers/python.html,>\r\n\r\n\u00a0\r\n\r\nThe build fails\r\n```java\n\r\nIn file included from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/multiprecision/cpp_int.hpp:17,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/Arrow/arrow/cpp/src/arrow/util/decimal_test.cc:29:\r\n/home/kshiteej/.conda/envs/pyarrow-dev/include/boost/multiprecision/detail/standalone_config.hpp:25:7: error: #warning \"The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)\" [-Werror=cpp]\r\n\u00a0 \u00a025 | \u00a0# \u00a0 \u00a0warning \"The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)\"\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 ^~~~~~~\r\nIn file included from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/math/cstdfloat/cstdfloat_types.hpp:17,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/cstdfloat.hpp:18,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/multiprecision/detail/float128_functions.hpp:15,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/multiprecision/detail/fpclassify.hpp:13,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/multiprecision/detail/default_ops.hpp:15,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/multiprecision/detail/generic_interconvert.hpp:12,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/multiprecision/number.hpp:12,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/.conda/envs/pyarrow-dev/include/boost/multiprecision/cpp_int.hpp:19,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /home/kshiteej/Arrow/arrow/cpp/src/arrow/util/decimal_test.cc:29:\r\n/home/kshiteej/.conda/envs/pyarrow-dev/include/boost/math/tools/config.hpp:23:6: error: #warning \"The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)\" [-Werror=cpp]\r\n\u00a0 \u00a023 | # \u00a0 \u00a0warning \"The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)\"\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0^~~~~~~\r\ncc1plus: all warnings being treated as errors\r\nmake[2]: *** [src/arrow/util/CMakeFiles/arrow-utility-test.dir/build.make:202: src/arrow/util/CMakeFiles/arrow-utility-test.dir/decimal_test.cc.o] Error 1\r\nmake[1]: *** [CMakeFiles/Makefile2:2305: src/arrow/util/CMakeFiles/arrow-utility-test.dir/all] Error 2\r\nmake: *** [Makefile:146: all] Error 2 \n```\r\nLooks like latest Boost version leads to warning (which is converted to error due to `-Werror`.\r\n\r\n\u00a0\r\n\r\nPotential fix would be to pin the Boost version which does not raise this warning till the C++ lib supports C++14.",
        "created_at": "2022-08-13T09:04:25.000Z",
        "updated_at": "2022-10-19T12:26:17.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-10-19T12:26:17.000Z"
    },
    "comments": [
        {
            "created_at": "2022-10-19T11:30:06.971Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17406?focusedCommentId=17620223) by Miles Granger (milesgranger):*\nI think this can be closed now?\u00a0"
        }
    ]
}