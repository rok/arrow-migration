{
    "issue": {
        "title": "[Python] Support ChunkedArray mask in replace operations",
        "body": "***Note**: This issue was originally created as [ARROW-17951](https://issues.apache.org/jira/browse/ARROW-17951). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nReplace operations (more specifically replace_with_mask) don't support chunked array for the mask argument.\r\n\r\nBut one would expect that ReplaceMaskChunked, which support chunked array for\u00a0 its input data (the data to be replaced), should also support chunked array for its mask.\r\n\r\n\u00a0\r\n```java\n\r\npc.replace_with_mask(pa.array([\"a\", \"b\"]), pa.array([True, False]), pa.scalar(\"c\", pa.string()))\r\n\r\npc.replace_with_mask(\r\n    pa.chunked_array([pa.array([\"a\", \"b\"])]),\r\n    pa.array([True, False]),\r\n    pa.scalar(\"c\", pa.string()),\r\n)\r\n\r\nwith pytest.raises(pa.ArrowInvalid, match=r\"Mask must be array or scalar, not ChunkedArray\"):\r\n    pc.replace_with_mask(\r\n        pa.chunked_array([pa.array([\"a\", \"b\"])]),\r\n        pa.chunked_array([pa.array([True, False])]),\r\n        pa.scalar(\"c\", pa.string()),\r\n    ) \n```\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2022-10-06T11:03:36.000Z",
        "updated_at": "2022-10-26T11:21:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-26T11:21:35.264Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17951?focusedCommentId=17624380) by Miles Granger (milesgranger):*\nSeems to make sense to me. (y)\r\nI would guess in the meantime you've found using `combine_chunks` may suffice? (albeit, not optimal)\r\n```python\n\r\npc.replace_with_mask(\r\n    pa.chunked_array([pa.array([\"a\", \"b\"])]),\r\n    pa.chunked_array([pa.array([True, False])]).combine_chunks(),\r\n    pa.scalar(\"c\", pa.string()),\r\n)\r\n```"
        }
    ]
}