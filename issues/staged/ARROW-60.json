{
    "issue": {
        "title": "C++: Struct type builder API ",
        "body": "***Note**: This issue was originally created as [ARROW-60](https://issues.apache.org/jira/browse/ARROW-60). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAt the moment, we are able to represent struct metadata but not actually build struct-type arrays. ",
        "created_at": "2016-03-10T02:07:08.000Z",
        "updated_at": "2016-10-04T23:01:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2016-06-07T06:48:42.000Z"
    },
    "comments": [
        {
            "created_at": "2016-04-05T01:02:34.916Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15225441) by Kai Zheng (drankye):*\nLet me understand the type and implement it first."
        },
        {
            "created_at": "2016-04-11T10:20:01.321Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15234837) by Kai Zheng (drankye):*\nThere were some discussions in [this PR](https://github.com/apache/arrow/pull/58) by the way. For convenient copying here:\n\nQuestion from Kai:\n> I'm trying to think about how to implement this struct array type, by the way, seems to need a container for all the child arrays, like vector, to put all the fields in the declaring order, right? Another question is how to get/set a field? By name, but no name in the layout, so only possible by index I guess. Raise my questions here by the way, thx.\nReplying from [~emkornfield@gmail.com]:\n> Its probably better to discuss struct implementation on the relevant JIRA item for it, but it following the existing pattern Builder with a separate final immutable data structure pattern. Using a std::vector could work for this, just be careful not to do anything in the builder's Finish that could fail. Also, I think indices for getters are the right level of abstraction for this layer (a different layer can map name->index). I'm currently working through some use cases with the ListBuilder and that has made me realize the current builder APIs are super user friendly."
        },
        {
            "created_at": "2016-04-11T16:27:05.632Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15235411) by Micah Kornfield (emkornfield@gmail.com):*\nmy comment should read, they \"are not super user friendly\".   Or at least a little hard for someone new the code (e.g. me) to understand.    The struct builder might be a little challenging to do in C++ from an API perspective, I need to think about it a little bit more and think through the use-cases for it (one use case it being able to convert a tuple from python to a struct:  examples for other types are here https://github.com/apache/arrow/blob/master/python/src/pyarrow/adapters/builtin.cc).  It might pay to do the implementation for StructArray first and then come back to the builder API once the StructArray implementation looks reasonable."
        },
        {
            "created_at": "2016-04-12T01:54:54.067Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15236428) by Kai Zheng (drankye):*\nThanks Micah for the clarifying, and suggestion. Very helpful!"
        },
        {
            "created_at": "2016-04-12T05:43:10.830Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15236631) by Micah Kornfield (emkornfield@gmail.com):*\nHi Kai,\nI had a chance to think this through and wanted to know what you thought about the following:   I think the implementation of the builder should actually be pretty straightforward.  You should be able to extend ArrayBuilder (https://github.com/apache/arrow/blob/master/cpp/src/arrow/builder.h).\nYou can likely have two constructors:\n1.  One that takes a list of builders and generated the type for the ArrayBuilder class on the fly\n2.  One that takes the type (a struct) and generates the builders on the fly (https://github.com/apache/arrow/blob/master/cpp/src/arrow/types/construct.h would be useful for this.  I think it might pay to add a version of the method that takes a unique_ptr as an output parameter to make it easier for this use-case.) \n\nFor additional methods: Add an Append method modeled after (https://github.com/apache/arrow/blob/master/cpp/src/arrow/types/list.h#L144).  It would be be slightly different since you don't need to keep track of offsets.  It would be nice if appending a null value also appended a null to each of the child builders, but that would require a new virtual method \"AppendNull\" on ArrayBuilder.  I think its worth it as it would make client code a little bit more concise, but I think there might be some debate due to performance and API consistency.  \n\nI don't think a \"vectorized\" append is needed yet, unless you can think of a use-case for one.\n\nHave you made any progress?  How does this align with your thinking?\n\n"
        },
        {
            "created_at": "2016-04-12T06:24:49.145Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15236673) by Kai Zheng (drankye):*\nThanks Micah for the complete thoughts! I thought it's doable for me. I will complete it this week and hope to provide a PR for your review not too late. Does this plan work for you? If necessary I surely can be earlier. Thanks."
        },
        {
            "created_at": "2016-04-12T07:12:24.138Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15236728) by Micah Kornfield (emkornfield@gmail.com):*\nI'm currently not blocked on it.  I'm also not a committer, so Wes will ultimately have to do the final merge.  But I will be happy to take a first pass at review whenever you have it available."
        },
        {
            "created_at": "2016-04-12T07:51:04.162Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15236786) by Kai Zheng (drankye):*\nThanks Micah for the sync and review in advance."
        },
        {
            "created_at": "2016-04-12T08:41:52.586Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15236837) by Micah Kornfield (emkornfield@gmail.com):*\nlooking more at the code I think the virtual method call will definitely be a concern, probably best not do it for the time being."
        },
        {
            "created_at": "2016-04-12T22:15:47.490Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15238096) by Kai Zheng (drankye):*\nWhich virtual method call did you mention? I thought for these builders it maybe ok to have virtual calls unless it's propagational to the real data passed to.\n\nI'm reading the codes as you suggested above. It looks not clear for me class `ListBuilder` public extends `Int32Builder`. Not sure there is a relationship here but I guess it's to share and reuse some variables and methods?"
        },
        {
            "created_at": "2016-04-13T01:43:58.662Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15238391) by Micah Kornfield (emkornfield@gmail.com):*\nA virtual method for AppendNull, but it looks like we are consciously avoiding anything in a tight loop using virtual methods.  \n\nYes, ListBuilder was making use of the fact that the new data a list needs to allocate is  bitmap +  a buffer of int32s but it is kind of hacky.  I am working on trying to refactor it to something that makes more logical sense to me as part of the List IPC stuff."
        },
        {
            "created_at": "2016-04-14T21:55:02.662Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15241987) by Kai Zheng (drankye):*\nOk sound good Micah. I will try to refrain from refactoring the codes here to avoid the conflict. I suggest you open issue separately for the refactoring things."
        },
        {
            "created_at": "2016-04-18T07:51:45.877Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15245253) by Kai Zheng (drankye):*\nSorry I'm distracted and not able to work on this. I had an off-line discussion with [~qq272101359@163.com] this morning and he is working on the issue. He will be dedicated and get this done this week. Hope this works. Thanks!"
        },
        {
            "created_at": "2016-04-20T08:04:12.238Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15249458) by Feng Guangyuan (qq272101359@163.com):*\nA draft of implementation for this issue is refered to PR:\nhttps://github.com/apache/arrow/pull/66"
        },
        {
            "created_at": "2016-06-07T06:48:42.974Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15317987) by Wes McKinney (wesm):*\nIssue resolved by pull request 66\n<https://github.com/apache/arrow/pull/66>"
        },
        {
            "created_at": "2016-06-13T02:31:45.181Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-60?focusedCommentId=15326750) by Feng Guangyuan (qq272101359@163.com):*\nThank you all.:)"
        }
    ]
}