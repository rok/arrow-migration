{
    "issue": {
        "title": "[Python] Segfault when importing TensorFlow after Pyarrow",
        "body": "***Note**: This issue was originally created as [ARROW-5130](https://issues.apache.org/jira/browse/ARROW-5130). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis issue is similar to\u00a0https://jira.apache.org/jira/browse/ARROW-2657\u00a0which was fixed in v0.10.0.\r\n\r\nWhen we import\u00a0TensorFlow after Pyarrow in Linux Debian Jessie, we get a segfault.\u00a0 To reproduce:\r\n```java\n\r\nimport pyarrow \r\nimport tensorflow\n```\r\nHere's the backtrace from gdb:\r\n```java\n\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0 0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0 0x0000000000000000 in ?? ()\r\n#1 0x00007f529ee04410 in pthread_once () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_once.S:103\r\n#2 0x00007f5229a74efa in void std::call_once<void (&)()>(std::once_flag&, void (&)()) () from /usr/local/lib/python2.7/dist-packages/tensorflow/python/../libtensorflow_framework.so\r\n#3 0x00007f5229a74f3e in tensorflow::port::TestCPUFeature(tensorflow::port::CPUFeature) () from /usr/local/lib/python2.7/dist-packages/tensorflow/python/../libtensorflow_framework.so\r\n#4 0x00007f522978b561 in tensorflow::port::(anonymous namespace)::CheckFeatureOrDie(tensorflow::port::CPUFeature, std::string const&) ()\r\nfrom /usr/local/lib/python2.7/dist-packages/tensorflow/python/../libtensorflow_framework.so\r\n#5 0x00007f522978b5b4 in _GLOBAL__sub_I_cpu_feature_guard.cc () from /usr/local/lib/python2.7/dist-packages/tensorflow/python/../libtensorflow_framework.so\r\n#6 0x00007f529f224bea in call_init (l=<optimized out>, argc=argc@entry=9, argv=argv@entry=0x7ffc6d8c1488, env=env@entry=0x294c0c0) at dl-init.c:78\r\n#7 0x00007f529f224cd3 in call_init (env=0x294c0c0, argv=0x7ffc6d8c1488, argc=9, l=<optimized out>) at dl-init.c:36\r\n#8 _dl_init (main_map=main_map@entry=0x2e4aff0, argc=9, argv=0x7ffc6d8c1488, env=0x294c0c0) at dl-init.c:126\r\n#9 0x00007f529f228e38 in dl_open_worker (a=a@entry=0x7ffc6d8bebb8) at dl-open.c:577\r\n#10 0x00007f529f224aa4 in _dl_catch_error (objname=objname@entry=0x7ffc6d8beba8, errstring=errstring@entry=0x7ffc6d8bebb0, mallocedp=mallocedp@entry=0x7ffc6d8beba7,\r\noperate=operate@entry=0x7f529f228b60 <dl_open_worker>, args=args@entry=0x7ffc6d8bebb8) at dl-error.c:187\r\n#11 0x00007f529f22862b in _dl_open (file=0x7f5248178b54 \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/_pywrap_tensorflow_internal.so\", mode=-2147483646, caller_dlopen=<optimized out>,\r\nnsid=-2, argc=9, argv=0x7ffc6d8c1488, env=0x294c0c0) at dl-open.c:661\r\n#12 0x00007f529ebf402b in dlopen_doit (a=a@entry=0x7ffc6d8bedd0) at dlopen.c:66\r\n#13 0x00007f529f224aa4 in _dl_catch_error (objname=0x2950fc0, errstring=0x2950fc8, mallocedp=0x2950fb8, operate=0x7f529ebf3fd0 <dlopen_doit>, args=0x7ffc6d8bedd0) at dl-error.c:187\r\n#14 0x00007f529ebf45dd in _dlerror_run (operate=operate@entry=0x7f529ebf3fd0 <dlopen_doit>, args=args@entry=0x7ffc6d8bedd0) at dlerror.c:163\r\n#15 0x00007f529ebf40c1 in __dlopen (file=<optimized out>, mode=<optimized out>) at dlopen.c:87\r\n#16 0x0000000000540859 in _PyImport_GetDynLoadFunc ()\r\n#17 0x000000000054024c in _PyImport_LoadDynamicModule ()\r\n#18 0x00000000005f2bcb in ?? ()\r\n#19 0x00000000004ca235 in PyEval_EvalFrameEx ()\r\n#20 0x00000000004ca9c2 in PyEval_EvalFrameEx ()\r\n#21 0x00000000004c8c39 in PyEval_EvalCodeEx ()\r\n#22 0x00000000004c84e6 in PyEval_EvalCode ()\r\n#23 0x00000000004c6e5c in PyImport_ExecCodeModuleEx ()\r\n#24 0x00000000004c3272 in ?? ()\r\n#25 0x00000000004b19e2 in ?? ()\r\n#26 0x00000000004b13d7 in ?? ()\r\n#27 0x00000000004b42f6 in ?? ()\r\n#28 0x00000000004d1aab in PyEval_CallObjectWithKeywords ()\r\n#29 0x00000000004ccdb3 in PyEval_EvalFrameEx ()\r\n#30 0x00000000004c8c39 in PyEval_EvalCodeEx ()\r\n#31 0x00000000004c84e6 in PyEval_EvalCode ()\r\n#32 0x00000000004c6e5c in PyImport_ExecCodeModuleEx ()\r\n#33 0x00000000004c3272 in ?? ()\r\n#34 0x00000000004b1d3f in ?? ()\r\n#35 0x00000000004b6b2b in ?? ()\r\n#36 0x00000000004b0d82 in ?? ()\r\n#37 0x00000000004b42f6 in ?? ()\r\n#38 0x00000000004d1aab in PyEval_CallObjectWithKeywords ()\r\n#39 0x00000000004ccdb3 in PyEval_EvalFrameEx ()\n```\r\nIt looks like the code changes that fixed the previous issue was recently removed in\u00a0<https://github.com/apache/arrow/commit/b766bff34b7d85034d26cebef5b3aeef1eb2fd82#diff-16806bcebc1df2fae432db426905b9f0>.",
        "created_at": "2019-04-05T20:53:48.000Z",
        "updated_at": "2019-05-02T00:26:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-05-02T00:25:26.000Z"
    },
    "comments": [
        {
            "created_at": "2019-04-22T04:49:02.192Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16822866) by Wes McKinney (wesm):*\nThe recommendation for using the libraries together is to use conda to install. You can also try importing tensorflow first. We are awaiting TensorFlow and others developing a compatible wheel standard we can all use. TensorFlow's wheels are non-conforming to the manylinux1 standard"
        },
        {
            "created_at": "2019-04-24T22:48:57.902Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16825554) by Alexander Sergeev (asergeev):*\nOne workaround we found is to LD_PRELOAD\u00a0/usr/lib/x86_64-linux-gnu/libstdc++.so.6.\r\n\r\n\u00a0\r\n\r\nWes, is there a reason PyArrow re-exports a bunch of C++ std library symbols?"
        },
        {
            "created_at": "2019-04-24T23:07:06.261Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16825562) by Wes McKinney (wesm):*\nWe aren't doing so on purpose"
        },
        {
            "created_at": "2019-04-25T00:17:51.855Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16825601) by Alexander Sergeev (asergeev):*\nWes, would you take a PR that cleans these things up?\r\n\r\n\u00a0\r\n```java\n\r\n# for f in $(ls -1 /usr/local/lib/python2.7/dist-packages/pyarrow/*.so*); do echo $f; nm -D $f | c++filt | grep std::_Hash_bytes; done\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/_csv.so\r\nU std::_Hash_bytes(void const*, unsigned long, unsigned long)\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow_boost_filesystem.so\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow_boost_filesystem.so.1.66.0\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow_boost_regex.so\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow_boost_regex.so.1.66.0\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow_boost_system.so\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow_boost_system.so.1.66.0\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow_python.so\r\n00000000000e2250 T std::_Hash_bytes(void const*, unsigned long, unsigned long)\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow_python.so.13\r\n00000000000e2250 T std::_Hash_bytes(void const*, unsigned long, unsigned long)\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow.so\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libarrow.so.13\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libparquet.so\r\n00000000001ce380 T std::_Hash_bytes(void const*, unsigned long, unsigned long)\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libparquet.so.13\r\n00000000001ce380 T std::_Hash_bytes(void const*, unsigned long, unsigned long)\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libplasma.so\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libplasma.so.13\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/lib.so\r\nU std::_Hash_bytes(void const*, unsigned long, unsigned long)\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/libz-7f57503f.so.1.2.11\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/_orc.so\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/_parquet.so\r\nU std::_Hash_bytes(void const*, unsigned long, unsigned long)\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/_plasma.so\r\n```\r\n\u00a0"
        },
        {
            "created_at": "2019-04-25T12:09:26.176Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826003) by Wes McKinney (wesm):*\ndefer to `[~pitrou]` who worked on the symbols files most recently"
        },
        {
            "created_at": "2019-04-25T13:31:08.410Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826070) by Antoine Pitrou (apitrou):*\n\"_Hash_bytes\" isn't exported, it's an undefined symbol (\"U\") that's referred to by libarrow.so. I'm not sure what the problem is.\r\n\r\nBy the way, I suggest you try with Arrow master, since the exported symbols were cleaned up recently there."
        },
        {
            "created_at": "2019-04-25T14:23:33.544Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826110) by Alexander Sergeev (asergeev):*\n@Antoine, you're right that the symbol I mentioned is not exported by libarrow.so, but it's exported by libparquet.so and libarrow_python.so.\n\nI'll try the master to check if there are any improvements."
        },
        {
            "created_at": "2019-04-25T18:26:12.916Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826333) by Francois Saint-Jacques (fsaintjacques):*\nThis is not fixed with in master, I fetched the latest wheel from crossbow and can trigger the segfault. I think that propagating the fix in ARROW-2796 to all libraries (parquet, plasma, gandiva) will do the trick."
        },
        {
            "created_at": "2019-04-25T18:28:07.950Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826335) by Francois Saint-Jacques (fsaintjacques):*\nAlso note that I can't trigger this from a local build, I suspect that this is related to how we build/package the wheel."
        },
        {
            "created_at": "2019-04-25T18:32:14.729Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826338) by Antoine Pitrou (apitrou):*\n`[~fsaintjacques]` The reproducer only involved PyArrow and Tensorflow. Not Parquet or Gandiva. You may want to try your suggestion but I doubt it will fix anything."
        },
        {
            "created_at": "2019-04-25T18:33:22.081Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826339) by Antoine Pitrou (apitrou):*\nYes, it's an ABI issue. Put simply Tensorflow are publishing invalid wheels that don't comply to the specification (but tend to \"work\" in situations simple enough), because they rely on the wrong compiler and runtime."
        },
        {
            "created_at": "2019-04-26T06:40:08.969Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826698) by Alexander Sergeev (asergeev):*\n`[~fsaintjacques]` is the build process for wheels that end up in PyPI documented somewhere, so I could reproduce the issue locally with containers & spread the <https://github.com/apache/arrow/pull/2096>\u00a0around?"
        },
        {
            "created_at": "2019-04-26T13:48:21.920Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826967) by Francois Saint-Jacques (fsaintjacques):*\nIt's a component called crossbow, the gist of what you need is [here](https://github.com/apache/arrow/tree/master/dev/tasks/python-wheels)"
        },
        {
            "created_at": "2019-04-26T13:49:28.673Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826968) by Francois Saint-Jacques (fsaintjacques):*\nYou'll have to replicate https://github.com/apache/arrow/blob/master/dev/tasks/python-wheels/travis.linux.yml"
        },
        {
            "created_at": "2019-04-26T14:23:44.581Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16826997) by Wes McKinney (wesm):*\nSee https://github.com/apache/arrow/tree/master/python/manylinux1"
        },
        {
            "created_at": "2019-05-02T00:25:26.378Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5130?focusedCommentId=16831339) by Wes McKinney (wesm):*\nResolved in https://github.com/apache/arrow/commit/0289af23a780ee0947c97707b82bad4df2f6e30f"
        }
    ]
}