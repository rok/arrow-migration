{
    "issue": {
        "title": "[Python] read_json won't respect explicit_schema in parse_options",
        "body": "***Note**: This issue was originally created as [ARROW-9020](https://issues.apache.org/jira/browse/ARROW-9020). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI am trying to read a json file using an explicit schema but it looks like the schema is ignored. Moreover, if the my schema contains a field not present in the json file, then the output table contains all the fields in the json file plus the fields of my schema not found in the file.\r\n\r\nA minimal example:\r\n```python\n\r\nimport pyarrow as pa\r\nfrom pyarrow import json\r\n\r\n# allowing for type inference\r\nprint(json.read_json('tmp.json'))\r\n# prints:\r\n# pyarrow.Table\r\n# foo: string\r\n# baz: string\r\n\r\n# using an explicit schema that would read only \"foo\"\r\nschema = pa.schema([('foo', pa.string())])\r\nprint(json.read_json('tmp.json', parse_options=json.ParseOptions(explicit_schema=schema)))\r\n# prints:\r\n# pyarrow.Table\r\n# foo: string\r\n# baz: string\r\n\r\n# using an explicit schema that would read only \"not_a_field\",\r\n# which is not present in the json file\r\nschema = pa.schema([('not_a_field', pa.string())])\r\nprint(json.read_json('tmp.json', parse_options=json.ParseOptions(explicit_schema=schema)))\r\n# prints:\r\n# pyarrow.Table\r\n# not_a_field: string\r\n# foo: string\r\n# baz: string\r\n```\r\n\r\nAnd the tmp.json file looks like:\r\n```json\n\r\n{\"foo\": \"bar\", \"baz\": \"1\"}\r\n\r\n```",
        "created_at": "2020-06-02T22:46:13.000Z",
        "updated_at": "2020-07-09T06:41:58.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-07-09T06:41:46.000Z"
    },
    "comments": [
        {
            "created_at": "2020-06-09T08:37:17.046Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9020?focusedCommentId=17128996) by Joris Van den Bossche (jorisvandenbossche):*\n`[~felipegssantos]` thanks for the report!\r\n\r\nThe python and C++ documentation seems a bit contradicting on the purpose of the keyword.\r\n\r\nIn Python we have (which seems to indicate that other fields not in the schema are ignored, thus not in the result):\r\n\r\n> Optional explicit schema (no type inference, ignores other fields).\r\n\r\nWhile C++ only says it disables type inference on those fields, and not about ignoring other fields:\r\n\r\n> Optional explicit schema (disables type inference on those fields)\r\n\r\nSo I am not really sure what the original intent of the keyword was. cc `[~bkietz]` ?\r\n\r\n\r\n\r\n"
        },
        {
            "created_at": "2020-06-09T08:40:25.067Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9020?focusedCommentId=17129001) by Joris Van den Bossche (jorisvandenbossche):*\nAh, I see that in C++ there is an additional `UnexpectedFieldBehaviour` option, which determines what to do with fields not in the explicit schema: https://github.com/apache/arrow/blob/d00c50a6ca0d88e3458742091c59f0fc5c2fc7de/cpp/src/arrow/json/options.h#L32-L39 (which has options to ignore it, but the default is to keep it but infer the type).\r\n\r\nBut this option is not exposed in Python, it seems. So that's a needed enhancement then to enable this functionality from Python."
        },
        {
            "created_at": "2020-07-09T06:41:46.427Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9020?focusedCommentId=17154227) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 7661\n<https://github.com/apache/arrow/pull/7661>"
        }
    ]
}