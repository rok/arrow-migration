{
    "issue": {
        "title": "[C++] Support for fractional seconds in strptime()",
        "body": "***Note**: This issue was originally created as [ARROW-15883](https://issues.apache.org/jira/browse/ARROW-15883). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, we can't parse \"our own\" string representation of a timestamp array with the timestamp parser `strptime`:\r\n\r\n```python\n\r\nimport datetime\r\nimport pyarrow as pa\r\nimport pyarrow.compute as pc\r\n\r\n>>> pa.array([datetime.datetime(2022, 3, 5, 9)])\r\n<pyarrow.lib.TimestampArray object at 0x7f00c1d53dc0>\r\n[\r\n  2022-03-05 09:00:00.000000\r\n]\r\n\r\n# trying to parse the above representation as string\r\n>>> pc.strptime([\"2022-03-05 09:00:00.000000\"], format=\"%Y-%m-%d %H:%M:%S\", unit=\"us\")\r\n...\r\nArrowInvalid: Failed to parse string: '2022-03-05 09:00:00.000000' as a scalar of type timestamp[us]\r\n```\r\n\r\nThe reason for this is the fractional second part, so the following works:\r\n\r\n```python\n\r\n>>> pc.strptime([\"2022-03-05 09:00:00\"], format=\"%Y-%m-%d %H:%M:%S\", unit=\"us\")\r\n<pyarrow.lib.TimestampArray object at 0x7f00c1d6f940>\r\n[\r\n  2022-03-05 09:00:00.000000\r\n]\r\n```\r\n\r\nNow, I think the reason that this fails is because `strptime` only supports parsing seconds as an integer (https://man7.org/linux/man-pages/man3/strptime.3.html). \r\n\r\nBut, it creates a strange situation where the timestamp parser cannot parse the representation we use for timestamps.\r\n\r\nIn addition, for CSV we have a custom ISO parser (used by default), so when parsing the strings while reading a CSV file, the same string with fractional seconds does work:\r\n\r\n```python\n\r\ns = b\"\"\"a\r\n2022-03-05 09:00:00.000000\"\"\"\r\n\r\nfrom pyarrow import csv\r\n\r\n>>> csv.read_csv(io.BytesIO(s))\r\npyarrow.Table\r\na: timestamp[ns]\r\n----\r\na: [[2022-03-05 09:00:00.000000000]]\r\n```\r\n\r\nI realize that you can use the generic \"cast\" for doing this string parsing:\r\n\r\n```python\n\r\n>>> pc.cast([\"2022-03-05 09:00:00.000000\"], pa.timestamp(\"us\"))\r\n<pyarrow.lib.TimestampArray object at 0x7f00c1d53d60>\r\n[\r\n  2022-03-05 09:00:00.000000\r\n]\r\n```\r\n\r\nBut this was not the first way I thought about (I think it is quite typical to first think of `strptime`, and it is confusing that that doesn't work; the error message is also not helpful)\r\ncc `[~apitrou]` `[~rokm]`",
        "created_at": "2022-03-09T13:31:17.000Z",
        "updated_at": "2022-10-01T00:37:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-03-09T15:34:42.931Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15883?focusedCommentId=17503660) by Rok Mihevc (rokm):*\nI agree this is not desired behaviour. Do we have a convention for %S?\r\nI'm working on two other strptime issues right now (ARROW-15665, ARROW-14477) and can also check this while I'm \"there\"."
        },
        {
            "created_at": "2022-03-09T15:51:51.681Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15883?focusedCommentId=17503678) by Joris Van den Bossche (jorisvandenbossche):*\nThe main problem is that there is no clear \"standard\" for strptime. Python for example has the \"%f\" field for fractional seconds(https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes). The R / lubridate parser seems to use \"%OS\" (https://rdrr.io/r/base/strptime.html, https://lubridate.tidyverse.org/reference/parse_date_time.html). But the C strptime does not support either of those (https://man7.org/linux/man-pages/man3/strptime.3.html; it uses \"%OS\", but apparently for something different?)\r\n\r\nSo as long as we use existing `strptime` implementation, I don't it is possible or easy to \"fix\" this. \r\n\r\nOne option I was thinking about is when the users specifies an ISO-like format string, that we could use our own fast ISO parser, instead of using `strptime`. But that would of course also make the support for fractional seconds dependent on the exact format you specified."
        },
        {
            "created_at": "2022-03-09T15:58:10.783Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15883?focusedCommentId=17503683) by Joris Van den Bossche (jorisvandenbossche):*\nLooking at date.h, it seems they also have a parser, and do support decimal seconds: https://howardhinnant.github.io/date/date.html#from_stream_formatting (and using \"%NS\" with N the width to parse), and this is (I suppose) consistent with what will be available in C++ 20 (https://en.cppreference.com/w/cpp/chrono/parse)"
        },
        {
            "created_at": "2022-03-09T18:06:20.210Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15883?focusedCommentId=17503764) by Rok Mihevc (rokm):*\nFollowing date.h seems like a good idea. +1 for %NS."
        },
        {
            "created_at": "2022-08-16T08:40:53.363Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15883?focusedCommentId=17580164) by Joris Van den Bossche (jorisvandenbossche):*\nI just closed two other (older) issues as duplicate of this one, but just noting here that both of them tried to use %f for fractional seconds. For example:\r\n\r\n```Java\n\r\n>>> pc.strptime(\"2015-01-09 00:00:00.000\", format=\"%Y-%m-%d %H:%M:%S.%f\", unit=\"ns\")\r\n...\r\nArrowInvalid: Failed to parse string: '2015-01-09 00:00:00.000' as a scalar of type timestamp[ns]\r\n```\r\n\r\nGiven that we are probably not going for \"%f\" (based on the discussion above), it might still be useful to give a more informative error message, for example explicitly stating that \"%f\" is not supported."
        },
        {
            "created_at": "2022-10-01T00:37:30.000Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15883?focusedCommentId=17611799) by Carl Boettiger (cboettig):*\nI agree about the lack of a standard, but note that arrow itself is inconsistent about conversions between dates and strings.\u00a0 e.g. in https://issues.apache.org/jira/browse/ARROW-17905?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel I show an example where arrow coerces a timestamp to a string, choosing to keep OS level precision (us), which then encounters the problem shown here, where we don't have the syntax to parse it correctly.\u00a0 (While I think my issue is essentially a duplicate of the python issue, it's a bit more opaque from the R side where arrow supports lubridate::as_datetime(), but the actual lubridate::as_datetime() is not impacted by this issue).\u00a0"
        }
    ]
}