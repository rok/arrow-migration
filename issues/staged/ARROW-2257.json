{
    "issue": {
        "title": "[C++] Add high-level option to toggle CXX11 ABI",
        "body": "***Note**: This issue was originally created as [ARROW-2257](https://issues.apache.org/jira/browse/ARROW-2257). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nUsing gcc-4.8-based toolchain libraries from conda-forge I ran into the following failure when building on Ubuntu 16.04 with clang-5.0\r\n\r\n```Java\n\r\n[48/48] Linking CXX executable debug/python-test\r\nFAILED: debug/python-test \r\n: && /usr/bin/ccache /usr/bin/clang++-5.0  -ggdb -O0  -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-deprecated -Wno-weak-vtables -Wno-padded -Wno-comma -Wno-unused-parameter -Wno-unused-template -Wno-undef -Wno-shadow -Wno-switch-enum -Wno-exit-time-destructors -Wno-global-constructors -Wno-weak-template-vtables -Wno-undefined-reinterpret-cast -Wno-implicit-fallthrough -Wno-unreachable-code-return -Wno-float-equal -Wno-missing-prototypes -Wno-old-style-cast -Wno-covered-switch-default -Wno-cast-align -Wno-vla-extension -Wno-shift-sign-overflow -Wno-used-but-marked-unused -Wno-missing-variable-declarations -Wno-gnu-zero-variadic-macro-arguments -Wconversion -Wno-sign-conversion -Wno-disabled-macro-expansion -Wno-gnu-folding-constant -Wno-reserved-id-macro -Wno-range-loop-analysis -Wno-double-promotion -Wno-undefined-func-template -Wno-zero-as-null-pointer-constant -Wno-unknown-warning-option -Werror -std=c++11 -msse3 -maltivec -Werror -D_GLIBCXX_USE_CXX11_ABI=0 -Qunused-arguments  -fsanitize=address -DADDRESS_SANITIZER -fsanitize-coverage=trace-pc-guard -g  -rdynamic src/arrow/python/CMakeFiles/python-test.dir/python-test.cc.o  -o debug/python-test  -Wl,-rpath,/home/wesm/code/arrow/cpp/build/debug:/home/wesm/miniconda/envs/arrow-dev/lib:/home/wesm/cpp-toolchain/lib debug/libarrow_python_test_main.a debug/libarrow_python.a debug/libarrow.so.0.0.0 /home/wesm/miniconda/envs/arrow-dev/lib/libpython3.6m.so /home/wesm/cpp-toolchain/lib/libgtest.a -lpthread -ldl orc_ep-install/lib/liborc.a /home/wesm/cpp-toolchain/lib/libprotobuf.a /home/wesm/cpp-toolchain/lib/libzstd.a /home/wesm/cpp-toolchain/lib/libz.a /home/wesm/cpp-toolchain/lib/libsnappy.a /home/wesm/cpp-toolchain/lib/liblz4.a /home/wesm/cpp-toolchain/lib/libbrotlidec-static.a /home/wesm/cpp-toolchain/lib/libbrotlienc-static.a /home/wesm/cpp-toolchain/lib/libbrotlicommon-static.a -lpthread -Wl,-rpath-link,/home/wesm/cpp-toolchain/lib && :\r\ndebug/libarrow.so.0.0.0: undefined reference to `orc::ParseError::ParseError(std::string const&)'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned char*)'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, google::protobuf::io::CodedOutputStream*)'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::internal::fixed_address_empty_string[abi:cxx11]'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::internal::WireFormatLite::ReadBytes(google::protobuf::io::CodedInputStream*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::Message::GetTypeName[abi:cxx11]() const'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::Message::InitializationErrorString[abi:cxx11]() const'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::MessageLite::SerializeToString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::internal::WireFormatLite::WriteString(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, google::protobuf::io::CodedOutputStream*)'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::MessageFactory::InternalRegisterGeneratedFile(char const*, void (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&))'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, google::protobuf::io::CodedOutputStream*)'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::internal::AssignDescriptors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, google::protobuf::internal::MigrationSchema const*, google::protobuf::Message const* const*, unsigned int const*, google::protobuf::MessageFactory*, google::protobuf::Metadata*, google::protobuf::EnumDescriptor const**, google::protobuf::ServiceDescriptor const**)'\r\ndebug/libarrow.so.0.0.0: undefined reference to `google::protobuf::MessageLite::ParseFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)'\r\ndebug/libarrow.so.0.0.0: undefined reference to `orc::RowReaderOptions::includeTypes(std::list<unsigned long, std::allocator<unsigned long> > const&)'\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nninja: build stopped: subcommand failed.\r\n```\r\n\r\nThe problem was that I added `-DGLIBCXX_USE_CXX11_ABI=0` in ARROW_CXXFLAGS instead of CMAKE_CXX_FLAGS. We should either add a build option to set this correctly or document it better in the README",
        "created_at": "2018-03-05T04:05:03.000Z",
        "updated_at": "2018-03-07T16:21:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-03-06T04:11:54.000Z"
    },
    "comments": [
        {
            "created_at": "2018-03-05T14:46:27.979Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2257?focusedCommentId=16386150) by Wes McKinney (wesm):*\nI think this is just a matter of adding documentation about mixing toolchains crossing the gcc5 boundary, I can write something"
        },
        {
            "created_at": "2018-03-06T04:11:54.394Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2257?focusedCommentId=16387257) by Wes McKinney (wesm):*\nThis is documented well enough in https://github.com/apache/arrow/blob/master/python/doc/source/development.rst#known-issues, users who run into this problem should be directed here"
        }
    ]
}