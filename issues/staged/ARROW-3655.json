{
    "issue": {
        "title": "[Gandiva] switch away from default_memory_pool",
        "body": "***Note**: This issue was originally created as [ARROW-3655](https://issues.apache.org/jira/browse/ARROW-3655). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAfter changes to ARROW-3519, Gandiva uses default_memory_pool for some allocations. This needs to be replaced with the pool passed in the Evaluate call.\u00a0\r\n\r\n\u00a0\r\n\r\nAlso, change signatures of all Evaluate APIs (both in project and filter) to take a pool argument.",
        "created_at": "2018-10-30T13:48:02.000Z",
        "updated_at": "2019-05-31T01:28:13.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Gandiva",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2018-10-30T14:03:52.733Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3655?focusedCommentId=16668751) by Wes McKinney (wesm):*\nI would suggest we start thinking about pooling efforts around function evaluation in Apache Arrow. For example we already have `arrow::compute::FunctionContext` which has a MemoryPool member\r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/context.h#L47"
        }
    ]
}