{
    "issue": {
        "title": "[Java] Implement \"ArrowBufReadChannel\" abstraction and alternate MessageSerializer that uses this",
        "body": "***Note**: This issue was originally created as [ARROW-3192](https://issues.apache.org/jira/browse/ARROW-3192). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe current MessageSerializer implementation is wasteful when used to read an IPC payload that is already in-memory in an `ArrowBuf`. In particular, reads out of a `ReadChannel` require memory allocation\r\n\r\n- https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java#L569\n  \n- https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java#L290\n  \n  In C++, we have abstracted memory allocation out of the IPC read path so that zero-copy is possible. I suggest that a similar mechanism can be developed for Java to improve deserialization performance for in-memory messages. The new interface would return `ArrowBuf` when performing reads, which could be zero-copy when possible, but when not the current strategy of allocate-copy could be used",
        "created_at": "2018-09-07T20:26:04.000Z",
        "updated_at": "2019-05-31T00:59:59.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2018-11-14T22:24:51.788Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3192?focusedCommentId=16687229) by Wes McKinney (wesm):*\ncc `[~bryanc]`, in case this might impact Spark anywhere"
        },
        {
            "created_at": "2018-11-15T00:29:49.345Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3192?focusedCommentId=16687321) by Bryan Cutler (bryanc):*\nThanks `[~wesmckinn]`, yes I think these would affect Spark. I'll try to take a closer look at this when I can. "
        }
    ]
}