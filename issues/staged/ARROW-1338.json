{
    "issue": {
        "title": "[Python] Investigate non-deterministic core dump on Python 2.7, Travis CI builds",
        "body": "***Note**: This issue was originally created as [ARROW-1338](https://issues.apache.org/jira/browse/ARROW-1338). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```Java\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_python_file_write PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_python_file_read PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_bytes_reader PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_bytes_reader_non_bytes PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_bytes_reader_retains_parent_reference PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_buffer_bytes PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_buffer_memoryview PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_buffer_bytearray PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_buffer_numpy PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_buffer_memoryview_is_immutable PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_memory_output_stream PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_inmemory_write_after_closed PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_buffer_protocol_ref_counting PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_nativefile_write_memoryview PASSED\npyarrow-test-2.7/lib/python2.7/site-packages/pyarrow/tests/test_io.py::test_mock_output_stream /Users/travis/build/apache/arrow/ci/travis_script_python.sh: line 81:  8186 Segmentation fault: 11  (core dumped) python -m pytest -vv -r sxX -s $PYARROW_PATH --parquet\n```",
        "created_at": "2017-08-08T00:57:42.000Z",
        "updated_at": "2017-08-09T13:21:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2017-08-08T13:30:24.000Z"
    },
    "comments": [
        {
            "created_at": "2017-08-08T03:47:22.590Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1338?focusedCommentId=16117805) by Wes McKinney (wesm):*\nI've got a valgrind warning for this on Linux, for some reason this has not been causing segfaults there, though:\n\n```Java\npyarrow/tests/test_io.py::test_mock_output_stream ==11767== Invalid write of size 2\n==11767==    at 0x4C2E0EB: memcpy@@GLIBC_2.14 (vg_replace_strmem.c:1018)\n==11767==    by 0xC1CDCBF: arrow::io::BufferOutputStream::Write(unsigned char const*, long) (memory.cc:86)\n==11767==    by 0xC24FD99: arrow::ipc::RecordBatchStreamWriter::RecordBatchStreamWriterImpl::Write(unsigned char const*, long) (writer.cc:716)\n==11767==    by 0xC24F4A4: arrow::ipc::RecordBatchStreamWriter::RecordBatchStreamWriterImpl::Close() (writer.cc:645)\n==11767==    by 0xC24BCC7: arrow::ipc::RecordBatchStreamWriter::Close() (writer.cc:763)\n==11767==    by 0xBCD11F4: __pyx_pf_7pyarrow_3lib_18_RecordBatchWriter_8close(__pyx_obj_7pyarrow_3lib__RecordBatchWriter*) (lib.cxx:56013)\n==11767==    by 0xBCD11A6: __pyx_pw_7pyarrow_3lib_18_RecordBatchWriter_9close(_object*, _object*) (lib.cxx:55979)\n==11767==    by 0xBD10DEC: __Pyx_PyObject_CallMethO(_object*, _object*) (lib.cxx:79953)\n==11767==    by 0xBD12220: __Pyx_PyObject_CallNoArg(_object*) (lib.cxx:80473)\n==11767==    by 0xBCD07F0: __pyx_pf_7pyarrow_3lib_18_RecordBatchWriter_2__dealloc__(__pyx_obj_7pyarrow_3lib__RecordBatchWriter*) (lib.cxx:55651)\n==11767==    by 0xBCD05D7: __pyx_pw_7pyarrow_3lib_18_RecordBatchWriter_3__dealloc__(_object*) (lib.cxx:55604)\n==11767==    by 0xBCE668B: __pyx_tp_dealloc_7pyarrow_3lib__RecordBatchWriter(_object*) (lib.cxx:70981)\n==11767==  Address 0xd44a740 is 0 bytes after a block of size 832 alloc'd\n==11767==    at 0x4C2BB84: memalign (vg_replace_malloc.c:857)\n==11767==    by 0x4C2BC4C: posix_memalign (vg_replace_malloc.c:1020)\n==11767==    by 0xC18EEB8: arrow::(anonymous namespace)::AllocateAligned(long, unsigned char**) (memory_pool.cc:64)\n==11767==    by 0xC18F31D: arrow::DefaultMemoryPool::Reallocate(long, long, unsigned char**) (memory_pool.cc:115)\n==11767==    by 0xC13E4A4: arrow::PoolBuffer::Resize(long, bool) (buffer.cc:105)\n==11767==    by 0xC1CDA01: arrow::io::BufferOutputStream::Close() (memory.cc:65)\n==11767==    by 0xBCB1361: __pyx_pf_7pyarrow_3lib_18BufferOutputStream_2get_result(__pyx_obj_7pyarrow_3lib_BufferOutputStream*) (lib.cxx:45797)\n==11767==    by 0xBCB12F1: __pyx_pw_7pyarrow_3lib_18BufferOutputStream_3get_result(_object*, _object*) (lib.cxx:45762)\n==11767==    by 0x4F78294: call_function (ceval.c:4634)\n==11767==    by 0x4F78294: PyEval_EvalFrameEx (ceval.c:3185)\n==11767==    by 0x4F79348: _PyEval_EvalCodeWithName (ceval.c:3966)\n==11767==    by 0x4F794D7: PyEval_EvalCodeEx (ceval.c:3987)\n==11767==    by 0x4ECF030: function_call (funcobject.c:632)\n``` "
        },
        {
            "created_at": "2017-08-08T05:14:08.021Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1338?focusedCommentId=16117868) by Wes McKinney (wesm):*\nPR: https://github.com/apache/arrow/pull/952"
        },
        {
            "created_at": "2017-08-08T13:30:24.136Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1338?focusedCommentId=16118335) by Wes McKinney (wesm):*\nIssue resolved by pull request 952\n<https://github.com/apache/arrow/pull/952>"
        }
    ]
}