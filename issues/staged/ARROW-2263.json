{
    "issue": {
        "title": "[Python] test_cython.py fails if pyarrow is not in import path (e.g. with inplace builds)",
        "body": "***Note**: This issue was originally created as [ARROW-2263](https://issues.apache.org/jira/browse/ARROW-2263). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nsee \r\n\r\n```Java\n\r\n$ py.test pyarrow/tests/test_cython.py \r\n===================================== test session starts =====================================\r\nplatform linux -- Python 3.6.4, pytest-3.4.1, py-1.5.2, pluggy-0.6.0\r\nrootdir: /home/wesm/code/arrow/python, inifile: setup.cfg\r\ncollected 1 item                                                                              \r\n\r\npyarrow/tests/test_cython.py F                                                          [100%]\r\n\r\n========================================== FAILURES ===========================================\r\n_______________________________________ test_cython_api _______________________________________\r\n\r\ntmpdir = local('/tmp/pytest-of-wesm/pytest-3/test_cython_api0')\r\n\r\n    @pytest.mark.skipif(\r\n        'ARROW_HOME' not in os.environ,\r\n        reason='ARROW_HOME environment variable not defined')\r\n    def test_cython_api(tmpdir):\r\n        \"\"\"\r\n        Basic test for the Cython API.\r\n        \"\"\"\r\n        pytest.importorskip('Cython')\r\n    \r\n        ld_path_default = os.path.join(os.environ['ARROW_HOME'], 'lib')\r\n    \r\n        test_ld_path = os.environ.get('PYARROW_TEST_LD_PATH', ld_path_default)\r\n    \r\n        with tmpdir.as_cwd():\r\n# Set up temporary workspace\r\n            pyx_file = 'pyarrow_cython_example.pyx'\r\n            shutil.copyfile(os.path.join(here, pyx_file),\r\n                            os.path.join(str(tmpdir), pyx_file))\r\n# Create setup.py file\r\n            if os.name == 'posix':\r\n                compiler_opts = ['-std=c++11']\r\n            else:\r\n                compiler_opts = []\r\n            setup_code = setup_template.format(pyx_file=pyx_file,\r\n                                               compiler_opts=compiler_opts,\r\n                                               test_ld_path=test_ld_path)\r\n            with open('setup.py', 'w') as f:\r\n                f.write(setup_code)\r\n    \r\n# Compile extension module\r\n            subprocess.check_call([sys.executable, 'setup.py',\r\n>                                  'build_ext', '--inplace'])\r\n\r\npyarrow/tests/test_cython.py:90: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\npopenargs = (['/home/wesm/miniconda/envs/arrow-dev/bin/python', 'setup.py', 'build_ext', '--inplace'],)\r\nkwargs = {}, retcode = 1\r\ncmd = ['/home/wesm/miniconda/envs/arrow-dev/bin/python', 'setup.py', 'build_ext', '--inplace']\r\n\r\n    def check_call(*popenargs, **kwargs):\r\n        \"\"\"Run command with arguments.  Wait for command to complete.  If\r\n        the exit code was zero then return, otherwise raise\r\n        CalledProcessError.  The CalledProcessError object will have the\r\n        return code in the returncode attribute.\r\n    \r\n        The arguments are the same as for the call function.  Example:\r\n    \r\n        check_call([\"ls\", \"-l\"])\r\n        \"\"\"\r\n        retcode = call(*popenargs, **kwargs)\r\n        if retcode:\r\n            cmd = kwargs.get(\"args\")\r\n            if cmd is None:\r\n                cmd = popenargs[0]\r\n>           raise CalledProcessError(retcode, cmd)\r\nE           subprocess.CalledProcessError: Command '['/home/wesm/miniconda/envs/arrow-dev/bin/python', 'setup.py', 'build_ext', '--inplace']' returned non-zero exit status 1.\r\n\r\n../../../miniconda/envs/arrow-dev/lib/python3.6/subprocess.py:291: CalledProcessError\r\n------------------------------------ Captured stderr call -------------------------------------\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 7, in <module>\r\n    import pyarrow as pa\r\nModuleNotFoundError: No module named 'pyarrow'\r\n================================== 1 failed in 0.23 seconds ===================================\r\n```\r\n\r\nI encountered this bit of brittleness in a fresh install where I had not run `setup.py develop` nor `setup.py install` on my local pyarrow dev area",
        "created_at": "2018-03-05T19:46:55.000Z",
        "updated_at": "2018-03-09T04:04:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-03-09T04:04:25.000Z"
    },
    "comments": [
        {
            "created_at": "2018-03-09T04:04:25.497Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2263?focusedCommentId=16392371) by Wes McKinney (wesm):*\nIssue resolved by pull request 1730\n<https://github.com/apache/arrow/pull/1730>"
        }
    ]
}