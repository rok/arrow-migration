{
    "issue": {
        "title": "[Rust] Investigate alternate ways to achieve byte-aligned memory",
        "body": "***Note**: This issue was originally created as [ARROW-2373](https://issues.apache.org/jira/browse/ARROW-2373). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe current Rust implementation of Buffer<T> relies on libc and unsafe code to allocate byte-aligned buffers.\r\n\r\nIt would be nice to find a safer way to do this.\r\n\r\nRust 1.25 added support for byte-aligned structs, but that doesn't help.\r\n\r\nI have started a discussion in the Rust develop forum about adding support for byte-aligned Vec:\u00a0<https://internals.rust-lang.org/t/byte-aligned-vec/7200>\r\n\r\nFeedback so far is \"We\u2019re getting close to stabilizing some of the allocator API which will let you make a custom type that does this though.\".",
        "created_at": "2018-03-31T17:58:05.000Z",
        "updated_at": "2019-02-05T00:05:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-02-05T00:05:32.000Z"
    },
    "comments": [
        {
            "created_at": "2018-03-31T18:28:41.408Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2373?focusedCommentId=16421425) by Krisztian Szucs (kszucs):*\nWe might use https://github.com/contain-rs/raw-vec or just try to port std.RawVec.\r\nBTW I'd use the nightly API and wait for stabilization."
        },
        {
            "created_at": "2018-03-31T19:40:54.352Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2373?focusedCommentId=16421445) by Andy Grove (andygrove):*\nI guess using nightly isn't so bad for now. It sounds like alloc might stabilize this year."
        },
        {
            "created_at": "2018-03-31T21:45:05.657Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2373?focusedCommentId=16421484) by Andy Grove (andygrove):*\nI just got this suggestion on the Rust forum:\r\n\r\n\u00a0\r\n\r\n\"Just make a type that is a 64-byte aligned array of 16 i32s (or just 64 u8s, although if you are using it as i32s it\u2019s more elegant to use i32s), make a Vec of that, and then a newtype over that Vec that implements Deref to &i32 by transmuting.\"\r\n\r\n\u00a0\r\n\r\n\"Add an extra size field to the newtype if you need to keep track of size at primitive granularity.\"\r\n\r\n\u00a0\r\n\r\nThis seems almost ideal to me.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2019-02-05T00:05:33.015Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2373?focusedCommentId=16760333) by Andy Grove (andygrove):*\nI no longer believe this to be important."
        }
    ]
}