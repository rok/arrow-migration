{
    "issue": {
        "title": "Relax / extend type checking for pyarrow array creation",
        "body": "***Note**: This issue was originally created as [ARROW-17582](https://issues.apache.org/jira/browse/ARROW-17582). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nin [ibis](https://github.com/ibis-project/ibis) we're interested in offering query results as a record batch \u2013 some of the data we're starting with is coming back from a `sqlalchemy.cursor` which _look_ like `{}tuple{`}s and `{}dict{`}s but are actually `sqlalchemy.engine.row.LegacyRow` and `{}sqlalchemy.engine.row.RowMapping{`}, respectively.\r\n\r\n\u00a0\r\n\r\nThe checks in `python_to_arrow.cc` are strict enough that these can't be readily dumped into an `array` without first calling, e.g. `tuple` on the individual rows of the results.\r\n\r\n\u00a0\r\n```java\n\r\nIn [168]: batch[:5]\r\nOut[168]: [(1, 2173), (1, 943), (1, 892), (1, 30), (1, 337)]\r\nIn [169]: pa_schema = pa.struct([(\"l_orderkey\", pa.int32()), (\"l_partkey\", pa.int32())])\r\nIn [170]: pa.array(batch[:5], type=pa_schema)\r\n---------------------------------------------------------------------------\r\nArrowTypeError \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Traceback (most recent call last)\r\nInput In [170], in <cell line: 1>()\r\n----> 1 pa.array(batch[:5], type=pa_schema)\r\nFile /nix/store/z9qn3g22d8nx1x4mgzq3497iy8ji5h8x-python3-3.10.6-env/lib/python3.10/site-packages/pyarrow/array.pxi:317, in pyarrow.lib.array()\r\nFile /nix/store/z9qn3g22d8nx1x4mgzq3497iy8ji5h8x-python3-3.10.6-env/lib/python3.10/site-packages/pyarrow/array.pxi:39, in pyarrow.lib._sequence_to_array()\r\nFile /nix/store/z9qn3g22d8nx1x4mgzq3497iy8ji5h8x-python3-3.10.6-env/lib/python3.10/site-packages/pyarrow/error.pxi:144, in pyarrow.lib.pyarrow_internal_check_status()\r\nFile /nix/store/z9qn3g22d8nx1x4mgzq3497iy8ji5h8x-python3-3.10.6-env/lib/python3.10/site-packages/pyarrow/error.pxi:123, in pyarrow.lib.check_status()\r\nArrowTypeError: Could not convert 1 with type int: was expecting tuple of (key, value) pair\r\n/build/apache-arrow-9.0.0/cpp/src/arrow/python/python_to_arrow.cc:938 \u00a0GetKeyValuePair(items, i)\r\n/build/apache-arrow-9.0.0/cpp/src/arrow/python/python_to_arrow.cc:1010 \u00a0InferKeyKind(items)\r\n/build/apache-arrow-9.0.0/cpp/src/arrow/python/iterators.h:73 \u00a0func(value, static_cast<int64_t>(i), &keep_going)\r\n/build/apache-arrow-9.0.0/cpp/src/arrow/python/python_to_arrow.cc:1182 \u00a0converter->Extend(seq, size)\r\n```\r\nvs\r\n```java\n\r\nIn [171]: pa.array(map(tuple, batch[:5]), type=pa_schema)\r\nOut[171]:\u00a0\r\n<pyarrow.lib.StructArray object at 0x7fd4fb52d660>\r\n-- is_valid: all not null\r\n-- child 0 type: int32\r\n\u00a0 [\r\n\u00a0 \u00a0 1,\r\n\u00a0 \u00a0 1,\r\n\u00a0 \u00a0 1,\r\n\u00a0 \u00a0 1,\r\n\u00a0 \u00a0 1\r\n\u00a0 ]\r\n-- child 1 type: int32\r\n\u00a0 [\r\n\u00a0 \u00a0 2173,\r\n\u00a0 \u00a0 943,\r\n\u00a0 \u00a0 892,\r\n\u00a0 \u00a0 30,\r\n\u00a0 \u00a0 337\r\n\u00a0 ]\n```\r\nTo avoid the overhead of this extra conversion, maybe there are some checks that aren't explicit python type-checks that we can rely on?",
        "created_at": "2022-08-31T15:25:01.000Z",
        "updated_at": "2022-08-31T15:27:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}