{
    "issue": {
        "title": "[C++][Docs] Revise C++ Documentation",
        "body": "***Note**: This issue was originally created as [ARROW-17167](https://issues.apache.org/jira/browse/ARROW-17167). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nParent ticket for tasks that aim to revise C++ Arrow documentation.\r\n\r\n\u00a0\r\n\r\nGoal is to review the field of good documentation, and reformat/create pages as necessary to improve the C++ docs as a whole. Subtasks will tackle this iteratively, refer to those for more information. Suggestions from new users would be incredibly valued, due to their experiences being more likely to have been impacted by any lacking documentation.",
        "created_at": "2022-07-21T17:09:01.000Z",
        "updated_at": "2022-11-10T17:51:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Documentation",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-21T17:15:11.224Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569599) by Antoine Pitrou (apitrou):*\nI agree with the general sentiment, but one thing I would like to see first is an attempt at better architecting the C++ docs.\r\nRight now they have two main sections:\r\n- an auto-generated API section, which is fine\n- a prose section that is more random and doesn't have a very delineated purpose (general introduction? user guide? detailed discussion of specific issues? exhaustive description of available functionality?)\n  \n  The prose sections turns out to be frustrating to maintain because there isn't a very consistent level of detail, and there's always a tension between making it immediately approachable and making it comprehensive enough."
        },
        {
            "created_at": "2022-07-21T17:21:32.954Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569601) by Kae Suarez (ksuarez):*\nSo we need to have a target for the level of detail and goal of the user guide, then? Would expanding the cookbook help make it so the user guide can be more targeted? I notice that right now it's stuck being a one-stop shop, which sometimes misses information due to the problem you're suggesting, probably.\r\n\r\nI do think some things can be added that are generally of use regardless of how we change it in the future, like an installation section and a Getting Started section, just to get up to par with Python's Arrow documentation. However, I might be a bit over-eager, suggesting that, so I definitely want to keep this conversation open."
        },
        {
            "created_at": "2022-07-21T17:28:59.797Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569608) by Antoine Pitrou (apitrou):*\nI think two main sections is probably too few for a proper separation of purposes.  One nice example of clearly architected docs is the Dask docs : https://docs.dask.org/en/stable/"
        },
        {
            "created_at": "2022-07-21T17:42:41.090Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569614) by Kae Suarez (ksuarez):*\nI think the Dask docs are a pretty nice example, for sure, but that leads to the level of thinking about the docs as a whole \u2013 that kind of format change seems to lend itself well to the docs at a whole having this format duplicated, or applied at a higher level with usage for each language being in a section."
        },
        {
            "created_at": "2022-07-21T17:52:12.213Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569617) by Will Jones (willjones127):*\nI agree the Dask model seems quite nice. It also seems like something we could do iteratively well. For example, we might start by focusing on a \"Getting Started\" section. And then separate our current user guide into a \"Fundamentals\" and \"internals\" section.\r\n\r\nIt doesn't seem necessary to try to apply such a framework across languages. For one thing, different languages have their own documentation conventions. For another, there are differing appetites for each Arrow language community to invest in docs at a given time; trying to convince each sub-community doesn't seem worth the effort IMO."
        },
        {
            "created_at": "2022-07-21T17:56:00.733Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569619) by Antoine Pitrou (apitrou):*\n\"Thinking about the docs as a whole\" is precisely the kind of approach that I would like to encourage :-)\r\n\r\nThe more we pile up content under the current structure, the more painful it will be to migrate."
        },
        {
            "created_at": "2022-07-21T17:56:50.008Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569620) by Antoine Pitrou (apitrou):*\nAnd, right, this is about C++ for now. If/when we're satisfied with the result, we can discuss apply learning to other language docs."
        },
        {
            "created_at": "2022-07-21T17:57:57.687Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569621) by Antoine Pitrou (apitrou):*\nAlso cc `[~jorisvandenbossche]` for other suggestions where to research."
        },
        {
            "created_at": "2022-07-21T18:10:18.703Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569626) by Kae Suarez (ksuarez):*\nJust made https://issues.apache.org/jira/browse/ARROW-17170 to help organize this conversation further \u2013 for research, let's use that, and keep higher level discussion about direction here."
        },
        {
            "created_at": "2022-07-21T18:29:04.845Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569639) by Weston Pace (westonpace):*\nRe: the query engine, in the \"thinking about docs as a whole topic\", I think there are a few different audiences, none of which are particularly well served at the moment.\r\n\r\n \\* There seems to be (and I hope will continue to be) a certain audience that wants to extend Acero to fit their use case.  This audience will be rather technical (often academic) and invested and want to know fairly low-level details of how the engine is designed, best practices for developing nodes, advice on profiling their extensions, etc.  We have almost nothing here and this is the highest priority for me personally.  I'm hoping to make some headway here next release.\r\n \\* For user documentation, I am a little torn.  There is some documentation today describing the different nodes and their options, and that could really be expanded.  However, if Substrait ends up being the dominant interface to Acero then this API becomes internal and the audience changes (back to the people in the first bullet).\r\n \\* Users that are planning on using the engine via Substrait also fall into two categories.  I think there will always be some set of users that are planning on creating plans themselves.  These users will need to know quite a bit about Substrait, but I don't know how much we want to re-document.  These users will be very interested in knowing where & how Acero differs from Substrait (e.g. caveats & limitations).\r\n \\* There will be another set of Substrait users that are using Acero via some kind of producer (e.g. Ibis).  This set of users probably won't know much about Substrait.  They won't be able to understand the limitations / caveats, but if there are significant limitations they will want to know about them in some way.  They will be mostly interested in knowing how to configure Acero for performance, etc. and in the extensions that Acero adds to Substrait (e.g. integration with other APIs like datasets)"
        },
        {
            "created_at": "2022-07-22T01:40:38.024Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569740) by Vibhatha Lakmal Abeykoon (vibhatha):*\n`[~westonpace]` \u00a0I agree with the bullet point 1. \u00a0I think such users could be lesser compared to the users using the high-level details. Although, I think that's the part where ACERO would be adopted to other engines in a much deeper level. Sometimes, Substrait won't be an interest to a group working on a very much constrained and defined set of computations which uses in-house systems. Besides, for research purpose, I guess still the internal documentation would be very important to give a head-start to new users and existing users to track the modifications.\u00a0\r\n\r\nSo either way, I think we should document well what ACERO is doing internally. And make them avaialble in developer docs.\u00a0\r\n\r\nI am not sure if we have pursue this avenue before. There are user docs and developer docs. User docs can include high level details and how it works with other systems in harmony. That's more or less-like tutorial oriented and API doc oriented piece. The developer docs can go to any depth as required. I would say if we can define a boundary and expose from that level, it would be good for new ACERO contributors and the existing community.\u00a0\r\n\r\nAlso, I think we have marked that the ACERO docs are experimental and this means a lot of changes are going to come. So if we try to document things as it is we must also make sure that each PR for ACERO must handle a follow up sub-task which updates the documentation as well.\u00a0\r\n\r\nFor instance if the ticket is to update a feature A, then there has to be a subtask to include the feature and another sub-task to update the documentation. If it comes to the same task, we could miss the documentation piece. But if there is a dedicated task that won't be missed. Again this is just a suggestion how to iteratively improve things.\u00a0\r\n\r\nAnd as `[~apitrou]` \u00a0and `[~willjones127]` \u00a0suggested the Dask docs are pretty nicely organized. We could adopt a similar pattern.\u00a0"
        },
        {
            "created_at": "2022-07-22T01:41:30.474Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569741) by Vibhatha Lakmal Abeykoon (vibhatha):*\nAs an initial step, I added a sub-task to clean-up the length `execution-plan-documentation-examples`. It is listed in the substaks for this jira.\u00a0"
        },
        {
            "created_at": "2022-07-22T01:42:14.698Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17569742) by Vibhatha Lakmal Abeykoon (vibhatha):*\n`[~ksuarez]` \u00a0thank you for initiating this one. It is a much needed effort IMHO.\u00a0"
        },
        {
            "created_at": "2022-08-01T16:14:14.500Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17573834) by Kae Suarez (ksuarez):*\nIt seems that <https://diataxis.fr/> as worked for multiple teams when it comes to writing documentation \u2013 in some cases, it's augmented for a given use case, but serves as a competent base. Thus, I propose we keep it in mind as we increment the docs towards a better form.\r\n\r\nAs a start, calling back to what `[~apitrou]` said at the start of this, we could stand to have better structure. To do that incrementally, I propose we have a proper introduction \"getting started\" section of the docs, that way the existing docs can shift towards being a larger tutorial or targeted tutorials \u2013 basically, break out some responsibility so we can be more precise with next steps. Of course, we can re-align targets over time, but I think that we'd at least get some parity with the other Arrow docs by adding the introduction section. Any thoughts before I throw that up as a task here on JIRA?"
        },
        {
            "created_at": "2022-08-01T19:24:02.567Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17573893) by Aldrin Montana (octalene):*\nI think a getting started section sounds great.\r\n\r\nIn my mind, it would be a nice place to put sub-sections such as:\r\n- \"getting data into Arrow\"\n- \"ways to process Arrow data\"\n  \n  I think as sub-sections these could introduce some concepts, how they relate, and point to places in the docs that describe them in more detail. IMO, a nice \"getting started\" also helps bootstrap enough knowledge to navigate the docs."
        },
        {
            "created_at": "2022-11-10T17:51:39.890Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17167?focusedCommentId=17631819) by Apache Arrow JIRA Bot (arrowjira):*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy](https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment). Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}