{
    "issue": {
        "title": "[C++] [Python] Method for read_csv to limit which columns are read?",
        "body": "***Note**: This issue was originally created as [ARROW-5977](https://issues.apache.org/jira/browse/ARROW-5977). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn pandas there is pd.read_csv(usecols=...) but I can't see a way to do this in pyarrow.\u00a0",
        "created_at": "2019-07-18T11:25:57.000Z",
        "updated_at": "2019-08-12T12:06:16.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-08-12T12:06:05.000Z"
    },
    "comments": [
        {
            "created_at": "2019-07-23T10:32:42.169Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16890878) by Antoine Pitrou (apitrou):*\n`[~npr]` What do you think?"
        },
        {
            "created_at": "2019-08-06T13:50:30.851Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16901074) by Antoine Pitrou (apitrou):*\n`[~npr]` Ping."
        },
        {
            "created_at": "2019-08-06T14:44:24.466Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16901124) by Neal Richardson (npr):*\nAll of R's main CSV readers support this. One way they all\u00a0expose this by allowing you to\u00a0provide a null type for some columns when you specify their types explicitly. A couple of the readers allow you to specify columns by name or position to keep or drop.\u00a0\r\n\r\nI think this is a good idea not just in the context of reading a CSV itself but also for the Datasets framework, where we are lazily\u00a0reading chunks of data as needed and trying to be efficient with memory usage.\u00a0"
        },
        {
            "created_at": "2019-08-06T14:46:27.172Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16901126) by Antoine Pitrou (apitrou):*\nOk, so what kind of ergonomics would you favour? Simply a `include_columns` vector of strings? And/or a `exclude_columns` vector as well?"
        },
        {
            "created_at": "2019-08-06T14:51:03.520Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16901133) by Wes McKinney (wesm):*\nI think just include is okay. It might make sense to co-develop this in conjunction with the Datasets interface to CSV files (since this needs to be able to select columns as well as insert missing fields \u2013 which become all null \u2013 this can happen as a post-scan operation though)"
        },
        {
            "created_at": "2019-08-06T14:54:02.121Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16901137) by Antoine Pitrou (apitrou):*\nSo, to make things clear, a column in `include_columns` but not in the CSV file should produce a null column rather than emit an error?"
        },
        {
            "created_at": "2019-08-06T14:57:36.002Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16901141) by Neal Richardson (npr):*\nYeah I agree that just an `include_columns` argument is fine. Any other sugar we want to have for selecting or deselecting columns can be handled at the Dataset layer (and thus be available regardless of the underlying storage type).\r\n\r\nNull column probably makes sense if the column does not exist in the CSV."
        },
        {
            "created_at": "2019-08-06T15:00:48.891Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16901142) by Francois Saint-Jacques (fsaintjacques):*\nCan we re-use the `ConverterOptions.column_types` for the same purpose? The field would:\r\n1. Select columns\n1. Possibly give a type hint."
        },
        {
            "created_at": "2019-08-06T15:04:38.823Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16901145) by Neal Richardson (npr):*\nRight, that was the other option that I said that all of the R readers support. We could support both ways, but the benefits of a separate vector of column names argument would be (1) you don't have to specify types for all other columns; (2) you wouldn't have to know the names of the other columns; and (3) you can't specify desired column order in the column_types because it is a map."
        },
        {
            "created_at": "2019-08-12T12:06:05.419Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5977?focusedCommentId=16905120) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 5026\n<https://github.com/apache/arrow/pull/5026>"
        }
    ]
}