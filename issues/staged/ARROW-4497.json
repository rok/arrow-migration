{
    "issue": {
        "title": "[C++] Determine how we want to handle hashing of floating point edge cases",
        "body": "***Note**: This issue was originally created as [ARROW-4497](https://issues.apache.org/jira/browse/ARROW-4497). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe should document expected behavior or implement improvements to hashing floating point code:\r\n1.  -0.0 and 0.0 (should these be collapsed to 0.0)\r\n2. NaN (Should we reduce to a single canonical version).",
        "created_at": "2019-02-07T09:32:11.000Z",
        "updated_at": "2020-01-07T19:15:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-02-07T09:35:11.142Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4497?focusedCommentId=16762514) by Antoine Pitrou (apitrou):*\nYes, unfortunately it's not obvious which behaviour we want.\r\n\r\nI'd say reducing NaN to a single canonical version is reasonable. As for negative zeros it's not obvious. If you get negative zeros in your data they probably deserve distinct treatment..."
        },
        {
            "created_at": "2019-02-07T09:48:04.049Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4497?focusedCommentId=16762523) by Micah Kornfield (emkornfield@gmail.com):*\n`[~pitrou]` This is consistent with how java handles things (<https://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#equals(java.lang.Object>)) so I'm ok with the approach. It seems pandas takes another approach (but I could be mis-using the groupby operator:\r\n\r\n`>>> df = pd.DataFrame(``{'a': [-0.0, 0.0, float('nan')]`}`)`\r\n` >>> df`\r\n` a`\r\n` 0 -0.0`\r\n` 1 0.0`\r\n` 2 NaN`\r\n` >>> a=df.groupby(df.a)`\r\n` >>> a.count(`\r\n` ... )`\r\n` Empty DataFrame`\r\n` Columns: []`\r\n` Index: [-0.0]`"
        },
        {
            "created_at": "2019-02-07T09:50:26.075Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4497?focusedCommentId=16762524) by Antoine Pitrou (apitrou):*\ncc `[~wesmckinn]`"
        },
        {
            "created_at": "2019-02-07T09:50:53.185Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4497?focusedCommentId=16762525) by Antoine Pitrou (apitrou):*\nNote that equality will have to be customized as well in the hash table code if we want this to work correctly."
        },
        {
            "created_at": "2019-02-07T15:34:30.334Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4497?focusedCommentId=16762771) by Wes McKinney (wesm):*\nIn pandas NaN is treated as null so it's a different story"
        },
        {
            "created_at": "2019-03-06T05:15:51.982Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4497?focusedCommentId=16785233) by Micah Kornfield (emkornfield@gmail.com):*\nPer mailing list conversation.\r\n\r\nWe should canonicalize nulls and\u00a0have NaN == NaN and\u00a0have +0.0 == -0.0"
        },
        {
            "created_at": "2019-06-12T19:55:50.177Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4497?focusedCommentId=16862416) by Wes McKinney (wesm):*\nIs this something that can be resolved for 0.14?"
        },
        {
            "created_at": "2019-06-12T22:38:20.384Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4497?focusedCommentId=16862512) by Antoine Pitrou (apitrou):*\nI don't think so. This sounds low priority to me."
        }
    ]
}