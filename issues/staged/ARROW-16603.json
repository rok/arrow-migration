{
    "issue": {
        "title": "[Python] pyarrow.json.read_json ignores nullable=False in explicit_schema parse_options",
        "body": "***Note**: This issue was originally created as [ARROW-16603](https://issues.apache.org/jira/browse/ARROW-16603). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nReproducible example:\r\n```python\n\r\nimport json\r\nimport pyarrow.json as pj\r\nimport pyarrow as pa\r\n\r\ns = {\"id\": \"value\", \"nested\": {\"value\": 1}}\r\n\r\nwith open(\"issue.json\", \"w\") as write_file:\r\n    json.dump(s, write_file, indent=4)\r\n\r\nschema = pa.schema([\r\n    pa.field(\"id\", pa.string(), nullable=False),\r\n    pa.field(\"nested\", pa.struct([pa.field(\"value\", pa.int64(), nullable=False)]))\r\n])\r\n\r\ntable = pj.read_json('issue.json', parse_options=pj.ParseOptions(explicit_schema=schema))\r\n\r\nprint(schema)\r\n# id: string not null\r\n# nested: struct<value: int64 not null>\r\n#\u00a0  child 0, value: int64 not null \r\nprint(table.schema)\r\n# id: string\r\n# nested: struct<value: int64>\r\n# \u00a0 child 0, value: int64\n```",
        "created_at": "2022-05-18T06:51:24.000Z",
        "updated_at": "2022-10-17T07:02:12.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-05-25T09:50:19.544Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16603?focusedCommentId=17541941) by Joris Van den Bossche (jorisvandenbossche):*\nThe BlockParser docstring indicates that (https://github.com/apache/arrow/blob/985c25703c28e60a51dee09515bb8dd2a89c00e2/cpp/src/arrow/json/parser.h#L61):\r\n\r\n```Java\n\r\n/// Note that in addition to parse errors (such as malformed JSON) some conversion\r\n/// errors are caught at parse time:\r\n/// - A null value in non-nullable column\r\n```\r\n\r\nAlthough I don't directly see where that would be handled in parser.cc (cc `[~bkietz]` ?)"
        }
    ]
}