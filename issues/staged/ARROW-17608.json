{
    "issue": {
        "title": "[JS] Implement C Data Interface",
        "body": "***Note**: This issue was originally created as [ARROW-17608](https://issues.apache.org/jira/browse/ARROW-17608). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI've recently been working on an implementation of the C Data Interface for Arrow JS, the idea being that Arrow JS can read memory from WebAssembly this way without a copy ([blog post](https://observablehq.com/@kylebarron/zero-copy-apache-arrow-with-webassembly), [repo](https://github.com/kylebarron/arrow-js-ffi)). Dominik [suggested](https://twitter.com/domoritz/status/1562670919469842432?s=20&t=Ts8HQe_fzgRmecUP1Qrhrw) starting a discussion about potentially adding this into\u00a0Arrow JS.\r\n\r\nMy implementation is still WIP but figure it's not too early to start a discussion. A couple notes:\r\n\r\n- I'm focused only on reading FFI memory, so I only have parsing code. I figure writing doesn't really make sense in JS since Wasm can't access arbitrary JS memory\n- In order to generate FFI memory in the tests, I'm using a small Rust module to convert from an IPC table. If we didn't want to add a rust build step in the tests, that module could be published to NPM\n  \n  Thoughts?",
        "created_at": "2022-09-04T07:37:26.000Z",
        "updated_at": "2022-10-31T15:50:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-24T13:50:34.470Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17608?focusedCommentId=17623196) by Joris Van den Bossche (jorisvandenbossche):*\n`[~kylebarron2]` I am not familiar with the JS package, so I can't comment on the details, but I think in general we would certainly like to see this functionality. Thank for exploring this! Certainly feel free to already open a PR (that might make the discussion more concrete)\r\n\r\ncc `[~domoritz]` [~paul.e.taylor]"
        },
        {
            "created_at": "2022-10-24T16:05:26.533Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17608?focusedCommentId=17623263) by Dominik Moritz (domoritz):*\nThat's fantastic. I very much look forward to continued discussions around this. Paul and I hang out in the Apache Slack if you want to discuss ideas synchronously. "
        },
        {
            "created_at": "2022-10-24T18:46:41.771Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17608?focusedCommentId=17623345) by Chang She (changhiskhan):*\nI would be very excited about this as well. Would love to be able to use this mechanism to facilitate python-js interop in a jupyter notebook (or using pyscript). Is there a good place for me to catch-up/join on the existing discussions? Thanks!"
        },
        {
            "created_at": "2022-10-31T15:50:54.527Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17608?focusedCommentId=17626667) by Kyle Barron (kylebarron2):*\nI don't think I have the bandwidth right now to push this to completion. Would you be interested in a PR even if not every data type is supported? For example I hit issues with arrow JS [misinterpreting a fixed size list](https://github.com/kylebarron/arrow-js-ffi/pull/12) (the error is probably on my side). \r\n\r\n`[~changhiskhan]` If you're using a jupyter notebook with normal Python, I don't think this will help you at all, and using Arrow IPC would still be easiest. If you're using jupyterlite within webassembly, this would allow you to have read-only views in Arrow JS from Python's Wasm memory without a copy. pyodide has a [PyBuffer class](https://pyodide.org/en/stable/usage/api/js-api.html#pyodide.PyBuffer) which lets JS access Python memory, so you should in theory be able to export C Data Interface structs to those buffers, which should point to the arrow memory locations in the wasm memory."
        }
    ]
}