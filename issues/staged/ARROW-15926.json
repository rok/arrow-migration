{
    "issue": {
        "title": "[R] CsvConvertOptions include_columns and col_select should give better error message when used in open_dataset",
        "body": "***Note**: This issue was originally created as [ARROW-15926](https://issues.apache.org/jira/browse/ARROW-15926). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI think there is a bug when reading a csv dataset where you don't want to read in all columns. As shown below, the identical code works in read_csv_arrow but errors in open_dataset. This can be worked around by reading in all columns and then selecting afterwards, but I am not sure if there is any performance advantage to omitting columns at the reading step.\r\n\r\n\u00a0\r\n\r\n``` r\r\nlibrary(tidyverse)\r\nlibrary(arrow)\r\n#>\u00a0\r\n#> Attaching package: 'arrow'\r\n\r\ntmpf <- tempfile()\r\n\r\ndat <- tribble(\r\n\u00a0 ~key, ~val1,\r\n\u00a0 \"A\", \"1\",\r\n\u00a0 \"B\", \"2\",\r\n)\r\n\r\nwrite_csv(dat, tmpf)\r\n\r\n1. works in read_csv_arrow, errors in open_dataset:\n   \n   read_csv_arrow(\n   \u00a0 tmpf,\n   \u00a0 convert_options = CsvConvertOptions$create(\n   \u00a0 \u00a0 include_columns = \"key\"\n   \u00a0 ))\n#> # A tibble: 2 x 1\r\n#> \u00a0 key \u00a0\r\n#> \u00a0 <chr>\r\n#> 1 A \u00a0 \u00a0\r\n#> 2 B\r\n\r\nopen_dataset(\r\n\u00a0 tmpf, format = \"csv\",\r\n\u00a0 convert_options = CsvConvertOptions$create(\r\n\u00a0 \u00a0 include_columns = \"key\"\r\n\u00a0 )) %>% collect()\r\n#> Error in `handle_csv_read_error()`:\r\n#> ! Invalid: Multiple matches for FieldRef.Name(key) in key: \u00a0 [\r\n#> \u00a0 \u00a0 \"A\",\r\n#> \u00a0 \u00a0 \"B\"\r\n#> \u00a0 ]\r\n#> key: \u00a0 [\r\n#> \u00a0 \u00a0 \"A\",\r\n#> \u00a0 \u00a0 \"B\"\r\n#> \u00a0 ]\r\n\r\n1. Note that it does work to select after open_dataset, thus not a blocking issue:\n   \n   open_dataset(tmpf, format = \"csv\") %>%\n   \u00a0 select(key) %>%\n   \u00a0 collect()\n#> # A tibble: 2 x 1\r\n#> \u00a0 key \u00a0\r\n#> \u00a0 <chr>\r\n#> 1 A \u00a0 \u00a0\r\n#> 2 B\r\n```\r\n\r\n<sup>Created on 2022-03-12 by the [reprex package]([https://reprex.tidyverse.org](https://reprex.tidyverse.org/)) (v2.0.1)</sup>\r\n\r\n\u00a0\r\n\r\nI have tried this both with CRAN version 7 and the nightly version.",
        "created_at": "2022-03-12T23:34:47.000Z",
        "updated_at": "2022-11-17T19:53:24.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-03-14T12:38:59.551Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15926?focusedCommentId=17506219) by Dewey Dunnington (paleolimbot):*\nThank you for reporting! It is definitely a confusing message that we need to fix. You're correct that the preferred idiom is `csv_dataset %>% select(key)` in this case, which should automatically only read the necessary columns.\r\n\r\nPinging `[~thisisnic]`, since they've done the most work getting `read_csv_arrow()` and `open_dataset(format = \"csv\")` to agree with eachother.\r\n\r\nRe-rendering your excellent reprex below to be Jira friendly:\r\n\r\n```R\n\r\nlibrary(tidyverse)\r\nlibrary(arrow)\r\n#> \r\n#> Attaching package: 'arrow'\r\n#> The following object is masked from 'package:utils':\r\n#> \r\n#>     timestamp\r\n\r\ntmpf <- tempfile()\r\n\r\ndat <- tribble(\r\n  ~key, ~val1,\r\n  \"A\", \"1\",\r\n  \"B\", \"2\",\r\n)\r\n\r\nwrite_csv(dat, tmpf)\r\n\r\n\r\nread_csv_arrow(\r\n  tmpf,\r\n  convert_options = CsvConvertOptions$create(\r\n    include_columns = \"key\"\r\n  ))\r\n#> # A tibble: 2 \u00d7 1\r\n#>   key  \r\n#>   <chr>\r\n#> 1 A    \r\n#> 2 B\r\n\r\nopen_dataset(\r\n  tmpf, format = \"csv\",\r\n  convert_options = CsvConvertOptions$create(\r\n    include_columns = \"key\"\r\n  )) %>% collect()\r\n#> Error in `handle_csv_read_error()` at r/R/dplyr-collect.R:33:6:\r\n#> ! Invalid: Multiple matches for FieldRef.Name(key) in key:   [\r\n#>     \"A\",\r\n#>     \"B\"\r\n#>   ]\r\n#> key:   [\r\n#>     \"A\",\r\n#>     \"B\"\r\n#>   ]\r\n#> \r\n#> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/type.h:1727  CheckNonMultiple(matches, root)\r\n#> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/type.h:1759  FindOneOrNone(root)\r\n#> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/compute/exec/expression.cc:438  FieldRef(field->name()).GetOneOrNone(partial_batch)\r\n#> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/dataset/scanner.cc:865  compute::MakeExecBatch(*scan_options->dataset_schema, partial.record_batch.value)\r\n#> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/compute/exec/exec_plan.cc:484  iterator_.Next()\r\n#> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/record_batch.cc:336  ReadNext(&batch)\r\n#> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/record_batch.cc:347  ReadAll(&batches)\r\n\r\nopen_dataset(tmpf, format = \"csv\") %>%\r\n  select(key) %>%\r\n  collect()\r\n#> # A tibble: 2 \u00d7 1\r\n#>   key  \r\n#>   <chr>\r\n#> 1 A    \r\n#> 2 B\r\n```\r\n"
        },
        {
            "created_at": "2022-03-18T14:29:22.778Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15926?focusedCommentId=17508809) by Nicola Crane (thisisnic):*\nI had a look into this, and although it is technically possible to pass the convert_options parameter through like this, I don't think we actually support that option with datasets.\u00a0 As `[~paleolimbot]` \u00a0 has said above, we should definitely improve the error message here - I'll update the ticket to reflect that."
        }
    ]
}