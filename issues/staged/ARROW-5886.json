{
    "issue": {
        "title": "[Python][Packaging] Manylinux1/2010 compliance issue with libz",
        "body": "***Note**: This issue was originally created as [ARROW-5886](https://issues.apache.org/jira/browse/ARROW-5886). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSo we statically link liblz4 in the manylinux1 wheels\r\n```Java\n\r\n# ldd pyarrow-manylinux1/libarrow.so.14 | grep z\r\n        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fc28cef4000)\r\n```\r\nbut dynamically in the manylinux2010 wheels\r\n```Java\n\r\n# ldd pyarrow-manylinux2010/libarrow.so.14 | grep z\r\n        liblz4.so.1 => not found  (already deleted to reproduce the issue)\r\n        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f56f7440000)\r\n```\r\nthis what this PR resolves.\r\n\r\nWhat I'm finding strange, that auditwheel seems to bundle libz for manylinux1:\r\n```Java\n\r\n# ls -lah pyarrow-manylinux1/*z*so.*\r\n-rwxr-xr-x 1 root root 115K Jun 29 00:14 pyarrow-manylinux1/libz-7f57503f.so.1.2.11\r\n```\r\nwhile ldd still uses the system libz:\r\n```Java\n\r\n# ldd pyarrow-manylinux1/libarrow.so.14 | grep z\r\n        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f91fcf3f000)\r\n```\r\nFor manylinux2010 we also have liblz4:\r\n```Java\n\r\n#  ls -lah pyarrow-manylinux2010/*z*so.*\r\n-rwxr-xr-x 1 root root 191K Jun 28 23:38 pyarrow-manylinux2010/liblz4-8cb8bdde.so.1.8.3\r\n-rwxr-xr-x 1 root root 115K Jun 28 23:38 pyarrow-manylinux2010/libz-c69b9943.so.1.2.11\r\n```\r\nand ldd similarly tries to load the system libs:\r\n```Java\n\r\n# ldd pyarrow-manylinux2010/libarrow.so.14 | grep z\r\n        liblz4.so.1 => not found\r\n        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fd72764e000)\r\n```\r\n\r\nInspecting manylinux1 with `LD_DEBUG=files,libs ldd libarrow.so.14` it seems like to search the right path, but cannot find the hashed version of libz `libz-7f57503f.so.1.2.11`\r\n```Java\n\r\n       463:     file=libz.so.1 [0];  needed by ./libarrow.so.14 [0]\r\n       463:     find library=libz.so.1 [0]; searching\r\n       463:      search path=/tmp/pyarrow-manylinux1/.          (RPATH from file ./libarrow.so.14)\r\n       463:       trying file=/tmp/pyarrow-manylinux1/./libz.so.1\r\n       463:      search cache=/etc/ld.so.cache\r\n       463:       trying file=/lib/x86_64-linux-gnu/libz.so.1\r\n```\r\nThere is no `libz.so.1` just `libz-7f57503f.so.1.2.11`.\r\n\r\nSimilarly for manylinux2010 and libz:\r\n```Java\n\r\n       470:     file=libz.so.1 [0];  needed by ./libarrow.so.14 [0]\r\n       470:     find library=libz.so.1 [0]; searching\r\n       470:      search path=/tmp/pyarrow-manylinux2010/.               (RPATH from file ./libarrow.so.14)\r\n       470:       trying file=/tmp/pyarrow-manylinux2010/./libz.so.1\r\n       470:      search cache=/etc/ld.so.cache\r\n       470:       trying file=/lib/x86_64-linux-gnu/libz.so.1\r\n```\r\nfor liblz4 (again, I've deleted the system one):\r\n```Java\n\r\n       470:     file=liblz4.so.1 [0];  needed by ./libarrow.so.14 [0]\r\n       470:     find library=liblz4.so.1 [0]; searching\r\n       470:      search path=/tmp/pyarrow-manylinux2010/.               (RPATH from file ./libarrow.so.14)\r\n       470:       trying file=/tmp/pyarrow-manylinux2010/./liblz4.so.1\r\n       470:      search cache=/etc/ld.so.cache\r\n       470:      search path=/lib/x86_64-linux-gnu/tls/x86_64:/lib/x86_64-linux-gnu/tls:/lib/x86_64-linux-gnu/x86_64:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/tls/x86_64:/usr/lib/x86_64-linux-gnu/tls:/usr/lib/x86_64-linux-gnu/x86_6$\r\n:/usr/lib/x86_64-linux-gnu:/lib/tls/x86_64:/lib/tls:/lib/x86_64:/lib:/usr/lib/tls/x86_64:/usr/lib/tls:/usr/lib/x86_64:/usr/lib          (system search path)\r\n```\r\nThere are no `libz.so.1` nor `liblz4.so.1`, just `libz-c69b9943.so.1.2.11` and `liblz4-8cb8bdde.so.1.8.3`\r\n\r\nAccording to https://www.python.org/dev/peps/pep-0571/ `liblz4` nor `libz` are part of the whitelist, and while these are bundled with the wheel, seemingly cannot be found - perhaps because of the hash in the library name?\r\n\r\nI've tried to inspect the wheels with `auditwheel show` with version `2` and `1.10`, both says the following:\r\n\r\n```Java\n\r\n# auditwheel show pyarrow-0.14.0-cp37-cp37m-manylinux2010_x86_64.whl\r\n\r\npyarrow-0.14.0-cp37-cp37m-manylinux2010_x86_64.whl is consistent with\r\nthe following platform tag: \"linux_x86_64\".\r\n\r\nThe wheel references external versioned symbols in these system-\r\nprovided shared libraries: libgcc_s.so.1 with versions {'GCC_3.3',\r\n'GCC_3.4', 'GCC_3.0'}, libpthread.so.0 with versions {'GLIBC_2.3.3',\r\n'GLIBC_2.12', 'GLIBC_2.2.5', 'GLIBC_2.3.2'}, libc.so.6 with versions\r\n{'GLIBC_2.4', 'GLIBC_2.6', 'GLIBC_2.2.5', 'GLIBC_2.7', 'GLIBC_2.3.4',\r\n'GLIBC_2.3.2', 'GLIBC_2.3'}, libstdc++.so.6 with versions\r\n{'CXXABI_1.3', 'GLIBCXX_3.4.10', 'GLIBCXX_3.4.9', 'GLIBCXX_3.4.11',\r\n'GLIBCXX_3.4.5', 'GLIBCXX_3.4', 'CXXABI_1.3.2', 'CXXABI_1.3.3'},\r\nlibrt.so.1 with versions {'GLIBC_2.2.5'}, libm.so.6 with versions\r\n{'GLIBC_2.2.5'}, libdl.so.2 with versions {'GLIBC_2.2.5'}, libz.so.1\r\nwith versions {'ZLIB_1.2.0'}\r\n\r\nThis constrains the platform tag to \"manylinux2010_x86_64\". In order\r\nto achieve a more compatible tag, you would need to recompile a new\r\nwheel from source on a system with earlier versions of these\r\nlibraries, such as a recent manylinux image.\r\n```\r\n\r\n```Java\n\r\n# auditwheel show pyarrow-0.14.0-cp37-cp37m-manylinux1_x86_64.whl\r\n\r\npyarrow-0.14.0-cp37-cp37m-manylinux1_x86_64.whl is consistent with the\r\nfollowing platform tag: \"linux_x86_64\".\r\n\r\nThe wheel references external versioned symbols in these system-\r\nprovided shared libraries: libgcc_s.so.1 with versions {'GCC_3.4',\r\n'GCC_3.0', 'GCC_3.3'}, libc.so.6 with versions {'GLIBC_2.3',\r\n'GLIBC_2.2.5', 'GLIBC_2.3.4', 'GLIBC_2.4', 'GLIBC_2.3.2'},\r\nlibstdc++.so.6 with versions {'CXXABI_1.3', 'GLIBCXX_3.4.5',\r\n'GLIBCXX_3.4'}, librt.so.1 with versions {'GLIBC_2.2.5'}, libm.so.6\r\nwith versions {'GLIBC_2.2.5'}, libpthread.so.0 with versions\r\n{'GLIBC_2.3.3', 'GLIBC_2.3.2', 'GLIBC_2.2.5'}, libdl.so.2 with\r\nversions {'GLIBC_2.2.5'}, libz.so.1 with versions {'ZLIB_1.2.0'}\r\n\r\nThe following external shared libraries are required by the wheel:\r\n{\r\n    \"libc.so.6\": \"/lib/x86_64-linux-gnu/libc-2.24.so\",\r\n    \"libcrypt.so.1\": \"/lib/x86_64-linux-gnu/libcrypt-2.24.so\",\r\n    \"libdl.so.2\": \"/lib/x86_64-linux-gnu/libdl-2.24.so\",\r\n    \"libgcc_s.so.1\": \"/lib/x86_64-linux-gnu/libgcc_s.so.1\",\r\n    \"libm.so.6\": \"/lib/x86_64-linux-gnu/libm-2.24.so\",\r\n    \"libnsl.so.1\": \"/lib/x86_64-linux-gnu/libnsl-2.24.so\",\r\n    \"libpthread.so.0\": \"/lib/x86_64-linux-gnu/libpthread-2.24.so\",\r\n    \"librt.so.1\": \"/lib/x86_64-linux-gnu/librt-2.24.so\",\r\n    \"libstdc++.so.6\": \"/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.22\",\r\n    \"libutil.so.1\": \"/lib/x86_64-linux-gnu/libutil-2.24.so\",\r\n    \"libz.so.1\": \"/lib/x86_64-linux-gnu/libz.so.1.2.8\"\r\n}\r\n\r\nIn order to achieve the tag platform tag \"manylinux2010_x86_64\" the\r\nfollowing shared library dependencies will need to be eliminated:\r\n\r\nlibz.so.1\r\n\r\nIn order to achieve the tag platform tag \"manylinux1_x86_64\" the\r\nfollowing shared library dependencies will need to be eliminated:\r\n\r\nlibz.so.1\r\n```\r\n\r\nI think there are more todo left with the wheels. IMO the manylinux1 wheels are not compliant because of `libz` and the manylinux2010 wheels are not compliant because of both `libz` and `liblz4` (but incorrectly reported by auditwheel?).\r\n\r\nWe also need to ensure to run `auditwheel show` on the produced wheels in the manylinux-test script https://github.com/apache/arrow/blob/master/dev/tasks/python-wheels/manylinux-test.sh",
        "created_at": "2019-07-09T14:30:47.000Z",
        "updated_at": "2019-08-01T22:33:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Packaging",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-07-12T18:09:46.000Z"
    },
    "comments": [
        {
            "created_at": "2019-07-09T14:54:54.748Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5886?focusedCommentId=16881282) by Uwe Korn (uwe):*\nActually the work of `auditwheel repair` should be to rename these libs and use `patchelf`\u00a0on all binaries so that they linked to the renamed ones. If there is a binary that still links to the old name, then there is a bug in `auditwheel repair`."
        },
        {
            "created_at": "2019-07-09T15:43:45.033Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5886?focusedCommentId=16881327) by Krisztian Szucs (kszucs):*\nAgree, but we might overcome that bug with manually bundling the shared libs from setup.py"
        },
        {
            "created_at": "2019-07-12T18:09:46.729Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5886?focusedCommentId=16884060) by Wes McKinney (wesm):*\nIssue resolved by pull request 4834\n<https://github.com/apache/arrow/pull/4834>"
        }
    ]
}