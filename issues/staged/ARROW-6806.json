{
    "issue": {
        "title": "[C++] Segfault deserializing ListArray containing null/empty list",
        "body": "***Note**: This issue was originally created as [ARROW-6806](https://issues.apache.org/jira/browse/ARROW-6806). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe following code segfaults for me (Windows and Linux, pyarrow 0.15):\r\n\r\n\u00a0\r\n```java\n\r\nimport pyarrow as pa\r\nfrom io import BytesIO\r\nx = b'\\xdc\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x0c\\x00\\x0e\\x00\\x06\\x00\\r\\x00\\x08\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x10\\x00\\x00\\x00\\x00\\x01\\n\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x04\\x00\\n\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x18\\x00\\x14\\x00\\x13\\x00\\x12\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x04\\x00\\x12\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x14\\x00\\x00\\x00`\\x00\\x00\\x00\\x00\\x00\\x0c\\x01\\\\\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x18\\x00\\x14\\x00\\x00\\x00\\x13\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x04\\x00\\x12\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xf0\\xff\\xff\\xff\\x06\\x00\\x00\\x00$data$\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x10\\x00\\x00\\x00exchangeCodeList\\x00\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x16\\x00\\x0e\\x00\\x15\\x00\\x10\\x00\\x04\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x10\\x00\\x00\\x00\\x00\\x03\\n\\x00\\x18\\x00\\x0c\\x00\\x08\\x00\\x04\\x00\\n\\x00\\x00\\x00\\x14\\x00\\x00\\x00h\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\r\nr = pa.RecordBatchStreamReader(BytesIO(x))\r\nr.read_all()\r\n```\r\nI **think** what should happen instead is that I should get a Table with a single column named \"exchangeCodeList\", where the column is a ChunkedArray with a single chunk, where that chunk is a ListArray containing just a single element (a null). Failing that (i.e. if the bytestring is actually malformed), pyarrow should maybe throw an error instead of segfaulting?\r\n\r\nI'm not 100% sure how the bytestring was generated: I think it comes from a Java-based server. I can deserialize the server response fine if all the records have at least one element in the \"exchangeCodeList\" column, but not if at least one of them is null. I've tried to reproduce the failure by generating the bytestring with pyarrow but can't trigger the segfault.\r\n\r\n\u00a0",
        "created_at": "2019-10-07T15:44:39.000Z",
        "updated_at": "2019-10-12T19:45:58.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-10-08T00:14:21.000Z"
    },
    "comments": [
        {
            "created_at": "2019-10-07T15:55:03.953Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6806?focusedCommentId=16945980) by Antoine Pitrou (apitrou):*\nThe crash is during array validation, because the array's underlying buffers are null. Backtrace:\r\n```Java\n\r\n(gdb) bt\r\n#0  0x00007fffcde924e4 in arrow::Buffer::size (this=0x0) at /home/antoine/miniconda3/envs/pyarrow/include/arrow/buffer.h:190\r\n#1  0x00007fffcc6e9a3f in arrow::internal::ValidateVisitor::ValidateOffsets<arrow::BinaryArray const> (this=0x7fffffffc610, array=...) at ../src/arrow/array.cc:1324\r\n#2  0x00007fffcc6dffc8 in arrow::internal::ValidateVisitor::Visit (this=0x7fffffffc610, array=...) at ../src/arrow/array.cc:1173\r\n#3  0x00007fffcc6ec025 in arrow::VisitArrayInline<arrow::internal::ValidateVisitor> (array=..., visitor=0x7fffffffc610) at ../src/arrow/visitor_inline.h:110\r\n#4  0x00007fffcc6dabd7 in arrow::Array::Validate (this=0x555555dc66c0) at ../src/arrow/array.cc:1391\r\n#5  0x00007fffcc6ea0ec in arrow::internal::ValidateVisitor::ValidateListArray<arrow::ListArray> (this=0x7fffffffc820, array=...) at ../src/arrow/array.cc:1308\r\n#6  0x00007fffcc6e00d5 in arrow::internal::ValidateVisitor::Visit (this=0x7fffffffc820, array=...) at ../src/arrow/array.cc:1184\r\n#7  0x00007fffcc6ec1f9 in arrow::VisitArrayInline<arrow::internal::ValidateVisitor> (array=..., visitor=0x7fffffffc820) at ../src/arrow/visitor_inline.h:110\r\n#8  0x00007fffcc6dabd7 in arrow::Array::Validate (this=0x555555dc8a70) at ../src/arrow/array.cc:1391\r\n#9  0x00007fffcc9ec4df in arrow::ChunkedArray::Validate (this=0x555555aeb860) at ../src/arrow/table.cc:194\r\n#10 0x00007fffcc9f0ca3 in arrow::SimpleTable::Validate (this=0x555555aeb8b0) at ../src/arrow/table.cc:367\r\n[...]\r\n```\r\n\r\n```Java\n\r\n(gdb) p array.data_->buffers\r\n$7 = std::vector of length 3, capacity 3 = {std::shared_ptr<arrow::Buffer> (empty) = {\r\n    get() = 0x0\r\n  }, std::shared_ptr<arrow::Buffer> (empty) = {\r\n    get() = 0x0\r\n  }, std::shared_ptr<arrow::Buffer> (empty) = {\r\n    get() = 0x0\r\n  }}\r\n```\r\n"
        },
        {
            "created_at": "2019-10-07T15:59:09.235Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6806?focusedCommentId=16945986) by Max Bolingbroke (batterseapower):*\nThis is actually a regression: I thought it failed in 0.13 but I just retested and the bytestring deserializes OK in v0.13.0, in just the way I expected:\r\n```java\n\r\n>>> t.columns[0].chunks[0]\r\n<pyarrow.lib.ListArray object at 0x000000F203AFBB88>\r\n[\r\n []\r\n]\n```"
        },
        {
            "created_at": "2019-10-07T16:32:15.166Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6806?focusedCommentId=16946012) by Antoine Pitrou (apitrou):*\nYes, thanks for reporting it. We actually strengthened array validation in 0.15.0 and that's why it's crashing now."
        },
        {
            "created_at": "2019-10-08T00:14:21.776Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6806?focusedCommentId=16946348) by Wes McKinney (wesm):*\nIssue resolved by pull request 5595\n<https://github.com/apache/arrow/pull/5595>"
        }
    ]
}