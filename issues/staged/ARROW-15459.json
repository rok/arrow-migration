{
    "issue": {
        "title": "[C++] Unable to build Arrow C++ on osx arm64 inside conda env because of Invalid configuration `arm64-apple-darwin20.0.0': machine `arm64-apple' not recognized and arrow/cpp/arm64-apple-darwin20.0.0-ar: No such file or directory",
        "body": "***Note**: This issue was originally created as [ARROW-15459](https://issues.apache.org/jira/browse/ARROW-15459). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSteps to reproduce this issue on osx arm64:\r\n```bash\n\r\ngit clone https://github.com/apache/arrow.git\r\n\r\ncd arrow/cpp\r\nbrew update && brew install node && brew bundle --file=Brewfile\r\n\r\ncd ..\r\nmamba create -y -n arrow-commit -c conda-forge \\\r\n  --file ci/conda_env_unix.txt \\\r\n  --file ci/conda_env_cpp.txt \\\r\n  --file ci/conda_env_python.txt \\\r\n  compilers \\\r\n  python=3.8 \\\r\n  pandas \\\r\n  aws-sdk-cpp \\\r\n  r\r\n\r\nmamba activate arrow-commit\r\npip install -r python/requirements-build.txt -r python/requirements-test.txt\r\n\r\nexport ARROW_BUILD_TESTS=OFF\r\nexport ARROW_BUILD_TYPE=release\r\nexport ARROW_DEPENDENCY_SOURCE=AUTO\r\nexport ARROW_DATASET=ON\r\nexport ARROW_DEFAULT_MEMORY_POOL=mimalloc\r\nexport ARROW_ENABLE_UNSAFE_MEMORY_ACCESS=true\r\nexport ARROW_ENABLE_NULL_CHECK_FOR_GET=false\r\nexport ARROW_FLIGHT=OFF\r\nexport ARROW_GANDIVA=OFF\r\nexport ARROW_HDFS=ON\r\nexport ARROW_HOME=$CONDA_PREFIX\r\nexport ARROW_INSTALL_NAME_RPATH=OFF\r\nexport ARROW_MIMALLOC=ON\r\nexport ARROW_NO_DEPRECATED_API=ON\r\nexport ARROW_ORC=ON\r\nexport ARROW_PARQUET=ON\r\nexport ARROW_PLASMA=ON\r\nexport ARROW_PYTHON=ON\r\nexport ARROW_S3=ON\r\nexport ARROW_USE_ASAN=OFF\r\nexport ARROW_USE_CCACHE=ON\r\nexport ARROW_USE_UBSAN=OFF\r\nexport ARROW_WITH_BROTLI=ON\r\nexport ARROW_WITH_BZ2=ON\r\nexport ARROW_WITH_LZ4=ON\r\nexport ARROW_WITH_SNAPPY=ON\r\nexport ARROW_WITH_ZLIB=ON\r\nexport ARROW_WITH_ZSTD=ON\r\nexport GTest_SOURCE=BUNDLED\r\nexport ORC_SOURCE=BUNDLED\r\nexport PARQUET_BUILD_EXAMPLES=ON\r\nexport PARQUET_BUILD_EXECUTABLES=ON\r\nexport PYTHON=python\r\nexport LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH\r\n\r\nci/scripts/cpp_build.sh $(pwd) $(pwd) \r\n\r\n\r\n```\r\n\u00a0\r\n\r\nError (full logs are attached):\r\n```java\n\r\n...\r\nchecking size of void *... 8\r\nchecking size of int... 4\r\nchecking size of long... 8\r\nchecking size of long long... 8\r\nchecking size of intmax_t... 8\r\nchecking build system type... \r\n-- stderr output is:\r\nInvalid configuration `arm64-apple-darwin20.0.0': machine `arm64-apple' not recognized\r\nconfigure: error: /bin/sh build-aux/config.sub arm64-apple-darwin20.0.0 failed\r\n\r\n\r\nCMake Error at /Users/voltrondata/arrow/cpp/jemalloc_ep-prefix/src/jemalloc_ep-stamp/jemalloc_ep-configure-RELEASE.cmake:47 (message):\r\n\u00a0 Stopping after outputting logs.\r\n\r\n\r\n\r\n\r\n[31/380] Performing configure step for 'orc_ep'\r\nninja: build stopped: subcommand failed. \n```\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2022-01-26T03:02:32.000Z",
        "updated_at": "2022-09-27T16:50:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-01-26T03:11:38.431Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17482201) by Elena Henderson (elena@ursacomputing.com):*\nHello `[~uwe]` ,\r\n\r\nIs this something you know a workaround for?\r\n\r\nI can see that you ran into a similar issue in your blog post <https://uwekorn.com/2021/01/11/apache-arrow-on-the-apple-m1.html>\r\nand I can see that you fixed it on jemalloc side [https://github.com/jemalloc/jemalloc/pull/2012](https://github.com/jemalloc/jemalloc/pull/2012/files)\r\nbut when I build arrow C++, it is still using jemalloc from 2016 release.\r\n```java\n\r\n$ cat cpp/jemalloc_ep-prefix/src/jemalloc_ep/build-aux/config.guess| grep Copyright\r\n# \u00a0 Copyright 1992-2016 Free Software Foundation, Inc.\r\nCopyright 1992-2016 Free Software Foundation, Inc.\r\n```\r\nIs there something I need to do in order to use latest jemalloc?\r\n\r\n\u00a0\r\n\r\nThanks a lot!\r\n\r\n\u00a0\r\n\r\ncc `[~npr]` `[~apitrou]` `[~jonkeane]`\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-01-26T10:01:35.586Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17482368) by Rok Mihevc (rokm):*\nTry disabling jemalloc if you're on rosetta ( arch in terminal returns i386 if you are).\r\n\r\nI also found brew python instead easier to setup than conda."
        },
        {
            "created_at": "2022-01-27T00:54:00.272Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17482819) by Elena Henderson (elena@ursacomputing.com):*\nIs it some kind of compiler issues?\r\n\r\n\u00a0\r\n\r\nI am getting `Linking C static library ../bin/sh: /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ar: No such file or directory` errors.\u00a0\r\n\r\nWhen I disable jemalloc, I get this error for mimalloc:\r\n```java\n\r\n$ export ARROW_JEMALLOC=OFF\r\n$ ci/scripts/cpp_build.sh $(pwd) $(pwd)\r\n\r\n...\r\n[15/15] Linking C static library libmimalloc.a\r\nFAILED: libmimalloc.a\u00a0\r\n: && /Users/voltrondata/miniconda3/envs/arrow-commit/bin/cmake -E rm -f libmimalloc.a && /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ar qc libmimalloc.a \u00a0CMakeFiles/mimalloc-static.dir/src/stats.c.o CMakeFiles/mimalloc-static.dir/src/random.c.o CMakeFiles/mimalloc-static.dir/src/os.c.o CMakeFiles/mimalloc-static.dir/src/bitmap.c.o CMakeFiles/mimalloc-static.dir/src/arena.c.o CMakeFiles/mimalloc-static.dir/src/region.c.o CMakeFiles/mimalloc-static.dir/src/segment.c.o CMakeFiles/mimalloc-static.dir/src/page.c.o CMakeFiles/mimalloc-static.dir/src/alloc.c.o CMakeFiles/mimalloc-static.dir/src/alloc-aligned.c.o CMakeFiles/mimalloc-static.dir/src/alloc-posix.c.o CMakeFiles/mimalloc-static.dir/src/heap.c.o CMakeFiles/mimalloc-static.dir/src/options.c.o CMakeFiles/mimalloc-static.dir/src/init.c.o && /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ranlib libmimalloc.a && /Users/voltrondata/miniconda3/envs/arrow-commit/bin/cmake -E touch libmimalloc.a && :\r\n/bin/sh: /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ar: No such file or directory\r\nninja: build stopped: subcommand failed.\n```\r\nWhen I disable mimalloc, I get this error for orc:\r\n```java\n\r\n$ export ARROW_MIMALLOC=OFF\r\n$ ci/scripts/cpp_build.sh $(pwd) $(pwd)\r\n\r\n...\r\n[1/1] Linking C static library libmimalloc.a\r\n[40/40] Linking CXX static library c++/src/liborc.a\r\nFAILED: c++/src/liborc.a\u00a0\r\n: && /Users/voltrondata/miniconda3/envs/arrow-commit/bin/cmake -E rm -f c++/src/liborc.a && /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ar qc c++/src/liborc.a \u00a0c++/src/CMakeFiles/orc.dir/io/InputStream.cc.o c++/src/CMakeFiles/orc.dir/io/OutputStream.cc.o c++/src/CMakeFiles/orc.dir/sargs/ExpressionTree.cc.o c++/src/CMakeFiles/orc.dir/sargs/Literal.cc.o c++/src/CMakeFiles/orc.dir/sargs/PredicateLeaf.cc.o c++/src/CMakeFiles/orc.dir/sargs/SargsApplier.cc.o c++/src/CMakeFiles/orc.dir/sargs/SearchArgument.cc.o c++/src/CMakeFiles/orc.dir/sargs/TruthValue.cc.o c++/src/CMakeFiles/orc.dir/wrap/orc-proto-wrapper.cc.o c++/src/CMakeFiles/orc.dir/Adaptor.cc.o c++/src/CMakeFiles/orc.dir/BloomFilter.cc.o c++/src/CMakeFiles/orc.dir/ByteRLE.cc.o c++/src/CMakeFiles/orc.dir/ColumnPrinter.cc.o c++/src/CMakeFiles/orc.dir/ColumnReader.cc.o c++/src/CMakeFiles/orc.dir/ColumnWriter.cc.o c++/src/CMakeFiles/orc.dir/Common.cc.o c++/src/CMakeFiles/orc.dir/Compression.cc.o c++/src/CMakeFiles/orc.dir/Exceptions.cc.o c++/src/CMakeFiles/orc.dir/Int128.cc.o c++/src/CMakeFiles/orc.dir/LzoDecompressor.cc.o c++/src/CMakeFiles/orc.dir/MemoryPool.cc.o c++/src/CMakeFiles/orc.dir/Murmur3.cc.o c++/src/CMakeFiles/orc.dir/OrcFile.cc.o c++/src/CMakeFiles/orc.dir/Reader.cc.o c++/src/CMakeFiles/orc.dir/RLEv1.cc.o c++/src/CMakeFiles/orc.dir/RLEV2Util.cc.o c++/src/CMakeFiles/orc.dir/RleDecoderV2.cc.o c++/src/CMakeFiles/orc.dir/RleEncoderV2.cc.o c++/src/CMakeFiles/orc.dir/RLE.cc.o c++/src/CMakeFiles/orc.dir/Statistics.cc.o c++/src/CMakeFiles/orc.dir/StripeStream.cc.o c++/src/CMakeFiles/orc.dir/Timezone.cc.o c++/src/CMakeFiles/orc.dir/TypeImpl.cc.o c++/src/CMakeFiles/orc.dir/Vector.cc.o c++/src/CMakeFiles/orc.dir/Writer.cc.o && /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ranlib c++/src/liborc.a && /Users/voltrondata/miniconda3/envs/arrow-commit/bin/cmake -E touch c++/src/liborc.a && :\r\n/bin/sh: /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ar: No such file or directory\r\nninja: build stopped: subcommand failed.\r\n... \n```\r\nWhen I disable orc, I get similar error for arrow_python\r\n\r\n\u00a0\r\n```java\n\r\n$ export ARROW_ORC=OFF\r\n$ ci/scripts/cpp_build.sh $(pwd) $(pwd)\r\n\r\n...\r\n[271/343] Linking CXX static library build/release/libarrow_python.a\r\nFAILED: build/release/libarrow_python.a\u00a0\r\n: && /Users/voltrondata/miniconda3/envs/arrow-commit/bin/ccache /Users/voltrondata/miniconda3/envs/arrow-commit/bin/cmake -E rm -f build/release/libarrow_python.a && /Users/voltrondata/miniconda3/envs/arrow-commit/bin/ccache /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ar qc build/release/libarrow_python.a \u00a0src/arrow/python/CMakeFiles/arrow_python_objlib.dir/arrow_to_pandas.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/benchmark.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/common.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/datetime.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/decimal.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/deserialize.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/extension_type.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/gdb.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/helpers.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/inference.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/init.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/io.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/ipc.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/numpy_convert.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/numpy_to_arrow.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/python_to_arrow.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/pyarrow.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/serialize.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/csv.cc.o src/arrow/python/CMakeFiles/arrow_python_objlib.dir/filesystem.cc.o && /Users/voltrondata/miniconda3/envs/arrow-commit/bin/ccache /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ranlib build/release/libarrow_python.a && /Users/voltrondata/miniconda3/envs/arrow-commit/bin/ccache /Users/voltrondata/miniconda3/envs/arrow-commit/bin/cmake -E touch build/release/libarrow_python.a && :\r\nccache: error: execute_noreturn of /Users/voltrondata/arrow/cpp/arm64-apple-darwin20.0.0-ar failed: No such file or directory\r\n[279/343] Building CXX object src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_sort.cc.o\r\nninja: build stopped: subcommand failed \n```\r\n\u00a0"
        },
        {
            "created_at": "2022-01-27T09:53:23.541Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17483018) by Rok Mihevc (rokm):*\nYeah this looks familiar. Try using homebrew instead of miniconda for your environment setup and compilers: https://arrow.apache.org/docs/developers/python.html#using-pip."
        },
        {
            "created_at": "2022-01-28T19:53:30.880Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17483945) by Elena Henderson (elena@ursacomputing.com):*\nThanks a lot `[~rokm]` .\r\n\r\n\u00a0\r\n\r\nI am able to build Arrow C++ and Arrow Python without **conda** and also using {**}virtualenv{**}.\r\n\r\n\u00a0\r\n\r\nI really need to build Arrow in conda env though. Please let me know if there is something I can do to make this work."
        },
        {
            "created_at": "2022-01-28T19:58:13.649Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17483947) by Rok Mihevc (rokm):*\nSo the errors seem compiler related .. perhaps you can try removing those from conda env so you fall back to homebrew ones? Guessing."
        },
        {
            "created_at": "2022-01-31T23:10:35.301Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17484995) by Will Jones (willjones127):*\nSomething I'm noticing in the log you attached on line 671:\r\n```java\n\r\n+ export 'CMAKE_ARGS=-DCMAKE_AR=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-ar -DCMAKE_CXX_COMPILER_AR=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-ar -DCMAKE_C_COMPILER_AR=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-ar -DCMAKE_RANLIB=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-ranlib -DCMAKE_CXX_COMPILER_RANLIB=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-ranlib -DCMAKE_C_COMPILER_RANLIB=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-ranlib -DCMAKE_LINKER=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-ld -DCMAKE_STRIP=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-strip -DCMAKE_INSTALL_NAME_TOOL=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-install_name_tool -DCMAKE_LIBTOOL=/Users/voltrondata/miniconda3/envs/arrow-commit/bin/arm64-apple-darwin20.0.0-libtool -DCMAKE_OSX_DEPLOYMENT_TARGET= -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_SYSROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -DCMAKE_AR=arm64-apple-darwin20.0.0-ar -DCMAKE_RANLIB=arm64-apple-darwin20.0.0-ranlib'\r\n```\r\n`DCMAKE_AR` is being set twice, once with an absolute path and then later with a relative (the first and second-to-last entries in the args). I think that's making it look in the wrong place for the compiler.\r\n\r\nPerhaps you should invoke the cmake commands yourself instead of using that CI script?"
        },
        {
            "created_at": "2022-02-02T21:13:10.880Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17486106) by Elena Henderson (elena@ursacomputing.com):*\n`[~rokm]` Removing **compilers** from conda env did not fix the issue.\r\n\r\n`[~willjones127]` Good catch! The issue is with -DCMAKE_AR=arm64-apple-darwin20.0.0-ar -DCMAKE_RANLIB=arm64-apple-darwin20.0.0-ranlib'"
        },
        {
            "created_at": "2022-02-02T21:27:11.605Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17486111) by Elena Henderson (elena@ursacomputing.com):*\nMy colleague `[~joosthooz]` found a workaround that works with conda and mamba for this issue:\r\n\r\nSet these env vars\r\n\r\n\u00a0\r\n```java\n\r\nexport RANLIB=`which $RANLIB`\r\nexport AR=`which $AR`\r\nexport ARROW_JEMALLOC=OFF \n```\r\n\u00a0\r\n\r\nbefore building Arrow C++ using this script:\r\n\r\n\u00a0\r\n```java\n\r\nci/scripts/cpp_build.sh $(pwd) $(pwd)  \n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nWorkarounds for conda and mamba envs:\r\n\r\n\u00a0\r\n```java\n\r\n# with mamba\r\n\r\ngit clone https://github.com/apache/arrow.git\r\n\r\ncd arrow\r\n\r\nmamba create -y -n arrow-commit -c conda-forge \\\r\n\u00a0 --file ci/conda_env_cpp.txt \\\r\n\u00a0 --file ci/conda_env_python.txt \\\r\n\u00a0 python=3.8 \\\r\n\u00a0 pandas \\\r\n\u00a0 r\r\n\r\nmamba activate arrow-commit\r\n\r\npip install -r python/requirements-build.txt -r python/requirements-test.txt\r\n\r\nsource dev/conbench_envs/hooks.sh set_arrow_build_and_run_env_vars\r\n\r\nexport RANLIB=`which $RANLIB`\r\nexport AR=`which $AR`\r\nexport ARROW_JEMALLOC=OFF\r\n\r\nci/scripts/cpp_build.sh $(pwd) $(pwd)\r\nci/scripts/python_build.sh $(pwd) $(pwd)\r\n```\r\n```java\n\r\n# with conda\r\ngit clone https://github.com/apache/arrow.git\r\n\r\ncd arrow\r\n\r\nconda create -y -n arrow-commit -c conda-forge \\\r\n\u00a0 --file ci/conda_env_unix.txt \\\r\n\u00a0 --file ci/conda_env_cpp.txt \\\r\n\u00a0 --file ci/conda_env_python.txt \\\r\n\u00a0 compilers \\\r\n\u00a0 python=3.8 \\\r\n\u00a0 pandas \\\r\n\u00a0 aws-sdk-cpp \\\r\n\u00a0 r\r\n\r\nconda activate arrow-commit\r\n\r\n\r\npip install -r python/requirements-build.txt -r python/requirements-test.txt\r\n\r\nsource dev/conbench_envs/hooks.sh set_arrow_build_and_run_env_vars\r\n\r\nexport RANLIB=`which $RANLIB`\r\nexport AR=`which $AR`\r\nexport ARROW_JEMALLOC=OFF\r\n\r\nci/scripts/cpp_build.sh $(pwd) $(pwd)\r\nci/scripts/python_build.sh $(pwd) $(pwd)\n```\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-02-03T08:31:33.165Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17486287) by Joris Van den Bossche (jorisvandenbossche):*\nIs this is a general issue for building Arrow using conda on M1? Or specific for the cpp_build.sh script? \r\n\r\nBecause if it is a general issue, we should document the workaround in our development docs?"
        },
        {
            "created_at": "2022-02-03T12:50:57.950Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17486441) by Rok Mihevc (rokm):*\nI think it's general. `[~alenkaf]` did you experience this?"
        },
        {
            "created_at": "2022-02-03T13:14:00.905Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17486464) by Alenka Frim (alenka):*\nI also had trouble building with conda on my M1 and am using Homebrew and pip due to that.\r\n\r\nCould try building again with conda to give more concrete feedback (don't remember the final error anymore, but I think I got it to build at the end and had errors when running tests or importing pyarrow in python console)."
        },
        {
            "created_at": "2022-03-26T09:53:56.151Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17512708) by Xinyu Zeng (xzeng):*\nFollowing the Python development doc and the conda cpp build still fails. The error comes from jemalloc_ep-configure and the error log includes:\r\n\r\n```java\n\r\nInvalid configuration `arm64-apple-darwin20.0.0': machine `arm64-apple' not recognized\r\nconfigure: error: /bin/sh build-aux/config.sub arm64-apple-darwin20.0.0 failed\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"
        },
        {
            "created_at": "2022-03-28T04:52:59.125Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17513137) by Alenka Frim (alenka):*\nC++ and PyArrow builds successfully on my M1 inside conda with :\r\n```java\n\r\nexport ARROW_HOME=$CONDA_PREFIX\r\nexport ARROW_BUILD_TYPE=debug\r\nexport PYARROW_WITH_FLIGHT=0\r\nexport PYARROW_WITH_GANDIVA=0\r\nexport PYARROW_WITH_ORC=0\r\nexport PYARROW_WITH_PARQUET=1\r\nexport PYARROW_WITH_DATASET=0\r\nexport PYARROW_WITH_S3=0\r\nexport PYARROW_PARALLEL=4\r\nexport PYARROW_WITH_PLASMA=0\r\n\r\ncmake -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\r\n      -DCMAKE_BUILD_TYPE=debug \\\r\n      -DCMAKE_INSTALL_LIBDIR=lib \\\r\n      -DARROW_WITH_BZ2=ON \\\r\n      -DARROW_WITH_ZLIB=ON \\\r\n      -DARROW_WITH_ZSTD=ON \\\r\n      -DARROW_WITH_LZ4=ON \\\r\n      -DARROW_WITH_SNAPPY=ON \\\r\n      -DARROW_WITH_BROTLI=ON \\\r\n      -DARROW_PLASMA=OFF \\\r\n      -DARROW_PARQUET=ON \\\r\n      -DARROW_PYTHON=ON \\\r\n      -DARROW_JEMALLOC=OFF \\\r\n      -DARROW_MEMALLOC=OFF \\\r\n      -DARROW_BUILD_TESTS=ON \\\r\n      -DARROW_DEPENDENCY_SOURCE=CONDA \\\r\n      -DPython3_EXECUTABLE=/opt/anaconda3/envs/pyarrow-dev-conda/bin/python \\\r\n      -DARROW_INSTALL_NAME_RPATH=OFF \\\r\n      -GNinja \\\r\n      ..\r\n```\r\n\u00a0"
        },
        {
            "created_at": "2022-03-28T06:03:53.934Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17513158) by Xinyu Zeng (xzeng):*\nThanks `[~alenkaf]`. The workaround for me is \"-DARROW_JEMALLOC=OFF\". This is the only extra option I add compared to the doc. Probably the development docs need to be updated."
        },
        {
            "created_at": "2022-03-28T06:17:30.319Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17513165) by Alenka Frim (alenka):*\nOpened an issue: https://issues.apache.org/jira/browse/ARROW-16040\r\n\r\nIt would be good to add a note about jemalloc and M1, agree. A contribution to the documentation is very much welcome!"
        },
        {
            "created_at": "2022-03-28T08:22:06.817Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17513233) by Xinyu Zeng (xzeng):*\nTo reproduce on my machine osx arm64 Monterey 12.2.1:\r\n```bash\n\r\ngit clone https://github.com/apache/arrow.git\r\npushd arrow\r\ngit submodule init\r\ngit submodule update\r\nexport PARQUET_TEST_DATA=\"${PWD}/cpp/submodules/parquet-testing/data\"\r\nexport ARROW_TEST_DATA=\"${PWD}/testing/data\"\r\npopd\r\nconda create -y -n pyarrow-test -c conda-forge \\\r\n    --file arrow/ci/conda_env_unix.txt \\\r\n    --file arrow/ci/conda_env_cpp.txt \\\r\n    --file arrow/ci/conda_env_python.txt \\\r\n    --file arrow/ci/conda_env_gandiva.txt \\\r\n    compilers \\\r\n    python=3.9 \\\r\n    pandas\r\nconda activate pyarrow-test\r\nexport ARROW_HOME=$CONDA_PREFIX\r\nmkdir arrow/cpp/build\r\npushd arrow/cpp/build\r\n\r\ncmake -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\r\n      -DCMAKE_INSTALL_LIBDIR=lib \\\r\n      -DCMAKE_BUILD_TYPE=debug \\\r\n      -DARROW_WITH_BZ2=ON \\\r\n      -DARROW_WITH_ZLIB=ON \\\r\n      -DARROW_WITH_ZSTD=ON \\\r\n      -DARROW_WITH_LZ4=ON \\\r\n      -DARROW_WITH_SNAPPY=ON \\\r\n      -DARROW_WITH_BROTLI=ON \\\r\n      -DARROW_PARQUET=ON \\\r\n      -DARROW_PYTHON=ON \\\r\n      -DARROW_BUILD_TESTS=ON \\\r\n      ..\r\nmake -j8\r\n```\r\n\r\nError during make:\r\n```bash\n\r\n[  3%] Performing configure step for 'jemalloc_ep'\r\nCMake Error at /Users/xinyu/Code/jira-test/arrow/cpp/build/jemalloc_ep-prefix/src/jemalloc_ep-stamp/jemalloc_ep-configure-DEBUG.cmake:36 (if):\r\n  if given arguments:\r\n\r\n    \"1\" \"--enable-debug\"\r\n\r\n  Unknown arguments specified\r\n```"
        },
        {
            "created_at": "2022-09-27T16:50:23.139Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15459?focusedCommentId=17610151) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy](https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment). Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}