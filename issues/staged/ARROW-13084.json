{
    "issue": {
        "title": "[C++] Avoid construction of unaligned pointers",
        "body": "***Note**: This issue was originally created as [ARROW-13084](https://issues.apache.org/jira/browse/ARROW-13084). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIMHO it's a foot gun to allow construction of pointers which are not aligned. For example, see https://github.com/apache/arrow/pull/10489 where `const int64_t* key_left_ptr` was dereferenced without being wrapped in SafeLoad, resulting in undefined behavior. Unaligned pointers are convenient because they apply the correct multiple of `sizeof(T)` to integer arithmetic, but there's no way to warn at the point of access that they must be wrapped in SafeLoad.\r\n\r\nI propose we remove the overload of SafeLoad which accesses an unaligned pointer and replace it with an indexed overload of SafeLoadAs. This will avoid boilerplate of multiplying by `sizeof(T)` but will make clear with typing that access requires SafeLoadAs:\r\n\r\n```Java\n\r\ntemplate <typename T>\r\nT SafeLoadAs(const void* buf, size_t index) {\r\n  T value;\r\n  std::memcpy(&value, reinterpret_cast<const T*>(buf) + index, sizeof(value));\r\n  return value;\r\n}\r\n\r\n// ...\r\n    const void* key_left_ptr = ...;\r\n    auto key_left = SafeLoadAs<uint64_t>(key_left_ptr, istripe);\r\n```",
        "created_at": "2021-06-15T15:11:38.000Z",
        "updated_at": "2021-07-26T14:37:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-06-15T15:12:06.372Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13084?focusedCommentId=17363699) by Ben Kietzman (bkietz):*\n`[~apitrou]`"
        },
        {
            "created_at": "2021-06-15T15:58:21.045Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13084?focusedCommentId=17363734) by Antoine Pitrou (apitrou):*\nWell, why not. I'd like to see what the impact of the code looks like."
        }
    ]
}