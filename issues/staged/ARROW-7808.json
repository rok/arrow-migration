{
    "issue": {
        "title": "[Java][Dataset] Implement Datasets Java API ",
        "body": "***Note**: This issue was originally created as [ARROW-7808](https://issues.apache.org/jira/browse/ARROW-7808). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nPorting following C++ Datasets APIs to Java: \r\n- DataSource \n- DataSourceDiscovery \n- DataFragment \n- Dataset\n- Scanner \n- ScanTask \n- ScanOptions ",
        "created_at": "2020-02-10T02:24:34.000Z",
        "updated_at": "2022-07-13T13:27:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-02-09T16:59:25.000Z"
    },
    "comments": [
        {
            "created_at": "2020-02-10T02:39:59.511Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17033341) by Liya Fan (fan_li_ya):*\nThanks for opening this issue. \r\nPersonally, I would like to see these features added to Java code base.\r\nBut I am not sure if the community are willing to support them. "
        },
        {
            "created_at": "2020-02-10T03:42:24.993Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17033357) by Hongze Zhang (zhztheplayer):*\nThe major goal is to adopt existing C++ file formats in Java code (maybe via JNI bridge). To have the Datasets APIs implemented in Java is the most reasonable approach as users would be able to access any of the layers defined in C++ Datasets API. Could others in the community please reconfirm this proposal (I recall that we have a discussion for this months ago)? And I can file PRs after then."
        },
        {
            "created_at": "2020-02-11T00:59:49.722Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17034055) by David Li (lidavidm):*\nWe are interested in bridging the C++ implementation of Parquet in particular to Java. But I agree, supporting JNI bindings to a large API might be difficult."
        },
        {
            "created_at": "2020-02-13T09:36:14.169Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17036068) by Hongze Zhang (zhztheplayer):*\nYes the C++ Parquet reader is useful for a lot of users including us. Now some new features are only available with Datasets, for example, ARROW-6952. With Java API bridged Java users would be able to use the functionalities in their code easily without going down to JNI/C++."
        },
        {
            "created_at": "2020-02-18T04:36:02.949Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17038781) by Micah Kornfield (emkornfield@gmail.com):*\nI think the mail list conversation decided on try to do a very small shim 1 or 2 methods not a full 1-1 JNI mapping?"
        },
        {
            "created_at": "2020-02-19T03:07:44.345Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17039672) by Hongze Zhang (zhztheplayer):*\nI am not pretty sure but based on the mail discussion I would think of mapping 1 or 2 methods via JNI is not final solution but something we can get started with. And, as for format Parquet, users may need access to different Datasets layers such as DataFragments for Parquet files, ScanTasks for RowGroups, even one may need to decide if C++ level post-scan filter should be enabled/disabled, if partition filter should be applied, and so on. One or two methods can not cover all of this.\r\n\r\nAnd maintaining a JNI-based Datasets API may not be a heavy workload, because on Java side, things are just mirrored to some basical Datasets concepts like DataSource, DataFragment, and should keep away from re-implementing low-level logic like scaning, projecting, filtering, etc. But everything in C++ could be available in Java which is important to many users."
        },
        {
            "created_at": "2020-02-20T03:48:55.419Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17040606) by Micah Kornfield (emkornfield@gmail.com):*\n`[~fsaintjacques]` \u00a0I think you weighed in the mailing list discussion, what are your thoughts on this?"
        },
        {
            "created_at": "2020-02-20T15:56:34.597Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17041100) by Ben Kietzman (bkietz):*\nThe dataset API is not stable; a full 1:1 mapping will be **more** work to maintain. For example https://issues.apache.org/jira/browse/ARROW-7886 would remove Source and SourceFactory altogether, which would necessitate refactoring both the JNI binding and the Java which uses it. I recommend exposing only classes which are directly useful for a minimal use case, then exposing classes as they become necessary in follow ups.\r\n\r\n`[~fsaintjacques]`'s recommendation on the mailing list would be an excellent starting point. Alternatively, I recommend following the initial R binding work: https://github.com/romainfrancois/arrow/blob/9dfba2ea8949a0a0a17393976a97d3a34dc63d39/r/R/dataset.R\r\n This minimally exposes Source, Dataset, Scanner, and the corresponding factories. Scans result in a materialized Table (so ScanTasks, Fragments, etc may remain hidden) and take full advantage of predicate/projection push down."
        },
        {
            "created_at": "2020-02-20T18:43:16.609Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17041231) by Francois Saint-Jacques (fsaintjacques):*\nI concur with `[~bkietz]` \u00a0here, prefer a high-level approach, e.g. it should start with the factory, dataset and getting the result of a scan, then you can expose more and more of the inner classes, instead of 1-1 with all the classes.\r\n\r\nAlso note that a JNI bridge means one more maintenance burden; we already did a bunch of renames and it was cumbersome to do it for each \"native\" binding too, e.g. DataSource is now called Source."
        },
        {
            "created_at": "2020-04-03T08:06:43.917Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17074387) by Hongze Zhang (zhztheplayer):*\nThanks guys for your suggestions! And so sorry for such a late reply. I've been busy on some other stuffs and now I am continuing to work on this. Actually in my organization we have been maintaining an runnable implementation[1] for several months, it may not be completely ready for making an upstream PR but still be showing my main designs.\r\n\r\nI see your suggestion with the preference of high-level approach, with which actually I agree. In my current implementation, there might be some classes that look like something \"lower level\" in Java, such as DataFragment[2], or ScanTask[3], but further developers don't ever have to make implementations for specific source formats - we have NativeDataFragment[4] or NativeScanTask[5] to cover all cases. The same design is applied to DataSource[6][7] so we only have to bridge c++ DataSourceDiscovery implementations in further development. Here is an example[8] from us to add an arrow::dataset::SingleFileDataSource and use it from Java.\r\n\r\nAnd I know in the newest upstream code C++ API has been reworked a lot (the remove of DataSource, rename of DataSourceDiscovery and so on). So there should be some extra work to me to make things match during rebasing.\r\n\r\nSorry again for the delay, and any thoughts please let me know. Thanks.\r\n\r\n[1] <https://github.com/zhztheplayer/arrow-1/commits/ARROW-7808>\r\n [2] <https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/fragment/DataFragment.java>\r\n [3] <https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/scanner/ScanTask.java>\r\n [4] <https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/jni/NativeDataFragment.java>\r\n [5] <https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/jni/NativeScanTask.java>\r\n [6] <https://github.com/zhztheplayer/arrow-1/commit/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8#diff-deea6cb88ea63d76f71b7b4cfd173206>\r\n [7] <https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/jni/NativeDataSource.java>\r\n [8] <https://github.com/zhztheplayer/arrow-1/commit/7cb13b96e81fd153c4ad9c68aff00f032abb5110>"
        },
        {
            "created_at": "2020-11-05T01:11:55.592Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17226439) by Hongze Zhang (zhztheplayer):*\nI've temporarily marked this with target release 3.0.0 as most of the codes are finished with reviewing except for JNI-based memory pool part. We can put off to later version any time we think is needed."
        },
        {
            "created_at": "2021-02-09T16:59:25.852Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7808?focusedCommentId=17281882) by Micah Kornfield (emkornfield):*\nIssue resolved by pull request 7030\n<https://github.com/apache/arrow/pull/7030>"
        }
    ]
}