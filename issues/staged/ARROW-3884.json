{
    "issue": {
        "title": "[Python] Add LLVM6 to manylinux1 base image",
        "body": "***Note**: This issue was originally created as [ARROW-3884](https://issues.apache.org/jira/browse/ARROW-3884). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is necessary to be able to build and bundle libgandiva with the 0.12 release\r\n\r\nThis (epic!) build definition in Apache Kudu may be useful for building only the pieces that we need for linking the Gandiva libraries, which may help keep the image size minimal\r\n\r\nhttps://github.com/apache/kudu/blob/master/thirdparty/build-definitions.sh#L175",
        "created_at": "2018-11-26T14:16:35.000Z",
        "updated_at": "2018-12-04T01:11:09.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-12-04T01:11:09.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-26T14:39:34.651Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3884?focusedCommentId=16699033) by Antoine Pitrou (apitrou):*\nI'm surprised that you would need such an extensive build definition. llvmlite tries hard to minimize the library size and came up with much simpler configuration:\r\n <https://github.com/numba/llvmlite/blob/master/conda-recipes/llvmdev_manylinux1/build.sh>\r\n\r\n(Note `LLVM_TARGETS_TO_BUILD=host` which is important to avoid compiling in other architectures such as ARM when building x86-64 packages)\r\n\r\nFor manylinux it is important to link LLVM statically into Gandiva as well as libstdc++. Perhaps it's also possible to tweak symbol visibility and remove unused functions..."
        },
        {
            "created_at": "2018-11-27T21:33:15.243Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3884?focusedCommentId=16701068) by Uwe Korn (uwe):*\n`[~pitrou]` Where does the requirement to link statically come from? My `manylinux1` experience tells me that even there shared linking with the correct RPATHs and library names is working much better."
        },
        {
            "created_at": "2018-11-27T21:36:24.568Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3884?focusedCommentId=16701071) by Antoine Pitrou (apitrou):*\nYou're right, it's probably not a requirement. It was just my experience with llvmlite that static linking made distributing the library a lot easier. Also, static linking can allow the linker to remove unused stuff (perhaps depending on additional compiler / linker arguments), which can reduce the final size.\r\n"
        },
        {
            "created_at": "2018-12-04T01:11:09.166Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3884?focusedCommentId=16708042) by Wes McKinney (wesm):*\nIssue resolved by pull request 3079\n<https://github.com/apache/arrow/pull/3079>"
        }
    ]
}