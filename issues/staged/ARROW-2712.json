{
    "issue": {
        "title": "[C#] Initial C# .NET library",
        "body": "***Note**: This issue was originally created as [ARROW-2712](https://issues.apache.org/jira/browse/ARROW-2712). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA feature request. I've seen this pop up\u00a0in a few places.\u00a0Want to have a\u00a0record of discussion on this topic.\u00a0\r\n\r\nI may be open to contributing this, but first need some general guidance on approach so I can understand effort level.\u00a0\r\n\r\nIt looks like there is not a good tool available for GObject Introspection binding to .NET so the easy pathway via Arrow Glib C API appears to be closed.\u00a0\r\n\r\nThe only GObject integration for .NET appears to be Mono GAPI\r\n\r\n<http://www.mono-project.com/docs/gui/gtksharp/gapi/>\r\n\r\nFrom what I can see this produces a GIR or similar XML, then generates C# code directly from that. Likely involves many manual fix ups of the XML. Worth a try?\u00a0\r\n\r\n\u00a0\r\n\r\nAlternatively I could look at generating some other direct binding from .NET to C/C++. Where I work we use Swig <http://www.swig.org/>. Good for vanilla cases, requires hand crafting of the .i files and specialized marshalling strategies for optimizing performance critical cases.\u00a0\r\n\r\nHaven't tried CppSharp but it looks more appealing than Swig in some ways\u00a0<https://github.com/mono/CppSharp/wiki/Users-Manual>\r\n\r\nIn either case,\u00a0not sure if better to use Glib C API or C++ API directly. What would be\u00a0pros/cons?\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2018-06-15T00:53:15.000Z",
        "updated_at": "2018-10-27T08:30:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C#",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-10-27T08:30:33.000Z"
    },
    "comments": [
        {
            "created_at": "2018-06-15T04:52:32.916Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16513337) by Wes McKinney (wesm):*\nMy guess would be that building a smallish native implementation of the Arrow columnar data structures would be one good path to best support and performance for .NET users, as well as to make development more accessible for C# folks. I'm not an expert though. A binding layer could be developed to use the C++ libraries in C#. "
        },
        {
            "created_at": "2018-06-15T06:42:39.069Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16513434) by Jamie Elliott (Jamie Elliott):*\nThanks Wes, can you please elaborate a little. What could be the performance advantages of a native implementation over a binding layer? In terms of a reference implementation for .NET, would the Java implementation be the closest model?\u00a0"
        },
        {
            "created_at": "2018-06-15T06:59:24.313Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16513450) by Wes McKinney (wesm):*\nAgain, I'm not an expert, but I think that going through C bindings to a C++ library would prevent the CLR runtime from generating possibly better code on hot paths. \r\n\r\nI'm not sure whether the Java or C++ implementation is going to be a better model for a .NET library. The Java codebase grew organically originally within Apache Drill until the formation of Apache Arrow. The C++ library was started from scratch at beginning of 2016"
        },
        {
            "created_at": "2018-06-15T08:47:38.482Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16513540) by Kouhei Sutou (kou):*\nThanks for thinking .NET support! From my point of view:\r\n\r\nGLib C API based bindings:\r\n\r\nPros:\r\n\r\n- We can get well workable .NET library with the least works if Mono GAPI works well.\n  - We can work together for Ruby library and .NET library.\n    \n    Cons:\n    \n- There is overhead than C++ API based bindings.\n- We don't try building GLib C API on Windows yet. (I need Windows environment...)\n  - I'll work on it eventually.\n    \n    C++ API based bindings:\n    \n    Pros:\n    \n- We may get well workable .NET library with less works if Mono CppSharp works well. (It seems that it works well.)\n- We can use optimization in C++ API. (LLVM based JIT is planed.)\n  \n  Cons:\n  \n- It may be slower than C# native implementation.\n- It may be difficult to use than C# native implementation.\n- It may be difficult to install than C# native implementation.\n  \n  C# native implementation:\n  \n  Pros:\n  \n- It may be faster than bindings.\n- It will be easy to use.\n- It will be easy to install.\n  \n  Cons:\n  \n- We need many works.\n  - We can implement step by step.\n"
        },
        {
            "created_at": "2018-06-18T05:23:58.179Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16515358) by Jamie Elliott (Jamie Elliott):*\nI've given a little more thought to the idea of a native C# implementation. I found the C++ implementation the easiest to understand.\u00a0\r\n\r\nConsidering a narrow proof of concept that would\u00a0replicate the classes in\u00a0arrow/cpp/src/arrow/ but not subfolders.\u00a0\r\n\r\nHopefully\u00a0enough to replicate example <https://arrow.apache.org/docs/cpp/md_tutorials_row_wise_conversion.html>\r\n\r\nIt seems to me the\u00a0scope of that is manageable and there are some more or less ready made components in corefx.\u00a0\r\n\r\n**MemoryPool**\r\n\r\n[C++ MemoryPool\\|[https://github.com/apache/arrow/blob/master/cpp/src/arrow/memory_pool.h]] can be replicated via\u00a0\r\n\r\n[C# MemoryPool\\|[https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Buffers/MemoryPool.cs]].\u00a0\r\n\r\nMaybe start with a built in\u00a0Memory Pool, that allocates a large block of managed memory and pins\u00a0<https://github.com/aspnet/Common/tree/dev/shared/Microsoft.Extensions.Buffers.MemoryPool.Sources>\r\n\r\nAlternatively could PInvoke Arrow C++\u00a0Allocator.\u00a0\r\n\r\nAnother interesting point of reference is <https://github.com/allisterb/jemalloc.NET>\r\n\r\n**Buffer**\r\n\r\n[C++ Buffer\\|[https://github.com/apache/arrow/blob/master/cpp/src/arrow/buffer.h]] can likely be replicated by something built on top of Memory<T>. Span<T> and Memory<T> are used for 0 copy slicing\u00a0\r\n\r\n<https://msdn.microsoft.com/en-us/magazine/mt814808.aspx>\r\n\r\n**Array**\r\n\r\n<https://github.com/apache/arrow/blob/master/cpp/src/arrow/array.h>\r\n\r\nBuilds naturally from Buffer.\r\n\r\nNote that ArrayVector = std::vector<std::shared_ptr<Array>>;\r\n\r\n**ChunkedArray**\u00a0\r\n\r\nA data structure managing a list of primitive Arrow arrays logically\u00a0as one large array\r\n\r\n<https://github.com/apache/arrow/blob/master/cpp/src/arrow/table.h>\r\n\r\nCompare\u00a0to <https://github.com/dotnet/corefx/blob/master/src/System.IO.Pipelines/src/System/IO/Pipelines/BufferSegment.cs>\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nNote one assumption is that in general\u00a0std::shared_ptr<T> can be replaced by just T in C# managed classes.\u00a0\r\n\r\nGotta run now, more to follow...\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2018-06-18T05:26:42.991Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16515360) by Jamie Elliott (Jamie Elliott):*\nI wanted to say - I already thought of a cool name for a .NET Arrow implementation.\u00a0Can anyone guess?\u00a0"
        },
        {
            "created_at": "2018-07-19T20:01:01.045Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16549775) by Uwe Korn (uwe):*\nThanks [~Jamie Elliott] for taking a look at this! Some feedback to your proposal:\r\n\r\n- MemoryPool: I guess it is best to go with https://github.com/allisterb/jemalloc.NET A speciality we have in Arrow is that we want to have 64byte-aligned allocations to make the most use out of SIMD instruction set. I don't see that there is an interface in the linked ones that provides aligned allocation and especially aligned reallocation.\n- Buffer: At a first glance the mentioned .net interfaces here seem to fit quite good to what we have in the C++ implementation.\n- ChunkedArray: Not sure how much you would want to build upon BufferSegment. It provides a nice .net-style scaffold for an API for ChunkedArray but it still a bit away from what ChunkedArray really is about.\n  \n  Cool name: No good idea but in your text you naturally used the word `narrow`. But this is probably more a bad pun that a good name :D"
        },
        {
            "created_at": "2018-10-21T20:42:32.609Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16658378) by Wes McKinney (wesm):*\nI have renamed this JIRA since we are receiving a donation of a native C# .NET implementation"
        },
        {
            "created_at": "2018-10-23T02:27:30.074Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16659971) by Jamie Elliott (Jamie Elliott):*\nHey! Sorry I let this slide. I had more or less clear in my head what I was planning but just got too busy with my day job.\u00a0If someone is donating that is very exciting. Can you give any more details?\u00a0\r\n\r\nBTW - the name I was going to suggest was SharpArrow.\u00a0"
        },
        {
            "created_at": "2018-10-23T08:14:31.689Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16660242) by Wes McKinney (wesm):*\nSee https://github.com/apache/arrow/pull/2815. I think it's just going to be `Apache.Arrow` in C#"
        },
        {
            "created_at": "2018-10-27T08:30:26.753Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2712?focusedCommentId=16665988) by Wes McKinney (wesm):*\nResolved in https://github.com/apache/arrow/commit/940254200febf017b4d912912f836cddeb76ee0b"
        }
    ]
}