{
    "issue": {
        "title": "[Gandiva][Java] Unsatisfied Link Error on M1 Mac when using mavencentral artifacts",
        "body": "***Note**: This issue was originally created as [ARROW-16608](https://issues.apache.org/jira/browse/ARROW-16608). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nPotentially a blocker for Arrow Integration into Calcite: CALCITE-2040, however it may be possible to move forward without M1 Mac support.\u00a0\r\n\r\npotentially somewhat related to ARROW-11135\r\n\r\nGetting an instance of the JNILoader throw a Unsatisfied Link Error when it tries to load the libgandiva_jni.dylib that it has extracted from the jar into a temporary directory.\u00a0\r\n\r\nSimplified error:\r\n```java\n\r\nException in thread \"main\" java.lang.UnsatisfiedLinkError: /tmp_dir/libgandiva_jni.dylib_uuid: dlopen(/tmp_dir/libgandiva_jni.dylib_uuid, 0x0001): tried: '/tmp_dir/libgandiva_jni.dylib_uuid' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e'))\n```\r\n\u00a0\r\n\r\nFull error and stack trace:\r\n```java\n\r\nException in thread \"main\" java.lang.UnsatisfiedLinkError: /private/var/folders/fj/63_6n5dx10n4b5x7jtdj6tvh0000gn/T/libgandiva_jni.dylib526a47e1-7306-440f-8bbf-378877abe5fe: dlopen(/private/var/folders/fj/63_6n5dx10n4b5x7jtdj6tvh0000gn/T/libgandiva_jni.dylib526a47e1-7306-440f-8bbf-378877abe5fe, 0x0001): tried: '/private/var/folders/fj/63_6n5dx10n4b5x7jtdj6tvh0000gn/T/libgandiva_jni.dylib526a47e1-7306-440f-8bbf-378877abe5fe' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e'))\r\n\u00a0 \u00a0 at java.lang.ClassLoader$NativeLibrary.load(Native Method)\r\n\u00a0 \u00a0 at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1950)\r\n\u00a0 \u00a0 at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1832)\r\n\u00a0 \u00a0 at java.lang.Runtime.load0(Runtime.java:811)\r\n\u00a0 \u00a0 at java.lang.System.load(System.java:1088)\r\n\u00a0 \u00a0 at org.apache.arrow.gandiva.evaluator.JniLoader.loadGandivaLibraryFromJar(JniLoader.java:74)\r\n\u00a0 \u00a0 at org.apache.arrow.gandiva.evaluator.JniLoader.setupInstance(JniLoader.java:63)\r\n\u00a0 \u00a0 at org.apache.arrow.gandiva.evaluator.JniLoader.getInstance(JniLoader.java:53)\r\n\u00a0 \u00a0 at org.apache.arrow.gandiva.evaluator.JniLoader.getDefaultConfiguration(JniLoader.java:144)\r\n\u00a0 \u00a0 at org.apache.arrow.gandiva.evaluator.Filter.make(Filter.java:67)\r\n\u00a0 \u00a0 at io.acme.Main.main(Main.java:26) \n```\r\n\u00a0\r\n\r\nThis example loads three libraries from mavencentral using gradle:\u00a0\r\n```java\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    implementation(\"org.apache.arrow:arrow-memory-netty:8.0.0\")\r\n    implementation(\"org.apache.arrow:arrow-vector:8.0.0\")\r\n    implementation(\"org.apache.arrow.gandiva:arrow-gandiva:8.0.0\")\r\n} \n```\r\nExample code:\u00a0\r\n```java\n\r\npublic class Main {\r\n  public static void main(String[] args) throws GandivaException {\r\n    Field field = new Field(\"int_field\", FieldType.nullable(new ArrowType.Int(32, true)), null);\r\n\r\n    Schema schema = makeSchema(field);\r\n    Condition condition = makeCondition(field);\r\n\r\n    Filter.make(schema, condition);\r\n  }\r\n\r\n  private static Schema makeSchema(Field field) {\r\n    List<Field> fieldList = new ArrayList<>();\r\n    fieldList.add(field);\r\n\r\n    return new Schema(fieldList, null);\r\n  }\r\n\r\n  private static Condition makeCondition(Field f) {\r\n    List<TreeNode> treeNodes = new ArrayList<>(2);\r\n    treeNodes.add(TreeBuilder.makeField(f));\r\n    treeNodes.add(TreeBuilder.makeLiteral(4));\r\n    TreeNode comparison = TreeBuilder.makeFunction(\"less_than\", treeNodes, new ArrowType.Bool());\r\n    return TreeBuilder.makeCondition(comparison);\r\n  }\r\n} \n```\r\nWhile I haven't tested this exact example, a similar example executes without issue on an intel x86 mac.",
        "created_at": "2022-05-18T17:46:19.000Z",
        "updated_at": "2022-11-08T20:18:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Gandiva",
            "Component: Java",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-11-08T20:18:40.000Z"
    },
    "comments": [
        {
            "created_at": "2022-05-18T20:41:13.130Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17539073) by Jonathan Swenson (jswenson):*\nBuilding the gandiva library / jar from source on the M1 mac (on master) then loading that in manually works, but the dependencies hosted in maven do not seem to be deployed in a way that permits usage from a project running on apple silicon."
        },
        {
            "created_at": "2022-05-19T02:22:44.948Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17539166) by Kouhei Sutou (kou):*\nIt seems that we need to build bundled binaries on M1 mac like we did for wheels.\r\n\r\nRelated files:\r\n- https://github.com/apache/arrow/blob/master/dev/tasks/python-wheels/github.osx.arm64.yml for wheel\n- https://github.com/apache/arrow/blob/master/dev/tasks/java-jars/github.yml for jars\n  \n  Should we create one `libgandiva_jni.dylib` that contains binaries for x86_64 and arm64? Or separated files such as `libgandiva_jni_x86_64.dylib` and `libgandiva_jni_arm64.dylib` or `x86_64/libgandiva_jni.dylib` and `arm64/libgandiva_jni.dylib`?\n  \n  `[~anthonylouis]` Do you want to work on this?"
        },
        {
            "created_at": "2022-06-01T14:01:15.922Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17544925) by Anthony Louis Gotlib Ferreira (anthonylouis):*\n`[~jswenson]` `[~kou]` is someone already working on it? I can take this"
        },
        {
            "created_at": "2022-06-01T16:37:53.524Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17545019) by Jonathan Swenson (jswenson):*\n`[~anthonylouis]` I'm not currently working on this, feel free to grab it.\u00a0"
        },
        {
            "created_at": "2022-06-02T23:04:20.859Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17545680) by Anthony Louis Gotlib Ferreira (anthonylouis):*\n`[~jswenson]` ok, I will start to work on it today"
        },
        {
            "created_at": "2022-06-27T18:32:54.741Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17559330) by Jonathan Swenson (jswenson):*\nI'm also running into a similar problem with the arrow-c-data maven dependency. `[~anthonylouis]` should I file a separate issue? or will a change that accomplishes this for gandiva also work for the c data interface?\u00a0\r\n\r\n\u00a0\r\n\r\nWorth noting that build from source on my M1 mac produces a jar that \"fixes\" this.\u00a0\r\n\r\nExample program:\u00a0\r\n```java\n\r\nclass Main {\r\n    public static void main(String[] args) {\r\n        RootAllocator allocator = new RootAllocator();\r\n        Field field = new Field(\"int_field\", FieldType.nullable(new ArrowType.Int(32, true)), null);\r\n\r\n        List<Field> fieldList = new ArrayList<>();\r\n        fieldList.add(field);\r\n\r\n        Schema schema = new Schema(fieldList, null);\r\n        ArrowSchema cSchema = ArrowSchema.allocateNew(allocator);\r\n        Data.exportSchema(allocator, schema, null, cSchema);\r\n    }\r\n} \n```\r\n\u00a0\r\n\r\nGradle config:\r\n```java\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    implementation(\"org.apache.arrow:arrow-memory-netty:8.0.0\")\r\n    implementation(\"org.apache.arrow:arrow-vector:8.0.0\")\r\n    implementation(\"org.apache.arrow:arrow-c-data:8.0.0\")\r\n} \n```\r\n\u00a0\r\n\r\nException:\r\n```java\n\r\nException in thread \"main\" java.lang.UnsatisfiedLinkError: /private/var/folders/fj/63_6n5dx10n4b5x7jtdj6tvh0000gn/T/jnilib-16873870277572435056.tmp: dlopen(/private/var/folders/fj/63_6n5dx10n4b5x7jtdj6tvh0000gn/T/jnilib-16873870277572435056.tmp, 0x0001): tried: '/private/var/folders/fj/63_6n5dx10n4b5x7jtdj6tvh0000gn/T/jnilib-16873870277572435056.tmp' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e'))\r\n\u00a0 \u00a0 at java.base/java.lang.ClassLoader$NativeLibrary.load0(Native Method)\r\n\u00a0 \u00a0 at java.base/java.lang.ClassLoader$NativeLibrary.load(ClassLoader.java:2442)\r\n\u00a0 \u00a0 at java.base/java.lang.ClassLoader$NativeLibrary.loadLibrary(ClassLoader.java:2498)\r\n\u00a0 \u00a0 at java.base/java.lang.ClassLoader.loadLibrary0(ClassLoader.java:2694)\r\n\u00a0 \u00a0 at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2627)\r\n\u00a0 \u00a0 at java.base/java.lang.Runtime.load0(Runtime.java:768)\r\n\u00a0 \u00a0 at java.base/java.lang.System.load(System.java:1837)\r\n\u00a0 \u00a0 at org.apache.arrow.c.jni.JniLoader.load(JniLoader.java:89)\r\n\u00a0 \u00a0 at org.apache.arrow.c.jni.JniLoader.loadRemaining(JniLoader.java:75)\r\n\u00a0 \u00a0 at org.apache.arrow.c.jni.JniLoader.ensureLoaded(JniLoader.java:59)\r\n\u00a0 \u00a0 at org.apache.arrow.c.jni.JniWrapper.<init>(JniWrapper.java:37)\r\n\u00a0 \u00a0 at org.apache.arrow.c.jni.JniWrapper.<clinit>(JniWrapper.java:24)\r\n\u00a0 \u00a0 at org.apache.arrow.c.SchemaExporter.export(SchemaExporter.java:117)\r\n\u00a0 \u00a0 at org.apache.arrow.c.Data.exportField(Data.java:57)\r\n\u00a0 \u00a0 at org.apache.arrow.c.Data.exportSchema(Data.java:73)\r\n\u00a0 \u00a0 at org.example.Main.main(Main.java:24)\n```\r\n\u00a0"
        },
        {
            "created_at": "2022-06-30T14:03:34.893Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17561062) by Anthony Louis Gotlib Ferreira (anthonylouis):*\n`[~jswenson]` one, question, when you built the cdata interface in your machine using Apple Silicon([here](https://github.com/apache/arrow/blob/master/ci/scripts/java_cdata_build.sh) is an example of how to do it, did it not work?\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-06-30T15:05:16.929Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17561083) by Jonathan Swenson (jswenson):*\n`[~anthonylouis]` \u00a0I've been following the Instructions [here](https://arrow.apache.org/docs/dev/developers/java/building.html#building-jni-libraries-on-macos)\u00a0which has allowed me to build and use the arrow c data jar on my m1 Mac. I think a similar set of steps (other jni libraries) also worked for the gandiva jar."
        },
        {
            "created_at": "2022-07-05T17:39:00.546Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17562776) by Jonathan Swenson (jswenson):*\n`I was toying with adding the {color:#505f79}CMAKE_OSX_ARCHITECTURES{color} flag to see if I could get a simple universal binary built.\u00a0`\r\n\r\n\u00a0\r\n```java\n\r\ncmake \\\r\n\u00a0 \u00a0 -DCMAKE_OSX_ARCHITECTURES='arm64;x86_64' \\\r\n\u00a0 \u00a0 -DCMAKE_BUILD_TYPE=Release \\\r\n\u00a0 \u00a0 -DCMAKE_INSTALL_LIBDIR=lib \\\r\n\u00a0 \u00a0 -DCMAKE_INSTALL_PREFIX=../java-dist \\\r\n\u00a0 \u00a0 ../java/c \n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nbuilding (following the rest of the build commands in [this doc](https://arrow.apache.org/docs/dev/developers/java/building.html#building-jni-libraries-on-macos)) succeeds with the following warnings:\u00a0\r\n\r\n\u00a0\r\n```java\n\r\n/Users/me/src/arrow/java/c/src/main/cpp/jni_wrapper.cc:201:3: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]\r\n\u00a0 auto arr = reinterpret_cast<jbyteArray>(error_data);\r\n\u00a0 ^ \n```\r\n\u00a0\r\n\r\n\u00a0\r\n```java\n\r\n[100%] Linking CXX shared library libarrow_cdata_jni.dylib\r\nld: warning: ignoring file /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/server/libjvm.dylib, building for macOS-x86_64 but attempting to link with file built for macOS-arm64\r\n[100%] Built target arrow_cdata_jni\r\nInstall the project...\r\n-- Install configuration: \"Release\"\r\n-- Installing: /Users/me/src/arrow/java-dist/lib/libarrow_cdata_jni.dylib \n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nThe build produces the lib_arrow-cdata_jni.dylib which appears to have both the x64 and arm64 binaries within:\u00a0\r\n\r\n\u00a0\r\n```java\n\r\n\u276f file /Users/me/src/arrow/java-dist/lib/libarrow_cdata_jni.dylib\r\n/Users/me/src/arrow/java-dist/lib/libarrow_cdata_jni.dylib: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit dynamically linked shared library x86_64Mach-O 64-bit dynamically linked shared library x86_64] [arm64:Mach-O 64-bit dynamically linked shared library arm64Mach-O 64-bit dynamically linked shared library arm64]\r\n/Users/me/src/arrow/java-dist/lib/libarrow_cdata_jni.dylib (for architecture x86_64):\tMach-O 64-bit dynamically linked shared library x86_64\r\n/Users/me/src/arrow/java-dist/lib/libarrow_cdata_jni.dylib (for architecture arm64):\tMach-O 64-bit dynamically linked shared library arm64 \n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nHowever when I try to do the same for the other JNI libraries (gandiva, orc, etc) I get an error running the initial cmake:\u00a0\r\n\r\n\u00a0\r\n```java\n\r\n\u276f cmake \\\r\n\u00a0 \u00a0 -DCMAKE_OSX_ARCHITECTURES='arm64;x86_64' \\\r\n\u00a0 \u00a0 -DARROW_BOOST_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_BROTLI_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_BZ2_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_GFLAGS_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_GRPC_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_LZ4_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_OPENSSL_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_PROTOBUF_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_SNAPPY_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_THRIFT_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_UTF8PROC_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_ZSTD_USE_SHARED=OFF \\\r\n\u00a0 \u00a0 -DARROW_JNI=ON \\\r\n\u00a0 \u00a0 -DARROW_PARQUET=ON \\\r\n\u00a0 \u00a0 -DARROW_FILESYSTEM=ON \\\r\n\u00a0 \u00a0 -DARROW_DATASET=ON \\\r\n\u00a0 \u00a0 -DARROW_GANDIVA_JAVA=ON \\\r\n\u00a0 \u00a0 -DARROW_GANDIVA_STATIC_LIBSTDCPP=ON \\\r\n\u00a0 \u00a0 -DARROW_GANDIVA=ON \\\r\n\u00a0 \u00a0 -DARROW_ORC=ON \\\r\n\u00a0 \u00a0 -DARROW_PLASMA_JAVA_CLIENT=ON \\\r\n\u00a0 \u00a0 -DARROW_PLASMA=ON \\\r\n\u00a0 \u00a0 -DCMAKE_BUILD_TYPE=Release \\\r\n\u00a0 \u00a0 -DCMAKE_INSTALL_LIBDIR=lib \\\r\n\u00a0 \u00a0 -DCMAKE_INSTALL_PREFIX=../java-dist \\\r\n\u00a0 \u00a0 -DCMAKE_UNITY_BUILD=ON \\\r\n\u00a0 \u00a0 -Dre2_SOURCE=BUNDLED \\\r\n\u00a0 \u00a0 -DBoost_SOURCE=BUNDLED \\\r\n\u00a0 \u00a0 -Dutf8proc_SOURCE=BUNDLED \\\r\n\u00a0 \u00a0 -DSnappy_SOURCE=BUNDLED \\\r\n\u00a0 \u00a0 -DORC_SOURCE=BUNDLED \\\r\n\u00a0 \u00a0 -DZLIB_SOURCE=BUNDLED \\\r\n\u00a0 \u00a0 ../cpp\r\n-- Building using CMake version: 3.23.2\r\n-- The C compiler identification is AppleClang 13.1.6.13160021\r\n-- The CXX compiler identification is AppleClang 13.1.6.13160021\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc - skipped\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++ - skipped\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Arrow version: 9.0.0 (full: '9.0.0-SNAPSHOT')\r\n-- Arrow SO version: 900 (full: 900.0.0)\r\n-- clang-tidy 12 not found\r\n-- clang-format 12 not found\r\n-- Could NOT find ClangTools (missing: CLANG_FORMAT_BIN CLANG_TIDY_BIN)\u00a0\r\n-- infer not found\r\n-- Found Python3: /opt/homebrew/bin/python3.9 (found version \"3.9.13\") found components: Interpreter\u00a0\r\n-- Using ccache: /opt/homebrew/bin/ccache\r\n-- Found cpplint executable at /Users/me/src/arrow/cpp/build-support/cpplint.py\r\n-- System processor: arm64\r\n-- Performing Test CXX_SUPPORTS_ARMV8_ARCH\r\n-- Performing Test CXX_SUPPORTS_ARMV8_ARCH - Failed\r\n-- Arrow build warning level: PRODUCTION\r\nCMake Error at cmake_modules/SetupCxxFlags.cmake:477 (message):\r\n\u00a0 Unsupported arch flag: -march=armv8-a.\r\nCall Stack (most recent call first):\r\n\u00a0 CMakeLists.txt:494 (include)\n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nI get a little further if I run a cmake without that flag first, but then the actual build step fails:\u00a0\r\n\r\n\u00a0\r\n```java\n\r\n\u00a042%] Built target arrow_dependencies\r\n[ 43%] Building CXX object src/arrow/CMakeFiles/arrow_objlib.dir/Unity/unity_24_cxx.cxx.o\r\nerror: unknown target CPU 'armv8-a'\r\nnote: valid target CPU values are: nocona, core2, penryn, bonnell, atom, silvermont, slm, goldmont, goldmont-plus, tremont, nehalem, corei7, westmere, sandybridge, corei7-avx, ivybridge, core-avx-i, haswell, core-avx2, broadwell, skylake, skylake-avx512, skx, cascadelake, cooperlake, cannonlake, icelake-client, rocketlake, icelake-server, tigerlake, sapphirerapids, alderlake, knl, knm, k8, athlon64, athlon-fx, opteron, k8-sse3, athlon64-sse3, opteron-sse3, amdfam10, barcelona, btver1, btver2, bdver1, bdver2, bdver3, bdver4, znver1, znver2, znver3, x86-64, x86-64-v2, x86-64-v3, x86-64-v4\r\nmake[2]: *** [src/arrow/CMakeFiles/arrow_objlib.dir/Unity/unity_24_cxx.cxx.o] Error 1\r\nmake[1]: *** [src/arrow/CMakeFiles/arrow_objlib.dir/all] Error 2\r\nmake: *** [all] Error 2 \n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nPerhaps related to https://issues.apache.org/jira/browse/ARROW-9744\r\n\r\nI don't have a great handle on what's actually going to work here, but I thought maybe I'd try a few options.\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-08-04T14:00:25.152Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17575284) by Rok Mihevc (rokm):*\n`[~anthonylouis]` can I help driving this forward somehow?"
        },
        {
            "created_at": "2022-08-17T12:26:26.474Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17580764) by Rok Mihevc (rokm):*\nDid work on this start yet? I'm looking to get arrow_dataset_jni library on Mac M1 but don't want to duplicate effort. `[~anthonylouis]`"
        },
        {
            "created_at": "2022-08-23T07:28:06.278Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17583417) by Antoine Pitrou (apitrou):*\n`[~rokm]` Be sure to coordinate with `[~dsusanibara]` if not done so already :-)"
        },
        {
            "created_at": "2022-10-28T01:42:51.647Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17625367) by Jonathan Swenson (jswenson):*\nIt appears as though this is still present on 9.0.0 and 10.0.0 on maven.\u00a0\r\n\r\nThe folks over at duckdb are working on an arrow integration with their JVM wrapper (JDBC Driver) that depends on the arrow-c-data java implementation.\u00a0\r\n\r\nCurrently the integration requires building the arrow-c-data jar from source to run on an m1 mac.\u00a0"
        },
        {
            "created_at": "2022-10-28T01:49:09.953Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17625372) by Kouhei Sutou (kou):*\nSee ARROW-18042 for the arrow-c-data progress. You may be able to help the work by testing built jars."
        },
        {
            "created_at": "2022-11-08T11:22:54.556Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17630360) by Rok Mihevc (rokm):*\nARROW-18042 was resolved so this can probably be closed. `[~anthonylouis]`"
        },
        {
            "created_at": "2022-11-08T20:18:40.664Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16608?focusedCommentId=17630604) by Kouhei Sutou (kou):*\nResolved by ARROW-18042."
        }
    ]
}