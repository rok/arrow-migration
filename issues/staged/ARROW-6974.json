{
    "issue": {
        "title": "[C++] Refactor temporal casts to work with Scalar inputs",
        "body": "***Note**: This issue was originally created as [ARROW-6974](https://issues.apache.org/jira/browse/ARROW-6974). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, the casting for time-like data is done with the `ShiftTime` function. It _might_ be possible to simplify this with ArrayDataVisitor (to avoid looping / checking the bitmap).",
        "created_at": "2019-10-23T13:17:12.000Z",
        "updated_at": "2021-11-23T18:49:32.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-11-23T18:49:32.000Z"
    },
    "comments": [
        {
            "created_at": "2020-06-03T01:25:20.203Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6974?focusedCommentId=17124498) by Wes McKinney (wesm):*\nI edited the title to reframe the issue in the context of the new framework"
        },
        {
            "created_at": "2021-11-23T18:49:32.167Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6974?focusedCommentId=17448216) by Antoine Pitrou (apitrou):*\nThis works now:\r\n\r\n```python\n\r\n>>> s = pa.scalar(datetime.now())\r\n>>> s\r\n<pyarrow.TimestampScalar: datetime.datetime(2021, 11, 23, 19, 48, 19, 732990)>\r\n>>> pc.cast(s, pa.timestamp('ns'))\r\n<pyarrow.TimestampScalar: Timestamp('2021-11-23 19:48:19.732990')>\r\n>>> pc.cast(s, pa.timestamp('ns', 'Europe/Paris'))\r\n<pyarrow.TimestampScalar: Timestamp('2021-11-23 20:48:19.732990+0100', tz='Europe/Paris')>\r\n>>> pc.cast(s, pa.timestamp('ns', 'UTC'))\r\n<pyarrow.TimestampScalar: Timestamp('2021-11-23 19:48:19.732990+0000', tz='UTC')>\r\n```\r\n"
        }
    ]
}