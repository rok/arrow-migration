{
    "issue": {
        "title": "[Python] Tzinfo - string roundtrip fails on pytz.StaticTzInfo objects",
        "body": "***Note**: This issue was originally created as [ARROW-9993](https://issues.apache.org/jira/browse/ARROW-9993). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nTimezone roundtrip fails with `pytz.StaticTzInfo` objects on master:\r\n\r\n```python\n\r\ntz = pytz.timezone('Etc/GMT+1')\r\npa.lib.string_to_tzinfo(pa.lib.tzinfo_to_string(tz))\r\n```\r\n```Java\n\r\n---------------------------------------------------------------------------\r\nUnknownTimeZoneError                      Traceback (most recent call last)\r\n<ipython-input-4-b890180b2fad> in <module>\r\n----> 1 pa.lib.string_to_tzinfo(pa.lib.tzinfo_to_string(tz))\r\n\r\n~/Workspace/arrow/python/pyarrow/types.pxi in pyarrow.lib.string_to_tzinfo()\r\n   1838         Time zone object\r\n   1839     \"\"\"\r\n-> 1840     cdef PyObject* tz = GetResultValue(StringToTzinfo(name.encode('utf-8')))\r\n   1841     return PyObject_to_object(tz)\r\n   1842\r\n\r\n~/Workspace/arrow/python/pyarrow/error.pxi in pyarrow.lib.pyarrow_internal_check_status()\r\n    120 cdef api int pyarrow_internal_check_status(const CStatus& status) \\\r\n    121         nogil except -1:\r\n--> 122     return check_status(status)\r\n\r\n~/.conda/envs/arrow38/lib/python3.8/site-packages/pytz/__init__.py in timezone(zone)\r\n    179                 fp.close()\r\n    180         else:\r\n--> 181             raise UnknownTimeZoneError(zone)\r\n    182\r\n    183     return _tzinfo_cache[zone]\r\n\r\nUnknownTimeZoneError: '-01'\r\n```",
        "created_at": "2020-09-14T15:08:52.000Z",
        "updated_at": "2020-09-28T09:24:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-09-28T09:24:50.000Z"
    },
    "comments": [
        {
            "created_at": "2020-09-15T14:29:28.862Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9993?focusedCommentId=17196191) by Joris Van den Bossche (jorisvandenbossche):*\nNote that there are other timezones that won't roundtrip completely \"faithfully\" as well, because we don't keep track of the original python class/library that was used. Eg we tend to prefer pytz, so a datetime.timezone gets becomes a pytz timezone on roundtrip:\r\n\r\n```Java\n\r\nIn [10]: import datetime\r\n\r\nIn [11]: tz = datetime.timezone(datetime.timedelta(hours=1))\r\n\r\nIn [12]: print(tz)\r\nUTC+01:00\r\n\r\nIn [13]: pa.lib.tzinfo_to_string(tz)\r\nOut[13]: '+01:00'\r\n\r\nIn [14]: roundtripped = pa.lib.string_to_tzinfo(pa.lib.tzinfo_to_string(tz))\r\n\r\nIn [15]: roundtripped\r\nOut[15]: pytz.FixedOffset(60)\r\n\r\nIn [16]: tz == roundtripped\r\nOut[16]: False\r\n```\r\n\r\n"
        },
        {
            "created_at": "2020-09-28T09:24:41.969Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9993?focusedCommentId=17203117) by Krisztian Szucs (kszucs):*\nMy goal was to prevent raising from a roundtrip rather than reproducing the exact value (which would be much harder)."
        }
    ]
}