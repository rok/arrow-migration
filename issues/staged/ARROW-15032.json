{
    "issue": {
        "title": "[C++] Compute Function to return Year / Month / Day",
        "body": "***Note**: This issue was originally created as [ARROW-15032](https://issues.apache.org/jira/browse/ARROW-15032). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nRelated to\r\n\r\n<https://stackoverflow.com/questions/70194714/how-to-return-a-structarray-from-multiple-scalar-functions/70213443#70213443>\r\n\r\n\u00a0\r\n\r\nRight now the temporal compute functions include year / month / day as separate functions. AFAICT in the implementation these all internally create a struct containing year/month/day using the date library and then return only one of the components.\r\n\r\n\u00a0\r\n\r\nFrom a pure efficiency perspective it might be best to just return all as one StructArray and allow the user to unpack the values. From a user perspective, I also typically want year / month / day to be bundled together, so one function call to get all three in one pass would be ideal\r\n\r\n\u00a0\r\n\r\nThis might be extendable down to the timestamp structure as well",
        "created_at": "2021-12-08T19:18:53.000Z",
        "updated_at": "2022-01-06T03:41:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-01-05T01:35:42.000Z"
    },
    "comments": [
        {
            "created_at": "2021-12-08T22:24:21.136Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17456021) by Rok Mihevc (rokm):*\nWe have [ISOCalendar](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc#L712) kernel that does something similar to what you're suggesting. Given enough interest we could add y/m/d kernel too."
        },
        {
            "created_at": "2021-12-08T23:23:09.788Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17456055) by Will Ayd (willayd):*\nThat's great to know - never even saw that. I can also take a look and push up a PR if I can mirror that over to the calendar side of things"
        },
        {
            "created_at": "2021-12-09T02:31:04.391Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17456100) by Rok Mihevc (rokm):*\nCould you check if there are comparable methods in pandas and lubridate and make sure the designs match?\r\n`[~jorisvandenbossche]` Any opinion on this?"
        },
        {
            "created_at": "2021-12-09T04:54:36.342Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17456146) by Will Ayd (willayd):*\nPandas doesn\u2019t have anything user facing to match this but internally it uses an npy_datetimestruct borrowed from numpy for passing across Its C functions."
        },
        {
            "created_at": "2021-12-10T00:00:22.465Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17456823) by Rok Mihevc (rokm):*\nWhat worries me a little bit is that if you make a struct array that you then access from python per row you might not really see performance benefits. What use case are you thinking about?\r\n\r\nBesides there are many possible struct one can make from a timestamp and I imagine we don't want many in arrow?\r\n\r\nI might be missing something here though..\r\n\r\nAnother option would be to make a generic kernel kinda like strftime that would return a struct array."
        },
        {
            "created_at": "2021-12-10T04:03:41.992Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17456876) by Will Ayd (willayd):*\nHmm I wasn't really thinking about Python with this enhancement. As a relatively new (and likely misguided) user of the C++ library I found it difficult to represent a Date32Array in a year/month/day format that I think would be commonly desired. As far as I am aware, the only way to do that is the separately call year/month/day compute functions then either manage the three arrays or manually construct a StructArray with those after the fact.\u00a0\r\n\r\n\u00a0\r\n\r\nI do agree when you start thinking about timestamp components that the requirements get a little more vague. When opening this enhancement my initial thought was that that did not need to be solved to still make good use of the year/month/day StructArray\u00a0"
        },
        {
            "created_at": "2021-12-10T12:56:18.210Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17457131) by Rok Mihevc (rokm):*\nPerhaps it would make sense to do something like timetuple (https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.timetuple.html) to be as general as possible?\r\n`[~apitrou]`"
        },
        {
            "created_at": "2021-12-14T12:54:59.487Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17459126) by Antoine Pitrou (apitrou):*\nI think we could indeed have a `to_date_struct` function that returns a `year,month,day` struct. I'm not sure if other variations are useful, such as `to_time_struct` and/or `to_datetime_struct`."
        },
        {
            "created_at": "2021-12-14T15:24:10.145Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17459240) by Rok Mihevc (rokm):*\nStarting with to_date_struct (and limiting to to_date_struct, to_time_struct  and to_datetime_struct) sounds reasonable.\r\nI assume output would be in timezone of the array.\r\n\r\n`[~willayd]` would you like to make a PR?\r\n"
        },
        {
            "created_at": "2021-12-14T15:33:34.515Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17459249) by Antoine Pitrou (apitrou):*\ncc `[~icook]` `[~lidavidm]`"
        },
        {
            "created_at": "2021-12-14T15:56:48.787Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17459268) by Will Ayd (willayd):*\nSure I'd love to try a PR. May take me a week or two to get around to it"
        },
        {
            "created_at": "2021-12-18T14:41:11.057Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17461905) by Rok Mihevc (rokm):*\n`[~icook]` Will is a first time contributor, could you assign him this ticket and approve the github CI run for his [PR](https://github.com/apache/arrow/pull/11990)?"
        },
        {
            "created_at": "2021-12-18T16:33:49.346Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17461931) by David Li (lidavidm):*\nI've assigned Will to this issue and from now on they should be able to self-assign."
        },
        {
            "created_at": "2022-01-05T01:35:42.144Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15032?focusedCommentId=17468938) by David Li (lidavidm):*\nIssue resolved by pull request 11990\n<https://github.com/apache/arrow/pull/11990>"
        }
    ]
}