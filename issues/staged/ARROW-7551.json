{
    "issue": {
        "title": "[FlightRPC][C++] Flight test on macOS fails due to Homebrew gRPC",
        "body": "***Note**: This issue was originally created as [ARROW-7551](https://issues.apache.org/jira/browse/ARROW-7551). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSee\u00a0<https://github.com/apache/arrow/runs/380443548#step:5:179>\u00a0for example.\u00a0\r\n\r\n```Java\n\r\n64/96 Test #64: arrow-flight-test .........................***Failed    0.46 sec\r\nRunning arrow-flight-test, redirecting output into /Users/runner/runners/2.163.1/work/arrow/arrow/build/cpp/build/test-logs/arrow-flight-test.txt (attempt 1/1)\r\nRunning main() from /Users/runner/runners/2.163.1/work/arrow/arrow/build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc\r\n[==========] Running 42 tests from 11 test cases.\r\n[----------] Global test environment set-up.\r\n[----------] 2 tests from TestFlightDescriptor\r\n[ RUN      ] TestFlightDescriptor.Basics\r\n[       OK ] TestFlightDescriptor.Basics (0 ms)\r\n[ RUN      ] TestFlightDescriptor.ToFromProto\r\n[       OK ] TestFlightDescriptor.ToFromProto (0 ms)\r\n[----------] 2 tests from TestFlightDescriptor (0 ms total)\r\n\r\n[----------] 6 tests from TestFlight\r\n[ RUN      ] TestFlight.UnknownLocationScheme\r\n[       OK ] TestFlight.UnknownLocationScheme (0 ms)\r\n[ RUN      ] TestFlight.ConnectUri\r\nServer running with pid 15977\r\n/Users/runner/runners/2.163.1/work/arrow/arrow/cpp/build-support/run-test.sh: line 97: 15971 Segmentation fault: 11  $TEST_EXECUTABLE \"$@\" 2>&1\r\n     15972 Done                    | $ROOT/build-support/asan_symbolize.py\r\n     15973 Done                    | ${CXXFILT:-c++filt}\r\n     15974 Done                    | $ROOT/build-support/stacktrace_addr2line.pl $TEST_EXECUTABLE\r\n     15975 Done                    | $pipe_cmd 2>&1\r\n     15976 Done                    | tee $LOGFILE\r\n~/runners/2.163.1/work/arrow/arrow/build/cpp/src/arrow/flight\r\n```\r\n\r\nIt's not failing every time but I'm seeing it fail frequently.",
        "created_at": "2020-01-11T00:19:27.000Z",
        "updated_at": "2020-01-17T23:48:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: FlightRPC",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-01-17T23:48:53.000Z"
    },
    "comments": [
        {
            "created_at": "2020-01-15T13:25:55.048Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7551?focusedCommentId=17015957) by David Li (lidavidm):*\nI can't reproduce this so far on my MacOS machine. I'll have to do more digging to make sure I have the same environment as the test worker"
        },
        {
            "created_at": "2020-01-15T20:07:29.145Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7551?focusedCommentId=17016289) by Neal Richardson (npr):*\nIf we can't reproduce this, should we skip this test for now on macOS/on CI? Right now it's just making all the builds fail, and that increases the risk that we'll merge a patch that really breaks things."
        },
        {
            "created_at": "2020-01-15T21:34:23.516Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7551?focusedCommentId=17016346) by David Li (lidavidm):*\nYes, let's skip the test on CI for now."
        },
        {
            "created_at": "2020-01-16T20:05:53.373Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7551?focusedCommentId=17017440) by David Li (lidavidm):*\nbacktrace from CI\r\n\r\n```\n\r\n2020-01-16T20:01:53.2578600Z Process 14610 launched: '/Users/runner/runners/2.164.0/work/arrow/arrow/build/cpp/debug/arrow-flight-test' (x86_64)\r\n2020-01-16T20:01:53.2579170Z (lldb) command source -s 0 'lldb.batch'\r\n2020-01-16T20:01:53.2579660Z Executing commands in '/Users/runner/runners/2.164.0/work/arrow/arrow/build/cpp/lldb.batch'.\r\n2020-01-16T20:01:53.2579850Z (lldb) bt\r\n2020-01-16T20:01:53.5417960Z * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x38)\r\n2020-01-16T20:01:53.5418310Z   * frame #0: 0x00000001011b519a libgrpc++.dylib`grpc_pollset_size() + 12\r\n2020-01-16T20:01:53.5418520Z     frame #1: 0x00000001011cc59a libgrpc++.dylib`grpc_completion_queue_create_internal(grpc_cq_completion_type, grpc_cq_polling_type, grpc_experimental_completion_queue_functor*) + 96\r\n2020-01-16T20:01:53.5418640Z     frame #2: 0x000000010116b400 libgrpc++.dylib`___lldb_unnamed_symbol150$$libgrpc++.dylib + 80\r\n2020-01-16T20:01:53.5419550Z     frame #3: 0x000000010117f661 libgrpc++.dylib`grpc_impl::ServerBuilder::BuildAndStart() + 977\r\n2020-01-16T20:01:53.5419790Z     frame #4: 0x00000001014dcae9 libarrow_flight.100.dylib`arrow::flight::FlightServerBase::Init(this=0x0000000108100040, options=0x00007ffeefbfe870) at server.cc:690:28\r\n2020-01-16T20:01:53.5429710Z     frame #5: 0x0000000100030d46 arrow-flight-test`arrow::flight::TestFlightClient::SetUp(this=0x0000000108100050) at flight_test.cc:323:5\r\n2020-01-16T20:01:53.5430030Z     frame #6: 0x0000000100d6c1ae libgtestd.dylib`void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(object=0x0000000108100050, method=11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00, location=\"SetUp()\")(), char const*) at gtest.cc:2443:10\r\n2020-01-16T20:01:53.5430310Z     frame #7: 0x0000000100d34fab libgtestd.dylib`void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(object=0x0000000108100050, method=11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00, location=\"SetUp()\")(), char const*) at gtest.cc:2479:14\r\n2020-01-16T20:01:53.5430530Z     frame #8: 0x0000000100d34e84 libgtestd.dylib`testing::Test::Run(this=0x0000000108100050) at gtest.cc:2513:3\r\n2020-01-16T20:01:53.5430720Z     frame #9: 0x0000000100d36365 libgtestd.dylib`testing::TestInfo::Run(this=0x0000000108005fe0) at gtest.cc:2693:11\r\n2020-01-16T20:01:53.5430920Z     frame #10: 0x0000000100d3736f libgtestd.dylib`testing::TestCase::Run(this=0x00000001080061b0) at gtest.cc:2811:28\r\n2020-01-16T20:01:53.5431120Z     frame #11: 0x0000000100d43e84 libgtestd.dylib`testing::internal::UnitTestImpl::RunAllTests(this=0x0000000108004fa0) at gtest.cc:5177:43\r\n2020-01-16T20:01:53.5432000Z     frame #12: 0x0000000100d7108e libgtestd.dylib`bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(object=0x0000000108004fa0, method=d0 3b d4 00 01 00 00 00 00 00 00 00 00 00 00 00, location=\"auxiliary test code (environments or event listeners)\")(), char const*) at gtest.cc:2443:10\r\n2020-01-16T20:01:53.5432350Z     frame #13: 0x0000000100d4393b libgtestd.dylib`bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(object=0x0000000108004fa0, method=d0 3b d4 00 01 00 00 00 00 00 00 00 00 00 00 00, location=\"auxiliary test code (environments or event listeners)\")(), char const*) at gtest.cc:2479:14\r\n2020-01-16T20:01:53.5432560Z     frame #14: 0x0000000100d437f3 libgtestd.dylib`testing::UnitTest::Run(this=0x0000000100d873f0) at gtest.cc:4786:10\r\n2020-01-16T20:01:53.5432710Z     frame #15: 0x0000000100d20ec1 libgtest_maind.dylib`RUN_ALL_TESTS() at gtest.h:2341:46\r\n2020-01-16T20:01:53.5432810Z     frame #16: 0x0000000100d20ea0 libgtest_maind.dylib`main(argc=1, argv=0x00007ffeefbfeeb0) at gtest_main.cc:36:10\r\n2020-01-16T20:01:53.5433280Z     frame #17: 0x00007fff72c557fd libdyld.dylib`start + 1\r\n```\r\n"
        },
        {
            "created_at": "2020-01-16T20:19:19.646Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7551?focusedCommentId=17017454) by David Li (lidavidm):*\nI found this: https://github.com/grpc/grpc/issues/21587 Maybe we can try downgrading or upgrading gRPC."
        },
        {
            "created_at": "2020-01-16T21:08:24.603Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7551?focusedCommentId=17017482) by David Li (lidavidm):*\n~~Ok - the issue is that we're both statically and dynamically linking gRPC. Interestingly this doesn't happen for me locally.~~\r\n\r\nThe gRPC symbols in Flight dylibs are generated code, my mistake.\r\n\r\nI configured GitHub to upload the artifacts, then pulled them down and examined them with otool and nm. https://github.com/lidavidm/arrow/commit/cd63e3046e65564b3021bc0c8275ba51257a7c75/checks?check_suite_id=405062849\r\n\r\nLook at libarrow_flight.dylib:\r\n\r\n```\n\r\n> otool -L libarrow_flight.dylib\r\nlibarrow_flight.dylib:\r\n\t@rpath/libarrow_flight.100.dylib (compatibility version 100.0.0, current version 100.0.0)\r\n\t@rpath/libarrow.100.dylib (compatibility version 100.0.0, current version 100.0.0)\r\n\t/usr/local/opt/protobuf/lib/libprotobuf.22.dylib (compatibility version 23.0.0, current version 23.2.0)\r\n\t/usr/local/opt/grpc/lib/libgrpc++.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/local/opt/grpc/lib/libgrpc.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/local/opt/grpc/lib/libgpr.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/local/opt/grpc/lib/libaddress_sorting.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib (compatibility version 1.1.0, current version 1.1.0)\r\n\t/usr/local/opt/openssl@1.1/lib/libcrypto.1.1.dylib (compatibility version 1.1.0, current version 1.1.0)\r\n\t/usr/local/opt/glog/lib/libglog.0.dylib (compatibility version 0.0.0, current version 0.4.0)\r\n\t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 800.7.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1281.0.0)\r\n> nm libarrow_flight.dylib | rg grpc | head\r\n00000000000729e0 T __ZN4grpc10ByteBuffer10set_bufferEP16grpc_byte_buffer\r\n000000000001a740 T __ZN4grpc10ByteBuffer12c_buffer_ptrEv\r\n000000000001a240 t __ZN4grpc10ByteBuffer17ByteBufferPointerC1EPKS0_\r\n```\r\n\r\nWe've run into this internally. IMO, we should only ever link gRPC dynamically. However, the official Python grpcio package needs to do the same, or else you'll get issues running both side by side (yet another problem we faced)."
        },
        {
            "created_at": "2020-01-16T22:33:57.941Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7551?focusedCommentId=17017538) by Wes McKinney (wesm):*\nArgh, that is thorny. We are probably going to have to talk with the gRPC developers about this, since it stands to reason that more and more Python projects will utilize the C/C++ gRPC libraries as time goes on and run into this problem"
        },
        {
            "created_at": "2020-01-17T23:48:53.622Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7551?focusedCommentId=17018413) by Neal Richardson (npr):*\nIssue resolved by pull request 6207\n<https://github.com/apache/arrow/pull/6207>"
        }
    ]
}