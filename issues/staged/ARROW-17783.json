{
    "issue": {
        "title": "[C++] Aggregate kernel should not mandate alignment",
        "body": "***Note**: This issue was originally created as [ARROW-17783](https://issues.apache.org/jira/browse/ARROW-17783). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen using arrow's aggregate kernel with table transferred from arrow flight (DoGet), it may crash at arrow::util::CheckAlignment(). However using original data it works well, also if I first serialize the transferred table into bytes then recreate an arrow table using the bytes, it works well.\r\n\r\n\"flight-alignment-test\" attached is the minimal test that can produce the issue, which basically does \"sum(total_revenue) group by l_suppkey\" using the table from \"DoGet()\". (\"DummyNode\" is just used to be the producer of the aggregate node as the producer is required to create the aggregate node)",
        "created_at": "2022-09-20T16:13:39.000Z",
        "updated_at": "2022-10-21T18:49:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-09-20T18:47:42.324Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17607362) by Antoine Pitrou (apitrou):*\n`[~westonpace]` Could you look at this?"
        },
        {
            "created_at": "2022-09-20T20:32:08.307Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17607390) by Weston Pace (westonpace):*\nYes, I'll try and find some time to look at this one.  The `CheckAlignment` method is expecting, at most, 8 byte alignment which I think we enforce on serialization so I'm surprised we get into this situation.  However, maybe we are getting here from some kind of slicing or related operation."
        },
        {
            "created_at": "2022-09-20T20:41:29.151Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17607394) by David Li (lidavidm):*\nI think this pretty much follows from the linked Flight issue then. Flight doesn't actually manage to enforce 8 byte alignment because of the Protobuf container. (I think we can figure out how to do this, at least for C++ clients/servers, but you'll still have the issue of other clients/servers.)"
        },
        {
            "created_at": "2022-09-20T20:54:48.003Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17607400) by Antoine Pitrou (apitrou):*\nJust because Arrow C++ enforces some alignment on serialization doesn't mean other producers do the same.\r\n\r\nAlignment is a recommendation in Arrow, not a requirement. So you simply cannot rely on alignment for data that may come from other systems."
        },
        {
            "created_at": "2022-09-20T22:27:48.464Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17607418) by Weston Pace (westonpace):*\nHm, the [format page](https://arrow.apache.org/docs/format/Columnar.html#buffer-alignment-and-padding) suggests it is not only a C++ thing:\r\n\r\n> Implementations are recommended to allocate memory on aligned addresses (multiple of 8- or 64-bytes) and pad (overallocate) to a length that is a multiple of 8 or 64 bytes. **When serializing Arrow data for interprocess communication, these alignment and padding requirements are enforced.** If possible, we suggest that you prefer using 64-byte alignment and padding. Unless otherwise noted, padded bytes do not need to have a specific value.\r\n\r\nThat being said, I guess this is just another feature request.  It should be solvable with special head/tail handling.  And perhaps, since the C data API is not technically \"interprocess communication\", we can't rely on this anyways."
        },
        {
            "created_at": "2022-09-21T06:59:51.714Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17607556) by Antoine Pitrou (apitrou):*\nHmm, I had forgotten about these requirements.\r\nThat said, the spec doesn't say precisely which requirement is enforced (is it 8 bytes or 64 bytes?).\r\n\r\nInstead of special head/tail handling, you can probably use unaligned load instructions. They probably don't have any downsides (i.e. they are probably just as fast when the data happens to be aligned)."
        },
        {
            "created_at": "2022-10-20T23:03:39.400Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17621402) by Weston Pace (westonpace):*\nMy concern is less performance and more complexity and testing.  I've made a proposal at ARROW-18115 which would address this (albeit this particular case would take a performance hit)"
        },
        {
            "created_at": "2022-10-21T00:04:13.543Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17621414) by David Li (lidavidm):*\nIt should also not be too bad to fix this in Flight (given gRPC generally forces a copy on us anyways); we would only lose the zero-copy in the case that the batch fits in a single gRPC slice (which is presumably relatively small, but I'd have to check what a typical size is). "
        },
        {
            "created_at": "2022-10-21T00:05:12.496Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17621415) by David Li (lidavidm):*\nI guess if you're going for 512 byte alignment then you'd have to deal with this anyways though."
        },
        {
            "created_at": "2022-10-21T16:25:03.115Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17622362) by Weston Pace (westonpace):*\nWe would only be requiring 64-byte alignment for incoming buffers.  The 512-byte alignment is for buffers that Acero allocates itself."
        },
        {
            "created_at": "2022-10-21T17:32:35.788Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17622376) by Weston Pace (westonpace):*\nFWIW, the particular check failing here isn't even looking for 64-byte alignment.  It is simply looking for type alignment (which is guaranteed by `malloc`).  The algorithm is not using an SIMD intrinsics.  It is comparing values between two byte buffers (of fixed length arrays), given random indices, and doing so by casting the uint8_t\\* to uint64_t\\* (or whatever is appropriate).  Roughly speaking...\r\n\r\n```\n\r\n*match = *(reinterpret_cast<const uint64_t*>(left.data()) + row_num) == *(reinterpret_cast<const uint64_t*>(right.data()) + row_num);\r\n```\r\n\r\nA safe alternative, that does not rely on alignment, would be:\r\n\r\n```\n\r\n*match = memcmp(left.data() + (row_num * 8), right.data() + (row_num * 8), 8) == 0;\r\n```\r\n\r\nI created a hasty benchmark:\r\n\r\n```\n\r\nvoid CompareWithMemcmp(const uint8_t* left, const uint8_t* right, uint8_t* out,\r\n                       const int* indices, int length) {\r\n  const int* idx_it = indices;\r\n  const int* idx_end = indices + length;\r\n  uint8_t* out_it = out;\r\n  while (idx_it != idx_end) {\r\n    *out_it = memcmp(left + (*idx_it * 8), right + (*idx_it * 8), 8) == 0;\r\n    out_it++;\r\n    idx_it++;\r\n  }\r\n}\r\n\r\nvoid CompareWithCast(const uint8_t* left, const uint8_t* right, uint8_t* out,\r\n                     const int* indices, int length) {\r\n  const int* idx_it = indices;\r\n  const int* idx_end = indices + length;\r\n  uint8_t* out_it = out;\r\n  while (idx_it != idx_end) {\r\n    *out_it = *(reinterpret_cast<const uint64_t*>(left) + *idx_it) ==\r\n              *(reinterpret_cast<const uint64_t*>(right) + *idx_it);\r\n    out_it++;\r\n    idx_it++;\r\n  }\r\n}\r\n\r\ntemplate <bool kUseCast, bool kAligned>\r\nstatic void RandomCompare(benchmark::State& state) {  // NOLINT non-const reference\r\n  constexpr int kNumElements = 10000;\r\n  const std::vector<int64_t> left = MakeIntegers<int64_t>(kNumElements + 1);\r\n  const std::vector<int64_t> right = MakeIntegers<int64_t>(kNumElements + 1);\r\n  std::vector<int> indices(kNumElements);\r\n  std::vector<uint8_t> matches(kNumElements);\r\n  std::iota(indices.begin(), indices.end(), 0);\r\n  std::default_random_engine gen(42);\r\n  std::shuffle(indices.begin(), indices.end(), gen);\r\n  const uint8_t* left_start = reinterpret_cast<const uint8_t*>(left.data());\r\n  const uint8_t* right_start = reinterpret_cast<const uint8_t*>(right.data());\r\n  if (!kAligned) {\r\n    left_start += 4;\r\n    right_start += 4;\r\n  }\r\n  for (auto _ : state) {\r\n    if (kUseCast) {\r\n      CompareWithCast(left_start, right_start, matches.data(), indices.data(),\r\n                      kNumElements);\r\n    } else {\r\n      CompareWithMemcmp(left_start, right_start, matches.data(), indices.data(),\r\n                        kNumElements);\r\n    }\r\n  }\r\n}\r\n\r\nstatic void RandomCompareMemcmpAligned(benchmark::State& state) {\r\n  RandomCompare<false, true>(state);\r\n}\r\nstatic void RandomCompareMemcmpUnaligned(benchmark::State& state) {\r\n  RandomCompare<false, false>(state);\r\n}\r\nstatic void RandomCompareCast(benchmark::State& state) {\r\n  RandomCompare<true, true>(state);\r\n}\r\n```\r\n\r\nResults:\r\n\r\n```\n\r\n-----------------------------------------------------------------------\r\nBenchmark                             Time             CPU   Iterations\r\n-----------------------------------------------------------------------\r\nRandomCompareMemcmpAligned         9593 ns         9592 ns        67730\r\nRandomCompareMemcmpUnaligned      10189 ns        10187 ns        65334\r\nRandomCompareCast                  9103 ns         9102 ns        81895\r\n```\r\n\r\nNow, I am sure there is some alternative that can be devised, that is both safe and performant.  However, this seems a burden.  It's a burden to develop safe algorithms.  It's a burden to ensure that we unit test thoroughly enough (e.g. fuzz with random unaligned buffers) to avoid segmentation fault.  If someone is willing to doing this work then I'm happy to consider an alternative proposal.  However, I'd rather see more development, in a safe fashion, by manually aligning buffers, than spend time supporting a use case that it is not clear has a solid need (e.g. it seems we can fix this particular case and, even if we can't, does the performance hit of forced-alignment matter in this case?)."
        },
        {
            "created_at": "2022-10-21T17:38:51.640Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17622379) by Antoine Pitrou (apitrou):*\nThe idiomatic way to work around the alignment issue is to use `memcpy`. We have dedicated functions for that:\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/util/ubsan.h\r\n\r\nNote that modern CPUs don't mind unaligned loads of scalar types. It's just that it's UB in C/C++.\r\n"
        },
        {
            "created_at": "2022-10-21T17:53:09.396Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17622388) by Weston Pace (westonpace):*\nDo the compute kernels all have tests to verify that they work correctly on unaligned buffers?  I'm not trying to be stubborn here but I haven't been very involved in the development of the compute kernels and honestly don't know."
        },
        {
            "created_at": "2022-10-21T17:57:45.366Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17622393) by Antoine Pitrou (apitrou):*\nUnfortunately not. It would actually be a good idea to add generic checks for this (at least for those kernels whose tests use the generic check functions)."
        },
        {
            "created_at": "2022-10-21T18:49:01.742Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17783?focusedCommentId=17622416) by Weston Pace (westonpace):*\nLet's leave this open then.  I'm going to unassign it from myself.  At the moment, supporting this use case is not a high priority for me personally, mainly because I'm not aware of a real need.  If someone wants to take this work up and help maintain it then I'm happy to review their work.  Or if someone has a case where they absolutely need to work with unaligned buffers and can't afford the cost to force alignment then they are welcome to mention it here."
        }
    ]
}