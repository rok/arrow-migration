{
    "issue": {
        "title": "[CI] Trigger GitHub Action cron workflows on demand",
        "body": "***Note**: This issue was originally created as [ARROW-7203](https://issues.apache.org/jira/browse/ARROW-7203). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe new GitHub Actions workflows in place of Travis-CI are great. So much faster feedback than before. One question we've had since migrating is how should Crossbow and the GHA jobs interact. GHA makes it easy enough to schedule nightly jobs, so we don't really need the Crossbow trickery to get the nightly builds to run. However, we don't yet have a solution for the other way we use Crossbow: triggering builds via PR comments (using ursabot). \r\n\r\nAs it turns out, last week I was at the GitHub Universe conference and spoke to some of the lead devs about our experience and needs. I asked especially about this because the day before, I had debugged and fixed a cron workflow (https://issues.apache.org/jira/browse/ARROW-7164) and struggled with how to test that I had fixed it. (Interestingly, I happened to talk to the dev who was responsible for the action code change that caused our job to start failing.)\r\n\r\nTriggering cron workflows on demand was not a feature they (or at least he) had considered. We brainstormed a few ways we might be able to do it. None of them were simple or clean. Here's what we discussed. See also the [docs](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows) for events that trigger workflows.\r\n\r\nIdeally, we could use the `issue_comment` event to trigger a workflow, just as we do now via ursabot and crossbow. But there are some challenges:\r\n\r\n- We can trigger based on an issue_comment being created, but then we'd have to write some code to parse the payload of the event (in the `github.event` object) and then do things only if the right build name is found. This would meant that for every cron workflow we have, this logic would run every time anyone makes any comment on any issue or PR. That might have some undesirable side effects.\n- The issue_comment event takes the workflow script from the master branch. So if you're testing changes to the workflow yaml itself, you're out of luck.\n- You could work around this by also conditionally running the workflow also if the workflow file itself is changed. \n- Because the event triggers from master, you need to modify the checkout step to checkout a commit/ref. Unfortunately, the commit SHA isn't present in the [event payload](https://developer.github.com/v3/activity/events/types/#issuecommentevent). You could probably parse it out of one of the URLs in the payload, though. Assuming you do, then you probably need to make this behavior conditional on whether you're running from an issue_comment (in which case you parse the event and go with master) or from cron or some other means (in which case you don't want to specify a ref).\n- Think of all of the complexity here, and realize that unless there's some way to package this up into an action or template or something, we have to replicate this for every workflow we want to be able to trigger like this.\n  \n  An alternative strategy would be to use the existing ursabot integration and trigger GitHub workflows from it using a [repository dispatch](https://developer.github.com/v3/repos/#create-a-repository-dispatch-event) event. The repository dispatch event would have an event_type that (somehow?) we would map to the workflow, and then in the client_payload we could include any additional build params. This would have to include the PR number or commit SHA because, just as with issue_comments, the workflow will run from master so we'll need to explicitly checkout something else. The other limitation is that repository dispatch requires an API token with repo write access; fortunately, ursabot already has had to deal with this.\n  \n  A further ursabot-centric approach would extend crossbow to be able to create GHA workflows, and triggering on demand a workflow via crossbow (through ursabot comment bot or otherwise) would essentially copy the workflow to its repository, amending the workflow to checkout the repo and commit and to run on push.\n  \n  In sum, it's not straightforward to do this, and as it stands now, there's a bit of code to write somewhere for this. \n  \n  cc `[~kou]` `[~kszucs]`",
        "created_at": "2019-11-18T19:15:47.000Z",
        "updated_at": "2021-05-21T17:13:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Continuous Integration",
            "Component: Developer Tools",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-05-21T17:13:35.000Z"
    },
    "comments": [
        {
            "created_at": "2019-12-02T21:37:52.427Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7203?focusedCommentId=16986390) by Kouhei Sutou (kou):*\nI came up with an idea:\r\n\r\n1. Add a workflow that responds to `issue_comment` event.\r\n2. The workflow is fired only when the created comment is started with `/build `. (We will be able to use `startsWith`: https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#startswith )\r\n3. If the created comment is `/build linux`, the workflow creates a `build-${PULL_REQUEST_NUMBER}-linux` branch that uses the target pull request as the start point\r\n4. The workflow also adds GitHub Actions result page URL for the created branch as a comment to the target pull request. (We will be able to use `https://github.com/apache/arrow/actions?query=branch%3Abuild-${PULL_REQUEST_NUMBER}-linux` as the GitHub Actions result page URL.)\r\n5. Add a workflow that responds to `pull_request` event's `closed` type.\r\n6. The workflow removes `build-${PULL_REQUEST_NUMBER}-*` branches.\r\n"
        },
        {
            "created_at": "2019-12-02T22:01:47.004Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7203?focusedCommentId=16986416) by Neal Richardson (npr):*\nSounds clever. How does step 3 trigger the build though? It seems like it still has to rewrite the requested workflow to run on that branch on push, not on schedule, right?"
        },
        {
            "created_at": "2019-12-02T23:26:54.074Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7203?focusedCommentId=16986456) by Kouhei Sutou (kou):*\nAh, sorry. I forgot to describe how to implement it.\r\n\r\nWe need to add suitable `on.push.branches` to each workflow. For example, we will have the following `on` and `jobs.${JOB}.if` for `.github/workflows/python_cron.yml`:\r\n\r\n```\n\r\non:\r\n  schedule:\r\n    - cron: |\r\n        0 */12 * * *\r\n  push:\r\n    branches:\r\n      - 'build-*-python-*'\r\n\r\njobs:\r\n  debian:\r\n    if: |\r\n      github.ref == 'master' || endsWith(github.ref, '-python-debian')\r\n  fedora:\r\n    if: |\r\n      github.ref == 'master' || endsWith(github.ref, '-python-fedora')\r\n  downstream:\r\n    if: |\r\n      github.ref == 'master' || endsWith(github.ref, '-python-downstream')\r\n```"
        },
        {
            "created_at": "2019-12-03T00:50:48.328Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7203?focusedCommentId=16986479) by Neal Richardson (npr):*\nCool. IMO it's worth a try."
        },
        {
            "created_at": "2021-05-21T14:14:55.176Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7203?focusedCommentId=17349285) by Krisztian Szucs (kszucs):*\n`[~npr]` We have removed the cron jobs from GHA in favor of the crossbow nightlies which can be triggered on-demand. Can we close this issue?"
        }
    ]
}