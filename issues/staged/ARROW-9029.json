{
    "issue": {
        "title": "[C++] Implement BitBlockCounter interface for blockwise popcounts of validity bitmaps",
        "body": "***Note**: This issue was originally created as [ARROW-9029](https://issues.apache.org/jira/browse/ARROW-9029). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn analytics, it is common for data to be all not-null or mostly not-null. Data with > 50% nulls tends to be more exceptional. In this light, our `BitmapReader` class which allows iteration of each bit in a bitmap can be computationally suboptimal for mostly set validity bitmaps.\r\n\r\nI propose instead a new interface for use in kernel implementations, for lack of a better term `BitmapScanner`. This works as follows:\r\n\r\n- Uses hardware popcount to compute the number of set values in 256 bits at a time (or whatever is the right window size).\n- Code can use the returned \"run\" (length + # of set bits) to switch between nullable/non-nullable code paths\n  \n  For data with a lot of nulls, this may degrade performance somewhat but probably not that much empirically. However, data that is mostly-not-null should benefit from this. \n  \n  This BitmapScanner utility can probably also be used to accelerate the implementation of Filter for mostly-not-null data\n  \n  I tried some other things that were slower (like trying to find the largest consecutive run of all-set words) before doing the simple 256-bit popcount solution.",
        "created_at": "2020-06-03T16:08:24.000Z",
        "updated_at": "2020-06-04T14:15:27.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-06-04T13:30:54.000Z"
    },
    "comments": [
        {
            "created_at": "2020-06-03T18:43:09.978Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9029?focusedCommentId=17125224) by Antoine Pitrou (apitrou):*\nIs this different from the the BitRunReader that's already proposed in <https://github.com/apache/arrow/pull/7143> ?"
        },
        {
            "created_at": "2020-06-04T00:23:35.613Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9029?focusedCommentId=17125426) by Wes McKinney (wesm):*\nWe can compare the patches and decide what to do. Comparing benchmarks is also very important. "
        },
        {
            "created_at": "2020-06-04T00:35:39.222Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9029?focusedCommentId=17125430) by Wes McKinney (wesm):*\nAfter writing this JIRA I wrote an initial implementation which tried to find the longest consecutive run of all-set words. This turned out to be much, much slower than simply running popcount on every word and returning the popcounts 4-words at a time.  I'll rewrite the JIRA to explain what my PR actually does"
        },
        {
            "created_at": "2020-06-04T13:30:54.972Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9029?focusedCommentId=17125923) by Wes McKinney (wesm):*\nIssue resolved by pull request 7346\n<https://github.com/apache/arrow/pull/7346>"
        }
    ]
}