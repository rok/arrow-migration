{
    "issue": {
        "title": "[C++] API add value / null mask buffer accessor to ArrayData",
        "body": "***Note**: This issue was originally created as [ARROW-3478](https://issues.apache.org/jira/browse/ARROW-3478). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, the ArrayData struct has the `std::vector<Buffer> buffers` member.\r\n\r\nThe buffers will (from reading the code) either be\u00a0[null_mask, data] or [data] (if the null mask does not exist).\r\n\r\nI'm not sure if there is an easy way to get the null mask reliably at the moment. If I am understanding correctly, the way to do it right now is to check if the vector has one or two elements, and then use `buffers[0]` as the null mask, and `buffers[1]` as the values.\r\n\r\nI also did not find information regarding this in the spec. So I am not sure if I can rely on this behavior in future versions of the library.\r\n\r\nI am wondering wether adding explicit API for this would make this more reliable.\u00a0\r\n\r\n\u00a0\r\n\r\nFor example two more interface functions\r\n \\* `std::shared_ptr<Buffer> mask()`\r\n \\* `std::shared_ptr<Buffer> values()`\u00a0\r\n\r\nWould make it easy for me to rely on the interface to \"do the right thing\".\r\n\r\n\u00a0\r\n\r\nOr am I missing something?",
        "created_at": "2018-10-09T22:07:04.000Z",
        "updated_at": "2018-10-10T08:32:02.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-10-10T08:32:02.000Z"
    },
    "comments": [
        {
            "created_at": "2018-10-10T08:23:40.078Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3478?focusedCommentId=16644615) by Antoine Pitrou (apitrou):*\n> The buffers will (from reading the code) either be [null_mask, data] or [data] (if the null mask does not exist).\r\n\r\nNo, actually, they will be either:\r\n \\* [null mask, data] if the null mask exists\r\n \\* [nullptr, data] either\r\n\r\nSo you should be able to get the null mask deterministically simply by fetching the first member of the buffers vector.\r\n\r\nHowever, note that the number of buffers for the data itself is type-dependent. Primitive types (e.g. ints, floats...) will use a single buffer, but other types may use more than that."
        },
        {
            "created_at": "2018-10-10T08:31:42.674Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3478?focusedCommentId=16644623) by Wolf Vollprecht (wolfv):*\nThanks! That clarifies it.\u00a0\r\n\r\n\r\nI guess the best way (for my use case) would be to cast to NumericArray<T> and use the API there + the API inherited from PrimitiveArray which seems to\u00a0be enough. I'll close this issue."
        }
    ]
}