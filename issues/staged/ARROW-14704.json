{
    "issue": {
        "title": "[C++] Valgrind failure in parquet-arrow-test",
        "body": "***Note**: This issue was originally created as [ARROW-14704](https://issues.apache.org/jira/browse/ARROW-14704). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n\"Conditional jump or move depends on uninitialised value(s)\"\r\n\r\n[Full log](https://dev.azure.com/ursacomputing/crossbow/_build/results?buildId=15293&view=logs&j=0da5d1d9-276d-5173-c4c4-9d4d4ed14fdb&t=d9b15392-e4ce-5e4c-0c8c-b69645229181)\r\n```\n\r\n[----------] 3 tests from TestArrowReadDeltaEncoding\r\n[ RUN \u00a0 \u00a0 \u00a0] TestArrowReadDeltaEncoding.DeltaBinaryPacked\r\n[ \u00a0 \u00a0 \u00a0 OK ] TestArrowReadDeltaEncoding.DeltaBinaryPacked (812 ms)\r\n[ RUN \u00a0 \u00a0 \u00a0] TestArrowReadDeltaEncoding.DeltaByteArray\r\n==12587== Conditional jump or move depends on uninitialised value(s)\r\n==12587== \u00a0 \u00a0at 0x4F12C57: Advance (bit_stream_utils.h:426)\r\n==12587== \u00a0 \u00a0by 0x4F12C57: parquet::(anonymous namespace)::DeltaBitPackDecoder<parquet::PhysicalType<(parquet::Type::type)1> >::GetInternal(int*, int) (encoding.cc:2216)\r\n==12587== \u00a0 \u00a0by 0x4F13823: Decode (encoding.cc:2091)\r\n==12587== \u00a0 \u00a0by 0x4F13823: parquet::(anonymous namespace)::DeltaByteArrayDecoder::SetData(int, unsigned char const*, int) (encoding.cc:2360)\r\n==12587== \u00a0 \u00a0by 0x4E89EF5: parquet::(anonymous namespace)::ColumnReaderImplBase<parquet::PhysicalType<(parquet::Type::type)6> >::InitializeDataDecoder(parquet::DataPage const&, long) (column_reader.cc:797)\r\n==12587== \u00a0 \u00a0by 0x4E9AE63: ReadNewPage (column_reader.cc:614)\r\n==12587== \u00a0 \u00a0by 0x4E9AE63: HasNextInternal (column_reader.cc:576)\r\n==12587== \u00a0 \u00a0by 0x4E9AE63: parquet::internal::(anonymous namespace)::TypedRecordReader<parquet::PhysicalType<(parquet::Type::type)6> >::ReadRecords(long) (column_reader.cc:1228)\r\n==12587== \u00a0 \u00a0by 0x4DFB19F: parquet::arrow::(anonymous namespace)::LeafReader::LoadBatch(long) (reader.cc:467)\r\n==12587== \u00a0 \u00a0by 0x4DF513C: parquet::arrow::ColumnReaderImpl::NextBatch(long, std::shared_ptr<arrow::ChunkedArray>*) (reader.cc:108)\r\n==12587== \u00a0 \u00a0by 0x4DFB74D: parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadColumn(int, std::vector<int, std::allocator<int> > const&, parquet::arrow::ColumnReader*, std::shared_ptr<arrow::ChunkedArray>*) (reader.cc:273)\r\n==12587== \u00a0 \u00a0by 0x4E11FDA: operator() (reader.cc:1180)\r\n==12587== \u00a0 \u00a0by 0x4E11FDA: arrow::Future<std::vector<std::shared_ptr<arrow::ChunkedArray>, std::allocator<arrow::Future> > > arrow::internal::OptionalParallelForAsync<parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, arrow::internal::Executor*)::{lambda(unsigned long, std::shared_ptr<parquet::arrow::ColumnReaderImpl>)#1}&, std::shared_ptr<parquet::arrow::ColumnReaderImpl>, std::shared_ptr<arrow::ChunkedArray> >(bool, std::vector<std::shared_ptr<parquet::arrow::ColumnReaderImpl>, std::allocator<arrow::Future<std::vector<std::shared_ptr<arrow::ChunkedArray>, std::allocator<arrow::Future> > > > >, parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, arrow::internal::Executor*)::{lambda(unsigned long, std::shared_ptr<parquet::arrow::ColumnReaderImpl>)#1}&, arrow::internal::Executor*) (parallel.h:95)\r\n==12587== \u00a0 \u00a0by 0x4E126A9: parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, arrow::internal::Executor*) (reader.cc:1198)\r\n==12587== \u00a0 \u00a0by 0x4E12F50: parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadRowGroups(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::shared_ptr<arrow::Table>*) (reader.cc:1160)\r\n==12587== \u00a0 \u00a0by 0x4DFA2BC: parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadTable(std::vector<int, std::allocator<int> > const&, std::shared_ptr<arrow::Table>*) (reader.cc:198)\r\n==12587== \u00a0 \u00a0by 0x4DFA392: parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadTable(std::shared_ptr<arrow::Table>*) (reader.cc:289)\r\n==12587== \u00a0 \u00a0by 0x1DCE62: parquet::arrow::TestArrowReadDeltaEncoding::ReadTableFromParquetFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<arrow::Table>*) (arrow_reader_writer_test.cc:4174)\r\n==12587== \u00a0 \u00a0by 0x2266D2: parquet::arrow::TestArrowReadDeltaEncoding_DeltaByteArray_Test::TestBody() (arrow_reader_writer_test.cc:4209)\r\n==12587== \u00a0 \u00a0by 0x4AD2C9B: void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2607)\r\n==12587== \u00a0 \u00a0by 0x4AC9DD1: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\r\n==12587== \u00a0 \u00a0by 0x4AA4C02: testing::Test::Run() (gtest.cc:2682)\r\n==12587== \u00a0 \u00a0by 0x4AA563A: testing::TestInfo::Run() (gtest.cc:2861)\r\n==12587== \u00a0 \u00a0by 0x4AA600F: testing::TestSuite::Run() (gtest.cc:3015)\r\n==12587== \u00a0 \u00a0by 0x4AB631B: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\r\n==12587== \u00a0 \u00a0by 0x4AD3CE7: bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2607)\r\n==12587== \u00a0 \u00a0by 0x4ACB063: bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2643)\r\n==12587== \u00a0 \u00a0by 0x4AB47B6: testing::UnitTest::Run() (gtest.cc:5438)\r\n==12587== \u00a0 \u00a0by 0x4218918: RUN_ALL_TESTS() (gtest.h:2490)\r\n==12587== \u00a0 \u00a0by 0x421895B: main (gtest_main.cc:52)\r\n```",
        "created_at": "2021-11-12T20:10:46.000Z",
        "updated_at": "2021-11-18T12:31:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-11-18T09:03:05.000Z"
    },
    "comments": [
        {
            "created_at": "2021-11-18T09:03:05.357Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14704?focusedCommentId=17445756) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 11725\n<https://github.com/apache/arrow/pull/11725>"
        }
    ]
}