{
    "issue": {
        "title": "[Gandiva] Add a string based expression parser",
        "body": "***Note**: This issue was originally created as [ARROW-3458](https://issues.apache.org/jira/browse/ARROW-3458). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nGandiva currently supports a tree-based expression builder. This requires writing a lot of code for even simple expressions.\r\n\r\nFor eg. to build an expression for \"a + b < 10\", the code is :\r\n```java\n\r\n   // schema for input fields\r\n  auto field0 = field(\"a\", int32());\r\n  auto field1 = field(\"b\", int32());\r\n  auto schema = arrow::schema({field0, field1});\r\n\r\n  // output fields\r\n  auto field_result = field(\"res\", boolean());\r\n\r\n  // Build expression\r\n  auto node_f0 = TreeExprBuilder::MakeField(field0);\r\n  auto node_f1 = TreeExprBuilder::MakeField(field1);\r\n  auto literal_10 = TreeExprBuilder::MakeLiteral(10);\r\n  auto sum_expr =\r\n      TreeExprBuilder::MakeFunction(\"add\", {node_f0, node_f1}, int32());\r\n  auto lt_expr =\r\n      TreeExprBuilder::MakeExpression(\"less_than\", {sum_expr, literal_10}, field_result);\r\n\r\n```\r\nAn alternate way to do this would be :\r\n\r\n\u00a0\r\n```java\n\r\n// Build expression\r\nauto expr = StringExprBuilder::MakeExpression(schema, \"a + b < 10\", field_result);\r\n```\r\nThe expression syntax should be close to that of SQL.\r\n\r\n\u00a0\r\n\r\nTo begin with, this'll simplify writing tests. And, it will provide an easier api to work with gandiva.",
        "created_at": "2018-10-08T07:25:18.000Z",
        "updated_at": "2022-07-12T14:04:26.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: C++ - Gandiva",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2018-10-08T08:01:32.237Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3458?focusedCommentId=16641488) by Wes McKinney (wesm):*\ncc `[~cpcloud]` `[~pitrou]` in case of interest"
        },
        {
            "created_at": "2018-10-31T07:24:09.005Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3458?focusedCommentId=16669695) by Praveen Krishna (praveen_krishna):*\nSo for creating a string based expression parser can we use antlr for parser generation ?\r\n\r\nCan we have two separate implementations both in C and Java or Have an implementation in C and a Java binding for the same ?\r\n\r\n`[~pravindra]` `[~wesmckinn]` Your insights on this ?"
        },
        {
            "created_at": "2018-10-31T07:41:29.174Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3458?focusedCommentId=16669708) by Pindikura Ravindra (pravindra):*\n> So for creating a string based expression parser can we use antlr for parser generation ?\r\n\r\nyes.\r\n\r\n> Can we have two separate implementations both in C and Java or Have an implementation in C and a Java binding\r\n\r\n> for the same ?\r\n\r\nIMO - If we do in C++ first, it'll be usable from c and python too."
        },
        {
            "created_at": "2022-07-12T14:04:26.354Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3458?focusedCommentId=17565609) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}