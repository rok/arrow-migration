{
    "issue": {
        "title": "[Format][C++] Add \"LargeList\" type with 64-bit offsets",
        "body": "***Note**: This issue was originally created as [ARROW-4810](https://issues.apache.org/jira/browse/ARROW-4810). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nMentioned in https://github.com/apache/arrow/issues/3845",
        "created_at": "2019-03-08T15:17:21.000Z",
        "updated_at": "2019-08-01T03:37:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-08-01T03:37:31.000Z"
    },
    "comments": [
        {
            "created_at": "2019-03-08T18:25:53.585Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16788150) by Maarten Breddels (maartenbreddels):*\n> Having arrays with > 2GB elements or binary arrays with > 2GB of data would be considered an anti-pattern in the context of database systems, regardless of whether the offsets are 32- or 64-bit. So in light of these it doesn't make sense to have the default type be 64-bit capable if this capability is seldom used\r\n\r\nI agree it's not the best idea, but people will find a reason to do it, and since there will not be a straightforward workaround, it may spin off another 'standard' :)\r\n\r\nBut, since allow/supporting it will solve both issues (>2GB elements, and less code complexity) I thought I would mention that as well.\r\n\r\n\u00a0\r\n\r\nAs far as the implementation, are you thinking about a new class (apart from ArrayList), or does it seem feasible to include a type for the value_offsets?"
        },
        {
            "created_at": "2019-03-08T18:26:55.655Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16788155) by Wes McKinney (wesm):*\nYes, we'd want a separate container type, e.g. `LargeListArray`"
        },
        {
            "created_at": "2019-03-08T18:34:33.928Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16788160) by Maarten Breddels (maartenbreddels):*\nI see\u00a0BinaryArray/StringArray classes have similar implementation, the same holds for that, create a Large(Binary/String)Array?"
        },
        {
            "created_at": "2019-03-08T19:43:23.872Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16788240) by Wes McKinney (wesm):*\nYes \u2013 there's a fair bit of boilerplate to consider. If we don't care about IPC roundtrips for the time being then changes to the metadata specification can be addressed separately (https://github.com/apache/arrow/blob/master/format/Schema.fbs)"
        },
        {
            "created_at": "2019-03-09T02:12:48.165Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16788448) by Francois Saint-Jacques (fsaintjacques):*\nI'm not a afan of multiplying types, have we studied adding parameter to the existing type?"
        },
        {
            "created_at": "2019-03-10T17:49:26.415Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16788994) by Jacques Nadeau (jnadeau):*\nI'm -1 on\u00a0this (and any format change)\u00a0unless there are first class implementations in both Java and C++.\u00a0I think it is important to avoid having features that are only in one our reference implementations."
        },
        {
            "created_at": "2019-03-10T22:12:19.695Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16789043) by Wes McKinney (wesm):*\nYes, I agree we should create an implementation for Java as well. Having to support 64-bit offsets is inevitable, but we should not accumulate technical debt by failing to create multiple reference implementations"
        },
        {
            "created_at": "2019-03-11T05:27:03.632Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16789169) by Philipp Moritz (pcmoritz):*\nI agree that\u00a0we should have a reference implementation in both C++ and Java.\u00a0Is there anybody who can help with this? I don't personally have the expertise to do it unfortunately (and would also like to avoid this becoming a zombie project like\u00a0https://issues.apache.org/jira/browse/ARROW-1692)."
        },
        {
            "created_at": "2019-03-13T09:52:51.310Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16791521) by Micah Kornfield (emkornfield@gmail.com):*\nHow does this reconcile with other 32 bit length  limitations in the standard.  I hacked a quick and dirty proof of concept in Java, but ran into the issue of a lot of APIs assuming int instead on long?"
        },
        {
            "created_at": "2019-03-14T05:53:52.244Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16792367) by Micah Kornfield (emkornfield@gmail.com):*\nI see Message.fbs got updated 2-years ago to use 64-bit bit ints throughout.\u00a0 But the layout still lists 32 bit ints.\u00a0 This resolves my question I think."
        },
        {
            "created_at": "2019-08-01T03:37:31.195Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4810?focusedCommentId=16897729) by Micah Kornfield (emkornfield@gmail.com):*\nIssue resolved by pull request 4969\n<https://github.com/apache/arrow/pull/4969>"
        }
    ]
}