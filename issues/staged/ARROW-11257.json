{
    "issue": {
        "title": "[C++][Parquet] PyArrow Table contains different data after writing and reloading from Parquet",
        "body": "***Note**: This issue was originally created as [ARROW-11257](https://issues.apache.org/jira/browse/ARROW-11257). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n- I'm loading a JSONlines object into a table using\u00a0\n  ```java\n  \n  pa.json.readjson\n  ```\n  It contains one column that is a nested dictionary.\n   \\* I select a row by key and inspect its nested dictionary.\n   \\* I write the table to parquet\u00a0\n   \\* I load the table again from the parquet file\u00a0\n   \\* I check the same key and the nested dictionary is not the same.\n  \n  \u00a0\n  \n  To reproduce:\n  \n  \u00a0\n  \n  Find the attached JSONLines file and Jupyter Notebook. \n  \n  The json file contains entries per customer with a generated `msisdn`, `scoring_request_id` and `scorecard_result` object. Each `scorecard result consists of a list of feature objects, all with the value the same as the msidn` and a score.\n  \n  The notebook reads the file and demonstrates the issue.\n  \n  \u00a0",
        "created_at": "2021-01-15T07:42:01.000Z",
        "updated_at": "2021-01-19T20:39:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-01-19T20:39:42.000Z"
    },
    "comments": [
        {
            "created_at": "2021-01-15T09:04:24.128Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11257?focusedCommentId=17265841) by Joris Van den Bossche (jorisvandenbossche):*\n[~kari_s] thanks for the reproducible example!\r\n\r\nRunning your notebook with pyarrow 2.0.0, I indeed see a different result of the selected entry after parquet roundtrip. \r\nBut when trying it with pyarrow master, I _think_ it is solved (it's a complex structure, so I might be missing something, but at least it looks better / correct now). There have been a few fixes in master compared to 2.0.0 related to reading/writing such heavily nested data with parquet (which was new in pyarrow 2.0.0). \r\n\r\nCould you try out the latest pyarrow version, and verify it is indeed fixed? That would be very helpful. \r\nYou can install the nightly version both with pip or conda-forge (see https://arrow.apache.org/docs/python/install.html#installing-nightly-packages for instructions)\r\n\r\ncc `[~emkornfield]` this is a nice example for (quite real-world I assume) nested data with several mixtures of structs and lists. The schema looks like:\r\n\r\n```Java\n\r\npyarrow.Table\r\nmsisdn: string\r\nscoring_request_id: string\r\nscorecard_result: struct<feature_values: list<item: struct<feature: struct<id: string, implementation_id: string>, missing: bool, value: string>>, score: double>\r\n  child 0, feature_values: list<item: struct<feature: struct<id: string, implementation_id: string>, missing: bool, value: string>>\r\n      child 0, item: struct<feature: struct<id: string, implementation_id: string>, missing: bool, value: string>\r\n          child 0, feature: struct<id: string, implementation_id: string>\r\n              child 0, id: string\r\n              child 1, implementation_id: string\r\n          child 1, missing: bool\r\n          child 2, value: string\r\n  child 1, score: double\r\n```\r\n\r\nIt might still be worth adding such examples as test cases? (in either the python or C++ tests)\r\n"
        },
        {
            "created_at": "2021-01-15T09:09:28.614Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11257?focusedCommentId=17265844) by Kari Schoonbee (kari_s):*\nThanks for the quick feedback Joris! I will check again with master and get back to you :)"
        },
        {
            "created_at": "2021-01-18T12:06:54.950Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11257?focusedCommentId=17267198) by Kari Schoonbee (kari_s):*\n<font color=\"#172b4d\">Hey Joris. Do we know what caused the bug? I'm a bit worried as this has led to data corruption in production for us and it's possible that it has affected others without them being aware. And when is the next release containing the update scheduled for?</font>"
        },
        {
            "created_at": "2021-01-18T21:03:31.814Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11257?focusedCommentId=17267527) by Joris Van den Bossche (jorisvandenbossche):*\nI am not really sure what the exact bug was, but ARROW-10493 was one of the nested-parquet-related bugs reported after pyarrow 2.0.0 (note that the ability to write the data you have was new in 2.0.0)\r\n\r\n> And when is the next release containing the update scheduled for?\r\n\r\nThere is a release candidate out right now. So if all goes well by the end of this week.\r\n\r\n"
        },
        {
            "created_at": "2021-01-19T16:05:58.851Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11257?focusedCommentId=17267998) by Kari Schoonbee (kari_s):*\nThanks Joris, that is great. I'll keep an eye out.\r\n\r\nI can also add that doing the parquet round-trip using `pyspark==3.0.0` works using `data_frame.write.parquet()`"
        },
        {
            "created_at": "2021-01-19T20:38:45.399Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11257?focusedCommentId=17268209) by Joris Van den Bossche (jorisvandenbossche):*\nOK, will close this as fixed / a duplicate of ARROW-10493 then. Thanks again for the report"
        }
    ]
}