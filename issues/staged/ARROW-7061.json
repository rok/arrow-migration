{
    "issue": {
        "title": "[C++][Dataset] FileSystemDiscovery with ParquetFileFormat should ignore files that aren't Parquet",
        "body": "***Note**: This issue was originally created as [ARROW-7061](https://issues.apache.org/jira/browse/ARROW-7061). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI got `Invalid parquet file. Corrupt footer.` trying to read real data. Turned out it was because I had opened the directory in macOS Finder and it had added the junk .DS_Store files. Once I deleted them, the Dataset created fine. \r\n\r\nIf we're creating a DataSource with Parquet files, we should ignore any non-Parquet files we encounter when scanning.",
        "created_at": "2019-11-04T23:11:54.000Z",
        "updated_at": "2020-04-10T15:32:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-11-15T20:08:38.000Z"
    },
    "comments": [
        {
            "created_at": "2019-11-05T13:10:49.741Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7061?focusedCommentId=16967516) by Francois Saint-Jacques (fsaintjacques):*\nI started adding features to fs::Selector, notably max depth recursion,\u00a0 I intended to add a filter function option to the selector but `[~apitrou]` \u00a0objected lightly, arguing that if this is desired, the user could filter the explicit list of FileStats returned by the selector. My intention was that `fs::Selector` could mimick the powerful and ubiquitious [find(1)\\|[http://man7.org/linux/man-pages/man1/find.1.html]]\u00a0selection interface.\r\n\r\nHence, this is why FileSystemDataSourceDiscovery supports both option (an explicit list of FileStats or a Selector).\r\n\r\nIdeally, we want the \"it-just-works\" feeling, some suggestions:\r\n \\* Detect failures early, e.g. in `FileSystemBasedDataSource::Make` should we scan all files and detect if they can be parsed by the format driver? How should we propagate the failure, ignore file and warn, or abort via failure? The failure to parse the file is implicitly done by `Inspect` call.\r\n \\* Should we filter by file extension by default (if the user is passing a Selector and not an explicit list of FileStats). At first it seems very convenient, but it can lead to situation of silently ignoring important files just because of implicit naming convention.\r\n \\* Should we settle that the `Selector` constructor is the it-just-works route, and the explicit vector<FileStats> is the power user route?\u00a0"
        },
        {
            "created_at": "2019-11-05T14:56:52.298Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7061?focusedCommentId=16967584) by Neal Richardson (npr):*\nI'm not necessarily sure this needs to be about the Selector class's functionality. My current problem can be solved without filtering by file extension--for Parquet, doesn't the file start with a magic byte/number? When inspecting Parquet files, ignore files that aren't Parquet. \r\n\r\nSure, it gets tricker when you add CSV, and maybe then you want to filter by file extension. \r\n\r\nStepping back, if using Selector doesn't just-work in some form, if the only way I can guarantee that the discovery class won't choke is to walk the file system myself first and verify that all files are Parquet files, then there's no reason to ever use it--I'd always send an explicit list of files. So I think the Selector path needs to be a bit smarter. But whether or not that requires adding features to fs::Selector, I don't have an opinion on that."
        },
        {
            "created_at": "2019-11-05T17:44:55.631Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7061?focusedCommentId=16967716) by Wes McKinney (wesm):*\nSee \r\n\r\nhttps://github.com/apache/arrow/blob/master/python/pyarrow/parquet.py#L863\r\n\r\nI think you should automatically exclude files starting with \".\" or \"_\" from consideration by default"
        },
        {
            "created_at": "2019-11-15T20:08:38.468Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7061?focusedCommentId=16975372) by Ben Kietzman (bkietz):*\nIssue resolved by pull request 5811\n<https://github.com/apache/arrow/pull/5811>"
        }
    ]
}