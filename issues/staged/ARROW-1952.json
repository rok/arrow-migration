{
    "issue": {
        "title": "[JS] 32b dense vector coercion",
        "body": "***Note**: This issue was originally created as [ARROW-1952](https://issues.apache.org/jira/browse/ARROW-1952). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nJS APIs, for better or worse, is quite 32b centric. Currently, JS Arrow does a good job of information-preserving flattening, e.g., 64i vector into an array of [hi, lo] int32s.  Something similar for timestamps. ... However .... in getting some Arrow code to load into a legacy system, I'm finding myself to be writing a _lot_ of lossy flatteners in userland.  Doing it there seems brittle, error-prone, incurs friction for adoption, and if put in the core lib, enable reuse across libs.\r\n\r\nI can imagine at least 2 reasonable interfaces for this:\r\n(1) 64b Vector -> 32b flat array (typed or otherwise). This is the naive, simple thing.\r\n(2) 64b Vector -> 32b Vector , and reuse whatever 32b vector -> flat array logic will available anyways. This helps stay in the symbolic abstraction longer, so may be smarter.\r\n\r\nThoughts?\r\n",
        "created_at": "2017-12-28T03:33:27.000Z",
        "updated_at": "2018-03-07T16:21:08.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-02-02T02:01:04.000Z"
    },
    "comments": [
        {
            "created_at": "2017-12-28T03:47:21.272Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1952?focusedCommentId=16305023) by Leo Meyerovich (lmeyerov):*\n(Discussion happening w/ Paul around this, so more for documentation)"
        },
        {
            "created_at": "2018-01-02T15:35:46.217Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1952?focusedCommentId=16308244) by Brian Hulette (bhulette):*\n`[~lmeyerov]` agreed that this is something we should address somehow, we definitely want the API to be easy to pick up.\r\n\r\n[~paul.e.taylor] and I had a relevant discussion regarding accessors for Vectors like Int64. We decided that `Vector.get(idx)` should always return the most basic data types possible without asserting any specific wrapper class or conversion (like the \\[hi, lo\\] array for Int64). If we want to add any other specialized accessors, they can follow a `get<Special>(idx)` convention (sort of like [`DictionaryVector.getKey(idx)`](https://github.com/apache/arrow/blob/master/js/src/vector/dictionary.ts#L34)}})).\r\nThat way users can always extend the Vector classes to add their own specialized accessors, and we could also add our own specialized accessors for convenience, like `Int64Vector.getBigInt(idx)` which uses some BigInteger class and/or `Int64Vector.getLow(idx)` which returns just the lo bits.\r\n\r\nAll of that being said, I like your idea of elevating those specialized accessors to the vector level (#2). What would the API look like? Perhaps a method like `Int64Vector.asInt32()`, or `Int32Vector.from()` that returns a Vector with a `get(idx)` accessor that returns low bits?\r\n\r\n\r\n(After re-reading your initial description I _think_ you may be suggesting a Vector that accesses the hi/lo bits consecutively, rather than just the lo bits for each value as I initially thought (i.e. `.get(0)` returns 0's hi bits, `.get(1)` returns 0's lo bits, etc...). Either way, I like the model of doing this type of conversion at the Vector level.)"
        },
        {
            "created_at": "2018-01-03T10:46:13.764Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1952?focusedCommentId=16309460) by Leo Meyerovich (lmeyerov):*\nRE:symbolic, the idea would be to enable equational reasoning, like my64.as32().as64() == my64. And yes, this can be achieved by changing the wrapper around the same base buffer, w/ diff wrappers having diff accessors. \r\n\r\nThere are a variety of ways to do it, but the key is not doing a strict evaluation. However, there is difference between a dynamic value coercion and a static data representation cast, and both have their place. The trigger for this thread was streamlining the 64b->32b (or Number) for easier JS interop.\r\n\r\nFYI, interesting related effort w/ related API issues: https://github.com/tc39/proposal-bigint/pull/106\r\n\r\n\r\n\r\n"
        },
        {
            "created_at": "2018-02-02T02:01:04.643Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1952?focusedCommentId=16349654) by Paul Taylor (paul.e.taylor):*\nresolved in\u00a0<https://github.com/apache/arrow/pull/1482>"
        }
    ]
}