{
    "issue": {
        "title": "[Rust] Boolean AND/OR kernels should follow sql behaviour regarding null values",
        "body": "***Note**: This issue was originally created as [ARROW-11973](https://issues.apache.org/jira/browse/ARROW-11973). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe AND/OR boolean kernels currently have the same null handling as other binary expressions, if either the left or right input is NULL then the result will be NULL. The standard sql behaviour is different:\r\n\r\nOR: If one input is TRUE then the result will be TRUE even if the other input is NULL\r\n\r\nAND: If one input is FALSE then the result will be FALSE regardless of the other input\r\n\r\nThis behaviour makes sense if you think of NULL as meaning UNKNOWN.",
        "created_at": "2021-03-16T08:21:22.000Z",
        "updated_at": "2021-03-30T12:26:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-03-30T12:25:30.000Z"
    },
    "comments": [
        {
            "created_at": "2021-03-16T08:26:49.497Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11973?focusedCommentId=17302318) by J\u00f6rn Horstmann (jhorstmann):*\n`[~alamb]` `[~andygrove]` FYI and do you think anyone relies on the current behaviour?"
        },
        {
            "created_at": "2021-03-16T13:05:13.481Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11973?focusedCommentId=17302499) by Andrew Lamb (alamb):*\n`[~jhorstmann]` I prefer to follow SQL whenever possible. The other thing we should review is consistency with the Arrow C++ kernels. I am supportive of making the Rust implementation more consistent with one / both of them "
        },
        {
            "created_at": "2021-03-16T13:52:24.950Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11973?focusedCommentId=17302542) by Joris Van den Bossche (jorisvandenbossche):*\n> The other thing we should review is consistency with the Arrow C++ kernels.\r\n\r\nIn C++, both options are available as different kernels: \"or\" and \"or_kleene\", etc"
        },
        {
            "created_at": "2021-03-22T07:40:52.137Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11973?focusedCommentId=17305950) by Jorge Leit\u00e3o (jorgecarleitao):*\n\u00a0\r\n\r\nI agree with having two kernels on the Rust crate and offer the SQL-compliant implementation on the DataFusion side.\r\n\r\nIn general I prefer to not have to follow a specific compliance on the arrow crate, and defer these to any engine that follows a query specification."
        },
        {
            "created_at": "2021-03-22T18:59:03.267Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11973?focusedCommentId=17306498) by Dani\u00ebl Heres (Dandandan):*\nIn PostgreSQL (the dialect we target) the default is what we currently have implemented.\r\n\r\nSELECT TRUE AND NULL;\r\n> NULL\r\nSELECT TRUE OR NULL;\r\n> NULL\r\n\r\nI am all for having optionally different implementations in Arrow (for supporting different semantics / systems) though - but for DataFusion side it makes sense to think about what kind of behavior we want?\r\nI think kleene could be somewhat more efficient in some cases - as it could short-circuit / doesn't need to check for possible NULLs."
        },
        {
            "created_at": "2021-03-30T12:25:30.082Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11973?focusedCommentId=17311479) by Andrew Lamb (alamb):*\nIssue resolved by pull request 9772\n<https://github.com/apache/arrow/pull/9772>"
        }
    ]
}