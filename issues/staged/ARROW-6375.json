{
    "issue": {
        "title": "[C++] Extend ConversionTraits to allow efficiently appending list values in STL API",
        "body": "***Note**: This issue was originally created as [ARROW-6375](https://issues.apache.org/jira/browse/ARROW-6375). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI was trying to benchmark performances of using array builders vs. STL API for converting some row data to arrow tables. I realized it is\u00a0around 1.5-1.8 times slower to convert `std::vector` values with STL API than doing so with builder API. It appears this is primarily due to appending rows via `...::Append` method by iterating over `ConversionTrait<std::vector<...>>::AppendRow` for each value.\r\n\r\nCalling `...::AppendValues` would make it more efficient, however, `ConversionTraits` doesn't offer a way for appending more than one cells (`AppendRow` takes a builder and a single cell as its parameters).\r\n\r\nWould it be possible to extend conversion traits with an optional method `AppendRows(Builder, Cell*, size_t),` which allows template specialization to efficiently append multiple cells at once? In the example above this function would be called with\u00a0`std::vector::data()` and\u00a0`std::vector::size()` if provided. If such method isn't provided by the specialization, current behavior (i.e. iterating over `AppendRow`) can be used as default.\r\n\r\n[This](https://github.com/apache/arrow/blob/e29732be86958e563801c55d3fcd8dc3fe4e9801/cpp/src/arrow/stl.h#L97-L100) is the particular part in code that will be replaced in practice. Instead of directly calling AppendRow in a for loop, a public helper function (e.g. `stl::AppendRows`) can be provided, in which it implements above logic.",
        "created_at": "2019-08-28T15:32:38.000Z",
        "updated_at": "2019-09-12T14:21:09.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-09-12T14:09:55.000Z"
    },
    "comments": [
        {
            "created_at": "2019-08-28T15:57:17.079Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6375?focusedCommentId=16917871) by Antoine Pitrou (apitrou):*\n`[~ozars]` What you're proposing sounds ok on the principle. Would you like to try submitting a PR?"
        },
        {
            "created_at": "2019-08-28T16:12:52.360Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6375?focusedCommentId=16917884) by Omer Ozarslan (ozars):*\n`[~pitrou]` Sure, I will. I'm also opening another issue about extending STL API for rowwise conversion in general."
        },
        {
            "created_at": "2019-09-12T14:09:55.752Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6375?focusedCommentId=16928565) by Ben Kietzman (bkietz):*\nIssue resolved by pull request 5336\n<https://github.com/apache/arrow/pull/5336>"
        }
    ]
}