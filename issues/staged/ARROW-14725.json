{
    "issue": {
        "title": "[C++][Compute] Extract Expression simplification passes to an extensible registry",
        "body": "***Note**: This issue was originally created as [ARROW-14725](https://issues.apache.org/jira/browse/ARROW-14725). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrenly, SimplifyWithGuarantee makes a hard-coded set of passes over an input expression. This not ideal for maintenance or extension of built-in simplification passes. Furthermore, it renders optimization of non-built-in function calls awkward or impossible.\r\n\r\nInstead it would be preferable to provide an extensible registry of optimization passes to clarify and regularize addition of new passes.\r\n\r\nLLVM's extensive optimization framework can offer inspiration here:\r\nhttps://llvm.org/docs/WritingAnLLVMPass.html#pass-classes-and-requirements\r\nLLVM passes come with several levels of access and can declare invalidation and pre-requirement relationships with other passes.\r\n\r\nin the case of expression optimization in arrow, even a minimal registry of passes will require at least two types of pass: one which operates given a guarantee like a partition expression and one which operates independently.\r\n\r\nI'm not sure if it makes sense to include cost based optimizations in this registry (currently only rule based optimizations are provided), but I think it's worth mentioning them here at least.",
        "created_at": "2021-11-16T16:10:19.000Z",
        "updated_at": "2022-07-15T15:33:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-01-14T13:30:09.956Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14725?focusedCommentId=17476143) by Krisztian Szucs (kszucs):*\nPostponing to 8.0 since the PR is still in draft status. Feel free to move back if it is expected to land in 7.0"
        },
        {
            "created_at": "2022-07-15T15:32:22.234Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14725?focusedCommentId=17567294) by Neal Richardson (npr):*\nThis issue has been inactive for 3 months, so it has been unassigned and marked as unstarted. If you are still working on this, feel free to reassign yourself and resume progress."
        }
    ]
}