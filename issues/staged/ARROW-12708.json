{
    "issue": {
        "title": "[C++] Valgrind errors when calling negate_checked",
        "body": "***Note**: This issue was originally created as [ARROW-12708](https://issues.apache.org/jira/browse/ARROW-12708). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe've started seeing Valgrind in our R tests. I did some digging through the commits and found that these errors started when https://github.com/apache/arrow/commit/0d979bf0cbb10e4977c99a542c266134604e72a5 was merged (ARROW-12575).\r\n\r\nAs far as I know, this is the first use of `negate_checked` in R, so that is the likely culprit, though I haven't been able to match the error outputs to the `negate_checked` code directly.\r\n\r\nHere's the first failure: https://dev.azure.com/ursacomputing/crossbow/_build/results?buildId=4805&view=logs&j=0da5d1d9-276d-5173-c4c4-9d4d4ed14fdb&t=d9b15392-e4ce-5e4c-0c8c-b69645229181&l=2942",
        "created_at": "2021-05-10T14:00:00.000Z",
        "updated_at": "2021-06-11T00:16:16.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-06-11T00:16:16.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-13T21:05:00.470Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17344132) by Jonathan Keane (jonkeane):*\nIf we do have a patch release, we will need to address this before the patch release is made. We could look into disabling the tests that it complains about (on CRAN), but given the number of errors, that would likely be a large number of them."
        },
        {
            "created_at": "2021-05-13T21:26:21.744Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17344142) by Eduardo Ponce (edponce):*\nI agree. I am not able to reproduce any errors for **negate** nor **negate_checked** from the C++/Python side. I did added boilerplate code to support unary arithmetic kernels so I do not think the error is the kernel operation itself. Also, not sure if this may be something in the R bindings. I will sit down tonight and investigate the PR carefully."
        },
        {
            "created_at": "2021-05-13T21:28:12.641Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17344143) by Eduardo Ponce (edponce):*\nI would be curious if the error also occurs if **negate** is used in R instead of **negate_checked**. This might help to narrow down if its a kernel issue or boilerplate issue.\\*\\*"
        },
        {
            "created_at": "2021-05-13T21:57:35.392Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17344151) by Jonathan Keane (jonkeane):*\nTesting that should be as easy as changing <https://github.com/apache/arrow/blob/master/r/R/expression.R#L118>\u00a0to use `negate` and then running the valgrind check (<https://github.com/apache/arrow/blob/master/docker-compose.yml#L1057-L1058)>\r\n\r\nLMK if anything goes wrong in that process \u2014 it should just work, but it's certainly possible for things to go wonky."
        },
        {
            "created_at": "2021-05-13T22:36:50.471Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17344172) by Neal Richardson (npr):*\nWe don't need this for a patch release because ARROW-12575 was merged after 4.0, so this is not a bug in 4.0. "
        },
        {
            "created_at": "2021-05-14T18:41:35.882Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17344815) by Eduardo Ponce (edponce):*\nDuring my investigation I made some observations:\r\n1. These runs make use of multiple threads (Line 1981 of the Azure log), multiple runs trigger the errors in different order (race condition?)\n1. The first error of \"Thread 2\" (Line 1994 of Azure log) corresponds to the use of **FnOnce**\n1. The comments of\u00a0**FnOnce** state that invoking this class with a default constructor will result in a segmentation fault, <https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/functional.h#L87-L93>\n   \n   This brings me to think that adding the unary compute function infrastructure is triggering a previously hidden bug.\n   \n   Again, I am still investigating this."
        },
        {
            "created_at": "2021-05-14T21:37:28.021Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17344891) by Eduardo Ponce (edponce):*\nLooking more carefully at the logs, most Valgrind errors are triggered in functions that make use of a **MemoryPool** of sorts."
        },
        {
            "created_at": "2021-06-10T15:22:19.720Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361025) by Antoine Pitrou (apitrou):*\nDoes this still fail? Can someone post a log of CI test results? The link in the issue description doesn't work anymore."
        },
        {
            "created_at": "2021-06-10T15:45:05.220Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361040) by Mauricio 'Pach\u00e1' Vargas Sep\u00falveda (pachamaltese):*\nhere's the log [valgrind-log-2021-06-10.txt](valgrind-log-2021-06-10.txt) \r\none of the many errors is https://dev.azure.com/ursacomputing/crossbow/_build/results?buildId=6471&view=logs&j=0da5d1d9-276d-5173-c4c4-9d4d4ed14fdb&t=d9b15392-e4ce-5e4c-0c8c-b69645229181&l=3804"
        },
        {
            "created_at": "2021-06-10T15:58:34.272Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361046) by Jonathan Keane (jonkeane):*\n`[~pachamaltese]` did you intend to upload that file somewhere? I don't see it attached to the ticket.\r\n\r\nIt would also be ideal if you could copy/paste the output here (edited to the critical valgrind errors only) so that one doesn't need to click through to another file to see what's going on."
        },
        {
            "created_at": "2021-06-10T16:06:20.730Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361050) by Eduardo Ponce (edponce):*\nIt still fails, I have looked into it but have not been able to find the issue. To give some context, the negative kernel in C++ (ARROW-11950) was resolved by me. This was the first scalar unary kernel so I had to add additional functionality to support it, refer to <https://github.com/apache/arrow/pull/10113>\r\n\r\nAlso, I am curious if the source of this error is due to tests that use \"-NaN\"."
        },
        {
            "created_at": "2021-06-10T16:12:59.481Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361059) by Mauricio 'Pach\u00e1' Vargas Sep\u00falveda (pachamaltese):*\ntrying again, here's the log just for the docker step, which is where the errors appear\r\n [valgrind-log-2021-06-10-docker-step-only.txt](valgrind-log-2021-06-10-docker-step-only.txt) "
        },
        {
            "created_at": "2021-06-10T16:21:25.743Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361065) by Jonathan Keane (jonkeane):*\n`[~pachamaltese]` Are you seeing something problematic in the build step? What's going on there? That's not the important / helpful part of the error. \r\n\r\nHere is an example of the kinds of output you should be looking for (and contributing with these tickets that you make):\r\n\r\n```Java\n\r\n> test_check(\"arrow\", reporter = arrow_reporter)\r\nSystem has not been booted with systemd as init system (PID 1). Can't operate.\r\nFailed to create bus connection: Host is down\r\n==3131== Conditional jump or move depends on uninitialised value(s)\r\n==3131==    at 0x4DA2798: __printf_fphex (printf_fphex.c:215)\r\n==3131==    by 0x4DB8434: printf_positional (vfprintf-internal.c:2072)\r\n==3131==    by 0x4DB9F4C: __vfprintf_internal (vfprintf-internal.c:1733)\r\n==3131==    by 0x4DCF119: __vsnprintf_internal (vsnprintf.c:114)\r\n==3131==    by 0x4982F60: Rvsnprintf_mbcs (errors.c:301)\r\n==3131==    by 0x49885EE: vsignalError (errors.c:1827)\r\n==3131==    by 0x498576A: Rf_errorcall (errors.c:906)\r\n==3131==    by 0xD8E7A12: decltype (((declval<void (*&)(SEXPREC*, char const*, ...)>)())((declval<SEXPREC*&>)(), (declval<char const*&&>)())) cpp11::detail::apply<void (*&)(SEXPREC*, char const*, ...), SEXPREC*&, char const*&&, 0ul, 1ul>(void (*&)(SEXPREC*, char const*, ...), std::tuple<SEXPREC*&, char const*&&>&&, cpp11::detail::index_sequence<0ul, 1ul> const&) (protect.hpp:125)\r\n==3131==    by 0xD8E748E: decltype (((declval<void (*&)(SEXPREC*, char const*, ...)>)())((declval<SEXPREC*&>)(), (declval<char const*&&>)())) cpp11::detail::apply<void (*&)(SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>(void (*&)(SEXPREC*, char const*, ...), std::tuple<SEXPREC*&, char const*&&>&&) (protect.hpp:131)\r\n==3131==    by 0xD8E6999: cpp11::detail::closure<void (SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>::operator()() && (protect.hpp:144)\r\n==3131==    by 0xD8E6112: void cpp11::unwind_protect<cpp11::detail::closure<void (SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>, void>(cpp11::detail::closure<void (SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>&&)::{lambda()#1}::operator()() const (protect.hpp:76)\r\n==3131==    by 0xD8E69F1: SEXPREC* cpp11::unwind_protect<void cpp11::unwind_protect<cpp11::detail::closure<void (SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>, void>(cpp11::detail::closure<void (SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>&&)::{lambda()#1}, void>(cpp11::detail::closure<void (SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>&&)::{lambda(void*)#2}::operator()(void cpp11::unwind_protect<cpp11::detail::closure<void (SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>, void>(cpp11::detail::closure<void (SEXPREC*, char const*, ...), SEXPREC*&, char const*&&>&&)::{lambda()#1}) const (protect.hpp:51)\r\n==3131==  Uninitialised value was created by a stack allocation\r\n==3131==    at 0x4985677: Rf_errorcall (errors.c:898)\r\n==3131== \r\n==3131== Conditional jump or move depends on uninitialised value(s)\r\n==3131==    at 0x4DA27B2: __printf_fphex (printf_fphex.c:215)\r\n==3131==    by 0x4DB8434: printf_positional (vfprintf-internal.c:2072)\r\n\r\n[... many (~ 11045) similar valgrind errors]\r\n\r\n[ FAIL 0 | WARN 6 | SKIP 57 | PASS 3839 ]\r\nWarning message:\r\nIn system(\"timedatectl\", intern = TRUE) :\r\n  running command 'timedatectl' had status 1\r\n> \r\n==3131== \r\n==3131== HEAP SUMMARY:\r\n==3131==     in use at exit: 318,218,757 bytes in 61,489 blocks\r\n==3131==   total heap usage: 3,562,658 allocs, 3,501,169 frees, 2,690,774,195 bytes allocated\r\n==3131== \r\n==3131== LEAK SUMMARY:\r\n==3131==    definitely lost: 0 bytes in 0 blocks\r\n==3131==    indirectly lost: 0 bytes in 0 blocks\r\n==3131==      possibly lost: 0 bytes in 0 blocks\r\n==3131==    still reachable: 318,218,757 bytes in 61,489 blocks\r\n==3131==                       of which reachable via heuristic:\r\n==3131==                         newarray           : 4,264 bytes in 1 blocks\r\n==3131==         suppressed: 0 bytes in 0 blocks\r\n==3131== Reachable blocks (those to which a pointer was found) are not shown.\r\n==3131== To see them, rerun with: --leak-check=full --show-leak-kinds=all\r\n==3131== \r\n==3131== For lists of detected and suppressed errors, rerun with: -s\r\n==3131== ERROR SUMMARY: 11045 errors from 101 contexts (suppressed: 2 from 1)\r\nFound Valgrind errors\r\n```"
        },
        {
            "created_at": "2021-06-10T16:29:17.429Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361070) by Eduardo Ponce (edponce):*\nI am running the following configurations:\r\n \\* using \\***negate**\\* instead of \\***negate_checked**\\*\r\n \\* disabling signed NaN tests\r\n\r\nWill report back as soon as these complete."
        },
        {
            "created_at": "2021-06-10T16:46:52.208Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361076) by Jonathan Keane (jonkeane):*\nThanks"
        },
        {
            "created_at": "2021-06-10T18:41:50.023Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361168) by Antoine Pitrou (apitrou):*\n ARROW-13039 is about the `Rf_errorcall` issues (at least some of them)."
        },
        {
            "created_at": "2021-06-10T18:54:48.392Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361171) by Eduardo Ponce (edponce):*\nUsing the **negate** kernel did not produced an error but **negate_checked** did. The differences in the checked variant is that it emits an invalid status for unsigned integers and applies explicit casts to the signed integral variant."
        },
        {
            "created_at": "2021-06-10T18:56:41.430Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361173) by Eduardo Ponce (edponce):*\nHere is a snippet of the first errors triggerred:\r\n```java\n\r\n==280== Thread 10:\r\n==280== Conditional jump or move depends on uninitialised value(s)\r\n==280==    at 0xE1A041E: arrow::Result<std::shared_ptr<arrow::ArrayData> > arrow::compute::internal::(anonymous namespace)::GetTakeIndicesImpl<arrow::UInt16Type>(arrow::ArrayData const&, arrow::compute::FilterOptions::NullSelectionBehavior, arrow::MemoryPool*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xE1A0E6C: arrow::compute::internal::GetTakeIndices(arrow::ArrayData const&, arrow::compute::FilterOptions::NullSelectionBehavior, arrow::MemoryPool*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xE1A19B8: arrow::compute::internal::(anonymous namespace)::FilterMetaFunction::ExecuteImpl(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDE8A5CF: arrow::compute::MetaFunction::Execute(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDE93BC0: arrow::compute::CallFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDED2011: arrow::compute::Filter(arrow::Datum const&, arrow::Datum const&, arrow::compute::FilterOptions const&, arrow::compute::ExecContext*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA67264: arrow::dataset::FilterSingleBatch(std::shared_ptr<arrow::RecordBatch> const&, arrow::compute::Expression const&, arrow::MemoryPool*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA67662: arrow::Result<std::shared_ptr<arrow::RecordBatch> > arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >::Next<arrow::MapIterator<arrow::dataset::FilterRecordBatch(arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >, arrow::compute::Expression, arrow::MemoryPool*)::{lambda(std::shared_ptr<arrow::RecordBatch>)#1}, std::shared_ptr<arrow::RecordBatch>, std::shared_ptr<arrow::RecordBatch> > >(void*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA67EF2: arrow::Result<std::shared_ptr<arrow::RecordBatch> > arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >::Next<arrow::MapIterator<arrow::dataset::ProjectRecordBatch(arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >, arrow::compute::Expression, arrow::MemoryPool*)::{lambda(std::shared_ptr<arrow::RecordBatch>)#1}, std::shared_ptr<arrow::RecordBatch>, std::shared_ptr<arrow::RecordBatch> > >(void*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA5E564: arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >::ToVector() (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA5E7E2: arrow::internal::FnOnce<void ()>::FnImpl<arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Callback<arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Then<arrow::dataset::FilterAndProjectScanTask::SafeExecute(arrow::internal::Executor*)::{lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Then<{lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > >({lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}&&) const::{lambda(arrow::Status const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > >(arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Then<{lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > >({lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}&&) const::{lambda(arrow::Status const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Then) const::Callback> >::invoke() (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDF5FE04: arrow::internal::FnOnce<void ()>::operator()() && (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==  Uninitialised value was created by a heap allocation\r\n==280==    at 0x483E0F0: memalign (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==280==    by 0x483E212: posix_memalign (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==280==    by 0xE00F13F: arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::SystemAllocator>::Allocate(long, unsigned char**) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xD9556F2: GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1}::operator()() const (memorypool.cpp:28)\r\n==280==    by 0xD955C86: arrow::Status GcMemoryPool::GcAndTryAgain<GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1}>(GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1} const&) (memorypool.cpp:46)\r\n==280==    by 0xD955767: GcMemoryPool::Allocate(long, unsigned char**) (memorypool.cpp:28)\r\n==280==    by 0xE08FD3F: arrow::PoolBuffer::Resize(long, bool) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xE063619: arrow::AllocateBuffer(long, arrow::MemoryPool*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xD97333B: std::shared_ptr<arrow::Array> arrow::r::MakeSimpleArray<14, cpp11::r_vector<double>, arrow::DoubleType>(SEXPREC*) (r_to_arrow.cpp:947)\r\n==280==    by 0xD96BF9D: arrow::r::vec_to_arrow__reuse_memory(SEXPREC*) (r_to_arrow.cpp:987)\r\n==280==    by 0xD96C0D0: arrow::r::vec_to_arrow(SEXPREC*, std::shared_ptr<arrow::DataType> const&, bool) (r_to_arrow.cpp:1010)\r\n==280==    by 0xD9E8094: arrow::r::CollectRecordBatchArrays(SEXPREC*, std::shared_ptr<arrow::Schema> const&, int, bool, std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array> > >&)::{lambda(int, SEXPREC*, cpp11::r_string)#1}::operator()(int, SEXPREC*, cpp11::r_string) const (recordbatch.cpp:271)\r\n==280== \r\n==280== Conditional jump or move depends on uninitialised value(s)\r\n==280==    at 0xD96D802: arrow::BufferBuilder::Resize(long, bool) (buffer_builder.h:73)\r\n==280==    by 0xE1A0438: arrow::Result<std::shared_ptr<arrow::ArrayData> > arrow::compute::internal::(anonymous namespace)::GetTakeIndicesImpl<arrow::UInt16Type>(arrow::ArrayData const&, arrow::compute::FilterOptions::NullSelectionBehavior, arrow::MemoryPool*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xE1A0E6C: arrow::compute::internal::GetTakeIndices(arrow::ArrayData const&, arrow::compute::FilterOptions::NullSelectionBehavior, arrow::MemoryPool*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xE1A19B8: arrow::compute::internal::(anonymous namespace)::FilterMetaFunction::ExecuteImpl(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDE8A5CF: arrow::compute::MetaFunction::Execute(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDE93BC0: arrow::compute::CallFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDED2011: arrow::compute::Filter(arrow::Datum const&, arrow::Datum const&, arrow::compute::FilterOptions const&, arrow::compute::ExecContext*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA67264: arrow::dataset::FilterSingleBatch(std::shared_ptr<arrow::RecordBatch> const&, arrow::compute::Expression const&, arrow::MemoryPool*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA67662: arrow::Result<std::shared_ptr<arrow::RecordBatch> > arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >::Next<arrow::MapIterator<arrow::dataset::FilterRecordBatch(arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >, arrow::compute::Expression, arrow::MemoryPool*)::{lambda(std::shared_ptr<arrow::RecordBatch>)#1}, std::shared_ptr<arrow::RecordBatch>, std::shared_ptr<arrow::RecordBatch> > >(void*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA67EF2: arrow::Result<std::shared_ptr<arrow::RecordBatch> > arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >::Next<arrow::MapIterator<arrow::dataset::ProjectRecordBatch(arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >, arrow::compute::Expression, arrow::MemoryPool*)::{lambda(std::shared_ptr<arrow::RecordBatch>)#1}, std::shared_ptr<arrow::RecordBatch>, std::shared_ptr<arrow::RecordBatch> > >(void*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA5E564: arrow::Iterator<std::shared_ptr<arrow::RecordBatch> >::ToVector() (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xDA5E7E2: arrow::internal::FnOnce<void ()>::FnImpl<arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Callback<arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Then<arrow::dataset::FilterAndProjectScanTask::SafeExecute(arrow::internal::Executor*)::{lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Then<{lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > >({lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}&&) const::{lambda(arrow::Status const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > >(arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Then<{lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > > >({lambda(std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > const&)#1}&&) const::{lambda(arrow::Status const&)#1}, arrow::Future<std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch> > > >::Then) const::Callback> >::invoke() (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==  Uninitialised value was created by a heap allocation\r\n==280==    at 0x483E0F0: memalign (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==280==    by 0x483E212: posix_memalign (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==280==    by 0xE00F13F: arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::SystemAllocator>::Allocate(long, unsigned char**) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xD9556F2: GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1}::operator()() const (memorypool.cpp:28)\r\n==280==    by 0xD955C86: arrow::Status GcMemoryPool::GcAndTryAgain<GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1}>(GcMemoryPool::Allocate(long, unsigned char**)::{lambda()#1} const&) (memorypool.cpp:46)\r\n==280==    by 0xD955767: GcMemoryPool::Allocate(long, unsigned char**) (memorypool.cpp:28)\r\n==280==    by 0xE08FD3F: arrow::PoolBuffer::Resize(long, bool) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xE063619: arrow::AllocateBuffer(long, arrow::MemoryPool*) (in /usr/local/RDvalgrind/lib/R/site-library/arrow/libs/arrow.so)\r\n==280==    by 0xD97333B: std::shared_ptr<arrow::Array> arrow::r::MakeSimpleArray<14, cpp11::r_vector<double>, arrow::DoubleType>(SEXPREC*) (r_to_arrow.cpp:947)\r\n==280==    by 0xD96BF9D: arrow::r::vec_to_arrow__reuse_memory(SEXPREC*) (r_to_arrow.cpp:987)\r\n==280==    by 0xD96C0D0: arrow::r::vec_to_arrow(SEXPREC*, std::shared_ptr<arrow::DataType> const&, bool) (r_to_arrow.cpp:1010)\r\n==280==    by 0xD9E8094: arrow::r::CollectRecordBatchArrays(SEXPREC*, std::shared_ptr<arrow::Schema> const&, int, bool, std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array> > >&)::{lambda(int, SEXPREC*, cpp11::r_string)#1}::operator()(int, SEXPREC*, cpp11::r_string) const (recordbatch.cpp:271)\r\n```"
        },
        {
            "created_at": "2021-06-10T19:01:32.387Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361179) by Neal Richardson (npr):*\nIs it useful information here that the sentinel value for NA in an R integer is the minimum 32-bit integer?"
        },
        {
            "created_at": "2021-06-10T19:18:20.426Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361189) by Eduardo Ponce (edponce):*\nAnother point of interest is the fact that [kernels for unsigned integers are not created](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_arithmetic.cc#L506-L517)\r\n\r\nChecking this now."
        },
        {
            "created_at": "2021-06-10T20:33:36.732Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12708?focusedCommentId=17361214) by Antoine Pitrou (apitrou):*\nThe two child issues should cover all Valgrind issues."
        }
    ]
}