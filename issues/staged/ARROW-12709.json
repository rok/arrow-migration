{
    "issue": {
        "title": "[C++] Add variadic string join kernel",
        "body": "***Note**: This issue was originally created as [ARROW-12709](https://issues.apache.org/jira/browse/ARROW-12709). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSimilar to SQL's `concat` and `concat_ws`. Should take 0, 1, 2, ... string arrays and an optional separator (default empty string) and concatenate them together, returning a string array.\r\n\r\nFor example, in the case of 2 input arrays and with the separator `\"-\"`, this would take inputs:\r\n```Java\n\r\nArray<string>        Array<string>\r\n[                    [\r\n  \"foo\",               \"bar\",\r\n  \"push\"               \"pop\"\r\n]                    ]\r\n```\r\nand return output:\r\n```Java\n\r\nArray<string>\r\n[ \r\n  \"foo-bar\",\r\n  \"push-pop\"\r\n] \r\n```\r\n\r\nShould also accept scalar strings and recycle their values.\r\n",
        "created_at": "2021-05-10T14:01:30.000Z",
        "updated_at": "2021-06-17T17:53:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-06-16T18:19:58.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-11T09:16:59.887Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12709?focusedCommentId=17342441) by Joris Van den Bossche (jorisvandenbossche):*\nFrom the point of view of the kernel, what's the exact difference with ARROW-12710 and ARROW-10959 ? (in all cases I expect a signature of \"list<string>, sep (optional) -> string\" ?)"
        },
        {
            "created_at": "2021-05-11T17:13:02.002Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12709?focusedCommentId=17342747) by Ian Cook (icook):*\nI added examples to the descriptions of all these string join kernel issues to make the distinctions between them clearer."
        },
        {
            "created_at": "2021-06-10T09:23:59.309Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12709?focusedCommentId=17360678) by Antoine Pitrou (apitrou):*\nDo we want this kernel to be truly variadic or to take a struct array?"
        },
        {
            "created_at": "2021-06-14T14:01:13.027Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12709?focusedCommentId=17362971) by Ian Cook (icook):*\n`[~apitrou]` the intent for this ticket is a truly variadic kernel, equivalent to the SQL string functions `concat` and `concat_ws` which join the strings across an arbitrary number of string columns. This is a common usage pattern in data warehouse-type queries.\r\n\r\nFor joining the strings in an array of list of strings, we have `binary_join` (ARROW-10959). That plus an `adjoin_as_list` function (ARROW-12739) gets us to the same result as this when the string-like columns have the same type, but my understanding is that the speed and memory usage of calling this variadic kernel will be much superior to calling `adjoin_as_list` then `binary_join`."
        },
        {
            "created_at": "2021-06-14T14:03:16.730Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12709?focusedCommentId=17362975) by Antoine Pitrou (apitrou):*\nYes, it would be much more performant to join at once instead of bearing intermediate allocations and copies."
        },
        {
            "created_at": "2021-06-14T14:10:58.611Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12709?focusedCommentId=17362983) by Joris Van den Bossche (jorisvandenbossche):*\n> Do we want this kernel to be truly variadic or to take a struct array?\r\n\r\nThat's probably something we could ask ourselves for all variadic kernels (like the elementwise min/max that were added recently), and should probably be consistent about it? "
        },
        {
            "created_at": "2021-06-14T14:28:26.630Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12709?focusedCommentId=17362997) by Antoine Pitrou (apitrou):*\nI guess it depends on actual use cases.\r\nNote that \"struct array\" would be more general, as it also allows top-level null bits. But that's only a concern if the user actually needs to pass a struct array (rather than a variadic list of arrays)."
        },
        {
            "created_at": "2021-06-16T18:19:59.022Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12709?focusedCommentId=17364442) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 10520\n<https://github.com/apache/arrow/pull/10520>"
        }
    ]
}