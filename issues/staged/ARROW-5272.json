{
    "issue": {
        "title": "[C++] [Gandiva] JIT code executed over uninitialized values",
        "body": "***Note**: This issue was originally created as [ARROW-5272](https://issues.apache.org/jira/browse/ARROW-5272). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen running Gandiva tests with Valgrind, I get the following errors:\r\n```Java\n\r\n[==========] Running 4 tests from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 4 tests from TestDecimal\r\n[ RUN      ] TestDecimal.TestSimple\r\n==12052== Conditional jump or move depends on uninitialised value(s)\r\n==12052==    at 0x41110D5: ???\r\n==12052== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   obj:*\r\n}\r\n==12052== Conditional jump or move depends on uninitialised value(s)\r\n==12052==    at 0x41110E8: ???\r\n==12052== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   obj:*\r\n}\r\n==12052== Conditional jump or move depends on uninitialised value(s)\r\n==12052==    at 0x411114B: ???\r\n==12052== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   obj:*\r\n}\r\n==12052== Conditional jump or move depends on uninitialised value(s)\r\n==12052==    at 0x411117B: ???\r\n==12052== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   obj:*\r\n}\r\n[       OK ] TestDecimal.TestSimple (16625 ms)\r\n[ RUN      ] TestDecimal.TestLiteral\r\n[       OK ] TestDecimal.TestLiteral (3480 ms)\r\n[ RUN      ] TestDecimal.TestIfElse\r\n[       OK ] TestDecimal.TestIfElse (2408 ms)\r\n[ RUN      ] TestDecimal.TestCompare\r\n[       OK ] TestDecimal.TestCompare (5303 ms)\r\n```\r\n\r\nI think this is legitimate. Gandiva runs computations over all values, even when the bitmap indicates a null value. But decimal computations are complex and involve conditional jumps, hence the error (\"Conditional jump or move depends on uninitialised value(s)\").\r\n\r\n`[~pravindra]`",
        "created_at": "2019-05-06T19:03:33.000Z",
        "updated_at": "2022-07-12T14:04:55.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Gandiva",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-05-14T05:38:35.180Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5272?focusedCommentId=16839090) by Pindikura Ravindra (pravindra):*\n`[~pitrou]` I tried this on my xenial setup (on GCE) with the same valgrind settings, and wasn't able to reproduce this.\r\n\r\nThe travis build also didn't show failures in the decimal test\r\n\r\n<https://travis-ci.org/apache/arrow/jobs/531878628>\r\n\r\n\u00a0\r\n\r\nWere you using some additional valgrind flags ?"
        },
        {
            "created_at": "2019-05-14T07:50:01.383Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5272?focusedCommentId=16839181) by Antoine Pitrou (apitrou):*\nJust `-DARROW_TEST_MEMCHECK=on`.\r\n\r\nThis is on Ubuntu 18.04 with gcc 7.4.0, Valgrind 3.13.0 and LLVM 7.0."
        },
        {
            "created_at": "2022-07-12T14:04:55.274Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5272?focusedCommentId=17565844) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}