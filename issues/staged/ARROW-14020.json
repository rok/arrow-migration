{
    "issue": {
        "title": "[R] Writing datafames with list columns is slow and scales poorly with nesting level",
        "body": "***Note**: This issue was originally created as [ARROW-14020](https://issues.apache.org/jira/browse/ARROW-14020). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWriting data frames that contain list columns seems much slower than expected:\r\n\r\n``` r\r\n library(tidyverse)\r\n #> Warning: package 'tidyverse' was built under R version 4.1.1\r\n #> Warning: package 'tibble' was built under R version 4.1.1\r\n #> Warning: package 'readr' was built under R version 4.1.1\r\n library(arrow)\r\n #> Warning: package 'arrow' was built under R version 4.1.1\r\n #>\r\n #> Attaching package: 'arrow'\r\n #> The following object is masked from 'package:utils':\r\n #>\r\n #> timestamp\r\n dummy <- tibble(\r\n points = rep(list(seq(6)), 2e6),\r\n index = seq(2e6)\r\n )\r\n1. very slooooooow\n    system.time(write_parquet(dummy, \"dummy.parquet\"))\n    #> user system elapsed\n    #> 55.64 0.11 55.98\n   \n   dummy_txt <- mutate(dummy, points = map_chr(points, deparse))\n1. orders of magnitude faster\n    system.time(write_parquet(dummy_txt, \"dummytext.parquet\"))\n    #> user system elapsed\n    #> 0.24 0.02 0.25\n    ```\n   \n   <sup>Created on 2021-09-17 by the [reprex package]([https://reprex.tidyverse.org](https://reprex.tidyverse.org/)) (v2.0.0)</sup>\n   \n   <details style=\"margin-bottom:10px;\">\n   \n   <summary>Session info</summary>\n   \n   ``` r\n    sessioninfo::session_info()\n    #> - Session info ---------------------------------------------------------------\n    #> setting value\n    #> version R version 4.1.0 (2021-05-18)\n    #> os Windows 10 x64\n    #> system x86_64, mingw32\n    #> ui RTerm\n    #> language (EN)\n    #> collate English_Australia.1252\n    #> ctype English_Australia.1252\n    #> tz Australia/Brisbane\n    #> date 2021-09-17\n    #>\n    #> - Packages -------------------------------------------------------------------\n    #> package \\* version date lib source\n    #> arrow \\* 5.0.0.2 2021-09-05 [1] CRAN (R 4.1.1)\n    #> assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0)\n    #> backports 1.2.1 2020-12-09 [1] CRAN (R 4.1.0)\n    #> bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0)\n    #> bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0)\n    #> broom 0.7.7 2021-06-13 [1] CRAN (R 4.1.0)\n    #> cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0)\n    #> cli 3.0.1 2021-07-17 [1] CRAN (R 4.1.0)\n    #> colorspace 2.0-2 2021-06-24 [1] CRAN (R 4.1.0)\n    #> crayon 1.4.1 2021-02-08 [1] CRAN (R 4.1.0)\n    #> DBI 1.1.1 2021-01-15 [1] CRAN (R 4.1.0)\n    #> dbplyr 2.1.1 2021-04-06 [1] CRAN (R 4.1.0)\n    #> digest 0.6.27 2020-10-24 [1] CRAN (R 4.1.0)\n    #> dplyr \\* 1.0.7 2021-06-18 [1] CRAN (R 4.1.0)\n    #> ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0)\n    #> evaluate 0.14 2019-05-28 [1] CRAN (R 4.1.0)\n    #> fansi 0.5.0 2021-05-25 [1] CRAN (R 4.1.0)\n    #> forcats \\* 0.5.1 2021-01-27 [1] CRAN (R 4.1.0)\n    #> fs 1.5.0 2020-07-31 [1] CRAN (R 4.1.0)\n    #> generics 0.1.0 2020-10-31 [1] CRAN (R 4.1.0)\n    #> ggplot2 \\* 3.3.5 2021-06-25 [1] CRAN (R 4.1.0)\n    #> glue 1.4.2 2020-08-27 [1] CRAN (R 4.1.0)\n    #> gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0)\n    #> haven 2.4.1 2021-04-23 [1] CRAN (R 4.1.0)\n    #> highr 0.9 2021-04-16 [1] CRAN (R 4.1.0)\n    #> hms 1.1.0 2021-05-17 [1] CRAN (R 4.1.0)\n    #> htmltools 0.5.1.1 2021-01-22 [1] CRAN (R 4.1.0)\n    #> httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0)\n    #> jsonlite 1.7.2 2020-12-09 [1] CRAN (R 4.1.0)\n    #> knitr 1.33 2021-04-24 [1] CRAN (R 4.1.0)\n    #> lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.1.0)\n    #> lubridate 1.7.10 2021-02-26 [1] CRAN (R 4.1.0)\n    #> magrittr 2.0.1 2020-11-17 [1] CRAN (R 4.1.0)\n    #> modelr 0.1.8 2020-05-19 [1] CRAN (R 4.1.0)\n    #> munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0)\n    #> pillar 1.6.2 2021-07-29 [1] CRAN (R 4.1.0)\n    #> pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0)\n    #> purrr \\* 0.3.4 2020-04-17 [1] CRAN (R 4.1.0)\n    #> R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.1)\n    #> Rcpp 1.0.7 2021-07-07 [1] CRAN (R 4.1.0)\n    #> readr \\* 2.0.1 2021-08-10 [1] CRAN (R 4.1.1)\n    #> readxl 1.3.1 2019-03-13 [1] CRAN (R 4.1.0)\n    #> reprex 2.0.0 2021-04-02 [1] CRAN (R 4.1.0)\n    #> rlang 0.4.11 2021-04-30 [1] CRAN (R 4.1.0)\n    #> rmarkdown 2.9 2021-06-15 [1] CRAN (R 4.1.0)\n    #> rvest 1.0.1 2021-07-26 [1] CRAN (R 4.1.0)\n    #> scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0)\n    #> sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 4.1.0)\n    #> stringi 1.7.4 2021-08-25 [1] CRAN (R 4.1.1)\n    #> stringr \\* 1.4.0 2019-02-10 [1] CRAN (R 4.1.0)\n    #> styler 1.4.1 2021-03-30 [1] CRAN (R 4.1.0)\n    #> tibble \\* 3.1.4 2021-08-25 [1] CRAN (R 4.1.1)\n    #> tidyr \\* 1.1.3 2021-03-03 [1] CRAN (R 4.1.0)\n    #> tidyselect 1.1.1 2021-04-30 [1] CRAN (R 4.1.0)\n    #> tidyverse \\* 1.3.1 2021-04-15 [1] CRAN (R 4.1.1)\n    #> tzdb 0.1.2 2021-07-20 [1] CRAN (R 4.1.0)\n    #> utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0)\n    #> vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0)\n    #> withr 2.4.2 2021-04-18 [1] CRAN (R 4.1.0)\n    #> xfun 0.24 2021-06-15 [1] CRAN (R 4.1.0)\n    #> xml2 1.3.2 2020-04-23 [1] CRAN (R 4.1.0)\n    #> yaml 2.2.1 2020-02-01 [1] CRAN (R 4.1.0)\n    #>\n    #> [1] C:/Users/msmcbain/libs/R\n    #> [2] C:/R/R-4.1.0/library\n    ```\n   \n   </details>\n   \n   In this case it's actually faster to convert the list columns to text and do the write, than to write with the list columns.\u00a0\n   \n   This issue also affects write_arrow:\n   \n   ``` r\n    library(tidyverse)\n    #> Warning: package 'tidyverse' was built under R version 4.1.1\n    #> Warning: package 'tibble' was built under R version 4.1.1\n    #> Warning: package 'readr' was built under R version 4.1.1\n    library(arrow)\n    #> Warning: package 'arrow' was built under R version 4.1.1\n    #>\n    #> Attaching package: 'arrow'\n    #> The following object is masked from 'package:utils':\n    #>\n    #> timestamp\n    dummy <- tibble(\n    points = rep(list(seq(6)), 2e6),\n    index = seq(2e6)\n    )\n1. very slooooooow\n    system.time(write_arrow(dummy, \"dummy.parquet\"))\n    #> Warning: Use 'write_ipc_stream' or 'write_feather' instead.\n    #> user system elapsed\n    #> 56.95 0.08 57.13\n   \n   dummy_txt <- mutate(dummy, points = map_chr(points, deparse))\n1. orders of magnitude faster\n    system.time(write_arrow(dummy_txt, \"dummytext.parquet\"))\n    #> Warning: Use 'write_ipc_stream' or 'write_feather' instead.\n    #> user system elapsed\n    #> 0.06 0.01 0.10\n    ```\n   \n   <sup>Created on 2021-09-17 by the [reprex package]([https://reprex.tidyverse.org](https://reprex.tidyverse.org/)) (v2.0.0)</sup>\n   \n   Interestingly the performance seems to degrade exponentially with the nesting level of the lists:\n   \n   ```r\n   \n#\u00a0add\u00a0a\u00a0level\u00a0of\u00a0nesting\r\n dummy2\u00a0<-\u00a0tibble(\r\n \u00a0\u00a0points\u00a0=\u00a0rep(list(list(seq(6))),\u00a02e6),\r\n \u00a0\u00a0index\u00a0=\u00a0seq(2e6)\r\n )\r\n\r\n#\u00a0order\u00a0of\u00a0magnitude\u00a0slower\u00a0again,\u00a0lost\u00a0patience\u00a0wating\u00a0for\u00a0it to\u00a0return\r\n system.time(write_parquet(dummy2,\u00a0\"dummy2.parquet\")\r\n ```\r\n\r\nThis has implications for \\{sf} dataframes which use list columns to represent spatial data structures. Arrow/parquet are pretty much not viable for moderate to large spatial data in R:\r\n\r\n```r\r\n1. options(timeout = 1000)\n   \n   remotes::install_github(\"wfmackey/absmapsdata\")\n    library(absmapsdata)\n1. doesn't return in a resonable amount of time\n    write_arrow(absmapsdata::sa12016, \"sa1.parquet\")\n   \n1. can use the same work around as above by converting geomtry to vector of well knowntext, but it takes time and bloats the files\n   \n   \u00a0```\n   \n   Possibly related to\u00a0https://issues.apache.org/jira/browse/ARROW-12529 ?\n   \n   \u00a0",
        "created_at": "2021-09-17T01:18:59.000Z",
        "updated_at": "2021-10-04T21:36:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-10-04T21:36:39.000Z"
    },
    "comments": [
        {
            "created_at": "2021-09-17T01:22:03.063Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14020?focusedCommentId=17416380) by Miles McBain (milesmcbain):*\nSorry for the weird numbers in the code... thanks JIRA."
        },
        {
            "created_at": "2021-09-17T14:18:58.634Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14020?focusedCommentId=17416718) by Jonathan Keane (jonkeane):*\nThanks for the report! \r\n\r\nI did a bit of profiling, and I think I see where this is slowing down: when presented with a list column, {arrow} inspects the attributes of the list column (and specifically of each element in the column) in order to save that as metadata (even though these list columns don't even have any additional attributes!). [1] We've actually already disabled this metadata when interacting with datasets (ARROW-13189), and it's possible we should take out this saving entirely (though we probably need to still provide an option for doing it since people might depend on being able to save that or read it in; or we could streamline that process to improve it.\r\n\r\nOn the downstream impacts on SF: We've done a little bit of exploration on making the experience saving SF columns better (eg ARROW-12542), though we haven't gotten something perfect just yet. For now, at least, we would recommend if you're saving large amounts of SF data and running into issues like this, checkout the [{sfarrow}](https://github.com/wcjochem/sfarrow) package which is similar to the workaround you proposed, using well-known binary for encoding the SF column(s), along with some utilities/helper functions. \r\n\r\n[1] - Profiling showed that https://github.com/apache/arrow/blob/b599a0539fffd1bb226ebce83e2f035d3080ac41/r/R/metadata.R#L160 takes a large amount of the time converting to a table, and inside of that https://github.com/apache/arrow/blob/b599a0539fffd1bb226ebce83e2f035d3080ac41/r/R/metadata.R#L129 takes about between a quarter and half of that time.\r\n"
        },
        {
            "created_at": "2021-09-20T01:02:49.127Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14020?focusedCommentId=17417427) by Miles McBain (milesmcbain):*\nThanks for the reply.\r\n\r\nI gave \\{sfarrow} a shot but it suffers from the same performance issues for larger spatial datasets. I assume this is because it uses `st_as_binary` on geometry columns which creates a list column of raw vectors.\r\n\r\nThe work around I have used is to turn the geometry into well known text with `st_as_text` because this creates a character vector, which is able to be written quickly at present."
        },
        {
            "created_at": "2021-10-04T21:36:39.287Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14020?focusedCommentId=17424197) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 11277\n<https://github.com/apache/arrow/pull/11277>"
        }
    ]
}