{
    "issue": {
        "title": "Move vendored flatbuffers to private namespace",
        "body": "***Note**: This issue was originally created as [ARROW-17280](https://issues.apache.org/jira/browse/ARROW-17280). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen a user's C++ program links to both Arrow and an installation of the Flatbuffers library, the program can crash or send corrupt Arrow messages.\r\n\r\nThe reason for this is version incompatibility between the vendored (and trimmed-down) version of Flatbuffers that lives inside Arrow, and whatever version of Flatbuffers the user is using.\r\n\r\nThe community seems to be aware of this issue, at least as it impacts Java: ARROW-5579\r\n\r\nIn C++, the problem is especially pernicious because it is not even diagnosed at build time (e.g. by duplicate linker symbols). The methods being used are templates and so their definitions are emitted as weak symbols by the compiler. As we all know, when a weak symbol is defined in two different compilation units, the linker assumes their definitions are identical and it will just pick one. Here, the result is that either Arrow or the user program gets different Flatbuffers code than what it expected, and the program crashes.\r\n\r\nArrow doesn't even advertise the version of Flatbuffers that it vendored so it's impossible for the user to even ameliorate this problem. In any case, it would be a little unfriendly to force the user to use that exact version of Flatbuffers even if it could be identified.\r\n\r\nThe good news is that there is an easy workaround. Arrow C++ doesn't export Flatbuffers as part of its public interface. Instead, it just uses it internally, as an implementation detail. Therefore it is easy to just move the vendored Flatbuffers from the namespace \"flatbuffers\" to some other private namespace. In my PR, I change the namespace to arrow_thirdparty_flatbuffers. Then I create a namespace alias which makes flatbuffers an alias for arrow_thirdparty_flatbuffers. The net result is that (thanks to the new namespace) the symbols exported by the linker are in the \"private\" namespace arrow_thirdparty_flatbuffers, and therefore don't conflict with any other flatbuffers, but (thanks to the alias) the calling code in the rest of the Arrow library doesn't have to change at all.\r\n\r\nYou might prefer a nested namespace instead, such as arrow::thirdparty::flatbuffers, or some other choice.",
        "created_at": "2022-08-02T05:43:42.000Z",
        "updated_at": "2022-08-08T09:51:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-08-08T07:39:21.000Z"
    },
    "comments": [
        {
            "created_at": "2022-08-08T07:39:21.970Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17280?focusedCommentId=17576598) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 13775\n<https://github.com/apache/arrow/pull/13775>"
        }
    ]
}