{
    "issue": {
        "title": "[R][C++] Crash when summarizing after filtering to no rows on partitioned data",
        "body": "***Note**: This issue was originally created as [ARROW-14583](https://issues.apache.org/jira/browse/ARROW-14583). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nOriginal issue report is below; here's an even more minimal example:\r\n```r\n\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\ntd <- tempfile()\r\ndir.create(td)\r\n# if there is no partitioning in data data, this won't segfault\r\n# write_dataset(iris, td) - swap this in and won't segfault\r\nwrite_dataset(group_by(iris, Species), td)\r\nopen_dataset(td) %>%\r\n  filter(Species == \"tulip\") %>%\r\n  group_by(Sepal.Length) %>%\r\n  summarise(n = n()) %>%\r\n  collect()\r\n\r\n```\r\n----\r\nI was trying the new features introduced in latest `arrow (6.0.2)` package based on examples from the \u201cNew Directions for Apache Arrow\u201d talk.\r\n\r\nThe RStudio IDE was crashing and the R session was aborted.\r\n\r\nLooking closely I found that I downloaded only 2 years of data (2018 & 2019) and after the first filter (`year == 2015`) no data remains to be processed further.\r\n\r\nAfter some debugging, by replacing the collect() function, it turns out that the `summarize()` is the one which function is causing the crash.\r\n\r\n\u00a0\r\n```java\n\r\nas_dataset <- open_dataset(\"c:/Rproj_learn/nyc-taxi/\", \r\n                                partitioning = c(\"year\", \"month\")) %>%\r\n  filter(total_amount > 100 & year == 2015) %>%\r\n  select(tip_amount, total_amount, passenger_count) %>%\r\n  mutate(tip_pct = tip_amount / total_amount * 100) %>%\r\n  group_by(passenger_count) %>%\r\n  summarize(avg_tip_pct = mean(tip_pct), n = n()) %>%\r\n  filter(n > 5000) %>%\r\n  arrange(desc(avg_tip_pct)) %>%\r\n  collect()\n```\r\n\u00a0\r\n\r\nI would expect to get an error message (without crashing the IDE), which can be handled in code.\r\n\r\nAnother alternative result would be an empty data.frame, like in case when the parquet file was read in as a data.frame. I simulated this situation by setting a high `total_amount` value when filtering. Note: when using an Arrow table an error message is generated.\r\n\r\n\u00a0\r\n```java\n\r\n\u00a0library(tidyverse)\r\n#> Warning: package 'tibble' was built under R version 4.1.1\r\n#> Warning: package 'tidyr' was built under R version 4.1.1\r\n#> Warning: package 'readr' was built under R version 4.1.1\r\nlibrary(arrow)\r\n#> Warning: package 'arrow' was built under R version 4.1.1\r\n#> \r\n#> Attaching package: 'arrow'\r\n#> The following object is masked from 'package:utils':\r\n#> \r\n#>     timestamp\r\n\r\nread_parquet(\"c:/Rproj_learn/nyc-taxi/2018/01/data.parquet\", \r\n             as_data_frame = FALSE) %>%\r\n# filter(total_amount > 100) %>%\r\n  filter(total_amount > 1e10) %>%\r\n  select(tip_amount, total_amount, passenger_count) %>%\r\n  mutate(tip_pct = tip_amount / total_amount * 100) %>%\r\n  group_by(passenger_count) %>%\r\n  summarize(avg_tip_pct = mean(tip_pct), n = n()) %>%\r\n  filter(n > 500) %>%\r\n  arrange(desc(avg_tip_pct)) %>%\r\n  collect()\r\n\r\n#> Error: Invalid: Must pass at least one array\r\n\r\n\r\nread_parquet(\"c:/Rproj_learn/nyc-taxi/2018/01/data.parquet\", \r\n             as_data_frame = TRUE) %>%\r\n# filter(total_amount > 100) %>%\r\n  filter(total_amount > 1e10) %>%\r\n  select(tip_amount, total_amount, passenger_count) %>%\r\n  mutate(tip_pct = tip_amount / total_amount * 100) %>%\r\n  group_by(passenger_count) %>%\r\n  summarize(avg_tip_pct = mean(tip_pct), n = n()) %>%\r\n  filter(n > 500) %>%\r\n  arrange(desc(avg_tip_pct)) %>%\r\n  collect()\r\n\r\n#> # A tibble: 0 x 3\r\n#> # ... with 3 variables: passenger_count <int>, avg_tip_pct <dbl>, n <int>\r\n```",
        "created_at": "2021-11-04T07:05:29.000Z",
        "updated_at": "2021-11-09T10:12:24.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-11-08T19:33:03.000Z"
    },
    "comments": [
        {
            "created_at": "2021-11-04T18:45:36.622Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14583?focusedCommentId=17438887) by Weston Pace (westonpace):*\nI agree that an empty table is preferable.  I believe this error is coming from the query engine itself (must pass at least one array is from arrow::Concatenate which shouldn't be called if the list is empty) but it might be happening in the conversion from C++ to R."
        },
        {
            "created_at": "2021-11-05T14:10:34.763Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14583?focusedCommentId=17439291) by David Li (lidavidm):*\nThe crash is because if GroupByNode gets 0 batches, it never initializes its internal state. The \"Invalid\" error is because Take() on a ChunkedArray assumes there must be 1 or more than 1 chunk, and fails to account for 0 chunks (and so as Weston guessed, is trying to concatenate 0 chunks)."
        },
        {
            "created_at": "2021-11-07T16:21:02.802Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14583?focusedCommentId=17440036) by Nicola Crane (thisisnic):*\nI've since been playing around in R and found that even without filtering, I get a crash when doing group_by + summarise on partitioned data, e.g. I get a segfault from the below code\r\n\r\n\u00a0\r\n```java\n\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\n\r\nwrite_dataset(group_by(iris, Species), \"iris_data\")\r\n\r\nopen_dataset(\"iris_data\") %>%\r\n\u00a0 group_by(Species) %>%\r\n\u00a0 summarise(mean(Sepal.Length)) %>%\r\n\u00a0 collect() \n```\r\nFurther experimentation and I've found that it only segfaults if you group by the same variable it's partitioned by when it's been saved - I guess it's still the 0 batches thing happening there."
        },
        {
            "created_at": "2021-11-07T22:50:56.644Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14583?focusedCommentId=17440119) by David Li (lidavidm):*\nIt appears this fails in a different place so this might be a different bug. (At least, the fix here still crashes for this example.) I'm going to investigate more tomorrow.\r\n\r\n```\n\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51\r\n#1  0x00007ffff7543921 in __GI_abort () at abort.c:79\r\n#2  0x00007ffff1e61047 in google::logging_fail() ()\r\n   from /home/lidavidm/miniconda3/envs/dev/lib/libglog.so.0\r\n#3  0x00007ffff1e68c0d in google::LogMessage::Fail() ()\r\n   from /home/lidavidm/miniconda3/envs/dev/lib/libglog.so.0\r\n#4  0x00007ffff1e6b7a6 in google::LogMessage::SendToLog() ()\r\n   from /home/lidavidm/miniconda3/envs/dev/lib/libglog.so.0\r\n#5  0x00007ffff1e68705 in google::LogMessage::Flush() ()\r\n   from /home/lidavidm/miniconda3/envs/dev/lib/libglog.so.0\r\n#6  0x00007ffff1e688fd in google::LogMessage::~LogMessage() ()\r\n   from /home/lidavidm/miniconda3/envs/dev/lib/libglog.so.0\r\n#7  0x00007fff6f9c60cc in arrow::util::ArrowLog::~ArrowLog (this=0x7fff94e24028)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/logging.cc:250\r\n#8  0x00007fff6f999ab5 in arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed (\r\n    this=0x55555a7d2890, state=arrow::FutureState::SUCCESS)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/future.cc:309\r\n#9  0x00007fff6f997e5a in arrow::ConcreteFutureImpl::DoMarkFinished (this=0x55555a7d2890)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/future.cc:231\r\n#10 0x00007fff6f994f5d in arrow::FutureImpl::MarkFinished (this=0x55555a7d2890)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/future.cc:383\r\n#11 0x00007fffd0372570 in arrow::Future<arrow::internal::Empty>::DoMarkFinished (\r\n    this=0x55555aa056e8, res=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/future.h:712\r\n#12 0x00007fffd0372482 in arrow::Future<arrow::internal::Empty>::MarkFinished<arrow::internal::Empty, void> (this=0x55555aa056e8, s=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/future.h:463\r\n#13 0x00007fff6fc8fa3d in arrow::compute::(anonymous namespace)::GroupByNode::StopProducing (this=0x55555aa05650, output=0x55555b088e40)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/aggregate_node.cc:533\r\n#14 0x00007fff6fca29f9 in arrow::compute::MapNode::StopProducing (this=0x55555b088e40)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:348\r\n#15 0x00007fff6fca28f1 in arrow::compute::MapNode::StopProducing (this=0x55555b088e40, \r\n    output=0x555555a5ff30)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:338\r\n#16 0x00007fff6fca29f9 in arrow::compute::MapNode::StopProducing (this=0x555555a5ff30)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:348\r\n#17 0x00007fff6fca28f1 in arrow::compute::MapNode::StopProducing (this=0x555555a5ff30, \r\n    output=0x55555877de40)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:338\r\n#18 0x00007fff6fd2de33 in arrow::compute::(anonymous namespace)::SinkNode::ErrorReceived\r\n    (this=0x55555877de40, input=0x555555a5ff30, error=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/sink_node.cc:117\r\n---Type <return> to continue, or q <return> to quit---\r\n#19 0x00007fff6fca2452 in arrow::compute::MapNode::ErrorReceived (this=0x555555a5ff30, \r\n    input=0x55555b088e40, error=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:319\r\n#20 0x00007fff6fca2452 in arrow::compute::MapNode::ErrorReceived (this=0x55555b088e40, \r\n    input=0x55555aa05650, error=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:319\r\n#21 0x00007fff6fca1e32 in arrow::compute::ExecNode::ErrorIfNotOk (this=0x55555aa05650, \r\n    status=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:300\r\n#22 0x00007fff6fc8f351 in arrow::compute::(anonymous namespace)::GroupByNode::InputReceived (this=0x55555aa05650, input=0x55555bde3440, batch=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/aggregate_node.cc:492\r\n#23 0x00007fff6fca32ce in arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_1::operator()() const (this=0x7fff2c004028)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:368\r\n#24 0x00007fff6fca655f in arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_2::operator()() const::{lambda()#1}::operator()() const (this=0x7fff2c004020)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:375\r\n#25 0x00007fff6fca64f0 in arrow::detail::ContinueFuture::operator()<arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_2::operator()() const::{lambda()#1}&, , arrow::Status, arrow::Future<arrow::internal::Empty> > (this=0x7fff2c004018, next=..., f=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/future.h:148\r\n#26 0x00007fff6fca6476 in std::__invoke_impl<void, arrow::detail::ContinueFuture&, arrow::Future<arrow::internal::Empty>&, arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_2::operator()() const::{lambda()#1}&>(std::__invoke_other, arrow::detail::ContinueFuture&, arrow::Future<arrow::internal::Empty>&, arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_2::operator()() const::{lambda()#1}&) (__f=..., __args=..., __args=...)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/invoke.h:60\r\n#27 0x00007fff6fca63a7 in std::__invoke<arrow::detail::ContinueFuture&, arrow::Future<arrow::internal::Empty>&, arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_2::operator()() const::{lambda()#1}&>(std::__invoke_result&&, (arrow::detail::ContinueFuture&)...) (__fn=..., __args=..., __args=...)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/invoke.h:95\r\n#28 0x00007fff6fca6358 in std::_Bind<arrow::detail::ContinueFuture (arrow::Future<arrow::internal::Empty>, arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_2::operator()() const::{lambda()#1})>::__call<void, , 0ul, 1ul>(std::tuple<>&&, std::_Index_tuple<0ul,---Type <return> to continue, or q <return> to quit---\r\n 1ul>) (this=0x7fff2c004018, __args=...)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/functional:467\r\n#29 0x00007fff6fca62e6 in std::_Bind<arrow::detail::ContinueFuture (arrow::Future<arrow::internal::Empty>, arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_2::operator()() const::{lambda()#1})>::operator()<, void>() (this=0x7fff2c004018)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/functional:549\r\n#30 0x00007fff6fca62b1 in arrow::internal::FnOnce<void ()>::FnImpl<std::_Bind<arrow::detail::ContinueFuture (arrow::Future<arrow::internal::Empty>, arrow::compute::MapNode::SubmitTask(std::function<arrow::Result<arrow::compute::ExecBatch> (arrow::compute::ExecBatch)>, arrow::compute::ExecBatch)::$_2::operator()() const::{lambda()#1})> >::invoke() (\r\n    this=0x7fff2c004010)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/functional.h:152\r\n#31 0x00007fff6f9e9b0a in arrow::internal::FnOnce<void ()>::operator()() && (\r\n    this=0x7fff94e24c90)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/functional.h:140\r\n#32 0x00007fff6f9e92d2 in arrow::internal::WorkerLoop (state=..., it=...)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/thread_pool.cc:177\r\n#33 0x00007fff6f9e8f68 in arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3::operator()() const (this=0x555557f9ae98)\r\n    at /home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/util/thread_pool.cc:344\r\n#34 0x00007fff6f9e8efd in _ZSt13__invoke_implIvZN5arrow8internal10ThreadPool21LaunchWorkersUnlockedEiE3$_3JEET_St14__invoke_otherOT0_DpOT1_ (__f=...)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/invoke.h:60\r\n#35 0x00007fff6f9e8e8d in _ZSt8__invokeIZN5arrow8internal10ThreadPool21LaunchWorkersUnlockedEiE3$_3JEENSt15__invoke_resultIT_JDpT0_EE4typeEOS5_DpOS6_ (__fn=...)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/invoke.h:95\r\n#36 0x00007fff6f9e8e65 in std::thread::_Invoker<std::tuple<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3> >::_M_invoke<0ul> (this=0x555557f9ae98)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:234\r\n#37 0x00007fff6f9e8e35 in std::thread::_Invoker<std::tuple<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3> >::operator()() (this=0x555557f9ae98)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:243\r\n#38 0x00007fff6f9e8cd9 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3> > >::_M_run() (\r\n    this=0x555557f9ae90)\r\n    at /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:186\r\n#39 0x00007ffff276d9b0 in std::execute_native_thread_routine (__p=<optimized out>)\r\n    at /home/conda/feedstock_root/build_artifacts/gcc_compilers_1628138005912/work/build/x86_64-conda-linux-gnu/libstdc++-v3/include/bits/new_allocator.h:82\r\n#40 0x00007ffff4f1d6db in start_thread (arg=0x7fff94e34700) at pthread_create.c:463\r\n#41 0x00007ffff762471f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\r\nIt also doesn't fail consistently for me, it sometimes instead gives this error so I think there's at least two bugs wrapped up here:\r\n\r\n```\n\r\nError: Invalid: Arrays used to construct an ExecBatch must have equal length\r\n/home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/aggregate_node.cc:387  ExecBatch::Make({batch.values[agg_src_field_ids_[i]], id_batch})\r\n/home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/compute/exec/exec_plan.cc:417  iterator_.Next()\r\n/home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/record_batch.cc:318  ReadNext(&batch)\r\n/home/lidavidm/Code/upstream/arrow-14583/cpp/src/arrow/record_batch.cc:329  ReadAll(&batches)\r\n```"
        },
        {
            "created_at": "2021-11-08T13:34:37.676Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14583?focusedCommentId=17440457) by David Li (lidavidm):*\nI've filed a bug for the new reproduction as ARROW-14630."
        },
        {
            "created_at": "2021-11-08T19:33:03.977Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14583?focusedCommentId=17440707) by David Li (lidavidm):*\nIssue resolved by pull request 11623\n<https://github.com/apache/arrow/pull/11623>"
        }
    ]
}