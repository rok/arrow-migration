{
    "issue": {
        "title": "[R] Rename read_ipc_file to read_arrow_file & highlight arrow over feather",
        "body": "***Note**: This issue was originally created as [ARROW-18148](https://issues.apache.org/jira/browse/ARROW-18148). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFollowing up from [this mailing list conversation](https://lists.apache.org/thread/nxncph842h8tyovxp04hrzq4y35lq4xq), I am wondering if the R package should rename `read_ipc_file()` / write_ipc_file()` to `read_arrow_file()`/ `write_arrow_file()`, or add an additional alias for both. It might also be helpful to update the documentation so that users read \"Write an Arrow file (formerly known as a Feather file)\" rather than the current Feather-named first approach, assuming there is a community decision to coalesce around the name Arrow for the file format, and the project is moving on from the name Feather.",
        "created_at": "2022-10-25T00:33:36.000Z",
        "updated_at": "2022-11-01T22:00:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Documentation",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-25T10:25:18.536Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17623737) by Nicola Crane (thisisnic):*\n+1 to doing this, have added a comment on the community discussion as it seemed to be moving towards a conclusion but not there entirely\r\n\r\n"
        },
        {
            "created_at": "2022-10-25T18:34:10.121Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17623979) by Stephanie Hazlitt (stephhazlitt):*\nThe other `{}arrow::read_*(){`}functions don't use the `_file` in the name, just `{}read_ipc_file(){`}, which I am guessing is because we also have `{}read_ipc_stream(){`}. I wonder if `read_arrow` and `read_arrow_stream` would work and be more consistent with the naming API?"
        },
        {
            "created_at": "2022-10-25T18:43:30.075Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17623984) by Neal Richardson (npr):*\nIt's tricky because the Arrow IPC format has a \"file\" and a \"stream\" specification--but either can be written to a file."
        },
        {
            "created_at": "2022-10-26T12:48:26.053Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17624442) by Dewey Dunnington (paleolimbot):*\nYou can sniff which one it is from the first 8 bytes though (ARROW1 plus some zeros vs 0xFFFFFFFF or something)...I don't think we currently do that."
        },
        {
            "created_at": "2022-10-31T09:26:10.059Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17626498) by Nicola Crane (thisisnic):*\nJust pinging `[~djnavarro]` as she's doing work updating our vignettes, and I'd be keen to hear her views on how best we approach this - we've touched on this a bit already on [https://github.com/apache/arrow/pull/14514](http://example.com)."
        },
        {
            "created_at": "2022-11-01T06:53:54.909Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17626980) by Danielle Navarro (djnavarro):*\nTentatively offering some thoughts :-)\r\n\r\nIf I'm understanding this properly, we have two problems:\r\n\r\n- The first problem is that the history of serializing Arrow objects is messy and has left us with three names that people might recognize: Feather, IPC, Arrow. We'd like users to transition to using \"Arrow\" as the preferred name, and to give them an API that reflects that terminology.\n  \n- The second problem is that we use \"file format\" and \"stream format\" to mean something subtly different from \"files\" and \"streams\". The file format wraps the stream format with magic numbers at the start and end, with a footer written after the stream. These two formats aren't **inherently** tied to files and streams. The user can write a \"stream formatted\" file if they want (i.e., no magic numbers, no footers) and they can also send a \"file formatted\" serialization (i.e., with the magic number and footer) to an output stream if they want to. The current API allows this, but users would be forgiven for missing this subtle detail!\n  \n  ## Option 1: Don't change the API, only the docs\n  \n  This option would leave `read_ipc_file()`, `write_ipc_file()`, `read_ipc_stream()`, and `write_ipc_stream()` as the four user-facing functions (treating `read_feather()` and `write_feather()` as soft-deprecated, and leaving `write_to_raw()` untouched)\n  \n  The only thing that would change in this version is that we would consistently refer to \"Arrow IPC file\" and \"Arrow IPC stream\" everywhere (i.e., never truncating it to \"IPC\"). Language around \"feather\" would be relegated to a secondary position (e.g., \"formerly known as Feather\"), and we would emphasize that the preferred file extension for V2 feather files is `.arrow`.\u00a0\n  \n  ## Option 2: New names for the existing four functions\n  \n  This option would replace `read_ipc_file()` with `read_arrow_file()`, `read_ipc_stream()` with `read_arrow_stream()` and so on. The `ipc` and `feather` versions would be soft-deprecated. \u00a0\n  \n  The documentation would be updated accordingly. We'd now refer to \"Arrow file\" and \"Arrow stream\" everywhere. As with option 1 we'd use language like \"formerly known as Feather\" to explain the history (perhaps linking back to the old repo just to highlight the origin). We would also, where relevant, note that \"Arrow stream\" is a conventional name for the \"Arrow inter-process communication (IPC) streaming format\", as a way of (a) explaining the ipc versions of the functions, and (b) helping users find the relevant part of the Arrow specification.\n  \n  ## Option 3: Reduce API to two functions\n  \n  This option would have only two functions, `read_arrow()` and `write_arrow()`. Both functions would have a new argument called `format` (or something similar). Users could specify either `format = \"stream\"` or `format = \"file\"`. From a documentation perspective this would require a little more finessing: we might have to have separate the help topics for the new API and older versions of API to avoid mess. But it might have the advantage of making clearer to users that the terms `\"stream\"` and `\"file\"` don't actually refer to **where** you're writing the data, but how you **encode** the data when you write it.\u00a0\n  \n  ## Preferences?\n  \n  I am not sure what I prefer, but I can at least say what I think the strengths and weaknesses are for each proposal:\n  \n  Option 3 seems like the cleanest in terms of making the Arrow/Feather/IPC functions feel analogous to the other functions in the read/write API: `read_arrow()` and `write_arrow()` feels closely aligned with `read_parquet()` and `write_parquet()`. It makes very clear that these functions are designed to read and write Arrow objects in an \"Arrow-like\" way. However, it does have the disadvantage that the encoding vs destination complexity gets pushed into the arguments: users will need to understand why there is `format` argument that is distinct from the `file`/`sink` argument, and the documentation will need to explain that.\u00a0\n  \n  Option 2 has the advantage of preserving the same \"four-function structure\"\" as the existing serialization API, but it does come at the expense of being a little misleading to anyone who doesn't understand that the function names refer to the encoding not the destination: `write_arrow_stream()` can in fact write to a file, and `write_arrow_file()` can write to a stream. That's potentially even more confusing.\u00a0\n  \n  Option 1 has the advantage of not confusing existing users. The API doesn't change, and the documentation becomes slightly more informative. The disadvantage is that it leaves new users a bit confused about what the heck an \"IPC\" is, which means the documentation will have to carry the load.\u00a0\n  \n  ## Additional documentation thoughts\n  \n  Regardless of what option we go with, I'll write the user-facing vignettes to use only the newest version of the API, especially in the `arrow.Rmd` vignette and the `read_write.Rmd` vignette where new users are most likely to run across these concepts. In those places I would try my best not to dive into too much detail, because it's a complexity that new users don't need.\u00a0\n  \n  The question that arises is \"where do we talk about the nuance?\" To some extent I think we could move some of that to the \"details\" section of various help topics, but... (and I hate saying this)... it might make sense to write an \"Arrow serialization\" vignette that would be loosely analogous to the \"Data object layout\" vignette that I'm proposing to introduce in  https://github.com/apache/arrow/pull/14514. On the documentation page it would be grouped in with the developer vignettes (to signal that it's advanced content), but just like I'm doing with \"Data object layout\", I'll cross reference it from the user-facing vignettes. For instance, in the section on reading and writing arrow (formerly feather) files, there would be a short paragraph that hints at these issues, and then links the user to the serialization vignette where all the detail is unpacked.\n  \n  \u00a0\n  \n  \u00a0"
        },
        {
            "created_at": "2022-11-01T16:18:54.778Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17627230) by Stephanie Hazlitt (stephhazlitt):*\n> > \"where do we talk about the nuance\"\r\nOne approach when making a big design change is to have a short vignette that explains the change itself (e.g. [dbplyr 2.0 did this](https://dbplyr.tidyverse.org/articles/backend-2.html)). What is proposed is not a breaking change, however if the package moves to having `read_arrow(..., format = c(\"file\", \"stream\", \"auto\")) it might be worth a 101-level page on the function naming history, given there was an early version of `read_arrow()` which was deprecated, the marketing that needs to be done re: feather vs arrow naming and so on. This could also be done in the proposed Arrow serialization vignette with pointers, as suggested."
        },
        {
            "created_at": "2022-11-01T16:24:06.397Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17627236) by Nicola Crane (thisisnic):*\nThanks for taking a look at this in such close detail - interesting to see the detail there around \"stream format\" and \"file format\".  I think I'm leaning towards option 3 seeming like the way to go.  I'm not keen on pushing the term \"IPC\" on users who are otherwise unaware of it and don't need to be aware of it, and like the API in option 3.\r\n\r\nPerhaps for now, disregard all of this in that PR you have open and those further docs updates can be made in a follow-up PR once the work to update these functions is done?"
        },
        {
            "created_at": "2022-11-01T22:00:34.050Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18148?focusedCommentId=17627350) by Danielle Navarro (djnavarro):*\nAgreed. For the current PR I'll write it as though the API weren't changing, but will still preference the term \"Arrow\" over \"Feather\" where that's relevant "
        }
    ]
}