{
    "issue": {
        "title": "[R] compare_dplyr_error() too strict",
        "body": "***Note**: This issue was originally created as [ARROW-14712](https://issues.apache.org/jira/browse/ARROW-14712). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\ndplyr errors are about to be updated and so the mechanism used by compare_dplyr_error() fails:\r\n\r\nI'm seeing this on the revdeps :\r\n\r\n`\u2550\u2550 Failed tests \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550`\r\n`\u2500\u2500 Error (test-dplyr-filter.R:263:3): filter environment scope \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`\r\n`Error in `lapply(args, function(x) {`\r\n`{}if (!inherits(x, \"Expression\")){`}`{}{ x <- Expression$scalar(x) }{`}`{}x{`}\r\n`})`: object 'b_var' not found`\r\n`Backtrace:`\r\n`\u2586`\r\n`1. \u251c\u2500arrow:::expect_dplyr_error(input %>% filter(chr == b_var), tbl) at test-dplyr-filter.R:263:2`\r\n`2. \u2502 \u251c\u2500testthat::expect_error(...) at tests/testthat/helper-expectation.R:158:2`\r\n`3. \u2502 \u2502 \u2514\u2500testthat:::expect_condition_matching(...)`\r\n`4. \u2502 \u2502 \u2514\u2500testthat:::quasi_capture(...)`\r\n`5. \u2502 \u2502 \u251c\u2500testthat .capture(...)`\r\n`6. \u2502 \u2502 \u2502 \u2514\u2500base::withCallingHandlers(...)`\r\n`7. \u2502 \u2502 \u2514\u2500rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))`\r\n`8. \u2502 \u2514\u2500rlang::eval_tidy(expr, rlang::new_data_mask(rlang::env(input = record_batch(tbl))))`\r\n`9. \u251c\u2500input %>% filter(chr == b_var)`\r\n`10. \u251c\u2500dplyr::filter(., chr == b_var)`\r\n`11. \u2514\u2500arrow:::filter.ArrowTabular(., chr == b_var)`\r\n`12. \u2514\u2500base::lapply(filts, arrow_eval, arrow_mask(.data))`\r\n`13. \u2514\u2500arrow FUN(X[[i]], ...)`\r\n`14. \u2514\u2500base::tryCatch(...)`\r\n`15. \u2514\u2500base tryCatchList(expr, classes, parentenv, handlers)`\r\n`16. \u2514\u2500base tryCatchOne(expr, names, parentenv, handlers[[1L]])`\r\n`{}17. \u2514\u2500value[[3L]](cond){`}`{}[ FAIL 1 | WARN 3 | SKIP 58 | PASS 5783 ]{`}\r\n`Error: Test failures`\r\n`{}Execution halted{`}`{}1 error x | 0 warnings \u2713 | 1 note x{`}\r\n\r\n\u00a0\r\n\r\nhere's a reprex showing what's happening:\u00a0\r\n\r\n```` r`\r\n`library(dplyr, warn.conflicts = FALSE)`\r\n`{}library(arrow, warn.conflicts = FALSE){`}`{}E <- function(expr) \\{ tryCatch(expr, error = function(cnd) print(cnd, backtrace = FALSE))}{`}`{}tbl <- tibble::tibble({`}\r\n`\u00a0 chr = letters[c(1:5, NA, 7:10)]`\r\n`{}){`}`{}E({`}\r\n`\u00a0 tbl %>%\u00a0`\r\n`\u00a0 \u00a0 filter(chr == b_var)`\r\n`)`\r\n`#> <error/rlang_error>`\r\n`#> Error in `filter()`:`\r\n`#> \u00a0 Problem while computing `..1 = chr == b_var`.`\r\n`#> Caused by error:`\r\n`#> \u00a0 object 'b_var' not found`\r\n`E(`\r\n`\u00a0 record_batch(tbl) %>%\u00a0`\r\n`\u00a0 \u00a0 filter(chr == b_var)`\r\n`)`\r\n`#> <simpleError in lapply(args, function(x) \\{ \u00a0 \u00a0if (!inherits(x, \"Expression\")) { \u00a0 \u00a0 \u00a0 \u00a0x <- Expression$scalar(x) \u00a0 \u00a0} \u00a0 \u00a0x}): object 'b_var' not found>`\r\n`{}```{`}`{}<sup>Created on 2021-11-15 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1.9000)</sup>{`}",
        "created_at": "2021-11-15T08:56:11.000Z",
        "updated_at": "2021-11-19T16:35:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-11-19T14:23:03.000Z"
    },
    "comments": [
        {
            "created_at": "2021-11-15T09:03:00.887Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14712?focusedCommentId=17443655) by Romain Francois (romainfrancois):*\nIn this part of the compare_dplyr_error() function:\u00a0\r\n\r\n\u00a0\r\n\r\n`msg <- tryCatch(`\r\n`\u00a0 \u00a0 rlang::eval_tidy(expr, rlang::new_data_mask(rlang::env(.input = tbl))),`\r\n`\u00a0 \u00a0 error = function(e) {`\r\n`\u00a0 \u00a0 \u00a0 msg <- conditionMessage(e)``\u00a0 \u00a0 \u00a0 # The error here is of the form:`\r\n`\u00a0 \u00a0 \u00a0 #`\r\n`\u00a0 \u00a0 \u00a0 # Problem with `filter()` .input `..1`.`\r\n`\u00a0 \u00a0 \u00a0 # x object 'b_var' not found`\r\n`\u00a0 \u00a0 \u00a0 # \u2139 Input `..1` is `chr == b_var`.`\r\n`\u00a0 \u00a0 \u00a0 #`\r\n`\u00a0 \u00a0 \u00a0 # but what we really care about is the `x` block`\r\n`\u00a0 \u00a0 \u00a0 # so (temporarily) let's pull those blocks out when we find them`\r\n`\u00a0 \u00a0 \u00a0 pattern <- i18ize_error_messages()``\u00a0 \u00a0 \u00a0 if (grepl(pattern, msg)) {`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 msg <- sub(paste0(\"^.*(\", pattern, \").*$\"), \"\\\\1\", msg)`\r\n`\u00a0 \u00a0 \u00a0 `}\r\n`\u00a0 \u00a0 \u00a0 msg`\r\n`\u00a0 \u00a0 `}\r\n`\u00a0 )`\r\n\r\n\u00a0\r\n\r\n`we can with the next dplyr pick up the parent condition instead, i.e. msg <- conditionMessage(e$parent). This should work for this one, but not sure it works generally.\u00a0`"
        },
        {
            "created_at": "2021-11-19T14:23:03.335Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14712?focusedCommentId=17446505) by Neal Richardson (npr):*\nIssue resolved by pull request 11736\n<https://github.com/apache/arrow/pull/11736>"
        }
    ]
}