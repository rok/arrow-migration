{
    "issue": {
        "title": "[R] Improve evaluation of R functions from C++",
        "body": "***Note**: This issue was originally created as [ARROW-17148](https://issues.apache.org/jira/browse/ARROW-17148). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere are currently a few places where we call R code from C++ (and after ARROW-16444 and ARROW-16703 we will have some more where the overhead of calling into R might be greater than the time it takes to actually evaluate the function/the functions will be called in a tight loop).\r\n\r\nThe current approach uses `cpp11::function`. This is totally fine and safe but generates some ugly backtraces on error and is potentially slower than the lean-and-mean approach of purrr (whose entire job is to call R functions in a loop and has been heavily optimized). The purrr approach is to construct the `call()` and calling environment in advance and then just run `Rf_eval(call, env)` in the loop. This is both faster (fewer R API calls) and generates better backtraces (e.g., `Error in fun(arg1, arg2)` instead of `Error in (function(a, b) { ...the whole content of the function ... })(every, deparsed, argument)`.\r\n\r\nBefore optimizing that heavily we should of course benchmark to see exactly how much that matters!",
        "created_at": "2022-07-20T18:27:50.000Z",
        "updated_at": "2022-07-20T18:27:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}