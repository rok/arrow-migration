{
    "issue": {
        "title": "[Python] Implement pa.array() with type=union type",
        "body": "***Note**: This issue was originally created as [ARROW-2774](https://issues.apache.org/jira/browse/ARROW-2774). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be useful to be able to generate unions during type inference:\r\n\r\n```Java\n\r\nIn [11]: pa.array([{'a': 1, 'b': 'string'}, {'b': 2}])\r\n---------------------------------------------------------------------------\r\nArrowTypeError                            Traceback (most recent call last)\r\n<ipython-input-11-c554b698271b> in <module>()\r\n----> 1 pa.array([{'a': 1, 'b': 'string'}, {'b': 2}])\r\n\r\n~/code/arrow/python/pyarrow/array.pxi in pyarrow.lib.array()\r\n    179         if mask is not None:\r\n    180             raise ValueError(\"Masks only supported with ndarray-like inputs\")\r\n--> 181         return _sequence_to_array(obj, size, type, pool)\r\n    182 \r\n    183 \r\n\r\n~/code/arrow/python/pyarrow/array.pxi in pyarrow.lib._sequence_to_array()\r\n     24         if size is None:\r\n     25             with nogil:\r\n---> 26                 check_status(ConvertPySequence(sequence, pool, &out))\r\n     27         else:\r\n     28             c_size = size\r\n\r\n~/code/arrow/python/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n     89             raise ArrowNotImplementedError(message)\r\n     90         elif status.IsTypeError():\r\n---> 91             raise ArrowTypeError(message)\r\n     92         elif status.IsCapacityError():\r\n     93             raise ArrowCapacityError(message)\r\n\r\nArrowTypeError: ../src/arrow/python/builtin_convert.cc:794 code: AppendPySequence(seq, size, real_type, builder.get())\r\n../src/arrow/python/iterators.h:60 code: func(value)\r\n../src/arrow/python/builtin_convert.cc:619 code: value_converters_[i]->AppendSingle(valueobj ? valueobj : Py_None)\r\n../src/arrow/python/builtin_convert.cc:414 code: internal::CIntFromPython(obj, &value)\r\n../src/arrow/python/helpers.cc:259 code: CheckPyError()\r\nan integer is required (got type str)\r\n\r\nIn [12]: pa.array([5, 'str', False])\r\n---------------------------------------------------------------------------\r\nArrowTypeError                            Traceback (most recent call last)\r\n<ipython-input-12-9e3343f08351> in <module>()\r\n----> 1 pa.array([5, 'str', False])\r\n\r\n~/code/arrow/python/pyarrow/array.pxi in pyarrow.lib.array()\r\n    179         if mask is not None:\r\n    180             raise ValueError(\"Masks only supported with ndarray-like inputs\")\r\n--> 181         return _sequence_to_array(obj, size, type, pool)\r\n    182 \r\n    183 \r\n\r\n~/code/arrow/python/pyarrow/array.pxi in pyarrow.lib._sequence_to_array()\r\n     24         if size is None:\r\n     25             with nogil:\r\n---> 26                 check_status(ConvertPySequence(sequence, pool, &out))\r\n     27         else:\r\n     28             c_size = size\r\n\r\n~/code/arrow/python/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n     89             raise ArrowNotImplementedError(message)\r\n     90         elif status.IsTypeError():\r\n---> 91             raise ArrowTypeError(message)\r\n     92         elif status.IsCapacityError():\r\n     93             raise ArrowCapacityError(message)\r\n\r\nArrowTypeError: ../src/arrow/python/builtin_convert.cc:794 code: AppendPySequence(seq, size, real_type, builder.get())\r\n../src/arrow/python/iterators.h:60 code: func(value)\r\n../src/arrow/python/builtin_convert.cc:414 code: internal::CIntFromPython(obj, &value)\r\n../src/arrow/python/helpers.cc:259 code: CheckPyError()\r\nan integer is required (got type str)\r\n```",
        "created_at": "2018-07-01T22:18:33.000Z",
        "updated_at": "2021-08-04T13:33:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2018-07-02T08:09:10.696Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2774?focusedCommentId=16529515) by Antoine Pitrou (apitrou):*\nI'm not sure it's a good idea to do this by default, since it would hide problems with unsanitized input. Intuitively, I don't think real \"union\"-type data is frequent in the real world (as opposed to unsanitized data).\r\n\r\nAlso, we would have to choose a union kind (dense or sparse)."
        },
        {
            "created_at": "2018-07-02T08:16:33.589Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2774?focusedCommentId=16529521) by Uwe Korn (uwe):*\nThis is definitely something users would like to see but I would also like to see this hidden behind a flag. Being able to deal with unsanitized input is often a typical `pandas` use case in exploratory data analysis but once you use this as part of a production pipeline, you rather want to have it error."
        },
        {
            "created_at": "2018-07-02T14:19:10.033Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2774?focusedCommentId=16529983) by Wes McKinney (wesm):*\nI agree that disabling by default is a good idea. Maybe we can have an `allow_unions=True` flag"
        },
        {
            "created_at": "2018-07-02T14:20:15.290Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2774?focusedCommentId=16529986) by Wes McKinney (wesm):*\nUnions will be really helpful when we get to working on CSV reading \u2013 handling messy CSV files with columns having non-standard strings or other markers in numeric columns has been a major issue for pandas over the years. "
        },
        {
            "created_at": "2021-08-04T09:48:36.906Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2774?focusedCommentId=17392943) by Antoine Pitrou (apitrou):*\nI'm still not convinced this is a good idea. Consider `pa.array([1, 2.3])`. Should it return a `union<int64, float64>`?\r\n\r\ncc `[~amol-]` for advice."
        },
        {
            "created_at": "2021-08-04T13:20:12.273Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2774?focusedCommentId=17393143) by Joris Van den Bossche (jorisvandenbossche):*\nAgreed that we shouldn't do that by default, but we can keep this issue about actually supporting it? Because now construction of a union array from a python sequence is not even supported when explicitly mentioning the type. \r\n\r\n```Java\n\r\nIn [52]: typ = pa.union([pa.field(\"int\", \"int64\"), pa.field(\"float\", \"float64\")], mode=\"sparse\")\r\n\r\nIn [53]: pa.array([1, 2.3], type=typ)\r\n...\r\nArrowNotImplementedError: sparse_union\r\n../src/arrow/util/converter.h:265  VisitTypeInline(*visitor.type, &visitor)\r\n../src/arrow/python/python_to_arrow.cc:1015  (MakeConverter<PyConverter, PyConverterTrait>( options.type, options, pool))\r\n```"
        }
    ]
}