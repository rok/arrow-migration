{
    "issue": {
        "title": "[R] Add StructArray$create()",
        "body": "***Note**: This issue was originally created as [ARROW-16266](https://issues.apache.org/jira/browse/ARROW-16266). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn ARROW-13371 we implemented the `make_struct` compute function bound to `data.frame()` / `tibble()` in dplyr evaluation; however, we didn't actually implement `StructArray$create()`. In ARROW-15168, it turns out that we need to do this to support `StructArray` creation from data.frames whose columns aren't all convertable using the internal C++ conversion. The hack used in that PR is below (but we should clearly implement the C++ function instead of using the hack):\r\n\r\n```R\n\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n\r\nstruct_array <- function(...) {\r\n  batch <- record_batch(...)\r\n  array_ptr <- arrow:::allocate_arrow_array()\r\n  schema_ptr <- arrow:::allocate_arrow_schema()\r\n  batch$export_to_c(array_ptr, schema_ptr)\r\n  Array$import_from_c(array_ptr, schema_ptr)\r\n}\r\n\r\nstruct_array(a = 1, b = \"two\")\r\n#> StructArray\r\n#> <struct<a: double, b: string>>\r\n#> -- is_valid: all not null\r\n#> -- child 0 type: double\r\n#>   [\r\n#>     1\r\n#>   ]\r\n#> -- child 1 type: string\r\n#>   [\r\n#>     \"two\"\r\n#>   ]\r\n```\r\n",
        "created_at": "2022-04-21T13:34:55.000Z",
        "updated_at": "2022-10-27T13:09:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-04-21T18:58:02.303Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16266?focusedCommentId=17525992) by Neal Richardson (npr):*\nI think the other use case would be to take Arrays in ... and bind them into a StructArray."
        }
    ]
}