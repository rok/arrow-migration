{
    "issue": {
        "title": "[Python] ImportError calling pyarrow from_pandas within ThreadPool",
        "body": "***Note**: This issue was originally created as [ARROW-11983](https://issues.apache.org/jira/browse/ARROW-11983). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFrom https://github.com/dask/dask/issues/7334\r\n\r\nThe referenced issue report is about an ImportError they get using Python 3.9 (and I can reproduce it). As far as I know how dask works, it's basically calling `pa.Table.from_pandas` within a ThreadPool, and inside `from_pandas` we do a `with futures.ThreadPoolExecutor`, which then fails with this error:\r\n\r\n```Java\n\r\n>>> df2.to_parquet('test99.parquet', engine='pyarrow-dataset')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/dataframe/core.py\", line 4127, in to_parquet\r\n    return to_parquet(self, path, *args, **kwargs)\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/dataframe/io/parquet/core.py\", line 671, in to_parquet\r\n    out = out.compute(**compute_kwargs)\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/base.py\", line 283, in compute\r\n    (result,) = compute(self, traverse=False, **kwargs)\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/base.py\", line 565, in compute\r\n    results = schedule(dsk, keys, **kwargs)\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/threaded.py\", line 76, in get\r\n    results = get_async(\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/local.py\", line 487, in get_async\r\n    raise_exception(exc, tb)\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/local.py\", line 317, in reraise\r\n    raise exc\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/local.py\", line 222, in execute_task\r\n    result = _execute_task(task, data)\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/core.py\", line 121, in _execute_task\r\n    return func(*(_execute_task(a, cache) for a in args))\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/utils.py\", line 35, in apply\r\n    return func(*args, **kwargs)\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/dataframe/io/parquet/arrow.py\", line 841, in write_partition\r\n    t = cls._pandas_to_arrow_table(df, preserve_index=preserve_index, schema=schema)\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/dask/dataframe/io/parquet/arrow.py\", line 814, in _pandas_to_arrow_table\r\n    table = pa.Table.from_pandas(df, preserve_index=preserve_index, schema=schema)\r\n  File \"pyarrow/table.pxi\", line 1479, in pyarrow.lib.Table.from_pandas\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/site-packages/pyarrow/pandas_compat.py\", line 596, in dataframe_to_arrays\r\n    with futures.ThreadPoolExecutor(nthreads) as executor:\r\n  File \"/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/concurrent/futures/__init__.py\", line 49, in __getattr__\r\n    from .thread import ThreadPoolExecutor as te\r\nImportError: cannot import name 'ThreadPoolExecutor' from partially initialized module 'concurrent.futures.thread' (most likely due to a circular import) (/home/joris/miniconda3/envs/test-dask-pyarrow-bug/lib/python3.9/concurrent/futures/thread.py)\r\n```\r\n\r\nWe can probably avoid that by moving the import top-level (not inline inside dataframe_to_arrays)",
        "created_at": "2021-03-16T14:40:41.000Z",
        "updated_at": "2021-03-25T12:53:27.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-03-25T12:53:18.000Z"
    },
    "comments": [
        {
            "created_at": "2021-03-16T15:45:16.055Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11983?focusedCommentId=17302635) by Antoine Pitrou (apitrou):*\nRelated upstream issues: <https://bugs.python.org/issue35943> and <https://bugs.python.org/issue43515>\r\n\r\nFor now, it should be enough to add the following code at the toplevel:\r\n```python\n\r\nfrom concurrent.futures.thread import ThreadPool\r\n```\r\n"
        },
        {
            "created_at": "2021-03-25T12:53:18.447Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11983?focusedCommentId=17308664) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 9789\n<https://github.com/apache/arrow/pull/9789>"
        }
    ]
}