{
    "issue": {
        "title": "[C++] Hashjoin + datasets hanging",
        "body": "***Note**: This issue was originally created as [ARROW-14197](https://issues.apache.org/jira/browse/ARROW-14197). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI\u2019m getting a hang on the TPC-H query 4 pretty reliably (though it\u2019s not _every_ time). The query is:\r\n\r\n```Java\n\r\nl <- input_table(\"lineitem\") %>%\r\n    select(l_orderkey, l_commitdate, l_receiptdate) %>%\r\n    filter(l_commitdate < l_receiptdate) %>%\r\n    select(l_orderkey)\r\n\r\n  o <- input_table(\"orders\") %>%\r\n    select(o_orderkey, o_orderdate, o_orderpriority) %>%\r\n# kludge: filter(o_orderdate >= \"1993-07-01\", o_orderdate < \"1993-07-01\" + interval '3' month) %>%\r\n    filter(o_orderdate >= as.Date(\"1993-07-01\"), o_orderdate < as.Date(\"1993-10-01\")) %>%\r\n    select(o_orderkey, o_orderpriority)\r\n\r\n# distinct after join, tested and indeed faster\r\n  lo <- inner_join(l, o, by = c(\"l_orderkey\" = \"o_orderkey\")) %>%\r\n    distinct() %>%\r\n    select(o_orderpriority)\r\n\r\n  aggr <- lo %>%\r\n    group_by(o_orderpriority) %>%\r\n    summarise(order_count = n()) %>%\r\n    arrange(o_orderpriority) %>% \r\n    collect()\r\n```\r\n\r\nBasically, filtered lineitems, filtered orders, join those together, group_by, summarise, arrange. \r\n\r\nThis happens pretty reliably when the `input_table` is a dataset backed by parquet or feather fiels (e.g. `input_table` returns something like `arrow::open_dataset(\"path/to/{filename}.feather\", format = \"feather\")`\r\n\r\nOne can replicate this by installing an arrowbench branch (https://github.com/ursacomputing/arrowbench/pull/37) with, in R: `remotes::install_github(\"ursacomputing/arrowbench@moar-tpch\"` and then running the following:\r\n\r\n```Java\n\r\nlibrary(arrowbench)\r\n\r\nresults <- run_benchmark(\r\n  tpc_h,\r\n  scale_factor = 1,\r\n  cpu_count = 8,\r\n  query_id = 4,\r\n  lib_path = \"remote-apache/arrow@HEAD\", # remove this line if you have a recent install of the arrow r package that supports hash joins and want to avoid building a separate copy.\r\n  format = \"feather\",\r\n  n_iter = 20\r\n)\r\n```\r\n\r\nNote this _sometimes_ will finish, but frequently it will not and be stuck.",
        "created_at": "2021-10-01T13:55:46.000Z",
        "updated_at": "2021-10-13T18:49:06.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-10-12T19:06:12.000Z"
    },
    "comments": [
        {
            "created_at": "2021-10-01T13:56:22.428Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14197?focusedCommentId=17423296) by Jonathan Keane (jonkeane):*\nI've attached a sample of the R process while it's hung from my machine, in case that's helpful"
        },
        {
            "created_at": "2021-10-05T20:32:36.396Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14197?focusedCommentId=17424697) by Weston Pace (westonpace):*\nI should've just looked at your sample as it may have saved me some time.  But, I do have a bit more info.  The query itself resolves to the following plan (note, we need to do some work on our ToString as it is difficult to make out which node connects to which):\r\n\r\n```\n\r\nExecPlan with 14 nodes:\r\nSourceNode{\"\", outputs=[\"\"]}\r\nFilterNode{\"\", inputs=[target: \"\"], outputs=[\"\"], filter=(l_commitdate < l_receiptdate)}\r\nSourceNode{\"\", outputs=[\"\"]}\r\nFilterNode{\"\", inputs=[target: \"\"], outputs=[\"\"], filter=((o_orderdate >= 1993-07-01) and (o_orderdate < 1993-10-01))}\r\nProjectNode{\"\", inputs=[target: \"\"], outputs=[\"\"], projection=[o_orderkey, o_orderpriority]}\r\nHashJoinNode{\"\", inputs=[left: \"\", right: \"\"], outputs=[\"\"]}\r\nProjectNode{\"\", inputs=[target: \"\"], outputs=[\"\"], projection=[l_orderkey, o_orderpriority]}\r\nGroupByNode{\"\", inputs=[groupby: \"\"], outputs=[\"\"], keys=[\"l_orderkey\", \"o_orderpriority\"], aggregates=[\r\n]}\r\nProjectNode{\"\", inputs=[target: \"\"], outputs=[\"\"], projection=[l_orderkey, o_orderpriority]}\r\nProjectNode{\"\", inputs=[target: \"\"], outputs=[\"\"], projection=[\"order_count\": 1, o_orderpriority]}\r\nGroupByNode{\"\", inputs=[groupby: \"\"], outputs=[\"\"], keys=[\"o_orderpriority\"], aggregates=[\r\n\thash_sum(order_count, {skip_nulls=true, min_count=1}),\r\n]}\r\nProjectNode{\"\", inputs=[target: \"\"], outputs=[\"\"], projection=[o_orderpriority, order_count]}\r\nProjectNode{\"\", inputs=[target: \"\"], outputs=[\"\"], projection=[o_orderpriority, order_count]}\r\nOrderBySinkNode{\"\", inputs=[collected: \"\"], by={sort_keys=[o_orderpriority ASC], null_placement=AtEnd}}\r\n```\r\n\r\nThe hang is a never-ending busy-loop (i.e. 100% CPU usage) in `arrow::compute::SwissTable::find` (this function never returns).\r\n\r\nI'll attach a GDB stack trace of a sample hang. [gdb.log](gdb.log) "
        },
        {
            "created_at": "2021-10-05T21:54:31.428Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14197?focusedCommentId=17424719) by Weston Pace (westonpace):*\nHere is an annotated version of the exec plan.\r\n```\n\r\nSourceNode{\"0:\", outputs=[\"1:\"], FileSystemDataset:\r\n/home/pace/dev/arrow/r/data/temp/lineitem_1.uncompressed.feather}\r\nFilterNode{\"1:\", inputs=[target: \"0:\"], outputs=[\"5:\"], filter=(l_commitdate < l_receiptdate)}\r\nSourceNode{\"2:\", outputs=[\"3:\"], FileSystemDataset:\r\n/home/pace/dev/arrow/r/data/temp/orders_1.uncompressed.feather}\r\nFilterNode{\"3:\", inputs=[target: \"2:\"], outputs=[\"4:\"], filter=((o_orderdate >= 1993-07-01) and (o_orderdate < 1993-10-01))}\r\nProjectNode{\"4:\", inputs=[target: \"3:\"], outputs=[\"5:\"], projection=[o_orderkey, o_orderpriority]}\r\nHashJoinNode{\"5:\", inputs=[left: \"1:\", right: \"4:\"], outputs=[\"6:\"]}\r\nProjectNode{\"6:\", inputs=[target: \"5:\"], outputs=[\"7:\"], projection=[l_orderkey, o_orderpriority]}\r\nGroupByNode{\"7:\", inputs=[groupby: \"6:\"], outputs=[\"8:\"], keys=[\"l_orderkey\", \"o_orderpriority\"], aggregates=[\r\n]}\r\nProjectNode{\"8:\", inputs=[target: \"7:\"], outputs=[\"9:\"], projection=[l_orderkey, o_orderpriority]}\r\nProjectNode{\"9:\", inputs=[target: \"8:\"], outputs=[\"10:\"], projection=[\"order_count\": 1, o_orderpriority]}\r\nGroupByNode{\"10:\", inputs=[groupby: \"9:\"], outputs=[\"11:\"], keys=[\"o_orderpriority\"], aggregates=[\r\n\thash_sum(order_count, {skip_nulls=true, min_count=1}),\r\n]}\r\nProjectNode{\"11:\", inputs=[target: \"10:\"], outputs=[\"12:\"], projection=[o_orderpriority, order_count]}\r\nProjectNode{\"12:\", inputs=[target: \"11:\"], outputs=[\"13:\"], projection=[o_orderpriority, order_count]}\r\nOrderBySinkNode{\"13:\", inputs=[collected: \"12:\"], by={sort_keys=[o_orderpriority ASC], null_placement=AtEnd}}\r\n```"
        },
        {
            "created_at": "2021-10-05T21:56:17.477Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14197?focusedCommentId=17424721) by David Li (lidavidm):*\nTangential, but the exec plan string repr being hard to read is unfortunate. It would help if R assigned names to the nodes, or perhaps we could have the ExecPlan auto-assign names if the client bindings don't give any. (Also, maybe GraphViz output would be nice after all\u2026)\r\n\r\nI filed ARROW-14233."
        },
        {
            "created_at": "2021-10-05T23:42:43.848Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14197?focusedCommentId=17424735) by Weston Pace (westonpace):*\nI'm attaching a C++ reproduction.  It will require some input data.  I can host a copy of the input data for a while on Google Drive (only ~200MB): https://drive.google.com/file/d/1kg7Xts6w8Ktzau4Go7euOVSQKdh2qJuG/view?usp=sharing\r\n\r\n"
        },
        {
            "created_at": "2021-10-12T19:06:12.085Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14197?focusedCommentId=17427872) by Neal Richardson (npr):*\nIssue resolved by pull request 11335\n<https://github.com/apache/arrow/pull/11335>"
        }
    ]
}