{
    "issue": {
        "title": "[C++][Dataset] Support bloom filters in predicate pushdown",
        "body": "***Note**: This issue was originally created as [ARROW-11384](https://issues.apache.org/jira/browse/ARROW-11384). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe parquet spec includes bloom filters which can be useful during filtration. In the context of dataset::, this would be expressed as additional parquet statistics expressions on each row group, allowing entirely-excluded row groups to be skipped more aggressively.\r\n\r\n\r\nPrerequisite: https://issues.apache.org/jira/browse/PARQUET-1327 (reader/writer support for bloom filters)",
        "created_at": "2021-01-25T20:06:01.000Z",
        "updated_at": "2021-02-22T18:28:59.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-02-22T18:28:59.554Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11384?focusedCommentId=17288556) by Ben Kietzman (bkietz):*\nThe first step here would be providing a compute function which tests inputs against a Bloom filter. This function could then be referenced by (for example) the expressions extracted from row group statistics. Finally, a special case would be added to expression simplification to test if a filter could be satisfied given a bloom filter. For example:\r\n\r\n```Java\n\r\nSimplifyGivenGuarantee(equal(field_ref(\"a\"), literal(1)), bloom_filter(field_ref(\"a\"), ...)))\r\n```\r\n\r\nwould either return `literal(false)` to indicate that the filter is unsatisfiable or pass through `equal(field_ref(\"a\"), literal(1))` to indicate that the Bloom filter does not exclude the value 1."
        }
    ]
}