{
    "issue": {
        "title": "[C++][Parquet] ArrowInvalid: Integer value emitted when reading parquet dataset",
        "body": "***Note**: This issue was originally created as [ARROW-15146](https://issues.apache.org/jira/browse/ARROW-15146). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI've created a parquet db with an uint64 datatype. When reading some of the files are raising the errors like\r\n> ArrowInvalid: Integer value 12120467241726599441 not in range: 0 to 9223372036854775807",
        "created_at": "2021-12-17T11:29:18.000Z",
        "updated_at": "2022-02-03T15:09:12.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-02-02T20:56:12.190Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15146?focusedCommentId=17486094) by Matt Carothers (mattcarothers):*\nI have this issue as well. Specifically, if I write a parquet file with a uint64 column with a value greater than 2^63 and then try to load it with a filter, I get that error.\u00a0 Loading the file without a filter works as expected.\u00a0 Looks like the validation is looking for 2^63 instead of 2\\*64.\u00a0 Here's some quick code to reproduce the bug.\r\n\r\n`>>> import pandas as pd`\r\n`>>> df = pd.DataFrame([ \\{ 'col1' : 2**64 - 1 }, \\{ 'col1' : 42 } ])`\r\n`>>> df`\r\n`\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0col1`\r\n`0 \u00a018446744073709551615`\r\n`1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a042`\r\n`>>> df.to_parquet('test.parquet')`\r\n`>>> df = pd.read_parquet('test.parquet', filters=[('col1', '=', 42)])`\r\n`Traceback (most recent call last):`\r\n`\u00a0 File \"<stdin>\", line 1, in <module>`\r\n`\u00a0 File \"/tmp/pyarrow-test/lib/python3.8/site-packages/pandas/io/parquet.py\", line 493, in read_parquet`\r\n`\u00a0 \u00a0 return impl.read(`\r\n`\u00a0 File \"/tmp/pyarrow-test/lib/python3.8/site-packages/pandas/io/parquet.py\", line 240, in read`\r\n`\u00a0 \u00a0 result = self.api.parquet.read_table(`\r\n`\u00a0 File \"/tmp/pyarrow-test/lib/python3.8/site-packages/pyarrow/parquet.py\", line 1941, in read_table`\r\n`\u00a0 \u00a0 return dataset.read(columns=columns, use_threads=use_threads,`\r\n`\u00a0 File \"/tmp/pyarrow-test/lib/python3.8/site-packages/pyarrow/parquet.py\", line 1776, in read`\r\n`\u00a0 \u00a0 table = self._dataset.to_table(`\r\n`\u00a0 File \"pyarrow/_dataset.pyx\", line 491, in pyarrow._dataset.Dataset.to_table`\r\n`\u00a0 File \"pyarrow/_dataset.pyx\", line 3235, in pyarrow._dataset.Scanner.to_table`\r\n`\u00a0 File \"pyarrow/error.pxi\", line 143, in pyarrow.lib.pyarrow_internal_check_status`\r\n`\u00a0 File \"pyarrow/error.pxi\", line 99, in pyarrow.lib.check_status`\r\n`pyarrow.lib.ArrowInvalid: Integer value 18446744073709551615 not in range: 0 to 9223372036854775807`"
        },
        {
            "created_at": "2022-02-02T21:33:07.742Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15146?focusedCommentId=17486115) by Weston Pace (westonpace):*\nThe original post is a little too vague to say for certain what is happening.  As for `[~mattcarothers]`'s issue (thank you for the reproducible test case) the problem is that 42 is being interpreted as an int64 scalar.  So then when the filtering logic kicks in it is comparing a uint64 array with an int64 scalar and it decides to downcast the uint64.\r\n\r\nA workaround is:\r\n\r\n```Java\n\r\nimport pyarrow as pa\r\ndf = pd.read_parquet('test.parquet', filters=[('col1', '=', pa.scalar(42, type=pa.uint64()))])\r\n```\r\n\r\nI'm not entirely sure if this is a bug or not.  The casting logic is pretty complex as it is.  However, preferring to cast literals before casting arrays might be a reasonable rule (it also leads to better performance)."
        },
        {
            "created_at": "2022-02-03T15:09:12.611Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15146?focusedCommentId=17486540) by Matt Carothers (mattcarothers):*\nThanks, `[~westonpace]`.\u00a0 That was exactly what I needed."
        }
    ]
}