{
    "issue": {
        "title": "[C++] Benchmark hash table against thirdparty options, possibly vendor a thirdparty hash table library",
        "body": "***Note**: This issue was originally created as [ARROW-8990](https://issues.apache.org/jira/browse/ARROW-8990). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhile we have our own hash table implementation, it would be worthwhile to set up some benchmarks so that we can compare against std::unordered_map and some other thirdparty libraries for hash tables to know whether we should possibly use a thirdparty library. See e.g.\r\n\r\nhttps://tessil.github.io/2016/08/29/benchmark-hopscotch-map.html\r\n\r\nLibraries to consider: \r\n\r\n- https://github.com/sparsehash/sparsehash",
        "created_at": "2020-05-31T13:15:14.000Z",
        "updated_at": "2021-11-23T22:44:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-06-01T17:46:26.211Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8990?focusedCommentId=17121205) by Maarten Breddels (maartenbreddels):*\nFYI, I've been using that library and\u00a0<https://github.com/skarupke/flat_hash_map>\u00a0for Vaex. After some benchmarking settled for the tsl one, but my research/benchmark wasn't very thorough, because the idea was I could easily switch if needed. But because the performance was great, I never looked back actually, so I'd be interested in the benchmark result.\r\n\r\nBy the same author, the\u00a0<https://github.com/Tessil/hat-trie>\u00a0library can also be very interesting to take a look at."
        },
        {
            "created_at": "2021-11-23T17:27:00.516Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8990?focusedCommentId=17448139) by Antoine Pitrou (apitrou):*\nDo we want to keep this open? `[~bkietz]` `[~michalno]`"
        },
        {
            "created_at": "2021-11-23T22:44:53.934Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8990?focusedCommentId=17448298) by Michal Nowakiewicz (michalno):*\nOne of the points of the hash table implementation used inside group by (and in the future potentially also hash join) exec node is to \"push down vectorization\" inside hash table code. What I mean by that is that the interface takes (small) vectors of inputs for lookups/inserts instead of single inputs. That allows for some specific optimizations, for instance in order to use memory prefetching the code needs to know future inputs in advance, which vector at a time interface provides. Third party hash tables are typically processing one input at a time, so they are not an exact replacement for this. \r\n\r\nThat said, the interface of a third party hash table could be adapted to what we use currently in exec nodes and it is valid to compare the performance on some micro-benchmark.\u00a0"
        }
    ]
}