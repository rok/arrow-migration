{
    "issue": {
        "title": "[C++] Add short-circuit version of logical Status AND",
        "body": "***Note**: This issue was originally created as [ARROW-16743](https://issues.apache.org/jira/browse/ARROW-16743). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n`Status` overloads the `&` operator as in (from file_base.cc):\r\n\r\n```\n\r\nfinished_.MarkFinished(dw_status & finish_st & tg_status);\r\n```\r\n\r\nHowever, it also sometimes used as (from scalar.cc):\r\n\r\n```\n\r\nreturn StdHash(s.value.days) & StdHash(s.value.milliseconds);\r\n```\r\n\r\nThis latter form is technically correct (in this case) because `StdHash` has no side effects and there is no real need to short-circuit.  However, this can be very misleading.  The compiler is allowed to reorder these statements as it wants.  This led to trouble in https://github.com/apache/arrow/pull/13232 because I suggested something like...\r\n\r\n```\n\r\nreturn Foo(value) & Bar(std::move(value));\r\n```\r\n\r\nNow, for a C++ expert, this may have been immediately obvious.  However, I think we can simplify things by adding the `&&` operator for `Status` to allow:\r\n\r\n```\n\r\nreturn Foo(value) && Bar(std::move(value));\r\n```",
        "created_at": "2022-06-02T20:24:46.000Z",
        "updated_at": "2022-06-07T17:49:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}