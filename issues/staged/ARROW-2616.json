{
    "issue": {
        "title": "[Python] Cross-compiling Pyarrow",
        "body": "***Note**: This issue was originally created as [ARROW-2616](https://issues.apache.org/jira/browse/ARROW-2616). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHi there,\r\n\r\nnot quite sure this could be filed in as a bug.\r\n\r\nI'm trying to cross-compile Pyarrow on a regular linux x86_64 host for an arm32 target, using LEDE/OpenWRT as the build/packaging system.\r\n\r\nThe process miserably fails as soon as cmake gets involved:\r\n\r\n```\n\r\n-- Runnning cmake for pyarrow\r\ncmake -DPYTHON_EXECUTABLE=/workdir/rpi/LEDE/staging_dir/target-arm_cortex-a53+neon-vfpv4_musl-1.1.16_eabi/host/bin/python3.6 -DPYARROW_BOOST_USE_SHARED=on -DPYARROW_BUNDLE_BOOST=OFF -DCMAKE_BUILD_TYPE=debug /workdir/rpi/LEDE/build_dir/target-arm_cortex-a53+neon-vfpv4_musl-1.1.16_eabi/apache-arrow-0.9.0/python\r\nINFOCompiler command: /workdir/rpi/LEDE/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-5.4.0_musl-1.1.16_eabi/bin/arm-openwrt-linux-muslgnueabi-g++\r\nINFOCompiler version: Reading specs from /workdir/rpi/LEDE/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-5.4.0_musl-1.1.16_eabi/bin/../lib/gcc/arm-openwrt-linux-muslgnueabi/5.4.0/specs\r\nCOLLECT_GCC=/workdir/rpi/LEDE/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-5.4.0_musl-1.1.16_eabi/bin/arm-openwrt-linux-muslgnueabi-g++\r\nCOLLECT_LTO_WRAPPER=/workdir/rpi/LEDE/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-5.4.0_musl-1.1.16_eabi/bin/../libexec/gcc/arm-openwrt-linux-muslgnueabi/5.4.0/lto-wrapper\r\nTarget: arm-openwrt-linux-muslgnueabi\r\nConfigured with: /workdir/LEDE/build_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-5.4.0_musl-1.1.16_eabi/gcc-5.4.0/configure --with-bugurl=http://www.lede-project.org/bugs/ --with-pkgversion='LEDE GCC 5.4.0 r3533-d0bf257c46' --prefix=/workdir/LEDE/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-5.4.0_musl-1.1.16_eabi --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=arm-openwrt-linux-muslgnueabi --with-gnu-ld --enable-target-optspace --disable-libgomp --disable-libmudflap --disable-multilib --disable-libmpx --disable-nls --without-isl --without-cloog --with-host-libstdcxx=-lstdc++ --with-gmp=/workdir/LEDE/staging_dir/host --with-mpfr=/workdir/LEDE/staging_dir/host --with-mpc=/workdir/LEDE/staging_dir/host --disable-decimal-float --with-diagnostics-color=auto-if-env --disable-libssp --enable-__cxa_atexit --with-float=hard --with-headers=/workdir/LEDE/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-5.4.0_musl-1.1.16_eabi/include --disable-libsanitizer --enable-languages=c,c++ --enable-shared --enable-threads --with-slibdir=/workdir/LEDE/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-5.4.0_musl-1.1.16_eabi/lib --enable-lto --with-libelf=/workdir/LEDE/staging_dir/host\r\nThread model: posix\r\ngcc version 5.4.0 (LEDE GCC 5.4.0 r3533-d0bf257c46) \r\n\r\nINFOCompiler id: GNU\r\nSelected compiler gcc 5.4.0\r\nConfigured for DEBUG build (set with cmake -DCMAKE_BUILD_TYPE={release,debug,...})\r\n-- Build Type: DEBUG\r\n-- Build output directory: /workdir/rpi/LEDE/build_dir/target-arm_cortex-a53+neon-vfpv4_musl-1.1.16_eabi/apache-arrow-0.9.0/python/build/temp.linux2-3.6/debug/\r\nCMake Error at cmake_modules/FindPythonLibsNew.cmake:124 (message):\r\n Python config failure: Python is 64-bit, chosen compiler is 32-bit\r\nCall Stack (most recent call first):\r\n CMakeLists.txt:183 (find_package)\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"/workdir/rpi/LEDE/build_dir/target-arm_cortex-a53+neon-vfpv4_musl-1.1.16_eabi/apache-arrow-0.9.0/python/build/temp.linux2-3.6/CMakeFiles/CMakeOutput.log\".\r\nerror: command 'cmake' failed with exit status 1\r\n```\r\n\r\n\u00a0\r\n\r\nI had a look at the affected area (FindPythonLibsNew.cmake) and I'm under the impression the whole CMake-based build system for pyarrow **was never designed for cross-compilation in the first place**. It just calls the configured interpreter (`PYTHON_EXECUTABLE`) and tries to locate libraries by running sample code.\r\n\r\nThat's just great for native builds (where you have e.g. multiple installations on the same filesystem), but it's never gonna work on a cross-build environment.\r\n\r\nI believe I could patch the cmake files so to be able to pass those paths (e.g.\u00a0PYTHON_INCLUDE_DIRS) from the command line (i.e. the way it's done by `CMAKE_BUILD_TYPE`), and skip the auto-detect portions. Before I go down that path though, I'd like to know whether I'm bound to eventual failure due to inherent design decisions.\r\n\r\n`[~pitrou]` could perhaps back me up here?\r\n\r\nThank you!",
        "created_at": "2018-05-20T10:14:30.000Z",
        "updated_at": "2021-01-10T14:55:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Packaging",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-01-10T14:55:42.000Z"
    },
    "comments": [
        {
            "created_at": "2018-05-21T23:56:17.518Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2616?focusedCommentId=16483222) by Wes McKinney (wesm):*\nThere aren't any inherent design decisions preventing cross-compilation; you are the first person to my knowledge to try. Patches to make these parts configurable in this regard would be most welcome. Good luck, and let us know how we can help"
        },
        {
            "created_at": "2018-05-22T06:55:52.348Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2616?focusedCommentId=16483564) by Gerlando Falauto (iurly):*\nThank you `[~wesmckinn]`.\r\n\r\nAfter a short discussion with `[~xhochy]` on slack, it turned out even native compilation on a 32-bit ARM architecture (arrow-cpp+parquet-cpp+pyarrow) might be an issue as 32bit has never been tried even on x86.\r\n\r\nYour opinion?\r\n\r\nThanks!"
        },
        {
            "created_at": "2018-05-24T08:51:48.328Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2616?focusedCommentId=16488668) by Antoine Pitrou (apitrou):*\nYes, I don't really expect Arrow to build or work properly on a 32-bit machine. Even if it does, the fact that we use int64_t most everywhere for sizes will probably have adverse performance effects.\r\n\r\nWhile making Arrow 32-bit clean might be a laudable goal in the future, I think your best bet right now is to target ARM64 (if at all possible)."
        },
        {
            "created_at": "2021-01-10T14:55:42.803Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2616?focusedCommentId=17262204) by Uwe Korn (uwe):*\nClosing this as we successfully cross-compile `pyarrow` on conda-forge for Apple Silicon. We have some patches in the feedstock that were incorporated into master for 3.0."
        }
    ]
}