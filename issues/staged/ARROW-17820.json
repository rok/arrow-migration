{
    "issue": {
        "title": "[C++] Implement arithmetic kernels on List(number)",
        "body": "***Note**: This issue was originally created as [ARROW-17820](https://issues.apache.org/jira/browse/ARROW-17820). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\neg. rounding in list(float64()), similar to a map or foreach",
        "created_at": "2022-09-22T20:16:17.000Z",
        "updated_at": "2022-11-04T23:24:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-12T04:59:12.036Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17820?focusedCommentId=17616184) by Weston Pace (westonpace):*\nCould we do this by running the kernel on the child array?  For example, if we have LIST<FLOAT64> we have a parent list array with one child array.  We could run the unary kernel on the child array.  I think it would only work for unary kernels however."
        },
        {
            "created_at": "2022-11-04T20:18:40.308Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17820?focusedCommentId=17629186) by Joris Van den Bossche (jorisvandenbossche):*\nIt would be nice if we would have a way that all unary scalar kernels could be applied on list arrays (indeed by being applied to the single child array of flat values). \r\n\r\nI think in SQL one could do this with a subquery with unnesting and aggregating again (eg https://cloud.google.com/bigquery/docs/reference/standard-sql/arrays#creating_arrays_from_subqueries, although that example is actually not a unary kernel but a binary).\r\n\r\nSuch an approach doesn't really fit our kernels / Acero, I think. One option could be to have a generic kernel to \"map\" another kernel on the list values. Like\r\n\r\n```Java\n\r\nlist_map_function(list_array, \"kernel_name\", FunctionOptions)\r\n```\r\n\r\nwhere you can pass the function name you want to apply, and a FunctionOptions object matching the kernel. Would something like this be possible technically?\r\n\r\nAnother option could be to directly register list type for unary kernels? (in many cases there might be no ambiguity about that we expect the function to be applied to each value in the list, instead of applied to each list. For example for `round(list<float>)` or `ascii_lower(list<string>)`)\r\n\r\n\r\n"
        },
        {
            "created_at": "2022-11-04T23:24:22.207Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17820?focusedCommentId=17629225) by Weston Pace (westonpace):*\n> Such an approach doesn't really fit our kernels / Acero, I think. One option could be to have a generic kernel to \"map\" another kernel on the list values. where you can pass the function name you want to apply, and a FunctionOptions object matching the kernel. Would something like this be possible technically?\r\n\r\nYes, I think that should be possible for unary kernels.  Though I think mapping a single kernel (as opposed to a single expression) might be a bit limiting, though maybe it isn't so bad.  For example, what if a user wants to do something like `map(lambda f: f.upper() * 2, [\"a\", \"b\", \"c\"])`\r\n\r\nAnother thing is that it should be valid to use n-ary functions too provided the other arguments are scalars.  This discussion has come up in Substrait with respect to lambdas (https://github.com/substrait-io/substrait/issues/349).\r\n\r\nPerhaps the \"map function\" for `List<T>` could be an expression bound to a schema of \"\\{item: T\\}\" (e.g. so you could do `field_ref(0)` or `field_ref(\"item\")`).\r\n\r\nThough if the map function is an expression then a kernel would have to execute an entire expression which may or may not be doable (I've reached the limit of my imagination for a Friday :)"
        }
    ]
}