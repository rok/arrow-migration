{
    "issue": {
        "title": "[C++] Partially mitigating CPU scaling effects in benchmarks",
        "body": "***Note**: This issue was originally created as [ARROW-6098](https://issues.apache.org/jira/browse/ARROW-6098). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe have a lot of benchmarks that return results based on a single iteration\r\n\r\n\r\n```Java\n\r\n(arrow-3.7) 10:46 ~/code/arrow/cpp/build  (master)$ ./release/arrow-builder-benchmark --benchmark_filter=Dict\r\n2019-08-01 10:46:03\r\nRunning ./release/arrow-builder-benchmark\r\nRun on (12 X 4400 MHz CPU s)\r\nCPU Caches:\r\n  L1 Data 32K (x6)\r\n  L1 Instruction 32K (x6)\r\n  L2 Unified 256K (x6)\r\n  L3 Unified 12288K (x1)\r\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.\r\n---------------------------------------------------------------------------\r\nBenchmark                                    Time           CPU Iterations\r\n---------------------------------------------------------------------------\r\nBuildInt64DictionaryArrayRandom      622889286 ns  622864485 ns          1   411.004MB/s\r\nBuildInt64DictionaryArraySequential  546764048 ns  545992395 ns          1   468.871MB/s\r\nBuildInt64DictionaryArraySimilar     737759293 ns  737696850 ns          1   347.026MB/s\r\nBuildStringDictionaryArray           985433473 ns  985363901 ns          1   346.608MB/s\r\n(arrow-3.7) 10:46 ~/code/arrow/cpp/build  (master)$ ./release/arrow-builder-benchmark --benchmark_filter=Dict\r\n2019-08-01 10:46:09\r\nRunning ./release/arrow-builder-benchmark\r\nRun on (12 X 4400 MHz CPU s)\r\nCPU Caches:\r\n  L1 Data 32K (x6)\r\n  L1 Instruction 32K (x6)\r\n  L2 Unified 256K (x6)\r\n  L3 Unified 12288K (x1)\r\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.\r\n---------------------------------------------------------------------------\r\nBenchmark                                    Time           CPU Iterations\r\n---------------------------------------------------------------------------\r\nBuildInt64DictionaryArrayRandom      527063570 ns  527044023 ns          1   485.728MB/s\r\nBuildInt64DictionaryArraySequential  566285427 ns  566270336 ns          1   452.081MB/s\r\nBuildInt64DictionaryArraySimilar     762954193 ns  762332297 ns          1   335.812MB/s\r\nBuildStringDictionaryArray           991095766 ns  991018875 ns          1    344.63MB/s\r\n```\r\n\r\nI'm sure the result here is being heavily affected by CPU scaling but I think we can mitigate the impact of CPU scaling by using the `MinTime`. I find that adding `MinTime(1.0)` to these particular benchmarks makes them more consistent",
        "created_at": "2019-08-01T15:48:51.000Z",
        "updated_at": "2019-08-01T17:35:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-08-01T17:35:41.000Z"
    },
    "comments": [
        {
            "created_at": "2019-08-01T15:50:13.500Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6098?focusedCommentId=16898165) by Antoine Pitrou (apitrou):*\nI think you can simply pass `--benchmark_min_time=1.0` on the command line."
        },
        {
            "created_at": "2019-08-01T17:03:23.188Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6098?focusedCommentId=16898202) by Francois Saint-Jacques (fsaintjacques):*\nYes, I removed most of the static `MinTime` and `Repetitions` to let archery pass them as parameters. `-~~benchmark_min_time` and `~~-benchmark_repetitions` are the preferred way."
        },
        {
            "created_at": "2019-08-01T17:35:41.483Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6098?focusedCommentId=16898221) by Wes McKinney (wesm):*\nGot it, thanks"
        }
    ]
}