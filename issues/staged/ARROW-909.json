{
    "issue": {
        "title": "libjemalloc.so.2: cannot open shared object file: ",
        "body": "***Note**: This issue was originally created as [ARROW-909](https://issues.apache.org/jira/browse/ARROW-909). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n>>> import pyarrow\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/default/src/venv/lib/python2.7/site-packages/pyarrow-0.2.1.dev244+g14bec24-py2.7-linux-x86_64.egg/pyarrow/__init__.py\", line 28, in <module>\n    import pyarrow._config\nImportError: libjemalloc.so.2: cannot open shared object file: No such file or directory\n\n$LD_LIBRARY_PATH has libarrow_jemalloc.a along with other libraries including libarrow.so,  libparquet.so, libparquet_arrow.so. Pyarrow was built using ----with-jemalloc and parquet-cpp was cmake-d with \n-DPARQUET_ARROW=ON  \n\nAlso, noticed that arrow/python documentation has been cleaned up with the installation instructions having the coda approach only .Is this the only supported way going forward ?\n",
        "created_at": "2017-04-28T07:15:46.000Z",
        "updated_at": "2019-06-03T13:05:05.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2017-05-06T21:59:27.000Z"
    },
    "comments": [
        {
            "created_at": "2017-04-28T21:07:50.134Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-909?focusedCommentId=15989459) by Wes McKinney (wesm):*\nhi `[~abdulrahman004]`. Do you have the jemalloc libraries installed in your system? `libjemalloc` must be in your library loader path; having `libarrow_jemalloc.so` is not enough because this is only a binding to Arrow's memory allocator. So either install jemalloc on your system or simply don't build that extension. We have provided for building jemalloc in the C++ libraries' thirdparty stack to facilitate cross-platform packaging (e.g. manylinux1 for Python packages). The expectation is that it will be separately installed on the system where it's deployed. \n\n> Also, noticed that arrow/python documentation has been cleaned up with the installation instructions having the coda approach only .Is this the only supported way going forward ?\n\nI guess we have to define \"supported\". It's hard for us to be on the hook to debug build issues on any arbitrary platform. I added the conda build because that's reasonably portable, and doesn't involve platform specific details (like Linux package managers, or Homebrew). It would be great if you or other could contribute reproducible build instructions for other platforms and package managers. I opened https://issues.apache.org/jira/browse/ARROW-911 to cover this. It would be good to have a build guide for macOS, Ubuntu 14.04 and 16.04, and CentOS/RedHat 6 and/or 7. Since most of the dependencies build out of the box, there will be minimal pre-requisites to install from apt-get/yum/Homebrew. Patches welcome. "
        },
        {
            "created_at": "2017-04-28T22:12:30.747Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-909?focusedCommentId=15989528) by Wes McKinney (wesm):*\nI opened ARROW-913 to make the user experience with jemalloc a bit more pleasant (only complain when you try to use the extension)"
        },
        {
            "created_at": "2017-04-29T01:48:14.947Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-909?focusedCommentId=15989684) by Abdul Rahman (abdulrahman004):*\n`[~wesmckinn]` Thanks. I noticed arrow/cpp does have jemalloc in the build folder, but doesnt load them in system libraries."
        },
        {
            "created_at": "2017-05-06T19:45:29.644Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-909?focusedCommentId=15999551) by Uwe Korn (uwe):*\n`[~abdulrahman004]` Did you have any special compilation/linking options set? Normally `pyarrow/_config.so` should not link to `libjemalloc.so.2`. If you are able to run `lddtree pyarrow/_config.so`, it would really help me to understand where the linkage is coming from.\n\nI made PR https://github.com/apache/arrow/pull/651 to cover for the initial problem that when building jemalloc as an external project it should be statically linked as the shared library is not installed on `make install`."
        },
        {
            "created_at": "2017-05-06T21:59:27.209Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-909?focusedCommentId=15999603) by Wes McKinney (wesm):*\nIssue resolved by pull request 651\n<https://github.com/apache/arrow/pull/651>"
        }
    ]
}