{
    "issue": {
        "title": "[C++] Add vectorized \"IntegersMultipleOf\" to arrow/util/int_util.h",
        "body": "***Note**: This issue was originally created as [ARROW-9253](https://issues.apache.org/jira/browse/ARROW-9253). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere are various places where we check whether an array of integers are all a multiple of another number (e.g. a multiple of 86400000 milliseconds per day). It would be better to factor out this data check into a reusable function similar to the `CheckIntegersInRange` function",
        "created_at": "2020-06-27T23:03:03.000Z",
        "updated_at": "2021-03-24T17:37:52.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-06-28T15:20:54.974Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9253?focusedCommentId=17147363) by Wes McKinney (wesm):*\nSince integer division and modulus are expensive operations I'm not sure whether this operation will make sense computationally. "
        },
        {
            "created_at": "2020-09-07T15:15:50.981Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9253?focusedCommentId=17191753) by Antoine Pitrou (apitrou):*\nIs this actually performance-critical somewhere?"
        },
        {
            "created_at": "2020-09-07T15:39:51.830Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9253?focusedCommentId=17191767) by Antoine Pitrou (apitrou):*\nWe could use high-precision multiplication by reciprocal. Boost's int128_t seems quite fast:\r\nhttps://www.boost.org/doc/libs/1_74_0/libs/multiprecision/doc/html/boost_multiprecision/perf/integer_performance.html"
        },
        {
            "created_at": "2020-09-07T15:46:13.061Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9253?focusedCommentId=17191768) by Antoine Pitrou (apitrou):*\nThough it seems rounding issues may be tricky.\r\n```python\n\r\n>>> k = 86400_000_000_000; x = 123 * k\r\n>>> (x * math.ceil(2**64 / k)) >> 64\r\n123\r\n>>> k = 86400_000_000_000; x = 106751 * k\r\n>>> (x * math.ceil(2**64 / k)) >> 64\r\n106751\r\n\r\n>>> k = 86400_000_000_000; x = -106751 * k\r\n>>> (x * math.ceil(2**64 / k)) >> 64\r\n-106752\r\n>>> (x * math.floor(2**64 / k)) >> 64\r\n-106751\r\n>>> k = 86400_000_000_000; x = -3 * k\r\n>>> (x * math.ceil(2**64 / k)) >> 64\r\n-4\r\n>>> (x * math.floor(2**64 / k)) >> 64\r\n-3\r\n```"
        },
        {
            "created_at": "2020-09-07T16:52:14.250Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9253?focusedCommentId=17191789) by Wes McKinney (wesm):*\nI removed it from any milestone for now"
        },
        {
            "created_at": "2021-03-24T16:41:21.090Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9253?focusedCommentId=17307990) by Antoine Pitrou (apitrou):*\n`[~edponce]` You may want to take a look at this and share your opinion."
        },
        {
            "created_at": "2021-03-24T17:18:06.210Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9253?focusedCommentId=17308019) by Eduardo Ponce (edponce):*\nTo clarify, is the idea to have a function to return true/false on whether a value is a multiple of another OR to calculate the multiplicity value?"
        },
        {
            "created_at": "2021-03-24T17:37:52.188Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9253?focusedCommentId=17308048) by Antoine Pitrou (apitrou):*\nIt's to return true/false. Here is a possible API:\r\n```c++\n\r\n/// Return true iff all values are multiples of factor\r\nbool IntegersMultipleOf(const int64_t* values, int64_t length, int64_t factor);\r\n/// Return true iff all non-null values are multiples of factor\r\nbool IntegersMultipleOf(const int64_t* values, const uint8_t* null_bitmap, int64_t length, int64_t factor);\r\n```\r\n\r\n"
        }
    ]
}