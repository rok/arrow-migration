{
    "issue": {
        "title": "[JS] comparison predicates don't work on 64-bit integers",
        "body": "***Note**: This issue was originally created as [ARROW-2797](https://issues.apache.org/jira/browse/ARROW-2797). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe 64-bit integer vector `get` function returns a 2-element array, which doesn't compare propery in the comparison predicates. We should special case the comparisons for 64-bit integers and timestamps.",
        "created_at": "2018-07-06T03:53:29.000Z",
        "updated_at": "2022-07-12T14:04:48.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2018-07-06T18:05:57.737Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2797?focusedCommentId=16535191) by Taras Novak (TarasNovak):*\nbasically, we'd like to compare ints or find a better way to do this for Timestamps without conversion to Date for 100+K records. Probably same desire applies for other 64 bit packed ints.\r\n\r\nthe origins of this request: <https://beta.observablehq.com/@randomfractals/apache-arrow>\r\n\r\nI'd like to optimize that without unpacking millisecs\u00a0from epoch to dates.\u00a0\r\n\r\nCreate new Timestamp from a Date start/end filter example instead with arrow could probably do a trick for this perf. tuning\u00a0bit, but I suspect there is more we should unpack there.\r\n\r\nThanks to `[~bhulette]` for collabo on this bit!\r\n\r\n\u00a0"
        },
        {
            "created_at": "2018-08-07T09:02:11.480Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2797?focusedCommentId=16571302) by Neville Dipale (nevi_me):*\nThere's also [https://github.com/apache/arrow/issues/2358](https://github.com/apache/arrow/issues/2358) which looks like the same issue."
        },
        {
            "created_at": "2018-08-07T12:08:20.749Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2797?focusedCommentId=16571541) by Cameron Davison (camerondavison):*\nJust to keep in mind this will also affect Int128"
        },
        {
            "created_at": "2019-06-12T17:28:57.931Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2797?focusedCommentId=16862299) by Wes McKinney (wesm):*\nAny thoughts about this for 0.14.0? `[~bhulette]` [~paul.e.taylor]"
        },
        {
            "created_at": "2019-06-19T16:46:43.569Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2797?focusedCommentId=16867816) by Brian Hulette (bhulette):*\nMaybe if we only support this when we have BigInt it wouldn't be that big of a change?"
        },
        {
            "created_at": "2022-07-12T14:04:48.157Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2797?focusedCommentId=17565756) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}