{
    "issue": {
        "title": "[Python] bool value of scalars depends on data type",
        "body": "***Note**: This issue was originally created as [ARROW-12695](https://issues.apache.org/jira/browse/ARROW-12695). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n`pyarrow.Scalar` and its subclasses do not implement `__bool__` method. The default implementation does not seem to do the right thing. For example:\r\n```java\n\r\n>>> import pyarrow as pa\r\n>>> na_value = pa.scalar(None, type=pa.int32())\r\n>>> bool(na_value)\r\nTrue\r\n>>> na_value = pa.scalar(None, type=pa.struct([('a', pa.int32())]))\r\n>>> bool(na_value)\r\nFalse\r\n>>> bool(pa.scalar(None, type=pa.list_(pa.int32())))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pyarrow\\scalar.pxi\", line 572, in pyarrow.lib.ListScalar.__len__\r\nTypeError: object of type 'NoneType' has no len()\r\n>>>\r\n```\r\nPlease consider implementing `___bool____` method. It seems reasonable to delegate to the `____bool___` method of the wrapped object.",
        "created_at": "2021-05-08T00:31:48.000Z",
        "updated_at": "2021-05-19T01:07:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-05-08T00:33:38.426Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12695?focusedCommentId=17341080) by Sergey Mozharov (mosalx):*\nRelated issue: ARROW-12609"
        },
        {
            "created_at": "2021-05-17T10:17:27.151Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12695?focusedCommentId=17346046) by Joris Van den Bossche (jorisvandenbossche):*\nCurrently pyarrow doesn't implement any `\\_\\_bool\\_\\_`. In general, Python will then always return True by default, but it seems that if your object is \"sequence-like\" (having a `\\_\\_len\\_\\_`), it will check the length. This is described at https://docs.python.org/3/library/stdtypes.html#truth-value-testing\r\n\r\nSo here the underlying reason is that this fails:\r\n\r\n```Java\n\r\n>>> len(pa.scalar([1, 2], type=pa.list_(pa.int32())))\r\n2\r\n\r\n>>> len(pa.scalar(None, type=pa.list_(pa.int32())))\r\n...\r\nTypeError: object of type 'NoneType' has no len()\r\n```\r\n\r\nBut the question is also, what should this return instead? Returning 0 in this case also doesn't feel correct, as you can also have an empty list scalar with a length of zero.\r\n\r\nIn general, I think it will be hard to give a nice and consistent interface for pyarrow scalars involving null scalars (we could provide better error messages though?)\r\n\r\n`[~mosalx]` what's your use case for wanting to do `bool(null_scalar)`, and what do you think it should return? (also True as the other scalars?)"
        },
        {
            "created_at": "2021-05-17T10:29:57.973Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12695?focusedCommentId=17346056) by Joris Van den Bossche (jorisvandenbossche):*\nAh, I see that ARROW-12609 has some more background."
        },
        {
            "created_at": "2021-05-19T01:07:57.466Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12695?focusedCommentId=17347229) by Sergey Mozharov (mosalx):*\n`[~jorisvandenbossche]` \u00a0The main concern is that bool value depends on the data type. I can think of two options:\r\n \\* delegate to `__bool__` method of the wrapped Python object. For invalid scalars, that would be `None` so the bool value will be `False`\r\n\r\n \\* make all scalars, valid or invalid, with all types return True, which I think is the default for all python objects that do not define `__len__` method\r\n\r\nI am leaning towards the first option because it is easier to reason about and would be simple to implement."
        }
    ]
}