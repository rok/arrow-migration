{
    "issue": {
        "title": "[Rust][Experiment][WIP] Experiment with a TypedArray trait",
        "body": "***Note**: This issue was originally created as [ARROW-11546](https://issues.apache.org/jira/browse/ARROW-11546). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA few of the arrow kernels rely on macros to iterate over values using a common \".value()\" function, but:\r\n- this is unsafe on some array types (string, binary), but unsafe on other array types (primitive)\n- this forces iteration by index, which does not always optimize away bounds-checking (at least in the binary case)\n  \n  This PR is an experiment with a TypedArray trait, which provides access to array values (along with associated types describing those values).\u00a0 This will NOT remove the need for downcasting, as the associated types aren't object-safe.\u00a0 But it should be sufficient to allow simple processing of values from multiple array types using a generic function instead of a macro.",
        "created_at": "2021-02-07T19:49:32.000Z",
        "updated_at": "2021-04-26T12:47:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T12:47:10.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-26T12:47:08.048Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11546?focusedCommentId=17332210) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/179"
        }
    ]
}