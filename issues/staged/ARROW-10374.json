{
    "issue": {
        "title": "[Rust] [DataFusion] Grouping by column position",
        "body": "***Note**: This issue was originally created as [ARROW-10374](https://issues.apache.org/jira/browse/ARROW-10374). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be great to have the support of grouping by column position instead of grouping by exact expression. For example:\r\n```java\n\r\nSELECT state, COUNT(*)\u00a0FROM customers GROUP BY 1\n```\r\n\r\n\r\nFor example, for a query like\r\n\r\n```Java\n\r\n> select database_name, storage, sum(estimated_bytes) from chunks group by database_name, storage;\r\n+-----------------------------------+---------------------+----------------------+\r\n| database_name                     | storage             | SUM(estimated_bytes) |\r\n+-----------------------------------+---------------------+----------------------+\r\n| 844910ece80be8bc_cac95fa59126cd01 | OpenMutableBuffer   | 109737               |\r\n| 844910ece80be8bc_05d1e95653672000 | OpenMutableBuffer   | 2337719              |\r\n| 844910ece80be8bc_7be09b71c487d5d3 | ClosedMutableBuffer | 799682176            |\r\n+-----------------------------------+---------------------+----------------------+\r\n```\r\n\r\nIt can be expressed in the same way using numbers to refer to other items in the select list.\r\n\r\nHowever, this does not work today in DataFusion:\r\n\r\n```Java\n\r\n> select database_name, storage, sum(estimated_bytes) from chunks group by 1, 2;\r\nPlan(\"Projection references non-aggregate values\")\r\n```\r\n",
        "created_at": "2020-10-23T04:26:27.000Z",
        "updated_at": "2021-04-26T13:22:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T13:22:23.000Z"
    },
    "comments": [
        {
            "created_at": "2020-10-23T06:03:45.335Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10374?focusedCommentId=17219486) by Jorge Leit\u00e3o (jorgecarleitao):*\nCould you describe what is the use-case? E.g. in which situation does that improve readability over the having the column name, or in which case does the column name not work?"
        },
        {
            "created_at": "2020-10-23T06:41:53.205Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10374?focusedCommentId=17219499) by Pavel Tiunov (paveltiunov):*\nHey `[~jorgecarleitao]`! Thanks for the quick turnaround. The use case is usually to support grouping by complex expressions. For example\r\n```java\n\r\nSELECT date_trunc(convert_tz(`page_views__time_hour`, 'America/Los_Angeles'), 'week') `page_views__time_week`, sum(`page_views__count`) `page_views__count` FROM page_views GROUP BY date_trunc(convert_tz(`page_views__time_hour`, 'America/Los_Angeles'), 'week') LIMIT 10000\r\n```\r\nbecomes\r\n```java\n\r\nSELECT date_trunc(convert_tz(`page_views__time_hour`, 'America/Los_Angeles'), 'week') `page_views__time_week`, sum(`page_views__count`) `page_views__count` FROM page_views GROUP BY 1 LIMIT 10000\r\n```\r\nCalculated columns can be pretty complex and it usually just bloats up the SQL significantly. I believe it's beneficial to have this feature as most of the modern query engines have it."
        },
        {
            "created_at": "2020-10-23T08:00:39.544Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10374?focusedCommentId=17219536) by Jorge Leit\u00e3o (jorgecarleitao):*\nThanks for the example, `[~paveltiunov]` . makes sense\r\n\r\nMeanwhile, I think that you can use <`expression> AS name` and `GROUP BY name` .\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-04-26T13:22:21.745Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10374?focusedCommentId=17332304) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-datafusion/issues/110"
        }
    ]
}