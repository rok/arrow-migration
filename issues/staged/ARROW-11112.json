{
    "issue": {
        "title": "[Rust][DataFusion] Implement vectorized hashing",
        "body": "***Note**: This issue was originally created as [ARROW-11112](https://issues.apache.org/jira/browse/ARROW-11112). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, the approach of the join and hash aggregates is to create a key individually from the row values. However, this is far from ideal, as it doesn't utilize the cache vectorized nature of Arrow, but instead copies data into a vec, traverses multiple arrays in the inner loop, etc.\r\n\r\nThis blog post has a summary of an approach to do this in a vectorized way.\r\n\r\n<https://www.cockroachlabs.com/blog/vectorized-hash-joiner/>\r\n\r\n\u00a0\r\n\r\n\r\nTBD:\r\nWe should decide/find out whether it still makes sense to use rust `HashMap` (with () as key?) or whether to create an own? Benefit of using hashmap is that there is an API, can resize automatically, and uses SIMD, and also exposes some lower level bits we can use here.\r\n\r\n\r\n\r\n\u00a0",
        "created_at": "2021-01-03T06:05:31.000Z",
        "updated_at": "2021-04-26T13:26:02.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T13:26:02.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-26T13:26:01.361Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11112?focusedCommentId=17332337) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-datafusion/issues/142"
        }
    ]
}