{
    "issue": {
        "title": "[Doc] Better document the Tensor classes in the prose documentation",
        "body": "***Note**: This issue was originally created as [ARROW-5858](https://issues.apache.org/jira/browse/ARROW-5858). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFrom a comment from `[~wesmckinn]` in ARROW-2714:\r\n\r\n> The Tensor classes are independent from the columnar data structures, though they reuse pieces of metadata, metadata serialization, memory management, and IPC.\n> \n> The purpose of adding these to the library was to have in-memory data structures for handling Tensor/ndarray data and metadata that \"plug in\" to the rest of the Arrow C++ system (Plasma store, IO subsystem, memory pools, buffers, etc.).\n> \n> Theoretically you could return a Tensor when creating a non-contiguous slice of an Array; in light of the above, I don't think that would be intuitive.\n> \n> When we started the project, our focus was creating an open standard for in-memory columnar data, a hitherto unsolved problem. The project's scope has expanded into peripheral problems in the same domain in the meantime (with the mantra of creating interoperable components, a use-what-you-need development platform for system developers). I think this aspect of the project could be better documented / advertised, since the project's initial focus on the columnar standard has given some the mistaken impression that we are not interested in any work outside of that.",
        "created_at": "2019-07-04T21:47:03.000Z",
        "updated_at": "2020-01-07T23:45:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Documentation",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}