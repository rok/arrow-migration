{
    "issue": {
        "title": "[Python] Performance difference between pc.multiply vs pd.multiply",
        "body": "***Note**: This issue was originally created as [ARROW-9623](https://issues.apache.org/jira/browse/ARROW-9623). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWanted to report the performance difference observed between Pandas and Pyarrow.\r\n\r\n\u00a0\r\n```java\n\r\n import numpy as np\r\n import pandas as pd\r\n import pyarrow as pa\r\n import pyarrow.compute as pc\r\ndf = pd.DataFrame(np.random.randn(100000000))\r\n %timeit -n 5 -r 5 df.multiply(df)\r\ntable = pa.Table.from_pandas(df)\r\n %timeit -n 5 -r 5 pc.multiply(table[0],table[0])\r\n```\r\nResults:\r\n```java\n\r\n%timeit -n 5 -r 5 df.multiply(df)\r\n 374 ms \u00b1 15.9 ms per loop (mean \u00b1 std. dev. of 5 runs, 5 loops each)``\n```\r\n\u00a0\r\n```java\n\r\n%timeit -n 5 -r 5 pc.multiply(table[0],table[0])\r\n 698 ms \u00b1 297 ms per loop (mean \u00b1 std. dev. of 5 runs, 5 loops each)\n```",
        "created_at": "2020-08-03T09:44:29.000Z",
        "updated_at": "2020-08-03T15:31:44.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-08-03T15:31:44.961Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9623?focusedCommentId=17170112) by Wes McKinney (wesm):*\nMy guess is that it's because NumPy does runtime AVX2 dispatch. I made an AVX2 build of pyarrow and I see no performance difference\r\n\r\n```Java\n\r\nIn [5]: arr = np.random.randn(100000000)   \r\n\r\nIn [6]: timeit arr * arr                                                                                                   \r\n87.3 ms \u00b1 813 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n\r\nIn [7]: pa_arr = pa.array(arr)                                                                                             \r\n\r\nIn [8]: timeit pc.multiply(pa_arr, pa_arr)                                                                                 \r\n87.5 ms \u00b1 5.16 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\n```"
        }
    ]
}