{
    "issue": {
        "title": "[C++] Unify KeyColumnArray and ArraySpan",
        "body": "***Note**: This issue was originally created as [ARROW-17257](https://issues.apache.org/jira/browse/ARROW-17257). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nBoth of these are essentially non-owning views into ArrayData.  They were developed somewhat independently but share a pretty similar structure.  I don't think we need both and we should unify on a common type for simplicity provided we can show no real performance difference.",
        "created_at": "2022-07-29T19:13:08.000Z",
        "updated_at": "2022-08-04T21:25:05.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-08-02T05:59:51.561Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17257?focusedCommentId=17574062) by Aldrin Montana (octalene):*\nLinking ARROW-8991, because I am exploring the use of **KeyColumnArray** to leverage hashing code from **key_hash.h**. But, I am also trying to use **ExecSpan** and **ArraySpan** which is being added to the kernel execution framework."
        },
        {
            "created_at": "2022-08-04T21:24:44.613Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17257?focusedCommentId=17575456) by Aldrin Montana (octalene):*\nDiscussed initial directions of this with `[~sakras]` and `[~michalno]`.\r\n\r\nIn general, _KeyColumnArray_ tries to minimize it's memory footprint as much as possible, whereas _ArraySpan_ tries to be a non-owning version of _ArrayData_.\r\n\r\nWork in ARROW-8991 is going to take the following direction: _KeyColumnArray_ is essentially a flattened _ArraySpan_, so when using the _Hashing32_ and _Hashing64_ functions, the a _KeyColumnArray_ will be constructed from an _ArraySpan_.\r\n\r\nOtherwise, the 2 classes are very similar and it's okay if _ArraySpan_ eventually replaces/subsumes _KeyColumnArray_ as long as performance regressions are not introduced."
        }
    ]
}