{
    "issue": {
        "title": "[C++] csv::TableReader column names, Read() arguments",
        "body": "***Note**: This issue was originally created as [ARROW-10219](https://issues.apache.org/jira/browse/ARROW-10219). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSome feature requests:\r\n\r\n- csv::TableReader `column_names` method, and/or `schema` method. This will (in most cases) require IO to get these from the file, but that's fine. There are use cases (we've seen in R) where it would help to be able to get the names from the file (e.g. when you specify column types, it's a map of column name to type, so you can't currently specify types without also specifying names)\n- Add Read(std::vector<int>) like how feather (and parquet?) have so that you don't have to parse and allocate columns you don't want.\n  \n  cc `[~apitrou]` `[~romainfrancois]`",
        "created_at": "2020-10-07T17:33:27.000Z",
        "updated_at": "2022-07-12T14:04:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-10-07T17:38:49.410Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10219?focusedCommentId=17209724) by Antoine Pitrou (apitrou):*\nI'm not sure I understand #1, can you explain a bit more?\r\nAs for #2, by giving `ConvertOptions::include_columns` you can already restrict which columns you want to convert."
        },
        {
            "created_at": "2020-10-07T18:28:52.593Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10219?focusedCommentId=17209762) by Neal Richardson (npr):*\nI didn't know about include_columns, thanks.\r\n\r\nHere's two use cases for being able to get the column names without reading the whole table:\r\n\r\n- R's various CSV readers all let you specify column types as an unnamed vector of types; column names can also be specified but via a different argument. But the arrow csv reader currently can't do this: you can't specify column types while allowing the column names to be read from the file. So in this case, I'd like to be able to instantiate a TableReader with the other given options, query to get the column names, and then use those to create the fully specified TableReader to call Read on.\n- Some of R's CSV readers let you specify columns to keep in (or exclude from) the resulting data frame either by integer indices or by some expression (e.g. `starts_with(\"something\")`). In order to pass those to `ConvertOptions::include_columns`, I need to get the column names from the CSV so that I can translate those."
        },
        {
            "created_at": "2021-06-23T14:15:59.908Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10219?focusedCommentId=17368236) by Antoine Pitrou (apitrou):*\ncc `[~westonpace]`"
        },
        {
            "created_at": "2021-06-23T17:40:18.258Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10219?focusedCommentId=17368379) by Weston Pace (westonpace):*\nIt would probably be column_names and not schema.\u00a0 The table reader can do late inference so it may not know the final schema until the final table is read.\u00a0 But column_names should be pretty straightforward to add."
        },
        {
            "created_at": "2022-07-12T14:04:30.527Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10219?focusedCommentId=17565667) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}