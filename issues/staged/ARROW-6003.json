{
    "issue": {
        "title": "[C++] Better input validation and error messaging in CSV reader",
        "body": "***Note**: This issue was originally created as [ARROW-6003](https://issues.apache.org/jira/browse/ARROW-6003). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFollowup to https://issues.apache.org/jira/browse/ARROW-5747.\u00a0The error message(s) are not great when you give bad input. For example, if I give too many or too few `column_names`, the error I get is `Invalid: Empty CSV file`. In fact, that's about the only error message I've seen from the CSV reader, no matter what I've thrown at it.\r\n\r\nIt would be better if\u00a0error messages were more specific so that I as a user might know how to fix my bad input.",
        "created_at": "2019-07-22T20:44:37.000Z",
        "updated_at": "2020-01-30T17:39:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-01-30T17:39:43.000Z"
    },
    "comments": [
        {
            "created_at": "2019-07-22T20:45:35.953Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16890463) by Antoine Pitrou (apitrou):*\nDo you have a Python or C++ reproducer?"
        },
        {
            "created_at": "2019-07-22T20:49:42.551Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16890466) by Neal Richardson (npr):*\nFor that particular case, it would be easy to modify a test for the column_names feature and send one too few names. Though I suspect that this is a more general problem."
        },
        {
            "created_at": "2019-09-17T15:07:55.867Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16931551) by Antoine Pitrou (apitrou):*\nI can't reproduce. If I send one too few names, I get:\r\n```java\n\r\npyarrow.lib.ArrowInvalid: CSV parse error: Expected 1 columns, got 2\r\n \n```"
        },
        {
            "created_at": "2019-09-17T15:08:13.976Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16931553) by Antoine Pitrou (apitrou):*\nShould this be closed?"
        },
        {
            "created_at": "2019-09-17T17:31:54.673Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16931683) by Wes McKinney (wesm):*\nClosing until we have a reproducer"
        },
        {
            "created_at": "2019-09-17T17:36:12.928Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16931688) by Neal Richardson (npr):*\nI'm looking"
        },
        {
            "created_at": "2019-09-17T19:19:26.345Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16931757) by Neal Richardson (npr):*\nThis is still the behavior in R. Slightly lower-level repro:\r\n\r\n```r\n\r\nlibrary(arrow)\r\ntf <- tempfile()\r\n# `iris` is a built-in dataset\r\nwrite.table(iris, tf, sep = \",\", row.names = FALSE, col.names = FALSE)\r\nreader <- CsvTableReader$create(tf, read_options=CsvReadOptions$create(column_names=\"just one name\"))\r\nreader$Read()\r\n## Error in csv___TableReader__Read(self) : Invalid: Empty CSV file\r\n```\r\n\r\nThat function is defined as\r\n\r\n```cpp\n\r\nstd::shared_ptr<arrow::Table> csv___TableReader__Read(\r\n    const std::shared_ptr<arrow::csv::TableReader>& table_reader) {\r\n  std::shared_ptr<arrow::Table> table;\r\n  STOP_IF_NOT_OK(table_reader->Read(&table));\r\n  return table;\r\n}\r\n```\r\n\r\nAnd `STOP_IF_NOT_OK` is\r\n\r\n```cpp\n\r\n#define STOP_IF_NOT(TEST, MSG)    \\\r\n  do {                            \\\r\n    if (!(TEST)) Rcpp::stop(MSG); \\\r\n  } while (0)\r\n\r\n#define STOP_IF_NOT_OK(s) STOP_IF_NOT(s.ok(), s.ToString())\r\n```\r\n\r\nso assuming that your python code is doing essentially the same thing, maybe the difference in R is that macro, i.e. the `s.ToString()` maybe is not including the specific error message?"
        },
        {
            "created_at": "2019-09-17T20:12:57.730Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16931784) by Neal Richardson (npr):*\nI tried switching that to `s.message()`, as used in the `check_status` function in `pyarrow/error.pxi`, but I still get \"Empty CSV file\" (just without \"Invalid: \" preceding it). "
        },
        {
            "created_at": "2019-09-17T20:13:52.861Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16931786) by Neal Richardson (npr):*\n`[~pitrou]` can you share your code that returns the other error message? I wonder if we're hitting different C++ code paths."
        },
        {
            "created_at": "2019-09-18T08:12:49.635Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16932188) by Antoine Pitrou (apitrou):*\nCan you post the first lines of the CSV file?"
        },
        {
            "created_at": "2019-09-18T08:15:24.657Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16932190) by Antoine Pitrou (apitrou):*\nHere is an example in Python:\r\n```python\n\r\n>>> s = b\"\"\"a,b,c\\n1,2,3\\n\"\"\"                                                                                                                                    \r\n>>> csv.read_csv(io.BytesIO(s))                                                                                                                                  \r\npyarrow.Table\r\na: int64\r\nb: int64\r\nc: int64\r\n>>> options = csv.ReadOptions(column_names=['a', 'b'])                                                                                                           \r\n>>> csv.read_csv(io.BytesIO(s), read_options=options)                                                                                                            \r\nTraceback (most recent call last):\r\n  File \"<ipython-input-9-d1311f31bd36>\", line 1, in <module>\r\n    csv.read_csv(io.BytesIO(s), read_options=options)\r\n  File \"pyarrow/_csv.pyx\", line 541, in pyarrow._csv.read_csv\r\n    check_status(reader.get().Read(&table))\r\n  File \"pyarrow/error.pxi\", line 78, in pyarrow.lib.check_status\r\n    raise ArrowInvalid(message)\r\nArrowInvalid: CSV parse error: Expected 2 columns, got 3\r\n```\r\n"
        },
        {
            "created_at": "2019-09-18T14:36:23.764Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16932507) by Neal Richardson (npr):*\n```Java\n\r\n> write.table(iris[1:2,], file=\"\", sep = \",\", row.names = FALSE, col.names = FALSE)\r\n5.1,3.5,1.4,0.2,\"setosa\"\r\n4.9,3,1.4,0.2,\"setosa\"\r\n```\r\n"
        },
        {
            "created_at": "2019-09-18T14:40:38.823Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=16932511) by Antoine Pitrou (apitrou):*\nOk, so I get this:\r\n```python\n\r\n>>> b = b\"\"\"5.1,3.5,1.4,0.2,\"setosa\" \r\n...: 4.9,3,1.4,0.2,\"setosa\" \r\n...: \"\"\"                                                                                                                                                             \r\n>>> csv.read_csv(io.BytesIO(b))                                                                                                                                      \r\npyarrow.Table\r\n5.1: double\r\n3.5: int64\r\n1.4: double\r\n0.2: double\r\nsetosa: string\r\n>>> csv.read_csv(io.BytesIO(b), read_options=csv.ReadOptions(column_names=['a', 'b']))                                                                               \r\nTraceback (most recent call last):\r\n  File \"<ipython-input-7-a2e61d90e816>\", line 1, in <module>\r\n    csv.read_csv(io.BytesIO(b), read_options=csv.ReadOptions(column_names=['a', 'b']))\r\n  File \"pyarrow/_csv.pyx\", line 541, in pyarrow._csv.read_csv\r\n    check_status(reader.get().Read(&table))\r\n  File \"pyarrow/error.pxi\", line 78, in pyarrow.lib.check_status\r\n    raise ArrowInvalid(message)\r\nArrowInvalid: CSV parse error: Expected 2 columns, got 5\r\n```"
        },
        {
            "created_at": "2020-01-30T17:25:46.665Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=17026858) by Antoine Pitrou (apitrou):*\n`[~npr]` Can you check the issue again and see if there's anything to do?"
        },
        {
            "created_at": "2020-01-30T17:39:23.728Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6003?focusedCommentId=17026871) by Neal Richardson (npr):*\nSeems better now. Rerunning the example from above:\r\n\r\n```Java\n\r\n> library(arrow)\r\n> tf <- tempfile()\r\n> write.table(iris, tf, sep = \",\", row.names = FALSE, col.names = FALSE)\r\n> reader <- CsvTableReader$create(tf, read_options=CsvReadOptions$create(column_names=\"just one name\"))\r\n> reader$Read()\r\nError in csv___TableReader__Read(self) : \r\n  Invalid: CSV parse error: Expected 1 columns, got 5\r\n```"
        }
    ]
}