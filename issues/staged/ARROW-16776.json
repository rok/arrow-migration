{
    "issue": {
        "title": "[R] dplyr::glimpse method for arrow table and datasets",
        "body": "***Note**: This issue was originally created as [ARROW-16776](https://issues.apache.org/jira/browse/ARROW-16776). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen working with Arrow datasets/tables, I often find myself wanting to interactively print or \"see\" the results of a query or the first few rows of the data without having to fully collect into memory. \r\n\r\nI can perform exploratory data analysis on large out-of-memory datasets via Arrow + dplyr but in order to print the returned values I have to collect() into memory or send to_duckdb().\r\n \\* compute() - returns number of rows/columns, but no data\r\n \\* collect() - returns data fully into memory, can be combined with head()\r\n \\* to_duckdb() - keeps data out of memory, always returns top 10 rows and all columns, optionally increase/decrease number of printed rows\r\n\r\nWhile to_duckdb() gives me the ability to do true EDA, it seems counterintuitive to need to send the arrow table over to a duckdb database just to see the glimpse()/head() equivalent.\r\n\r\nMy feature request is that there is a dplyr::glimpse() method that will lazily print the first few values of table/dataset. The expected output would be something like the below.\r\n\r\n``` r\r\nlibrary(dplyr)\r\nlibrary(arrow)\r\n\r\nmtcars %>% arrow::write_parquet(\"mtcars.parquet\")\r\ncar_ds <- arrow::open_dataset(\"mtcars.parquet\")\r\n\r\ncar_ds %>% \r\n  glimpse()\r\n\r\nRows: ??\r\nColumns: 11\r\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, \u2026\r\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, \u2026\r\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 36\u2026\r\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 2\u2026\r\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, \u2026\r\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.\u2026\r\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17\u2026\r\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, \u2026\r\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \u2026\r\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, \u2026\r\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, \u2026\r\n```\r\n\r\nCurrently glimpse() will return a list output where the majority of the output\u00a0is erroneous to the actual data/values.\r\n\r\n``` r\r\nlibrary(dplyr)\r\nlibrary(arrow)\r\n\r\nmtcars %>% arrow::write_parquet(\"mtcars.parquet\")\r\ncar_ds <- arrow::open_dataset(\"mtcars.parquet\")\r\n\r\ncar_ds %>%\u00a0\r\n\u00a0 glimpse()\r\n#> Classes 'FileSystemDataset', 'Dataset', 'ArrowObject', 'R6' <FileSystemDataset>\r\n#> \u00a0 Inherits from: <Dataset>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 .class_title: function ()\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 files: active binding\r\n#> \u00a0 \u00a0 filesystem: active binding\r\n#> \u00a0 \u00a0 format: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 metadata: active binding\r\n#> \u00a0 \u00a0 NewScan: function ()\u00a0\r\n#> \u00a0 \u00a0 num_cols: active binding\r\n#> \u00a0 \u00a0 num_rows: active binding\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: active binding\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: active binding\r\n\r\ncar_ds %>%\r\n\u00a0 filter(cyl == 6) %>%\r\n\u00a0 glimpse()\r\n#> List of 7\r\n#> \u00a0$ mpg :Classes 'FileSystemDataset', 'Dataset', 'ArrowObject', 'R6' <FileSystemDataset>\r\n#> \u00a0 Inherits from: <Dataset>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 .class_title: function ()\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 files: active binding\r\n#> \u00a0 \u00a0 filesystem: active binding\r\n#> \u00a0 \u00a0 format: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 metadata: active binding\r\n#> \u00a0 \u00a0 NewScan: function ()\u00a0\r\n#> \u00a0 \u00a0 num_cols: active binding\r\n#> \u00a0 \u00a0 num_rows: active binding\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: active binding\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: active binding\u00a0\r\n#> \u00a0$ cyl :List of 11\r\n#> \u00a0 ..$ mpg :Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ cyl :Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ disp:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ hp \u00a0:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ drat:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ wt \u00a0:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ qsec:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ vs \u00a0:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ am \u00a0:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ gear:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ carb:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0$ disp:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0$ hp \u00a0: chr(0)\u00a0\r\n#> \u00a0$ drat: NULL\r\n#> \u00a0$ wt \u00a0: list()\r\n#> \u00a0$ qsec: logi(0)\u00a0\r\n#> \u00a0- attr(\\*, \"class\")= chr \"arrow_dplyr_query\"\r\n```\r\n\r\n<sup>Created on 2022-06-07 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>",
        "created_at": "2022-06-07T13:37:22.000Z",
        "updated_at": "2022-07-12T19:48:21.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-07-12T19:48:21.000Z"
    },
    "comments": [
        {
            "created_at": "2022-07-12T19:48:21.543Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16776?focusedCommentId=17565990) by Neal Richardson (npr):*\nIssue resolved by pull request 13563\n<https://github.com/apache/arrow/pull/13563>"
        }
    ]
}