{
    "issue": {
        "title": "[R] Implement is.type() functions for dplyr",
        "body": "***Note**: This issue was originally created as [ARROW-12781](https://issues.apache.org/jira/browse/ARROW-12781). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nDefine functions in `nse_funcs` for all the important base R generic `is.type()`\u00a0functions, including:\r\n \\* `is.numeric()`\r\n \\* `is.double()`\r\n \\* `is.integer()`\r\n \\* `is.integer64()`\r\n \\* `is.character()`\r\n \\* `is.logical()`\r\n\r\nMaybe also:\r\n \\* `is.factor() # TRUE for dictionary types`\r\n \\* `is.ordered() # TRUE for ordered dictionary types`\r\n \\* `is.list() # TRUE for ListArrays`\r\n\r\nI think the easiest way to implement this would be to check `$type_id()` against the `Type` enum values, for example:\r\n```r\n\r\narray$type_id() %in% Type[c(\"UINT8\", \"INT8\", ...)]\r\n```\r\nFor this to work the same way on unevaluated `Expression` columns in `arrow_dplyr_query` objects, add a public function `type_id()` to the `Expression` R6 class like this:\r\n```r\n\r\ntype_id = function(schema) compute___expr__type(self, schema)$id,\n```",
        "created_at": "2021-05-13T20:56:19.000Z",
        "updated_at": "2021-05-30T14:52:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-05-30T14:52:08.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-13T20:57:34.252Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12781?focusedCommentId=17344127) by Ian Cook (icook):*\n`[~npr]` \u00a0what do you think about whether these should be defined as `ArrowDatum` methods or only defined in `nse_funcs`?"
        },
        {
            "created_at": "2021-05-13T21:42:35.856Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12781?focusedCommentId=17344147) by Ian Cook (icook):*\nHmm, it looks like for this to work on `Expression` objects, we also need to pass the schema to the `$type()` method. I'm not sure how exactly we would do that but it would certainly not work outside of the dplyr context."
        },
        {
            "created_at": "2021-05-13T22:35:09.021Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12781?focusedCommentId=17344170) by Neal Richardson (npr):*\nI think we only want them defined in dplyr, and maybe only inside where(). Suppose you defined is.numeric to return TRUE on an Arrow int32() array, and then you call a base R function that has `if (is.numeric(var) ...`. That will probably be ugly."
        },
        {
            "created_at": "2021-05-14T01:10:38.310Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12781?focusedCommentId=17344209) by Ian Cook (icook):*\nOk, thanks, agreed.\r\n\r\nI think it's OK to have them defined for use in dplyr outside of `where()`, just like the `as.<type>()` functions are"
        },
        {
            "created_at": "2021-05-30T14:52:08.258Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12781?focusedCommentId=17354070) by Ian Cook (icook):*\nIssue resolved by pull request 10327\n<https://github.com/apache/arrow/pull/10327>"
        }
    ]
}