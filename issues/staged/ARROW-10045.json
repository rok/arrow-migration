{
    "issue": {
        "title": "Pandas -> PyArrow ->JS",
        "body": "***Note**: This issue was originally created as [ARROW-10045](https://issues.apache.org/jira/browse/ARROW-10045). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nDoes the JS Table reader work?\r\n\r\nI return pa.serialize(pa.Table.from_pandas(df)).to_buffer().to_pybytes() as application/octet-stream from a HTTP endpoint.\r\n\r\nThen using Javascript I try to read it:\r\n\r\nconst table = await Table.from(fetch((\"/myendpoint\")));\r\n console.log(table.toString());\r\n\r\nbut it prints only [object Object]\u00a0and using the debugger shows an empty&unusable table. Schema and data is empty, the column with the given name is not found.\r\n\r\nIt doesn't throw any error.\u00a0\r\n\r\nHow is this supposed to work? Do I miss something on the python or JS side?",
        "created_at": "2020-09-19T23:45:50.000Z",
        "updated_at": "2022-08-27T14:41:58.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-09-21T18:43:48.000Z"
    },
    "comments": [
        {
            "created_at": "2020-09-21T14:47:39.801Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10045?focusedCommentId=17199425) by Neal Richardson (npr):*\nPossibly relevant: ARROW-9518 `[~jorisvandenbossche]`?"
        },
        {
            "created_at": "2020-09-21T18:43:29.758Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10045?focusedCommentId=17199586) by Uwe Korn (uwe):*\nThe problem is that pyarrow.serialize is a custom format only understood by pyarrow. To interact with Arrow JS you need to use the writers from the pyarrow.ipc package."
        },
        {
            "created_at": "2020-09-21T18:57:45.896Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10045?focusedCommentId=17199596) by Adam Lippai (alippai):*\nSo I was just unlucky finding an input which doesn't throw :D\r\n\r\nI'll try it later, thanks Uwe!"
        },
        {
            "created_at": "2020-09-21T18:59:17.689Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10045?focusedCommentId=17199600) by Adam Lippai (alippai):*\n<https://arrow.apache.org/docs/python/ipc.html>\u00a0this doesn't have a \"table\" example. When I figure it out I'm happy to add the docs."
        },
        {
            "created_at": "2020-09-21T20:51:50.569Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10045?focusedCommentId=17199661) by Wes McKinney (wesm):*\n`pyarrow.serialize` is due for imminent deprecation if it is not already deprecated"
        },
        {
            "created_at": "2020-09-23T07:13:43.212Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10045?focusedCommentId=17200620) by Joris Van den Bossche (jorisvandenbossche):*\nYes, see the issue that Neal posted for the deprecation: https://issues.apache.org/jira/browse/ARROW-9518 \r\nWill try to get to it for 2.0\r\n\r\n`[~alippai]` some more example are certainly welcome!"
        },
        {
            "created_at": "2020-10-05T00:17:55.917Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10045?focusedCommentId=17207790) by Adam Lippai (alippai):*\nThis works:\r\n\r\nReturning the correct bytes from Python\r\n```python\n\r\ntable =\u00a0pa.Table.from_pandas(df)\r\nbatches\u00a0=\u00a0table.to_batches()\r\nsink\u00a0=\u00a0pa.BufferOutputStream()\r\nwriter\u00a0=\u00a0pa.ipc.new_stream(sink,\u00a0table.schema)\r\nfor\u00a0batch\u00a0in\u00a0batches:\r\n \u00a0 \u00a0writer.write_batch(batch)\r\nwriter.close()\r\nresponse_bytes = sink.getvalue().to_pybytes()\n```\r\n\r\nUsing it in JS:\r\n```javascript\n\r\nconst table = await Table.from(fetch((\"/the/endpoint/returning/response_bytes\")));\r\nconst my_column = table.getColumn(\"my_column\").toArray();\r\n```\r\n\r\nI wonder what's the correct way, to yield the bytes after each batch/header/footer instead of writing it to a sink (making it a generator)."
        },
        {
            "created_at": "2022-08-27T14:41:58.188Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10045?focusedCommentId=17585959) by @toddfarmer:*\nTransitioning issue from Resolved to Closed to based on resolution field value."
        }
    ]
}