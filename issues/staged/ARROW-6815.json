{
    "issue": {
        "title": "Timestamps saved via Pandas and PyArrow unreadable in Hive and Presto",
        "body": "***Note**: This issue was originally created as [ARROW-6815](https://issues.apache.org/jira/browse/ARROW-6815). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm unable to read timestamps saved as Parquet data via Pandas with Hive or Presto. These are the versions of the various pieces of software I'm using:\r\n\r\n- Pandas 0.24.1\n- PyArrow 0.13.0\n- Hadoop 3.0.3\n- Hive 2.3.3\n- Presto 0.215\n  \n  The Hadoop setup steps I took can be found [here](https://tech.marksblogg.com/hadoop-3-single-node-install-guide.html).\n  \n  This is what I did to generate the Parquet file.\n  \n  ```python\n  \n  from   datetime import datetime\n  from   StringIO import StringIO\n  \n  import pandas as pd\n  import pyarrow as pa\n  import pyarrow.parquet as pq\n  \n  \n  df = pd.DataFrame([{'a': 'Test', 'b': datetime.utcnow()}])\n  \n  parquet_buffer = StringIO()\n  pa_table = pa.Table.from_pandas(df, preserve_index=False)\n  writer = pq.ParquetWriter(parquet_buffer, pa_table.schema)\n  writer.write_table(pa_table)\n  writer.close()\n  \n  with open('example.pq', 'w+b') as f:\n      f.write(parquet_buffer.getvalue())\n  ```\n  \n  This is its raw contents:\n  \n  ```bash\n  \n  $ hexdump -C example.pq\n  ```\n  \n  \n  ```none\n  \n  00000000  50 41 52 31 15 04 15 10  15 14 4c 15 02 15 04 12  |PAR1......L.....|\n  00000010  00 00 08 1c 04 00 00 00  54 65 73 74 15 00 15 12  |........Test....|\n  00000020  15 16 2c 15 02 15 04 15  06 15 06 1c 18 04 54 65  |..,...........Te|\n  00000030  73 74 18 04 54 65 73 74  16 00 00 00 00 09 20 02  |st..Test...... .|\n  00000040  00 00 00 02 01 01 02 00  26 90 01 1c 15 0c 19 35  |........&......5|\n  00000050  04 00 06 19 18 01 61 15  02 16 02 16 80 01 16 88  |......a.........|\n  00000060  01 26 38 26 08 1c 36 00  28 04 54 65 73 74 18 04  |.&8&..6.(.Test..|\n  00000070  54 65 73 74 00 00 00 15  04 15 10 15 14 4c 15 02  |Test.........L..|\n  00000080  15 04 12 00 00 08 1c 10  4f 48 96 63 94 05 00 15  |........OH.c....|\n  00000090  00 15 12 15 16 2c 15 02  15 04 15 06 15 06 1c 18  |.....,..........|\n  000000a0  08 10 4f 48 96 63 94 05  00 18 08 10 4f 48 96 63  |..OH.c......OH.c|\n  000000b0  94 05 00 16 00 00 00 00  09 20 02 00 00 00 02 01  |......... ......|\n  000000c0  01 02 00 26 86 03 1c 15  04 19 35 04 00 06 19 18  |...&......5.....|\n  000000d0  01 62 15 02 16 02 16 90  01 16 98 01 26 9e 02 26  |.b..........&..&|\n  000000e0  ee 01 1c 18 08 10 4f 48  96 63 94 05 00 18 08 10  |......OH.c......|\n  000000f0  4f 48 96 63 94 05 00 16  00 28 08 10 4f 48 96 63  |OH.c.....(..OH.c|\n  00000100  94 05 00 18 08 10 4f 48  96 63 94 05 00 00 00 00  |......OH.c......|\n  00000110  15 02 19 3c 35 00 18 06  73 63 68 65 6d 61 15 04  |...<5...schema..|\n  00000120  00 15 0c 25 02 18 01 61  00 15 04 25 02 18 01 62  |...%...a...%...b|\n  00000130  25 14 00 16 02 19 1c 19  2c 26 90 01 1c 15 0c 19  |%.......,&......|\n  00000140  35 04 00 06 19 18 01 61  15 02 16 02 16 80 01 16  |5......a........|\n  00000150  88 01 26 38 26 08 1c 36  00 28 04 54 65 73 74 18  |..&8&..6.(.Test.|\n  00000160  04 54 65 73 74 00 00 00  26 86 03 1c 15 04 19 35  |.Test...&......5|\n  00000170  04 00 06 19 18 01 62 15  02 16 02 16 90 01 16 98  |......b.........|\n  00000180  01 26 9e 02 26 ee 01 1c  18 08 10 4f 48 96 63 94  |.&..&......OH.c.|\n  00000190  05 00 18 08 10 4f 48 96  63 94 05 00 16 00 28 08  |.....OH.c.....(.|\n  000001a0  10 4f 48 96 63 94 05 00  18 08 10 4f 48 96 63 94  |.OH.c......OH.c.|\n  000001b0  05 00 00 00 00 16 a0 02  16 02 00 19 1c 18 06 70  |...............p|\n  000001c0  61 6e 64 61 73 18 db 02  7b 22 63 72 65 61 74 6f  |andas...{\"creato|\n  000001d0  72 22 3a 20 7b 22 76 65  72 73 69 6f 6e 22 3a 20  |r\": {\"version\": |\n  000001e0  22 30 2e 31 33 2e 30 22  2c 20 22 6c 69 62 72 61  |\"0.13.0\", \"libra|\n  000001f0  72 79 22 3a 20 22 70 79  61 72 72 6f 77 22 7d 2c  |ry\": \"pyarrow\"},|\n  00000200  20 22 70 61 6e 64 61 73  5f 76 65 72 73 69 6f 6e  | \"pandas_version|\n  00000210  22 3a 20 6e 75 6c 6c 2c  20 22 69 6e 64 65 78 5f  |\": null, \"index_|\n  00000220  63 6f 6c 75 6d 6e 73 22  3a 20 5b 5d 2c 20 22 63  |columns\": [], \"c|\n  00000230  6f 6c 75 6d 6e 73 22 3a  20 5b 7b 22 6d 65 74 61  |olumns\": [{\"meta|\n  00000240  64 61 74 61 22 3a 20 6e  75 6c 6c 2c 20 22 66 69  |data\": null, \"fi|\n  00000250  65 6c 64 5f 6e 61 6d 65  22 3a 20 22 61 22 2c 20  |eld_name\": \"a\", |\n  00000260  22 6e 61 6d 65 22 3a 20  22 61 22 2c 20 22 6e 75  |\"name\": \"a\", \"nu|\n  00000270  6d 70 79 5f 74 79 70 65  22 3a 20 22 6f 62 6a 65  |mpy_type\": \"obje|\n  00000280  63 74 22 2c 20 22 70 61  6e 64 61 73 5f 74 79 70  |ct\", \"pandas_typ|\n  00000290  65 22 3a 20 22 62 79 74  65 73 22 7d 2c 20 7b 22  |e\": \"bytes\"}, {\"|\n  000002a0  6d 65 74 61 64 61 74 61  22 3a 20 6e 75 6c 6c 2c  |metadata\": null,|\n  000002b0  20 22 66 69 65 6c 64 5f  6e 61 6d 65 22 3a 20 22  | \"field_name\": \"|\n  000002c0  62 22 2c 20 22 6e 61 6d  65 22 3a 20 22 62 22 2c  |b\", \"name\": \"b\",|\n  000002d0  20 22 6e 75 6d 70 79 5f  74 79 70 65 22 3a 20 22  | \"numpy_type\": \"|\n  000002e0  64 61 74 65 74 69 6d 65  36 34 5b 6e 73 5d 22 2c  |datetime64[ns]\",|\n  000002f0  20 22 70 61 6e 64 61 73  5f 74 79 70 65 22 3a 20  | \"pandas_type\": |\n  00000300  22 64 61 74 65 74 69 6d  65 22 7d 5d 2c 20 22 63  |\"datetime\"}], \"c|\n  00000310  6f 6c 75 6d 6e 5f 69 6e  64 65 78 65 73 22 3a 20  |olumn_indexes\": |\n  00000320  5b 5d 7d 00 18 22 70 61  72 71 75 65 74 2d 63 70  |[]}..\"parquet-cp|\n  00000330  70 20 76 65 72 73 69 6f  6e 20 31 2e 35 2e 31 2d  |p version 1.5.1-|\n  00000340  53 4e 41 50 53 48 4f 54  19 2c 1c 00 00 1c 00 00  |SNAPSHOT.,......|\n  00000350  00 41 02 00 00 50 41 52  31                       |.A...PAR1|\n  00000359\n  ```\n  \n  These are the strings extracted from that file.\n  \n  ```bash\n  \n  $ strings example.pq\n  ```\n  \n  ```none\n  \n  PAR1\n  Test\n  Test\n  Test\n  Test\n  Test\n  schema\n  Test\n  Test\n  pandas\n  {\"creator\": {\"version\": \"0.13.0\", \"library\": \"pyarrow\"}, \"pandas_version\": null, \"index_columns\": [], \"columns\": [{\"metadata\": null, \"field_name\": \"a\", \"name\": \"a\", \"numpy_type\": \"object\", \"pandas_type\": \"bytes\"}, {\"metadata\": null, \"field_name\": \"b\", \"name\": \"b\", \"numpy_type\": \"datetime64[ns]\", \"pandas_type\": \"datetime\"}], \"column_indexes\": []}\n  \"parquet-cpp version 1.5.1-SNAPSHOT\n  PAR1\n  ```\n  \n  If I copy it onto HDFS I'm unable to read the timestamp. I've tried a variety of data types.\n  \n  ```bash\n  \n  $ hdfs dfs -mkdir /testing/\n  $ hdfs dfs -copyFromLocal example.pq /testing/\n  $ hdfs dfs -ls /testing/example.pq\n  ```\n  \n  {code:none}\n-rw-r-~~r~~-   1 ubuntu supergroup        857 2019-10-08 10:26 /testing/example.pq\r\n```Java\n\r\n\r\n{code:bash}\r\n$ hive\r\n```\r\n\r\nIt can't be read as a DATETIME field:\r\n\r\n```sql\n\r\nCREATE EXTERNAL TABLE testing (\r\n    a STRING,\r\n    b DATETIME\r\n) STORED AS parquet\r\nLOCATION '/testing/';\r\n```\r\n\r\n```none\n\r\nFAILED: SemanticException [Error 10099]: DATETIME type isn't supported yet. Please use DATE or TIMESTAMP instead\r\n```\r\n\r\nIt can't be read as a TIMESTAMP:\r\n\r\n```sql\n\r\nCREATE EXTERNAL TABLE testing (\r\n    a STRING,\r\n    b TIMESTAMP\r\n) STORED AS parquet\r\nLOCATION '/testing/';\r\n\r\nSELECT * FROM testing;\r\n```\r\n\r\n```none\n\r\nFailed with exception java.io.IOException:org.apache.hadoop.hive.ql.metadata.HiveException: java.lang.ClassCastException: org.apache.hadoop.io.LongWritable cannot be cast to org.apache.hadoop.hive.serde2.io.TimestampWritable\r\n```\r\n\r\nI can extract it as a BIGINT but I'm unable to find a math formula to convert it to the correct time.\r\n\r\n```sql\n\r\nDROP TABLE `testing`;\r\n\r\nCREATE EXTERNAL TABLE `testing` (\r\n    a STRING,\r\n    b BIGINT\r\n) STORED AS parquet\r\nLOCATION '/testing/';\r\n```\r\n\r\n```none\n\r\nTest    1570530327547664\r\n```\r\n\r\n```sql\n\r\nSELECT CAST(b AS TIMESTAMP) FROM testing;\r\n```\r\n\r\n```none\n\r\n51738-02-15 08:19:077.664\r\n```\r\n\r\n```sql\n\r\nSELECT CAST(b/1000 AS TIMESTAMP) FROM testing;\r\n```\r\n\r\n```none\n\r\n51738-02-15 08:19:077.664\r\n```\r\n\r\nI'll generate the same content using Hive and show the contents of the Parquet file it produces:\r\n\r\n```sql\n\r\nCREATE TABLE `testing2` (\r\n    a STRING,\r\n    b TIMESTAMP\r\n) STORED AS parquet\r\nLOCATION '/testing2/';\r\n\r\nINSERT INTO testing2 (a, b) VALUES ('Test', \"2019-10-08 10:34:30.061\");\r\n\r\nSELECT * FROM testing2;\r\n```\r\n\r\n```none\n\r\nTest    2019-10-08 10:34:30.061\r\n```\r\n\r\nThe timestamp is usable.\r\n\r\n```sql\n\r\nSELECT YEAR(B) FROM testing2;\r\n```\r\n\r\n```none\n\r\n2019\r\n```\r\n\r\n```bash\n\r\n$ hdfs dfs -copyToLocal /testing2/000000_0 ./\r\n$ hexdump -C 000000_0\r\n```\r\n\r\n```none\n\r\n00000000  50 41 52 31 15 00 15 1c  15 1c 2c 15 02 15 00 15  |PAR1......,.....|\r\n00000010  06 15 08 1c 18 04 54 65  73 74 18 04 54 65 73 74  |......Test..Test|\r\n00000020  16 00 00 00 00 02 00 00  00 03 01 04 00 00 00 54  |...............T|\r\n00000030  65 73 74 15 04 15 18 15  18 4c 15 02 15 04 00 00  |est......L......|\r\n00000040  40 65 76 e0 9f 22 00 00  8d 84 25 00 15 00 15 10  |@ev..\"....%.....|\r\n00000050  15 10 2c 15 02 15 04 15  06 15 08 1c 18 0c 40 65  |..,...........@e|\r\n00000060  76 e0 9f 22 00 00 8d 84  25 00 18 0c 40 65 76 e0  |v..\"....%...@ev.|\r\n00000070  9f 22 00 00 8d 84 25 00  16 00 00 00 00 02 00 00  |.\"....%.........|\r\n00000080  00 03 01 00 03 15 02 19  3c 48 0b 68 69 76 65 5f  |........<H.hive_|\r\n00000090  73 63 68 65 6d 61 15 04  00 15 0c 25 02 18 01 61  |schema.....%...a|\r\n000000a0  25 00 00 15 06 25 02 18  01 62 00 16 02 19 1c 19  |%....%...b......|\r\n000000b0  2c 26 08 1c 15 0c 19 35  08 06 00 19 18 01 61 15  |,&.....5......a.|\r\n000000c0  00 16 02 16 5e 16 5e 26  08 3c 18 04 54 65 73 74  |....^.^&.<..Test|\r\n000000d0  18 04 54 65 73 74 16 00  00 00 00 26 66 1c 15 06  |..Test.....&f...|\r\n000000e0  19 35 08 04 06 19 18 01  62 15 00 16 02 16 a4 01  |.5......b.......|\r\n000000f0  16 a4 01 26 66 3c 18 0c  40 65 76 e0 9f 22 00 00  |...&f<..@ev..\"..|\r\n00000100  8d 84 25 00 18 0c 40 65  76 e0 9f 22 00 00 8d 84  |..%...@ev..\"....|\r\n00000110  25 00 16 00 00 00 00 16  82 02 16 02 00 28 49 70  |%............(Ip|\r\n00000120  61 72 71 75 65 74 2d 6d  72 20 76 65 72 73 69 6f  |arquet-mr versio|\r\n00000130  6e 20 31 2e 38 2e 31 20  28 62 75 69 6c 64 20 34  |n 1.8.1 (build 4|\r\n00000140  61 62 61 34 64 61 65 37  62 62 30 64 34 65 64 62  |aba4dae7bb0d4edb|\r\n00000150  63 66 37 39 32 33 61 65  31 33 33 39 66 32 38 66  |cf7923ae1339f28f|\r\n00000160  64 33 66 37 66 63 66 29  00 e4 00 00 00 50 41 52  |d3f7fcf).....PAR|\r\n00000170  31                                                |1|\r\n00000171\r\n```\r\n\r\n```bash\n\r\n$ strings 000000_0\r\n```\r\n\r\n```none\n\r\nPAR1\r\nTest\r\nTest\r\nTest\r\nhive_schema\r\nTest\r\nTest\r\n(Iparquet-mr version 1.8.1 (build 4aba4dae7bb0d4edbcf7923ae1339f28fd3f7fcf)\r\nPAR1\r\n```\r\n\r\nI'll do the same for Presto as it has its own writer as well.\r\n\r\n```bash\n\r\n$ presto --server localhost:8085 --schema default --catalog hive\r\n```\r\n\r\n```sql\n\r\nCREATE TABLE testing3 WITH (FORMAT='PARQUET') AS\r\n    SELECT 'Test' as a,\r\n           CAST('2019-10-08 10:34:30.061' AS TIMESTAMP) AS b;\r\n\r\nSELECT * FROM testing3;\r\n```\r\n\r\n```none\n\r\n  a   |            b\r\n------+-------------------------\r\n Test | 2019-10-08 10:34:30.061\r\n```\r\n\r\n```sql\n\r\nSELECT YEAR(b) FROM testing3;\r\n```\r\n\r\n\r\n```none\n\r\n _col0\r\n-------\r\n  2019\r\n```\r\n\r\n```bash\n\r\n$ hdfs dfs -copyToLocal /user/hive/warehouse/testing3/20191008_105125_00077_trjf2_61453828-1d8f-45a7-88de-3876b84d0cb9 ./\r\n$ hexdump -C 20191008_105125_00077_trjf2_61453828-1d8f-45a7-88de-3876b84d0cb9\r\n```\r\n\r\n```none\n\r\n00000000  50 41 52 31 15 00 15 1c  15 40 2c 15 02 15 00 15  |PAR1.....@,.....|\r\n00000010  06 15 08 1c 18 04 54 65  73 74 18 04 54 65 73 74  |......Test..Test|\r\n00000020  16 00 00 00 00 1f 8b 08  00 00 00 00 00 00 03 63  |...............c|\r\n00000030  62 60 60 60 66 64 01 92  21 a9 c5 25 00 fe 12 da  |b```fd..!..%....|\r\n00000040  11 0e 00 00 00 15 04 15  18 15 40 4c 15 02 15 04  |..........@L....|\r\n00000050  00 00 1f 8b 08 00 00 00  00 00 00 03 73 48 2d 7b  |............sH-{|\r\n00000060  30 5f 89 81 a1 b7 45 95  01 00 64 bc 2a 14 0c 00  |0_....E...d.*...|\r\n00000070  00 00 15 00 15 10 15 38  2c 15 02 15 04 15 06 15  |.......8,.......|\r\n00000080  08 1c 18 0c 40 65 76 e0  9f 22 00 00 8d 84 25 00  |....@ev..\"....%.|\r\n00000090  18 0c 40 65 76 e0 9f 22  00 00 8d 84 25 00 16 00  |..@ev..\"....%...|\r\n000000a0  00 00 00 1f 8b 08 00 00  00 00 00 00 03 63 62 60  |.............cb`|\r\n000000b0  60 60 66 64 60 06 00 77  4c 79 ad 08 00 00 00 15  |``fd`..wLy......|\r\n000000c0  02 19 3c 48 0b 68 69 76  65 5f 73 63 68 65 6d 61  |..<H.hive_schema|\r\n000000d0  15 04 00 15 0c 25 02 18  01 61 25 00 00 15 06 25  |.....%...a%....%|\r\n000000e0  02 18 01 62 00 16 02 19  1c 19 2c 26 08 1c 15 0c  |...b......,&....|\r\n000000f0  19 35 08 00 06 19 18 01  61 15 04 16 02 16 5e 16  |.5......a.....^.|\r\n00000100  82 01 26 08 3c 18 04 54  65 73 74 18 04 54 65 73  |..&.<..Test..Tes|\r\n00000110  74 16 00 00 00 00 26 8a  01 1c 15 06 19 35 04 08  |t.....&......5..|\r\n00000120  06 19 18 01 62 15 04 16  02 16 a4 01 16 f4 01 26  |....b..........&|\r\n00000130  8a 01 3c 18 0c 40 65 76  e0 9f 22 00 00 8d 84 25  |..<..@ev..\"....%|\r\n00000140  00 18 0c 40 65 76 e0 9f  22 00 00 8d 84 25 00 16  |...@ev..\"....%..|\r\n00000150  00 00 00 00 16 82 02 16  02 00 28 0a 70 61 72 71  |..........(.parq|\r\n00000160  75 65 74 2d 6d 72 00 a8  00 00 00 50 41 52 31     |uet-mr.....PAR1|\r\n0000016f\r\n```\r\n\r\n```bash\n\r\n$ strings 20191008_105125_00077_trjf2_61453828-1d8f-45a7-88de-3876b84d0cb9\r\n```\r\n\r\n```none\n\r\nPAR1\r\nTest\r\nTest\r\ncb```fd\r\nsH-{0_\r\ncb```fd`\r\nhive_schema\r\nTest\r\nTest\r\nparquet-mr\r\nPAR1\r\n```\r\n\r\nAny idea how I can save timestamps with Pandas and have them readable by Hive and Presto?",
        "created_at": "2019-10-08T11:03:44.000Z",
        "updated_at": "2019-10-08T14:51:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-10-08T11:35:08.000Z"
    },
    "comments": [
        {
            "created_at": "2019-10-08T11:31:15.133Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6815?focusedCommentId=16946748) by Mark Litwintschik (marklit):*\nI found the writer as a \"spark\" flavor that produces timestamps that are readable in Hive. This issue can be closed.\r\n\r\n```python\n\r\nwriter = pq.ParquetWriter(parquet_buffer, pa_table.schema, flavor='spark')\r\n```"
        },
        {
            "created_at": "2019-10-08T11:35:08.685Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6815?focusedCommentId=16946749) by Mark Litwintschik (marklit):*\nUsing flavor='spark' creates compatible timestamps."
        },
        {
            "created_at": "2019-10-08T12:59:48.412Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6815?focusedCommentId=16946821) by Uwe Korn (uwe):*\nThis is documented at https://arrow.apache.org/docs/python/parquet.html#using-with-spark Should we also add Presto and Hive there or do these come with other peculiarities than the missing support for non-deprecated Timestamps?"
        },
        {
            "created_at": "2019-10-08T14:51:41.096Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6815?focusedCommentId=16946955) by Mark Litwintschik (marklit):*\n`[~uwe]` Hive worked just fine for me. If I find any more types that don't work in either Hive or Presto I'll leave a note in this ticket and we can decide how to take that forward."
        }
    ]
}