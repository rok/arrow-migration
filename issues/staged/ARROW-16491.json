{
    "issue": {
        "title": "[Python] Table.from_pandas is doing unsafe cast for float array to int array",
        "body": "***Note**: This issue was originally created as [ARROW-16491](https://issues.apache.org/jira/browse/ARROW-16491). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHello,\r\nsafe option is working well for scalar but not for list. To reproduce :\r\n```python\n\r\nimport pandas as pd\r\nimport pyarrow as pa\r\nint_dataframe = pd.DataFrame({\"array\": [[1, 2]]})\r\nfloat_dataframe = pd.DataFrame({\"array\": [[1.5, 2.3]]})\r\nint_table = pa.Table.from_pandas(int_dataframe)\r\n```\r\n\r\n```python\n\r\n>>> int_table\r\npyarrow.Table\r\narray: list<item: int64>\r\n  child 0, item: int64\r\n----\r\narray: [[[1,2]]]\r\n```\r\n\r\n```python\n\r\n# this is working instead of throwing a `ArrowInvalid: ... Conversion failed for column array with type`\r\n>>> table = pa.Table.from_pandas(float_dataframe, schema=int_table.schema) \r\n>>> table\r\npyarrow.Table\r\narray: list<item: int64>\r\n  child 0, item: int64\r\n----\r\narray: [[[1,2]]]\r\n```\r\n\r\nBehavior for scalar is correct :\r\n```python\n\r\nint_dataframe = pd.DataFrame({\"array\": [1]})\r\nfloat_dataframe = pd.DataFrame({\"array\": [1.5]})\r\nint_table = pa.Table.from_pandas(int_dataframe)\r\ntable = pa.Table.from_pandas(float_dataframe, schema=int_table.schema) # raise:\r\n---------------------------------------------------------------------------\r\nArrowInvalid                              Traceback (most recent call last)\r\nInput In [6], in <module>\r\n----> 1 table = pa.Table.from_pandas(float_dataframe, schema=int_table.schema)\r\n      2 table\r\n\r\nFile ~/Documents/chouket/.venv/lib/python3.9/site-packages/pyarrow/table.pxi:1782, in pyarrow.lib.Table.from_pandas()\r\n\r\nFile ~/Documents/chouket/.venv/lib/python3.9/site-packages/pyarrow/pandas_compat.py:594, in dataframe_to_arrays(df, schema, preserve_index, nthreads, columns, safe)\r\n    589     return (isinstance(arr, np.ndarray) and\r\n    590             arr.flags.contiguous and\r\n    591             issubclass(arr.dtype.type, np.integer))\r\n    593 if nthreads == 1:\r\n--> 594     arrays = [convert_column(c, f)\r\n    595               for c, f in zip(columns_to_convert, convert_fields)]\r\n    596 else:\r\n    597     arrays = []\r\n\r\nFile ~/Documents/chouket/.venv/lib/python3.9/site-packages/pyarrow/pandas_compat.py:594, in <listcomp>(.0)\r\n    589     return (isinstance(arr, np.ndarray) and\r\n    590             arr.flags.contiguous and\r\n    591             issubclass(arr.dtype.type, np.integer))\r\n    593 if nthreads == 1:\r\n--> 594     arrays = [convert_column(c, f)\r\n    595               for c, f in zip(columns_to_convert, convert_fields)]\r\n    596 else:\r\n    597     arrays = []\r\n\r\nFile ~/Documents/chouket/.venv/lib/python3.9/site-packages/pyarrow/pandas_compat.py:581, in dataframe_to_arrays.<locals>.convert_column(col, field)\r\n    576 except (pa.ArrowInvalid,\r\n    577         pa.ArrowNotImplementedError,\r\n    578         pa.ArrowTypeError) as e:\r\n    579     e.args += (\"Conversion failed for column {!s} with type {!s}\"\r\n    580                .format(col.name, col.dtype),)\r\n--> 581     raise e\r\n    582 if not field_nullable and result.null_count > 0:\r\n    583     raise ValueError(\"Field {} was non-nullable but pandas column \"\r\n    584                      \"had {} null values\".format(str(field),\r\n    585                                                  result.null_count))\r\n\r\nFile ~/Documents/chouket/.venv/lib/python3.9/site-packages/pyarrow/pandas_compat.py:575, in dataframe_to_arrays.<locals>.convert_column(col, field)\r\n    572     type_ = field.type\r\n    574 try:\r\n--> 575     result = pa.array(col, type=type_, from_pandas=True, safe=safe)\r\n    576 except (pa.ArrowInvalid,\r\n    577         pa.ArrowNotImplementedError,\r\n    578         pa.ArrowTypeError) as e:\r\n    579     e.args += (\"Conversion failed for column {!s} with type {!s}\"\r\n    580                .format(col.name, col.dtype),)\r\n\r\nFile ~/Documents/chouket/.venv/lib/python3.9/site-packages/pyarrow/array.pxi:312, in pyarrow.lib.array()\r\n\r\nFile ~/Documents/chouket/.venv/lib/python3.9/site-packages/pyarrow/array.pxi:83, in pyarrow.lib._ndarray_to_array()\r\n\r\nFile ~/Documents/chouket/.venv/lib/python3.9/site-packages/pyarrow/error.pxi:99, in pyarrow.lib.check_status()\r\n\r\nArrowInvalid: ('Float value 1.5 was truncated converting to int64', 'Conversion failed for column array with type float64')\r\n```\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2022-05-06T10:13:38.000Z",
        "updated_at": "2022-05-19T15:38:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-05-06T11:00:26.179Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16491?focusedCommentId=17532779) by Alenka Frim (alenka):*\nI noticed that this works fine with a normal array:\r\n```python\n\r\n>>> import pandas as pd\r\n>>> import pyarrow as pa\r\n\r\n# See here there are no double brackets\r\n>>> int_dataframe = pd.DataFrame({\"array\": [1, 2]})\r\n>>> float_dataframe = pd.DataFrame({\"array\": [1.5, 2.3]})\r\n\r\n# Error is raised\r\n>>> int_table = pa.Table.from_pandas(int_dataframe)\r\n>>> table = pa.Table.from_pandas(float_dataframe, schema=int_table.schema) \r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pyarrow/table.pxi\", line 3457, in pyarrow.lib.Table.from_pandas\r\n    arrays, schema, n_rows = dataframe_to_arrays(\r\n  File \"/Users/alenkafrim/repos/arrow/python/pyarrow/pandas_compat.py\", line 594, in dataframe_to_arrays\r\n    arrays = [convert_column(c, f)\r\n  File \"/Users/alenkafrim/repos/arrow/python/pyarrow/pandas_compat.py\", line 594, in <listcomp>\r\n    arrays = [convert_column(c, f)\r\n  File \"/Users/alenkafrim/repos/arrow/python/pyarrow/pandas_compat.py\", line 581, in convert_column\r\n    raise e\r\n  File \"/Users/alenkafrim/repos/arrow/python/pyarrow/pandas_compat.py\", line 575, in convert_column\r\n    result = pa.array(col, type=type_, from_pandas=True, safe=safe)\r\n  File \"pyarrow/array.pxi\", line 312, in pyarrow.lib.array\r\n    return _ndarray_to_array(values, mask, type, c_from_pandas, safe,\r\n  File \"pyarrow/array.pxi\", line 83, in pyarrow.lib._ndarray_to_array\r\n    check_status(NdarrayToArrow(pool, values, mask, from_pandas,\r\n  File \"pyarrow/error.pxi\", line 100, in pyarrow.lib.check_status\r\n    raise ArrowInvalid(message)\r\npyarrow.lib.ArrowInvalid: ('Float value 1.5 was truncated converting to int64\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:177  CheckFloatToIntTruncation(batch[0], *out)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/compute/exec.cc:701  kernel_->exec(kernel_ctx_, batch, &out)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/compute/exec.cc:642  ExecuteBatch(batch, listener)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/compute/function.cc:255  executor->Execute(implicitly_cast_args, &listener)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/compute/cast.cc:229  Cast(Datum(value), to_type, options, ctx)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/numpy_to_arrow.cc:351  compute::Cast(*MakeArray(tmp_data), out_type, cast_options, &context)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/numpy_to_arrow.cc:470  CastBuffer(input_type, *data, length_, null_bitmap_, null_count_, type_, cast_options_, pool_, data)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/numpy_to_arrow.cc:281  ConvertData<ArrowType>(&data)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/numpy_to_arrow.cc:856  converter.Convert()', 'Conversion failed for column array with type float64')\r\n```\r\nso I think the reason for the behaviour you see is due to the fact that in your example converted table columns are ListArrays.\r\n\r\nBut I do get a different error in this next case:\r\n```python\n\r\n>>> int_dataframe = pd.DataFrame({\"array\": [[1]]})\r\n>>> float_dataframe = pd.DataFrame({\"array\": [[1.5]]})\r\n>>> table = pa.Table.from_pandas(float_dataframe, schema=int_table.schema)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pyarrow/table.pxi\", line 3457, in pyarrow.lib.Table.from_pandas\r\n    arrays, schema, n_rows = dataframe_to_arrays(\r\n  File \"/Users/alenkafrim/repos/arrow/python/pyarrow/pandas_compat.py\", line 594, in dataframe_to_arrays\r\n    arrays = [convert_column(c, f)\r\n  File \"/Users/alenkafrim/repos/arrow/python/pyarrow/pandas_compat.py\", line 594, in <listcomp>\r\n    arrays = [convert_column(c, f)\r\n  File \"/Users/alenkafrim/repos/arrow/python/pyarrow/pandas_compat.py\", line 581, in convert_column\r\n    raise e\r\n  File \"/Users/alenkafrim/repos/arrow/python/pyarrow/pandas_compat.py\", line 575, in convert_column\r\n    result = pa.array(col, type=type_, from_pandas=True, safe=safe)\r\n  File \"pyarrow/array.pxi\", line 312, in pyarrow.lib.array\r\n    return _ndarray_to_array(values, mask, type, c_from_pandas, safe,\r\n  File \"pyarrow/array.pxi\", line 83, in pyarrow.lib._ndarray_to_array\r\n    check_status(NdarrayToArrow(pool, values, mask, from_pandas,\r\n  File \"pyarrow/error.pxi\", line 100, in pyarrow.lib.check_status\r\n    raise ArrowInvalid(message)\r\npyarrow.lib.ArrowInvalid: ('Could not convert [1.5] with type list: tried to convert to int64\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/python_to_arrow.cc:623  PyValue::Convert(this->primitive_type_, this->options_, value)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/iterators.h:57  func(objects[i], i, &keep_going)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/python_to_arrow.cc:1182  converter->Extend(seq, size)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/numpy_to_arrow.cc:325  ConvertPySequence(reinterpret_cast<PyObject*>(arr_), reinterpret_cast<PyObject*>(mask_), py_options, pool_)\\n/Users/alenkafrim/repos/arrow/cpp/src/arrow/python/numpy_to_arrow.cc:856  converter.Convert()', 'Conversion failed for column array with type object')\r\n```\r\n\u00a0"
        },
        {
            "created_at": "2022-05-06T12:04:41.804Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16491?focusedCommentId=17532823) by LOUSSOUARN Brieuc (blo@activeviam.com):*\nHello,\r\nthe first example is indeed working but it is not what interested my case. You are creating a dataframe with a column of type `int` and my ticket is about column of type `list[int]`:\r\n![image-2022-05-06-13-59-47-720.png](https://issues.apache.org/jira/secure/attachment/13043324/image-2022-05-06-13-59-47-720.png)\r\n\r\nto clarify I don't get why on a table with `list<item: int64>`column type in the schema can load `list<item: double>`and casting this list to an int list with `safe=True` without throwing.\r\n![image-2022-05-06-14-04-37-954.png](https://issues.apache.org/jira/secure/attachment/13043325/image-2022-05-06-14-04-37-954.png)\r\n\r\n\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-05-09T13:26:44.694Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16491?focusedCommentId=17533803) by Joris Van den Bossche (jorisvandenbossche):*\nIt is indeed not doing a safe conversion by default in the nested array case.\r\n\r\nSimplifying the example a bit to focus on just the array conversion (which is done column by column for the pandas.DataFrame -> Table conversion):\r\n\r\n```python\n\r\n>>> pa.array(np.array([[1.5], [2.5, 3.5]], dtype=object), type=pa.list_(pa.int64()), safe=True)\r\n<pyarrow.lib.ListArray object at 0x7f004fc74700>\r\n[\r\n  [\r\n    1\r\n  ],\r\n  [\r\n    2,\r\n    3\r\n  ]\r\n]\r\n```\r\n\r\nI noticed that for the non-nested (primitive) array case, this also depends on whether the input is already an array or a generic list like:\r\n\r\n```python\n\r\n>>> pa.array(np.array([1.5, 2.5]), type=pa.int64(), safe=True)\r\n...\r\nArrowInvalid: Float value 1.5 was truncated converting to int64\r\n```\r\n\r\nvs\r\n\r\n```python\n\r\n>>> pa.array([1.5, 2.5], type=pa.int64(), safe=True)\r\n<pyarrow.lib.Int64Array object at 0x7f004fc72c40>\r\n[\r\n  1,\r\n  2\r\n]\r\n```\r\n\r\nThose two take a different code path (`numpy_to_array.cc` vs `python_to_arrow.cc`), so apparently the `safe` keyword is not properly handled in the second code path.   \r\n(don't know by heart if the nested array case also takes that second code path, in which case it might be the same issue)  \r\nAnother potentially related issue: ARROW-8567\r\n"
        },
        {
            "created_at": "2022-05-19T15:38:31.708Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16491?focusedCommentId=17539625) by Joris Van den Bossche (jorisvandenbossche):*\nAnother example of this was reported in https://github.com/apache/arrow/issues/12652"
        }
    ]
}