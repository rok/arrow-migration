{
    "issue": {
        "title": "[C++] Unify BasicDecimal128 and BasicDecimal256 classes",
        "body": "***Note**: This issue was originally created as [ARROW-13439](https://issues.apache.org/jira/browse/ARROW-13439). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nBasicDecimal128 uses two dedicated int64 (higher, lower) to store the value. It's possible to use std::array<uint64, 2> to store the value, just like BasicDecimal256 does, and to unify the two classes.\r\nAs decimal operations are quite expensive, guess this indirection won't cause performance loss.",
        "created_at": "2021-07-23T02:14:21.000Z",
        "updated_at": "2021-08-13T14:16:09.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-07-27T07:52:06.000Z"
    },
    "comments": [
        {
            "created_at": "2021-07-27T07:51:08.237Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13439?focusedCommentId=17387856) by yibocai#1 (yibocai#1):*\nLooks it doesn't deserve the effort.\r\n One possible approach is to derive BasicDecimal128 and 256 from a templated base class.\r\nIt does reduces many common code. But the problem is I have to put all implementation code in header file, which is too big.\r\n```cpp\n\r\ntemplate <int BitWidth>\r\nclass BasicDecimal {\r\n  ......\r\n  std::array<uint64_t, BidWidth/64> array_;\r\n}\r\n\r\nclass BasicDecimal128 : public BasicDecimal<128> {\r\n  ......\r\n};\r\n\r\nclass BasicDecimal256 : public BasicDecimal<256> {\r\n  ......\r\n};\r\n```"
        }
    ]
}