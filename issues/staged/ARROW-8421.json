{
    "issue": {
        "title": "[Rust] [Parquet] Implement parquet writer",
        "body": "***Note**: This issue was originally created as [ARROW-8421](https://issues.apache.org/jira/browse/ARROW-8421). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is the parent story. See subtasks for more information.\r\n\r\nNotes from `[~wesm]` :\r\n\r\nA couple of initial things to keep in mind\r\n \\* Writes of both Nullable (OPTIONAL) and non-nullable (REQUIRED) fields\r\n \\* You can optimize the special case where a nullable field's data has no nulls\r\n \\* A good amount of code is required to handle converting from the Arrow physical form of various logical types to the Parquet equivalent one, see <https://github.com/apache/arrow/blob/master/cpp/src/parquet/column_writer.cc> for details\r\n \\* It would be worth thinking up front about how dictionary-encoded data is handled both on the Arrow write and Arrow read paths. In parquet-cpp we initially discarded Arrow DictionaryArrays on write (casting e.g. Dictionary to dense String), and through real world need I was forced to revisit this (quite painfully) to enable Arrow dictionaries to survive roundtrips to Parquet format, and also achieve better performance and memory use in both reads and writes. You can certainly do a dictionary-to-dense conversion like we did, but you may someday find yourselves doing the same painful refactor that I did to make dictionary write and read not only more efficient but also dictionary order preserving.\r\n\r\nNotes from `[~sunchao]` :\r\n\r\nI roughly skimmed through the C++ implementation and think on the high level we need to do the following:\r\n1. implement a method similar to `WriteArrow` in [column_writer.cc](https://github.com/apache/arrow/blob/master/cpp/src/parquet/column_writer.cc). We can further break this up into smaller pieces such as: dictionary/non-dictionary, primitive types, booleans, timestamps, dates, so on and so forth.\n1. implement an arrow writer in the parquet crate [here](https://github.com/apache/arrow/tree/master/rust/parquet/src/arrow). This needs to offer similar APIs as [writer.h](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/writer.h).",
        "created_at": "2020-04-13T14:36:55.000Z",
        "updated_at": "2021-04-26T12:59:21.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T12:59:21.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-09T18:14:32.918Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8421?focusedCommentId=17318186) by Jorge Leit\u00e3o (jorgecarleitao):*\n[~nevi_me], will this be in time of 4.0 or should we bump it to 5.0?"
        },
        {
            "created_at": "2021-04-26T12:59:19.592Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8421?focusedCommentId=17332252) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/216"
        }
    ]
}