{
    "issue": {
        "title": "[JAVA] Leak in JdbcToArrowUtils",
        "body": "***Note**: This issue was originally created as [ARROW-5536](https://issues.apache.org/jira/browse/ARROW-5536). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n`JdbcToArrowUtils::updateVector(VarCharVector, String, boolean, int)` does not release the memory that it allocates for the `NullableVarCharHolder`. This can be verified by changing the first lines of `JdbcToArrowTest::testJdbcToArrowValues()` to the following:\r\n```java\n\r\nRootAllocator allocator = new RootAllocator(Integer.MAX_VALUE);\r\nVectorSchemaRoot root = JdbcToArrow.sqlToArrow(conn, table.getQuery(), allocator, Calendar.getInstance());\r\ntestDataSets(root);\r\nroot.close();\r\nassertEquals(allocator.getAllocatedMemory(), 0);\r\n```\r\n\u00a0\r\n\r\nThe leak can be fixed by closing the buffer in `updateVector`. However, I would propose to not use the `NullableVarCharHolder` in the first place because it creates an unnecessary copy of the string. Instead, I would use `BaseVariableWidthVector::setSafe(int index, byte[] value)` and `BaseVariableWidthVector::setNull(int index)` directly.\r\n\r\nIn addition, I would propose to check for leaks in JdbcToArrowTest.\r\n\r\nI am willing to create a patch, so please let me know what approach is preferred.",
        "created_at": "2019-06-09T10:39:03.000Z",
        "updated_at": "2022-07-12T14:04:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-12T14:04:19.456Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5536?focusedCommentId=17565529) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}