{
    "issue": {
        "title": "[C++] ExtensionType subclass for \"unknown\" types?",
        "body": "***Note**: This issue was originally created as [ARROW-6179](https://issues.apache.org/jira/browse/ARROW-6179). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn C++, when receiving IPC with extension type metadata for a type that is unknown (the name is not registered), we currently fall back to returning the \"raw\" storage array. The custom metadata (extension name and metadata) is still available in the Field metadata.\r\n\r\nAlternatively, we could also have a generic `ExtensionType` class that can hold such \"unknown\" extension type (eg `UnknowExtensionType` or `GenericExtensionType`), keeping the extension name and metadata in the Array's type. \r\n\r\nThis could be a single class where several instances can be created given a storage type, extension name and optionally extension metadata. It would be a way to have an unregistered extension type.",
        "created_at": "2019-08-08T16:39:53.000Z",
        "updated_at": "2021-08-05T14:48:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-08-08T19:39:23.224Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6179?focusedCommentId=16903265) by Micah Kornfield (emkornfield@gmail.com):*\nHow would the two options be chosen?"
        },
        {
            "created_at": "2019-08-09T14:23:12.937Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6179?focusedCommentId=16903935) by Joris Van den Bossche (jorisvandenbossche):*\nI suppose, if we go for this, it would replace the automatic fallback. And then a user can still get the storage array as a fallback themselves?\r\n\r\nAlthough, I see that there is a PR adding `IpcOptions` for writing, so if needed, there might also be such options for reading.\r\n\r\nTo be honest, I don't know have a good enough idea of potential use cases in C++ of the ExtensionType mechanism to really assess if it would be generally useful to keep the array in a generic extension array or rather directly fall back to the storage array.  \r\nI was thinking that for Python usage, this might be useful to be able to send an extension type defined from Python without needing to register a specific subclass in C++.\r\n"
        },
        {
            "created_at": "2019-08-09T14:42:05.942Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6179?focusedCommentId=16903949) by Micah Kornfield (emkornfield@gmail.com):*\nOk, personally I would like to leave the current\u00a0 behavior as at least the default.\u00a0 One example of the usage on non registration of\u00a0 extension types is the BQ storage read API uses it to mark fields that don't have a one to one correspondence with built in arrow types (geography and datetime).\u00a0 In the future someone could choose to write custom extension types but in the meantime they don't require special handling and flow through without any problem when converting to pandas."
        },
        {
            "created_at": "2019-08-09T15:03:01.553Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6179?focusedCommentId=16903969) by Joris Van den Bossche (jorisvandenbossche):*\nThe bigquery usage of this, is that open source code? (to familiarize myself with an application of the extension types) \r\nYou mean that you use the extension type key (ARROW:extension:name) in the metadata without having it an actual extension type?\r\n\r\nFor sure if we would create such a generic extension array, I think it should work in more places in arrow than it currently is the case (eg I opened issues to fallback to the storage type when converting to pandas or to parquet)."
        },
        {
            "created_at": "2019-08-12T03:48:07.949Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6179?focusedCommentId=16904826) by Micah Kornfield (emkornfield@gmail.com):*\n\"The bigquery usage of this, is that open source code? (to familiarize myself with an application of the extension types) \"\r\n\r\nNo it isn't open source. The usage can be seen it is visible when using the storage API (which i believe has a free tier, but I haven't used it myself).\r\n\r\n\r\n\"You mean that you use the extension type key (ARROW:extension:name) in the metadata without having it an actual extension type?\"\r\n\r\nYes that is what I mean."
        },
        {
            "created_at": "2021-08-05T14:48:18.560Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6179?focusedCommentId=17394075) by Antoine Pitrou (apitrou):*\nDo we still want to pursue this?"
        }
    ]
}