{
    "issue": {
        "title": "[Python] Add pytest mark to opt into TensorFlow-related unit tests",
        "body": "***Note**: This issue was originally created as [ARROW-2872](https://issues.apache.org/jira/browse/ARROW-2872). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAfter pulling in ARROW-1744, I hit this error: \r\n\r\n```Java\n\r\npyarrow/tests/test_plasma_tf_op.py::test_plasma_tf_op FAILED                   [ 82%]\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> captured stdout >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\nTensorFlow version: 1.8.0\r\nCompiling Plasma TensorFlow Op...\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> captured stderr >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n+++ dirname /home/wesm/code/arrow/python/pyarrow/tensorflow/build.sh\r\n++ cd /home/wesm/code/arrow/python/pyarrow/tensorflow\r\n++ pwd\r\n+ PYARROW_TENSORFLOW_DIR=/home/wesm/code/arrow/python/pyarrow/tensorflow\r\n++ python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))'\r\n+ TF_CFLAGS='-I/home/wesm/miniconda/envs/arrow-dev/lib/python3.6/site-packages/tensorflow/include -D_GLIBCXX_USE_CXX11_ABI=0'\r\n++ python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))'\r\n+ TF_LFLAGS='-L/home/wesm/miniconda/envs/arrow-dev/lib/python3.6/site-packages/tensorflow -ltensorflow_framework'\r\n++ uname\r\n+ '[' Linux == Darwin ']'\r\n+ NDEBUG=-DNDEBUG\r\n++ pkg-config --cflags --libs plasma arrow arrow-python\r\n+ g++ -std=c++11 -g -shared /home/wesm/code/arrow/python/pyarrow/tensorflow/plasma_op.cc -o /home/wesm/code/arrow/python/pyarrow/tensorflow/plasma_op.so -DNDEBUG -I/home/wesm/local/include -I/home/wesm/miniconda/envs/arrow-dev/include/python3.6m -I/home/wesm/local/include -L/home/wesm/local/lib -lplasma -larrow_python -larrow -fPIC -I/home/wesm/miniconda/envs/arrow-dev/lib/python3.6/site-packages/tensorflow/include -D_GLIBCXX_USE_CXX11_ABI=0 -L/home/wesm/miniconda/envs/arrow-dev/lib/python3.6/site-packages/tensorflow -ltensorflow_framework -O2\r\n/home/wesm/code/arrow/python/pyarrow/tensorflow/plasma_op.cc:33:10: fatal error: arrow/adapters/tensorflow/convert.h: No such file or directory\r\n #include \"arrow/adapters/tensorflow/convert.h\"\r\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ncompilation terminated.\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nuse_gpu = False\r\n\r\n    @pytest.mark.plasma\r\n    def test_plasma_tf_op(use_gpu=False):\r\n        import pyarrow.plasma as plasma\r\n    \r\n>       plasma.build_plasma_tensorflow_op()\r\n\r\npyarrow/tests/test_plasma_tf_op.py:89: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\npyarrow/plasma.py:56: in build_plasma_tensorflow_op\r\n    subprocess.check_call([\"bash\", script_path])\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\npopenargs = (['bash', '/home/wesm/code/arrow/python/pyarrow/tensorflow/build.sh'],)\r\nkwargs = {}, retcode = 1\r\ncmd = ['bash', '/home/wesm/code/arrow/python/pyarrow/tensorflow/build.sh']\r\n\r\n    def check_call(*popenargs, **kwargs):\r\n        \"\"\"Run command with arguments.  Wait for command to complete.  If\r\n        the exit code was zero then return, otherwise raise\r\n        CalledProcessError.  The CalledProcessError object will have the\r\n        return code in the returncode attribute.\r\n    \r\n        The arguments are the same as for the call function.  Example:\r\n    \r\n        check_call([\"ls\", \"-l\"])\r\n        \"\"\"\r\n        retcode = call(*popenargs, **kwargs)\r\n        if retcode:\r\n            cmd = kwargs.get(\"args\")\r\n            if cmd is None:\r\n                cmd = popenargs[0]\r\n>           raise CalledProcessError(retcode, cmd)\r\nE           subprocess.CalledProcessError: Command '['bash', '/home/wesm/code/arrow/python/pyarrow/tensorflow/build.sh']' returned non-zero exit status 1.\r\n\r\n../../../miniconda/envs/arrow-dev/lib/python3.6/subprocess.py:291: CalledProcessError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /home/wesm/miniconda/envs/arrow-dev/lib/python3.6/subprocess.py(291)check_call()\r\n-> raise CalledProcessError(retcode, cmd)\r\n```\r\n\r\nI misdiagnosed the problem originally (which was my stale Arrow install), but I think it would be good to have a separate pytest mark for TensorFlow-related unit tests since they are also time consuming. The unit test in question now has both the plasma and tensorflow marks",
        "created_at": "2018-07-17T20:47:28.000Z",
        "updated_at": "2018-07-17T23:17:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-07-17T23:17:02.000Z"
    },
    "comments": [
        {
            "created_at": "2018-07-17T23:17:02.706Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2872?focusedCommentId=16547199) by Philipp Moritz (pcmoritz):*\nIssue resolved by pull request 2279\n<https://github.com/apache/arrow/pull/2279>"
        }
    ]
}