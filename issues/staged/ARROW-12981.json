{
    "issue": {
        "title": "[R] Install source package from CRAN alone",
        "body": "***Note**: This issue was originally created as [ARROW-12981](https://issues.apache.org/jira/browse/ARROW-12981). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHello,\r\n\r\nI would like to install `Arrow` on Linux using only CRAN, without downloading additional files from Github, Apache, or Ursa Labs. I understand this is a big ask, and might not be a priority for you all. Feel free to close if you feel that this is out of scope.\r\n\r\nWhy is a CRAN-only installation useful?\r\n1. It's common for organizations to set up firewalls that prevent arbitrary downloads, but allow access to their own internal CRAN mirror.\n    \\*\\* Sometimes these firewalls also allow requests to Github, but often not.\n1. On a broader level, my favorite thing about R is CRAN, the CRAN maintainers, and their [policy](https://cran.r-project.org/web/packages/policies.html#Source-packages) that \"Source packages may not contain any form of binary executable code.\" By distributing most of the Arrow code separately (either as source C++ or a compiled library), automated code archives and other source-based tools become much less useful.\n   \n   Of course, `arrow` isn't the only R package to depend on external libraries or distribute code separately. If a CRAN-only approach isn't viable, it would still be useful to have an all-offline method. I'm also having trouble getting an offline install to work, even with a local copy of the Arrow repo. (See the bottom of the script below.)\n   \n   \u00a0\n   \n   What does does installing offline look like now?\n    Here's a bash script that approximates installing behind a firewall.\n   {code:sh}\n   git clone --depth 1 git@github.com:apache/arrow.git test_arrow\n   \n   cd test_arrow\n   wget 'https://cran.r-project.org/src/contrib/arrow_4.0.1.tar.gz'\n   \n1. Set up a temporary R library (optional)\n   mkdir test_r_lib\n   export R_LIBS_USER=test_r_lib\n   \n   export ARROW_R_DEV=true\n   export LIBARROW_MINIMAL=false\n   export LIBARROW_DOWNLOAD=false\n   export LIBARROW_BINARY=false\n   export LIBARROW_BUILD=true\n   \n1. These are all of the direct dependencies, including Suggests\n1. This isn't required if the packages are already installed\n   Rscript -e \"install.packages(c('assertthat', 'bit64', 'purrr', 'R6', 'rlang', 'tidyselect', 'vctrs', 'cpp11', 'decor', 'distro', 'dplyr', 'hms', 'knitr', 'lubridate', 'pkgload', 'reticulate', 'rmarkdown', 'stringr', 'testthat', 'tibble', 'withr'))\"\n   \n   \n   \n1. Disable your internet connection here.\n   \n   \n   \n1. Now try to install the R package we downloaded with wget.\n1. This is an approximation of being behind a firewall.\n   Rscript -e 'install.packages(\"arrow_4.0.1.tar.gz\", repos=NULL)'\n   \n1. It successfully installs the R component, but not the C++ library, \n1. even with LIBARROW_BUILD=true\n   Rscript -e \"arrow::arrow_available()\"\n1. [1] FALSE\n   \n   \n1. As mentioned in the installation vignette, \n1. we can R CMD INSTALL in the git repo.\n   \n   R CMD INSTALL r\n   \n1. This will try to build the C++ library, but fails when mimalloc and \n1. jemalloc can't be downloaded from Github.\n1. (Seems not to be affected by LIBARROW_DOWNLOAD=false).\n1. When C++ compilation fails, the R component still installs.\n   \n   {code}",
        "created_at": "2021-06-04T23:28:52.000Z",
        "updated_at": "2021-09-08T15:39:46.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Packaging",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-09-07T14:52:09.000Z"
    },
    "comments": [
        {
            "created_at": "2021-06-05T15:45:41.019Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17357898) by Neal Richardson (npr):*\nThere is a script to pre-download third-party dependencies for the C++ project, and then you have to set environment variables to point cmake at the files you downloaded: <https://arrow.apache.org/docs/developers/cpp/building.html#offline-builds>\r\n\r\nOpen to suggestions/PRs for facilitating this from the R package build scripts. I don't see us uploading a \"fat\" package to CRAN with all dependency sources included in the R tarball, but we could otherwise improve the offline experience.\r\n\r\nHowever, the easiest way to install behind a firewall would probably be to `R CMD INSTALL --build-`\u00a0(which I think within R would be `install.packages(\"arrow\", INSTALL_opts = \"-build\")`) (that's \"dash-dash build\", JIRA's formatting is screwing it up) on a system with internet access, and take the binary package that creates and copy it inside your system behind a firewall."
        },
        {
            "created_at": "2021-06-06T20:42:19.837Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17358218) by Karl Dunkle Werner (karldw):*\nThanks, let me think more about this!\r\n\r\nIs it tenable to include the Arrow C++ sources, but not the third-party dependencies? It looks like a compressed tar file of the\u00a0`cpp` directory is 2.6 MB."
        },
        {
            "created_at": "2021-06-07T15:12:03.324Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17358654) by Neal Richardson (npr):*\nPossibly, though we'd need to think about what our workflow would look like for building and testing that setup, and it would be good to confirm that the benefits of doing so outweigh the costs. Open to suggestions."
        },
        {
            "created_at": "2021-06-07T15:43:55.848Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17358674) by Jonathan Keane (jonkeane):*\nAnd to add to Neal's comment: the workflow around the third-party dependencies during install, how to install them or find the local source, how to message that they aren't available and what that means, etc. \r\n\r\nWe already [do some of that for a handful of the dependencies we always use the system versions of](https://github.com/apache/arrow/blob/master/r/tools/nixlibs.R#L416-L434). But I don't think we want to (or should) duplicate that setup for all of the third-party dependencies we have.\r\n\r\nI would be curious: does your air-gapped server already have many of the [third party dependencies](https://github.com/apache/arrow/blob/master/docs/source/developers/cpp/building.rst#build-dependency-management) that Arrow generally/by default looks for system versions of and then/builds if they are not available? Or are those things that you would also need to have installed / get the source of during the build process?"
        },
        {
            "created_at": "2021-06-07T22:05:24.462Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17358889) by Karl Dunkle Werner (karldw):*\nIn my case, most of the third-party dependencies would not be installed, but if they are in the standard OS repos, I could ask a sysadmin to install them. Established and widely used tools like cURL, OpenSSL, bzip2, and gcc would be available. I don't know how widely representative my experience is, though various types of air-gaps seem somewhat common."
        },
        {
            "created_at": "2021-06-07T22:11:35.324Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17358891) by Neal Richardson (npr):*\nI see. To be able to use the system packages for compression etc., there's other work that needs to be done as well. See\u00a0ARROW-11460 and issues referenced there. It's possible, just requires some focused effort.\r\n\r\nIf having a sysadmin install dependencies is an option, what about installing apache-arrow et al. that way?\u00a0 <https://arrow.apache.org/install/>\r\n\r\nIf the arrow system packages are installed, the R source package doesn't need anything else. The downside/risk is that you have to be sure to upgrade both the system packages and the R package together\u2013if you upgrade the arrow system packages but not the R package, the R package won't load until you reinstall the matching version."
        },
        {
            "created_at": "2021-06-09T15:49:48.898Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17360167) by Karl Dunkle Werner (karldw):*\nAdding new system software sources is a hard sell, so I think having a sysadmin install dependencies isn't a great solution for me until the dependencies are in the official Debian/RHEL software sources."
        },
        {
            "created_at": "2021-07-01T16:55:33.022Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17372927) by Jonathan Keane (jonkeane):*\nThank you for all of this great info \u2014 it's been invaluable as I was working on ARROW-13199. I think that I will have the solution proposed above as part of that ticket, but I will close this one only when that other ticket is merged + we confirm that it does, indeed solve this problem."
        },
        {
            "created_at": "2021-07-02T05:39:02.774Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17373240) by Karl Dunkle Werner (karldw):*\nI think ARROW-13199 completely solves the LTO issues in I reported ARROW-12853. (Thanks for picking up my small findings into a much more useful PR!) But those two issues seem a little different than the installation challenges I was thinking about in this thread. Was your comment meant for ARROW-12853?"
        },
        {
            "created_at": "2021-07-02T12:40:11.676Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17373491) by Jonathan Keane (jonkeane):*\nYes! Sorry, I had too many jira windows open at once and put this on the wrong comment. This should be on ARROW-12853 instead!"
        },
        {
            "created_at": "2021-08-17T14:01:42.207Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17400415) by Neal Richardson (npr):*\nI was thinking some more about how we might do this. I need to confirm, but I think that if we put a copy of `cpp/` inside of the `tools` directory in the package, it will be available at build time, but it shouldn't affect the size of the mac/windows binary packages (unlike if we put the source inside of `inst`). I would then add r/tools/cpp to .gitignore, and add a rsync step to copy there to `make build`, so that when I prepare the package for release, the cpp source would get updated. The find_local_source() function in tools/nixlibs.R could then be modified to also check inside tools/cpp for source. We would test this path in the ursa-labs/arrow-r-nightly packaging builds, though we could also devise a test build in arrow's CI.\r\n\r\nThere would then be two additional steps required for a full offline build, I think:\r\n\r\n- Detect whether there is an internet connection at install time, and if not, disable any feature that requires a third-party dependency download. So you'd get arrow/feather, general conversion to/from R and Python, probably CSV reading/writing, but no parquet, dataset, etc.\n- Provide a helper to download and bundle up those extra dependency downloads (wrapping the existing cpp script)"
        },
        {
            "created_at": "2021-08-21T19:50:15.456Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17402683) by Karl Dunkle Werner (karldw):*\nThat sounds really promising! If you'd like, I can take a stab at a PR.\r\n\r\n \r\nA couple miscellaneous questions:\r\n- Should the helper you mentioned be an R function (wrapping the existing cpp script) included in the package? Or did you have something else in mind? \n- Currently if `LIBARROW_BINARY` is `false` and `LIBARROW_DOWNLOAD` is `true`, the package will download the C++ code from the apache.org server and compile it. Should it just use the included `tools/cpp` code instead?\n   \\* One way to write the tests would be to have an environment variable that prevents the code from attempting downloads (as opposed to actually blocking the R session's access to the internet). I think `LIBARROW_DOWNLOAD` already prevents downloading for the C++ library, but not the dependencies. Can I change the scope of `LIBARROW_DOWNLOAD=false` to also block downloading dependencies? Or would it make sense to add another variable?\n  \n  \n  ##### If I'm thinking about this correctly, there will be two possible user workflows.\n  \n  Let me know if you had something else in mind!\n  \n  ###### Option 1:\n  1. Install the `arrow` package from (a local mirror of) CRAN\n    \\* this will include a feature-light version of the C++ library\n    \\* the install process will automatically detect that it can't download the C++ library and extra dependencies aren't available\n  \n  2. Use the package with some features missing\n  \n  \n  ###### Option 2:\n  1. Install the R package somewhere with internet access\n  2. Run the helper function to download the extra dependencies\n  3. Copy the dependencies to the firewalled environment\n  4. Set the appropriate environment variables to use the downloaded dependencies\n  5. Install the package\n    \\* this will build the C++ library from `tools/cpp` and the downloaded dependencies\n  \n  6. Use the package with all desired features\n"
        },
        {
            "created_at": "2021-09-07T14:52:09.173Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17411286) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 11001\n<https://github.com/apache/arrow/pull/11001>"
        }
    ]
}