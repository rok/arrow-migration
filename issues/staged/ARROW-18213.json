{
    "issue": {
        "title": "[R] Arrow 10 silently dropping missing values/blanks",
        "body": "***Note**: This issue was originally created as [ARROW-18213](https://issues.apache.org/jira/browse/ARROW-18213). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn the example below a single column text file is written to disk. It contains some blanks and when it is opened and collected, the blank values are silently dropped.\r\n\r\nI did not test this behavior on\u00a0 arrow 9.0.\r\n```java\n\r\n\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(arrow)\r\n#> \r\n#> Attaching package: 'arrow'\r\n#> The following object is masked from 'package:utils':\r\n#> \r\n#>     timestamp\r\n\r\nll <- c(      \"1000000\",   \"10000000\",  \"2000000\"  , \"30000000\" , \"500000\"   ,\r\n        \"5000000\", \"\"   ,   \"Not Range\")\r\n\r\n\r\ndf <- tibble(x=rep(ll, 1000))\r\n\r\ndf\r\n#> # A tibble: 8,000 \u00d7 1\r\n#>    x          \r\n#>    <chr>      \r\n#>  1 \"1000000\"  \r\n#>  2 \"10000000\" \r\n#>  3 \"2000000\"  \r\n#>  4 \"30000000\" \r\n#>  5 \"500000\"   \r\n#>  6 \"5000000\"  \r\n#>  7 \"\"         \r\n#>  8 \"Not Range\"\r\n#>  9 \"1000000\"  \r\n#> 10 \"10000000\" \r\n#> # \u2026 with 7,990 more rows\r\n\r\ndf |> dim()\r\n#> [1] 8000    1\r\n\r\n\r\nwrite_tsv(df, \"data.tsv\")\r\n\r\ndata <- open_dataset(\"data.tsv\", format=\"tsv\",\r\n                     skip_rows=1,\r\n                     schema=schema(x=string()))\r\n\r\ntest <- data |>\r\n    collect()\r\n\r\ntest\r\n#> # A tibble: 7,000 \u00d7 1\r\n#>    x        \r\n#>    <chr>    \r\n#>  1 1000000  \r\n#>  2 10000000 \r\n#>  3 2000000  \r\n#>  4 30000000 \r\n#>  5 500000   \r\n#>  6 5000000  \r\n#>  7 Not Range\r\n#>  8 1000000  \r\n#>  9 10000000 \r\n#> 10 2000000  \r\n#> # \u2026 with 6,990 more rows\r\n\r\ntest |> dim()  ## the missing values/blanks have been dropped silently\r\n#> [1] 7000    1\r\n\r\n\r\n\r\n\r\nsessionInfo()\r\n#> R version 4.2.2 (2022-10-31)\r\n#> Platform: x86_64-pc-linux-gnu (64-bit)\r\n#> Running under: Debian GNU/Linux 11 (bullseye)\r\n#> \r\n#> Matrix products: default\r\n#> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\r\n#> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\r\n#> \r\n#> locale:\r\n#>  [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \r\n#>  [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \r\n#>  [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \r\n#>  [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \r\n#>  [9] LC_ADDRESS=C               LC_TELEPHONE=C            \r\n#> [11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \r\n#> \r\n#> attached base packages:\r\n#> [1] stats     graphics  grDevices utils     datasets  methods   base     \r\n#> \r\n#> other attached packages:\r\n#>  [1] arrow_10.0.0    forcats_0.5.2   stringr_1.4.1   dplyr_1.0.10   \r\n#>  [5] purrr_0.3.5     readr_2.1.3     tidyr_1.2.1     tibble_3.1.8   \r\n#>  [9] ggplot2_3.3.6   tidyverse_1.3.2\r\n#> \r\n#> loaded via a namespace (and not attached):\r\n#>  [1] lubridate_1.8.0     assertthat_0.2.1    digest_0.6.30      \r\n#>  [4] utf8_1.2.2          R6_2.5.1            cellranger_1.1.0   \r\n#>  [7] backports_1.4.1     reprex_2.0.2        evaluate_0.17      \r\n#> [10] httr_1.4.4          highr_0.9           pillar_1.8.1       \r\n#> [13] rlang_1.0.6         googlesheets4_1.0.1 readxl_1.4.1       \r\n#> [16] R.utils_2.12.1      R.oo_1.25.0         rmarkdown_2.17     \r\n#> [19] styler_1.8.0        googledrive_2.0.0   bit_4.0.4          \r\n#> [22] munsell_0.5.0       broom_1.0.1         compiler_4.2.2     \r\n#> [25] modelr_0.1.9        xfun_0.34           pkgconfig_2.0.3    \r\n#> [28] htmltools_0.5.3     tidyselect_1.2.0    fansi_1.0.3        \r\n#> [31] crayon_1.5.2        tzdb_0.3.0          dbplyr_2.2.1       \r\n#> [34] withr_2.5.0         R.methodsS3_1.8.2   grid_4.2.2         \r\n#> [37] jsonlite_1.8.3      gtable_0.3.1        lifecycle_1.0.3    \r\n#> [40] DBI_1.1.3           magrittr_2.0.3      scales_1.2.1       \r\n#> [43] vroom_1.6.0         cli_3.4.1           stringi_1.7.8      \r\n#> [46] fs_1.5.2            xml2_1.3.3          ellipsis_0.3.2     \r\n#> [49] generics_0.1.3      vctrs_0.5.0         tools_4.2.2        \r\n#> [52] bit64_4.0.5         R.cache_0.16.0      glue_1.6.2         \r\n#> [55] hms_1.1.2           parallel_4.2.2      fastmap_1.1.0      \r\n#> [58] yaml_2.3.6          colorspace_2.0-3    gargle_1.2.1       \r\n#> [61] rvest_1.0.3         knitr_1.40          haven_2.5.1\r\nCreated on 2022-11-01 with reprex v2.0.2\r\n\r\n\r\n\r\n \n```",
        "created_at": "2022-11-01T17:51:41.000Z",
        "updated_at": "2022-11-03T12:29:45.000Z",
        "labels": [
            "Migrated from Jira",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-11-03T12:04:15.000Z"
    },
    "comments": [
        {
            "created_at": "2022-11-03T12:02:54.891Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18213?focusedCommentId=17628288) by Nicola Crane (thisisnic):*\nHi `[~larry77]`, thanks for opening this issue.\r\nThe problem here is that, because you have a single column of data, the missing value is being interpreted as an empty row, which by default is dropped.  You can get around this by instead calling:\r\n\r\n```r\n\r\ndata <- open_dataset(\"data.tsv\", format=\"tsv\", skip_rows=1, schema=schema(x=string()), ignore_empty_lines = FALSE)\r\n```\r\n\r\nThis is intentional behaviour; you get the same results if you call `readr::read_tsv(\"data.tsv\")` (and would therefore need to call `readr::read_tsv(\"data.tsv\", skip_empty_rows = FALSE)`.\r\n\r\nI'll close the ticket as \"not a bug\", but if you have any more issues, let us know and we can take another look."
        },
        {
            "created_at": "2022-11-03T12:10:42.783Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18213?focusedCommentId=17628295) by Lorenzo Isella (larry77):*\nThanks for the quick feedback. I agree it is not a bug. I now simply believe that this is not very intuitive with respect to base R and the tidyverse, but duly noted."
        },
        {
            "created_at": "2022-11-03T12:14:15.926Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18213?focusedCommentId=17628298) by Nicola Crane (thisisnic):*\nYeah, I think you're right there to be honest, it took me a while to figure out why it wasn't working!  I'm trying to have a think about what we can do to make this more intuitive - I'm not sure we want to just flip the option over from TRUE to FALSE as a default - but maybe there's somewhere in the docs we can discuss this explicitly.  If you have any ideas, please let me know, as you're not the only person to have this issue, and thanks for highlighting it."
        },
        {
            "created_at": "2022-11-03T12:29:45.617Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18213?focusedCommentId=17628302) by Lorenzo Isella (larry77):*\nMmmmmhhhh......if you have reasons for not wanting to switch the option TRUE---->FALSE, at least I believe that a warning like\r\n\r\n\u00a0\r\n\r\nWarning: 1000 empty lines dropped\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nwould be useful. To be honest, when I read e.g. a text file with read_csv from readr, I then use the janitor package to enforce this behaviour (dropping empty lines), but I do not expect my reading tool to do this for me unless explicitly instructed to do so.\r\n\r\nAlso, imagine this use case: I have a table with customer features where every row is identified by a customer ID. Someone else passes me an extra column of data and because the customers IDs are the same and in the same order, s/he gives me just a column of data and some of them are missing (it may be bad practice, but it happens to me). In this case, silently dropping the data can be a pain.\r\n\r\nJust my 2 cents."
        }
    ]
}