{
    "issue": {
        "title": "[Rust] [DataFusion] Improve threading model",
        "body": "***Note**: This issue was originally created as [ARROW-8774](https://issues.apache.org/jira/browse/ARROW-8774). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nDataFusion currently spawns one thread per partition and this results in poor performance if there are more partitions than available cores/threads. It would be better to have a thread-pool that defaults to number of available cores.\r\n\r\nHere is a Google doc where we can collaborate on a design discussion.\r\n\r\nhttps://docs.google.com/document/d/1_wc6diy3YrRgEIhVIGzrO5AK8yhwfjWlmKtGnvbsrrY/edit?usp=sharing",
        "created_at": "2020-05-12T14:21:16.000Z",
        "updated_at": "2020-07-14T13:49:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-07-14T13:49:03.000Z"
    },
    "comments": [
        {
            "created_at": "2020-05-12T15:28:13.156Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8774?focusedCommentId=17105524) by Adam Lippai (alippai):*\nA thing to consider on the long run (but a single default threadpool now helps a lot!):\r\n For an optimal result reading files should have less priority than the computation part later.\r\n\r\nThis is what I've found on the topic:\u00a0<https://users.rust-lang.org/t/dealing-with-work-priority-and-rayon/30954/2>\r\n\r\nRayon doesn't support setting priority for the tasks, but as a workaround we could create two threadpools, eg one with <=10 threads for file reading and CPU_NUM threads for the computation. If you need fine tuning the workload (S3, HDFS, NFS behave differently, local HDD or SSD is a different topic too) you could either configure the threadpool sizes (even down to 1 thread) or setting \"nice\" for the threadpool threads.\r\n\r\nShould I add this to the design doc or is this out of scope for a while?"
        },
        {
            "created_at": "2020-05-12T15:28:45.422Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8774?focusedCommentId=17105527) by Wes McKinney (wesm):*\nFYI we're also working on our thread scheduling and concurrent CPU/IO management APIs for C++ for nearly the exact same reasons you are. We might try to see if there are shared learnings, we can at least link issues on JIRA to point our design docs or work happening\r\n\r\ncc `[~fsaintjacques]` `[~lidavidm]` `[~apitrou]`"
        },
        {
            "created_at": "2020-05-12T15:32:00.655Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8774?focusedCommentId=17105531) by Andy Grove (andygrove):*\nI think it would be good to add tot he design doc. I expect we'll end up\ncreating more JIRAs as an outcome of the discussions there.\n\n\n"
        },
        {
            "created_at": "2020-05-12T16:46:13.560Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8774?focusedCommentId=17105594) by Antoine Pitrou (apitrou):*\nWe don't have a design doc per se, just a bunch of requirements here: https://docs.google.com/document/d/1917ilU6BHfwb5ujzDIVolZgfDN9bC15RTdgWLd7-ik0/edit?usp=sharing"
        },
        {
            "created_at": "2020-05-15T08:33:26.394Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8774?focusedCommentId=17108081) by Adam Lippai (alippai):*\n`[~andygrove]` \u00a0I don't have access to edit, so my addition is pending as suggestion in the doc."
        },
        {
            "created_at": "2020-07-14T01:22:00.323Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8774?focusedCommentId=17157064) by Andy Grove (andygrove):*\nI've been having some good success with async and smol and am ready to start contributing some changes back to DataFusion based on what I have learned so far. Smol is much easier to use than Tokio and co-exists with Tokio quite nicely and would be more efficient than our current threading model."
        },
        {
            "created_at": "2020-07-14T13:49:03.292Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8774?focusedCommentId=17157383) by Andy Grove (andygrove):*\nReplacing with https://issues.apache.org/jira/browse/ARROW-9464"
        }
    ]
}