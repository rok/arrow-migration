{
    "issue": {
        "title": "[Python] Allow calling UDF kernels with field/scalar expressions",
        "body": "***Note**: This issue was originally created as [ARROW-17827](https://issues.apache.org/jira/browse/ARROW-17827). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFrom https://github.com/apache/arrow/pull/13687#issuecomment-1240399112, where it came up while adding documentation on how to use UDFs in Python. When just wanting to invoke a UDF with arrays, you can do `pc.call_function(\"my_udf\", [pc.field(\"a\")])`. \r\n\r\nBut if you want to use your UDF in a context that needs an expression (eg a dataset projection), you need to be able to call the UDF with expressions as argument. And currently, the `pc.call_function` doesn't work that way (it expects actual, materialized arrays/scalars as arguments). As a workaround, you can use the private `Expression._call`:\r\n\r\n```python\n\r\n# doesn't work with expressions\r\n>>> pc.call_function(\"my_udf\", [pc.field(\"col\")])\r\n...\r\nTypeError: Got unexpected argument type <class 'pyarrow._compute.Expression'> for compute function\r\n# workaround\r\n>>> pc.Expression._call(\"my_udf\", [pc.field(\"col\")])\r\n<pyarrow.compute.Expression my_udf(col)>\r\n```\r\n\r\nSo we should try to improve the usability here. Some options:\r\n\r\n- See if we can change `pc.call_function` to also accept Expressions as arguments\n- Make the `_call` public, so one can do `pc.Expression.call(\"my_udf\", [..])`\n  \n  cc `[~westonpace]` `[~vibhatha]`",
        "created_at": "2022-09-23T09:55:33.000Z",
        "updated_at": "2022-09-29T10:48:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: task"
        ],
        "closed": false
    },
    "comments": []
}