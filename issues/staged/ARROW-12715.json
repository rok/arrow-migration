{
    "issue": {
        "title": "[C++] SQL-style glob string match kernel",
        "body": "***Note**: This issue was originally created as [ARROW-12715](https://issues.apache.org/jira/browse/ARROW-12715). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSimilar to the SQL `LIKE` and `ILIKE`\u00a0operators, with wildcard\u00a0`_` matching a single character and wildcard `%` matching multiple characters,\u00a0and an option controlling case sensitivity",
        "created_at": "2021-05-10T15:08:52.000Z",
        "updated_at": "2021-06-03T15:06:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-05-20T14:44:25.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-11T08:52:46.078Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12715?focusedCommentId=17342422) by Joris Van den Bossche (jorisvandenbossche):*\nThis is kind of a \"simpler\" version compared to using an actual regex expression? \r\n\r\nI am wondering if we need to exactly implement this as a separate kernel with those specific features, or if this could be written in terms of the `match_substring_regex`. In principle an input string to match could be transformed into the equivalent regex pattern? And then we don't need to implement a light form of pattern matching ourselves. \r\n\r\n(of course, that would then require arrow to be compiled with a regex library for this function, and a specialized version might be faster?)"
        },
        {
            "created_at": "2021-05-11T18:21:56.849Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12715?focusedCommentId=17342789) by Ian Cook (icook):*\n`[~jorisvandenbossche]` \u00a0yes; I would suggest looking at the implementation of `LIKE` in Impala to see what they did there. Like Arrow, Impala is implemented in C++ and uses RE2, and it also has regex match functions and operators."
        },
        {
            "created_at": "2021-05-18T21:48:26.231Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12715?focusedCommentId=17347180) by David Li (lidavidm):*\nImpala checks if the pattern can be converted into a prefix/suffix/substring/exact match search, or else converts the pattern into a regex: <https://github.com/apache/impala/blob/9c38568657d62b6f6d7b10aa1c721ba843374dd8/be/src/exprs/like-predicate.cc#L63-L108>\r\n\r\nWe could do something similar."
        },
        {
            "created_at": "2021-05-20T14:19:42.341Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12715?focusedCommentId=17348548) by Ian Cook (icook):*\nOptions for case insensitivity will be a follow-up (ARROW-12835)"
        },
        {
            "created_at": "2021-05-20T14:44:25.062Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12715?focusedCommentId=17348572) by David Li (lidavidm):*\nIssue resolved by pull request 10356\n<https://github.com/apache/arrow/pull/10356>"
        }
    ]
}