{
    "issue": {
        "title": "[C++] Implement \"round robin\" scheduler interface to fixed-size ThreadPool ",
        "body": "***Note**: This issue was originally created as [ARROW-8626](https://issues.apache.org/jira/browse/ARROW-8626). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently, when submitting tasks to a thread pool, they are all commingled in a common queue. When a new task submitter shows up, they must wait in the back of the line behind all other queued tasks.\r\n\r\nA simple alternative to this would be round-robin scheduling, where each new consumer is assigned a unique integer id, and the schedule / thread pool internally maintains the tasks associated with the consumer in separate queues. ",
        "created_at": "2020-04-29T16:04:47.000Z",
        "updated_at": "2022-07-12T14:04:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-04-29T16:06:26.051Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8626?focusedCommentId=17095585) by Wes McKinney (wesm):*\nThis work should also be able to give way to other kinds of fairer resource allocation schemes. For example, round robin is bad when you have two consumers whose tasks are greatly unequal in cost. Imagine CPU tasks that take 1000x as long for one consumer as the other \u2013 then eventually the first (costly per-task) consumer is running on all threads and the second (less-costly per task) consumer is waiting"
        },
        {
            "created_at": "2022-07-12T14:04:19.673Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8626?focusedCommentId=17565532) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}